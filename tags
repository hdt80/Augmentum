!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
A	.\include\SFML\Window\Keyboard.hpp	/^        A = 0,        \/\/\/< The A key$/;"	e	enum:sf::Keyboard::Key
A	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace A {$/;"	n	file:
A	.\include\sol\test_functions.cpp	/^struct A {$/;"	s	file:
AF_CONFIG_OPTION_CJK	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	822;"	d
AF_CONFIG_OPTION_INDIC	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	828;"	d
ALAPI	.\dep\SFML\extlibs\headers\AL\al.h	27;"	d
ALAPIENTRY	.\dep\SFML\extlibs\headers\AL\al.h	28;"	d
ALCAPI	.\dep\SFML\extlibs\headers\AL\alc.h	26;"	d
ALCAPIENTRY	.\dep\SFML\extlibs\headers\AL\alc.h	27;"	d
ALC_5POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	293;"	d
ALC_6POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	294;"	d
ALC_7POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	295;"	d
ALC_ALL_ATTRIBUTES	.\dep\SFML\extlibs\headers\AL\alc.h	126;"	d
ALC_ALL_DEVICES_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	166;"	d
ALC_API	.\dep\SFML\extlibs\headers\AL\alc.h	10;"	d
ALC_API	.\dep\SFML\extlibs\headers\AL\alc.h	12;"	d
ALC_API	.\dep\SFML\extlibs\headers\AL\alc.h	14;"	d
ALC_APIENTRY	.\dep\SFML\extlibs\headers\AL\alc.h	19;"	d
ALC_APIENTRY	.\dep\SFML\extlibs\headers\AL\alc.h	21;"	d
ALC_ATTRIBUTES_SIZE	.\dep\SFML\extlibs\headers\AL\alc.h	125;"	d
ALC_BYTE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	281;"	d
ALC_CAPTURE_DEFAULT_DEVICE_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	151;"	d
ALC_CAPTURE_DEVICE_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	149;"	d
ALC_CAPTURE_SAMPLES	.\dep\SFML\extlibs\headers\AL\alc.h	153;"	d
ALC_CHAN_CD_LOKI	.\dep\SFML\extlibs\headers\AL\alext.h	95;"	d
ALC_CHAN_MAIN_LOKI	.\dep\SFML\extlibs\headers\AL\alext.h	93;"	d
ALC_CHAN_PCM_LOKI	.\dep\SFML\extlibs\headers\AL\alext.h	94;"	d
ALC_CONNECTED	.\dep\SFML\extlibs\headers\AL\alext.h	149;"	d
ALC_DEFAULT_ALL_DEVICES_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	159;"	d
ALC_DEFAULT_DEVICE_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	129;"	d
ALC_DEVICE_SPECIFIER	.\dep\SFML\extlibs\headers\AL\alc.h	136;"	d
ALC_EFX_MAJOR_VERSION	.\dep\SFML\extlibs\headers\AL\efx.h	14;"	d
ALC_EFX_MINOR_VERSION	.\dep\SFML\extlibs\headers\AL\efx.h	15;"	d
ALC_ENUMERATE_ALL_EXT	.\dep\SFML\extlibs\headers\AL\alc.h	157;"	d
ALC_EXTENSIONS	.\dep\SFML\extlibs\headers\AL\alc.h	138;"	d
ALC_EXT_CAPTURE	.\dep\SFML\extlibs\headers\AL\alc.h	142;"	d
ALC_EXT_DEDICATED	.\dep\SFML\extlibs\headers\AL\alext.h	200;"	d
ALC_EXT_EFX	.\dep\SFML\extlibs\headers\AL\alext.h	143;"	d
ALC_EXT_EFX_NAME	.\dep\SFML\extlibs\headers\AL\efx.h	12;"	d
ALC_EXT_disconnect	.\dep\SFML\extlibs\headers\AL\alext.h	148;"	d
ALC_EXT_thread_local_context	.\dep\SFML\extlibs\headers\AL\alext.h	153;"	d
ALC_FALSE	.\dep\SFML\extlibs\headers\AL\alc.h	81;"	d
ALC_FLOAT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	287;"	d
ALC_FORMAT_CHANNELS_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	277;"	d
ALC_FORMAT_TYPE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	278;"	d
ALC_FREQUENCY	.\dep\SFML\extlibs\headers\AL\alc.h	87;"	d
ALC_INT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	285;"	d
ALC_INVALID	.\dep\SFML\extlibs\headers\AL\alc.h	28;"	d
ALC_INVALID_CONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	108;"	d
ALC_INVALID_DEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	105;"	d
ALC_INVALID_ENUM	.\dep\SFML\extlibs\headers\AL\alc.h	111;"	d
ALC_INVALID_VALUE	.\dep\SFML\extlibs\headers\AL\alc.h	114;"	d
ALC_LOKI_audio_channel	.\dep\SFML\extlibs\headers\AL\alext.h	92;"	d
ALC_MAJOR_VERSION	.\dep\SFML\extlibs\headers\AL\alc.h	121;"	d
ALC_MAX_AUXILIARY_SENDS	.\dep\SFML\extlibs\headers\AL\efx.h	16;"	d
ALC_MINOR_VERSION	.\dep\SFML\extlibs\headers\AL\alc.h	122;"	d
ALC_MONO_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	290;"	d
ALC_MONO_SOURCES	.\dep\SFML\extlibs\headers\AL\alc.h	96;"	d
ALC_NO_ERROR	.\dep\SFML\extlibs\headers\AL\alc.h	102;"	d
ALC_OUT_OF_MEMORY	.\dep\SFML\extlibs\headers\AL\alc.h	117;"	d
ALC_QUAD_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	292;"	d
ALC_REFRESH	.\dep\SFML\extlibs\headers\AL\alc.h	90;"	d
ALC_SHORT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	283;"	d
ALC_SOFT_loopback	.\dep\SFML\extlibs\headers\AL\alext.h	276;"	d
ALC_STEREO_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	291;"	d
ALC_STEREO_SOURCES	.\dep\SFML\extlibs\headers\AL\alc.h	99;"	d
ALC_SYNC	.\dep\SFML\extlibs\headers\AL\alc.h	93;"	d
ALC_TRUE	.\dep\SFML\extlibs\headers\AL\alc.h	84;"	d
ALC_UNSIGNED_BYTE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	282;"	d
ALC_UNSIGNED_INT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	286;"	d
ALC_UNSIGNED_SHORT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	284;"	d
ALC_VERSION_0_1	.\dep\SFML\extlibs\headers\AL\alc.h	31;"	d
ALCboolean	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef char ALCboolean;$/;"	t
ALCbyte	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef signed char ALCbyte;$/;"	t
ALCchar	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef char ALCchar;$/;"	t
ALCcontext	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef struct ALCcontext_struct ALCcontext;$/;"	t	typeref:struct:ALCcontext_struct
ALCdevice	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef struct ALCdevice_struct ALCdevice;$/;"	t	typeref:struct:ALCdevice_struct
ALCdouble	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef double ALCdouble;$/;"	t
ALCenum	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef int ALCenum;$/;"	t
ALCfloat	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef float ALCfloat;$/;"	t
ALCint	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef int ALCint;$/;"	t
ALCshort	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef short ALCshort;$/;"	t
ALCsizei	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef int ALCsizei;$/;"	t
ALCubyte	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef unsigned char ALCubyte;$/;"	t
ALCuint	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef unsigned int ALCuint;$/;"	t
ALCushort	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef unsigned short ALCushort;$/;"	t
ALCvoid	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void ALCvoid;$/;"	t
ALIGN_STACK	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	37;"	d
ALIGN_STACK	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	41;"	d
ALLONES	.\dep\Lua\src\lbitlib.c	37;"	d	file:
ALLSPHINXOPTS	.\include\sol\docs\make.bat	/^	set ALLSPHINXOPTS=-D latex_paper_size=%PAPER% %ALLSPHINXOPTS%$/;"	v
ALLSPHINXOPTS	.\include\sol\docs\make.bat	/^set ALLSPHINXOPTS=-d %BUILDDIR%\/doctrees %SPHINXOPTS% source$/;"	v
ALPHABIT	.\dep\Lua\src\lctype.h	39;"	d
ALPHABIT	.\include\lua\lctype.h	39;"	d
AL_5POINT1_16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	243;"	d
AL_5POINT1_32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	244;"	d
AL_5POINT1_8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	242;"	d
AL_5POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	213;"	d
AL_6POINT1_16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	246;"	d
AL_6POINT1_32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	247;"	d
AL_6POINT1_8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	245;"	d
AL_6POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	214;"	d
AL_7POINT1_16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	249;"	d
AL_7POINT1_32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	250;"	d
AL_7POINT1_8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	248;"	d
AL_7POINT1_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	215;"	d
AL_AIR_ABSORPTION_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	25;"	d
AL_ALC_H	.\dep\SFML\extlibs\headers\AL\alc.h	2;"	d
AL_ALEXT_H	.\dep\SFML\extlibs\headers\AL\alext.h	22;"	d
AL_AL_H	.\dep\SFML\extlibs\headers\AL\al.h	2;"	d
AL_API	.\dep\SFML\extlibs\headers\AL\al.h	10;"	d
AL_API	.\dep\SFML\extlibs\headers\AL\al.h	12;"	d
AL_API	.\dep\SFML\extlibs\headers\AL\al.h	14;"	d
AL_APIENTRY	.\dep\SFML\extlibs\headers\AL\al.h	19;"	d
AL_APIENTRY	.\dep\SFML\extlibs\headers\AL\al.h	21;"	d
AL_AUTOWAH_ATTACK_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	128;"	d
AL_AUTOWAH_DEFAULT_ATTACK_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	664;"	d
AL_AUTOWAH_DEFAULT_PEAK_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	676;"	d
AL_AUTOWAH_DEFAULT_RELEASE_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	668;"	d
AL_AUTOWAH_DEFAULT_RESONANCE	.\dep\SFML\extlibs\headers\AL\efx.h	672;"	d
AL_AUTOWAH_MAX_ATTACK_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	663;"	d
AL_AUTOWAH_MAX_PEAK_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	675;"	d
AL_AUTOWAH_MAX_RELEASE_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	667;"	d
AL_AUTOWAH_MAX_RESONANCE	.\dep\SFML\extlibs\headers\AL\efx.h	671;"	d
AL_AUTOWAH_MIN_ATTACK_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	662;"	d
AL_AUTOWAH_MIN_PEAK_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	674;"	d
AL_AUTOWAH_MIN_RELEASE_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	666;"	d
AL_AUTOWAH_MIN_RESONANCE	.\dep\SFML\extlibs\headers\AL\efx.h	670;"	d
AL_AUTOWAH_PEAK_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	131;"	d
AL_AUTOWAH_RELEASE_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	129;"	d
AL_AUTOWAH_RESONANCE	.\dep\SFML\extlibs\headers\AL\efx.h	130;"	d
AL_AUXILIARY_SEND_FILTER	.\dep\SFML\extlibs\headers\AL\efx.h	24;"	d
AL_AUXILIARY_SEND_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	30;"	d
AL_AUXILIARY_SEND_FILTER_GAIN_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	29;"	d
AL_BANDPASS_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	305;"	d
AL_BANDPASS_DEFAULT_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	309;"	d
AL_BANDPASS_DEFAULT_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	313;"	d
AL_BANDPASS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	189;"	d
AL_BANDPASS_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	191;"	d
AL_BANDPASS_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	190;"	d
AL_BANDPASS_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	304;"	d
AL_BANDPASS_MAX_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	308;"	d
AL_BANDPASS_MAX_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	312;"	d
AL_BANDPASS_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	303;"	d
AL_BANDPASS_MIN_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	307;"	d
AL_BANDPASS_MIN_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	311;"	d
AL_BITS	.\dep\SFML\extlibs\headers\AL\al.h	347;"	d
AL_BUFFER	.\dep\SFML\extlibs\headers\AL\al.h	182;"	d
AL_BUFFERS_PROCESSED	.\dep\SFML\extlibs\headers\AL\al.h	262;"	d
AL_BUFFERS_QUEUED	.\dep\SFML\extlibs\headers\AL\al.h	250;"	d
AL_BYTE3_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	226;"	d
AL_BYTE_LENGTH_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	254;"	d
AL_BYTE_OFFSET	.\dep\SFML\extlibs\headers\AL\al.h	316;"	d
AL_BYTE_RW_OFFSETS_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	169;"	d
AL_BYTE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	218;"	d
AL_CHANNELS	.\dep\SFML\extlibs\headers\AL\al.h	349;"	d
AL_CHORUS_DEFAULT_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	486;"	d
AL_CHORUS_DEFAULT_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	478;"	d
AL_CHORUS_DEFAULT_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	482;"	d
AL_CHORUS_DEFAULT_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	470;"	d
AL_CHORUS_DEFAULT_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	474;"	d
AL_CHORUS_DEFAULT_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	466;"	d
AL_CHORUS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	81;"	d
AL_CHORUS_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	79;"	d
AL_CHORUS_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	80;"	d
AL_CHORUS_MAX_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	485;"	d
AL_CHORUS_MAX_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	477;"	d
AL_CHORUS_MAX_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	481;"	d
AL_CHORUS_MAX_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	469;"	d
AL_CHORUS_MAX_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	473;"	d
AL_CHORUS_MAX_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	465;"	d
AL_CHORUS_MIN_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	484;"	d
AL_CHORUS_MIN_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	476;"	d
AL_CHORUS_MIN_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	480;"	d
AL_CHORUS_MIN_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	468;"	d
AL_CHORUS_MIN_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	472;"	d
AL_CHORUS_MIN_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	464;"	d
AL_CHORUS_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	77;"	d
AL_CHORUS_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	78;"	d
AL_CHORUS_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	76;"	d
AL_CHORUS_WAVEFORM_SINUSOID	.\dep\SFML\extlibs\headers\AL\efx.h	461;"	d
AL_CHORUS_WAVEFORM_TRIANGLE	.\dep\SFML\extlibs\headers\AL\efx.h	462;"	d
AL_COMPRESSOR_DEFAULT_ONOFF	.\dep\SFML\extlibs\headers\AL\efx.h	681;"	d
AL_COMPRESSOR_MAX_ONOFF	.\dep\SFML\extlibs\headers\AL\efx.h	680;"	d
AL_COMPRESSOR_MIN_ONOFF	.\dep\SFML\extlibs\headers\AL\efx.h	679;"	d
AL_COMPRESSOR_ONOFF	.\dep\SFML\extlibs\headers\AL\efx.h	134;"	d
AL_CONE_INNER_ANGLE	.\dep\SFML\extlibs\headers\AL\al.h	108;"	d
AL_CONE_OUTER_ANGLE	.\dep\SFML\extlibs\headers\AL\al.h	118;"	d
AL_CONE_OUTER_GAIN	.\dep\SFML\extlibs\headers\AL\al.h	297;"	d
AL_CONE_OUTER_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	27;"	d
AL_DEDICATED_GAIN	.\dep\SFML\extlibs\headers\AL\alext.h	201;"	d
AL_DEFAULT_AIR_ABSORPTION_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	728;"	d
AL_DEFAULT_AUXILIARY_SEND_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	748;"	d
AL_DEFAULT_AUXILIARY_SEND_FILTER_GAIN_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	744;"	d
AL_DEFAULT_CONE_OUTER_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	736;"	d
AL_DEFAULT_DIRECT_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	740;"	d
AL_DEFAULT_METERS_PER_UNIT	.\dep\SFML\extlibs\headers\AL\efx.h	754;"	d
AL_DEFAULT_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	732;"	d
AL_DIRECTION	.\dep\SFML\extlibs\headers\AL\al.h	154;"	d
AL_DIRECT_CHANNELS_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	272;"	d
AL_DIRECT_FILTER	.\dep\SFML\extlibs\headers\AL\efx.h	23;"	d
AL_DIRECT_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	28;"	d
AL_DISTANCE_MODEL	.\dep\SFML\extlibs\headers\AL\al.h	441;"	d
AL_DISTORTION_DEFAULT_EDGE	.\dep\SFML\extlibs\headers\AL\efx.h	491;"	d
AL_DISTORTION_DEFAULT_EQBANDWIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	507;"	d
AL_DISTORTION_DEFAULT_EQCENTER	.\dep\SFML\extlibs\headers\AL\efx.h	503;"	d
AL_DISTORTION_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	495;"	d
AL_DISTORTION_DEFAULT_LOWPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	499;"	d
AL_DISTORTION_EDGE	.\dep\SFML\extlibs\headers\AL\efx.h	84;"	d
AL_DISTORTION_EQBANDWIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	88;"	d
AL_DISTORTION_EQCENTER	.\dep\SFML\extlibs\headers\AL\efx.h	87;"	d
AL_DISTORTION_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	85;"	d
AL_DISTORTION_LOWPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	86;"	d
AL_DISTORTION_MAX_EDGE	.\dep\SFML\extlibs\headers\AL\efx.h	490;"	d
AL_DISTORTION_MAX_EQBANDWIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	506;"	d
AL_DISTORTION_MAX_EQCENTER	.\dep\SFML\extlibs\headers\AL\efx.h	502;"	d
AL_DISTORTION_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	494;"	d
AL_DISTORTION_MAX_LOWPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	498;"	d
AL_DISTORTION_MIN_EDGE	.\dep\SFML\extlibs\headers\AL\efx.h	489;"	d
AL_DISTORTION_MIN_EQBANDWIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	505;"	d
AL_DISTORTION_MIN_EQCENTER	.\dep\SFML\extlibs\headers\AL\efx.h	501;"	d
AL_DISTORTION_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	493;"	d
AL_DISTORTION_MIN_LOWPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	497;"	d
AL_DOPPLER_FACTOR	.\dep\SFML\extlibs\headers\AL\al.h	400;"	d
AL_DOPPLER_VELOCITY	.\dep\SFML\extlibs\headers\AL\al.h	408;"	d
AL_DOUBLE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	225;"	d
AL_EAXREVERB_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	69;"	d
AL_EAXREVERB_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	73;"	d
AL_EAXREVERB_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	57;"	d
AL_EAXREVERB_DECAY_LFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	58;"	d
AL_EAXREVERB_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	56;"	d
AL_EAXREVERB_DEFAULT_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	442;"	d
AL_EAXREVERB_DEFAULT_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	458;"	d
AL_EAXREVERB_DEFAULT_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	398;"	d
AL_EAXREVERB_DEFAULT_DECAY_LFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	402;"	d
AL_EAXREVERB_DEFAULT_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	394;"	d
AL_EAXREVERB_DEFAULT_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	374;"	d
AL_EAXREVERB_DEFAULT_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	378;"	d
AL_EAXREVERB_DEFAULT_ECHO_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	430;"	d
AL_EAXREVERB_DEFAULT_ECHO_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	426;"	d
AL_EAXREVERB_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	382;"	d
AL_EAXREVERB_DEFAULT_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	386;"	d
AL_EAXREVERB_DEFAULT_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	390;"	d
AL_EAXREVERB_DEFAULT_HFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	446;"	d
AL_EAXREVERB_DEFAULT_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	420;"	d
AL_EAXREVERB_DEFAULT_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	416;"	d
AL_EAXREVERB_DEFAULT_LATE_REVERB_PAN_XYZ	.\dep\SFML\extlibs\headers\AL\efx.h	422;"	d
AL_EAXREVERB_DEFAULT_LFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	450;"	d
AL_EAXREVERB_DEFAULT_MODULATION_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	438;"	d
AL_EAXREVERB_DEFAULT_MODULATION_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	434;"	d
AL_EAXREVERB_DEFAULT_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	410;"	d
AL_EAXREVERB_DEFAULT_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	406;"	d
AL_EAXREVERB_DEFAULT_REFLECTIONS_PAN_XYZ	.\dep\SFML\extlibs\headers\AL\efx.h	412;"	d
AL_EAXREVERB_DEFAULT_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	454;"	d
AL_EAXREVERB_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	51;"	d
AL_EAXREVERB_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	52;"	d
AL_EAXREVERB_ECHO_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	66;"	d
AL_EAXREVERB_ECHO_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	65;"	d
AL_EAXREVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	53;"	d
AL_EAXREVERB_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	54;"	d
AL_EAXREVERB_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	55;"	d
AL_EAXREVERB_HFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	70;"	d
AL_EAXREVERB_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	63;"	d
AL_EAXREVERB_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	62;"	d
AL_EAXREVERB_LATE_REVERB_PAN	.\dep\SFML\extlibs\headers\AL\efx.h	64;"	d
AL_EAXREVERB_LFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	71;"	d
AL_EAXREVERB_MAX_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	441;"	d
AL_EAXREVERB_MAX_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	457;"	d
AL_EAXREVERB_MAX_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	397;"	d
AL_EAXREVERB_MAX_DECAY_LFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	401;"	d
AL_EAXREVERB_MAX_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	393;"	d
AL_EAXREVERB_MAX_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	373;"	d
AL_EAXREVERB_MAX_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	377;"	d
AL_EAXREVERB_MAX_ECHO_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	429;"	d
AL_EAXREVERB_MAX_ECHO_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	425;"	d
AL_EAXREVERB_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	381;"	d
AL_EAXREVERB_MAX_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	385;"	d
AL_EAXREVERB_MAX_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	389;"	d
AL_EAXREVERB_MAX_HFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	445;"	d
AL_EAXREVERB_MAX_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	419;"	d
AL_EAXREVERB_MAX_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	415;"	d
AL_EAXREVERB_MAX_LFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	449;"	d
AL_EAXREVERB_MAX_MODULATION_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	437;"	d
AL_EAXREVERB_MAX_MODULATION_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	433;"	d
AL_EAXREVERB_MAX_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	409;"	d
AL_EAXREVERB_MAX_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	405;"	d
AL_EAXREVERB_MAX_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	453;"	d
AL_EAXREVERB_MIN_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	440;"	d
AL_EAXREVERB_MIN_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	456;"	d
AL_EAXREVERB_MIN_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	396;"	d
AL_EAXREVERB_MIN_DECAY_LFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	400;"	d
AL_EAXREVERB_MIN_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	392;"	d
AL_EAXREVERB_MIN_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	372;"	d
AL_EAXREVERB_MIN_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	376;"	d
AL_EAXREVERB_MIN_ECHO_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	428;"	d
AL_EAXREVERB_MIN_ECHO_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	424;"	d
AL_EAXREVERB_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	380;"	d
AL_EAXREVERB_MIN_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	384;"	d
AL_EAXREVERB_MIN_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	388;"	d
AL_EAXREVERB_MIN_HFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	444;"	d
AL_EAXREVERB_MIN_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	418;"	d
AL_EAXREVERB_MIN_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	414;"	d
AL_EAXREVERB_MIN_LFREFERENCE	.\dep\SFML\extlibs\headers\AL\efx.h	448;"	d
AL_EAXREVERB_MIN_MODULATION_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	436;"	d
AL_EAXREVERB_MIN_MODULATION_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	432;"	d
AL_EAXREVERB_MIN_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	408;"	d
AL_EAXREVERB_MIN_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	404;"	d
AL_EAXREVERB_MIN_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	452;"	d
AL_EAXREVERB_MODULATION_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	68;"	d
AL_EAXREVERB_MODULATION_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	67;"	d
AL_EAXREVERB_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	60;"	d
AL_EAXREVERB_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	59;"	d
AL_EAXREVERB_REFLECTIONS_PAN	.\dep\SFML\extlibs\headers\AL\efx.h	61;"	d
AL_EAXREVERB_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	72;"	d
AL_ECHO_DAMPING	.\dep\SFML\extlibs\headers\AL\efx.h	93;"	d
AL_ECHO_DEFAULT_DAMPING	.\dep\SFML\extlibs\headers\AL\efx.h	520;"	d
AL_ECHO_DEFAULT_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	512;"	d
AL_ECHO_DEFAULT_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	524;"	d
AL_ECHO_DEFAULT_LRDELAY	.\dep\SFML\extlibs\headers\AL\efx.h	516;"	d
AL_ECHO_DEFAULT_SPREAD	.\dep\SFML\extlibs\headers\AL\efx.h	528;"	d
AL_ECHO_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	91;"	d
AL_ECHO_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	94;"	d
AL_ECHO_LRDELAY	.\dep\SFML\extlibs\headers\AL\efx.h	92;"	d
AL_ECHO_MAX_DAMPING	.\dep\SFML\extlibs\headers\AL\efx.h	519;"	d
AL_ECHO_MAX_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	511;"	d
AL_ECHO_MAX_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	523;"	d
AL_ECHO_MAX_LRDELAY	.\dep\SFML\extlibs\headers\AL\efx.h	515;"	d
AL_ECHO_MAX_SPREAD	.\dep\SFML\extlibs\headers\AL\efx.h	527;"	d
AL_ECHO_MIN_DAMPING	.\dep\SFML\extlibs\headers\AL\efx.h	518;"	d
AL_ECHO_MIN_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	510;"	d
AL_ECHO_MIN_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	522;"	d
AL_ECHO_MIN_LRDELAY	.\dep\SFML\extlibs\headers\AL\efx.h	514;"	d
AL_ECHO_MIN_SPREAD	.\dep\SFML\extlibs\headers\AL\efx.h	526;"	d
AL_ECHO_SPREAD	.\dep\SFML\extlibs\headers\AL\efx.h	95;"	d
AL_EFFECTSLOT_AUXILIARY_SEND_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	172;"	d
AL_EFFECTSLOT_EFFECT	.\dep\SFML\extlibs\headers\AL\efx.h	170;"	d
AL_EFFECTSLOT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	171;"	d
AL_EFFECTSLOT_NULL	.\dep\SFML\extlibs\headers\AL\efx.h	175;"	d
AL_EFFECT_AUTOWAH	.\dep\SFML\extlibs\headers\AL\efx.h	164;"	d
AL_EFFECT_CHORUS	.\dep\SFML\extlibs\headers\AL\efx.h	156;"	d
AL_EFFECT_COMPRESSOR	.\dep\SFML\extlibs\headers\AL\efx.h	165;"	d
AL_EFFECT_DEDICATED_DIALOGUE	.\dep\SFML\extlibs\headers\AL\alext.h	202;"	d
AL_EFFECT_DEDICATED_LOW_FREQUENCY_EFFECT	.\dep\SFML\extlibs\headers\AL\alext.h	203;"	d
AL_EFFECT_DISTORTION	.\dep\SFML\extlibs\headers\AL\efx.h	157;"	d
AL_EFFECT_EAXREVERB	.\dep\SFML\extlibs\headers\AL\efx.h	167;"	d
AL_EFFECT_ECHO	.\dep\SFML\extlibs\headers\AL\efx.h	158;"	d
AL_EFFECT_EQUALIZER	.\dep\SFML\extlibs\headers\AL\efx.h	166;"	d
AL_EFFECT_FIRST_PARAMETER	.\dep\SFML\extlibs\headers\AL\efx.h	149;"	d
AL_EFFECT_FLANGER	.\dep\SFML\extlibs\headers\AL\efx.h	159;"	d
AL_EFFECT_FREQUENCY_SHIFTER	.\dep\SFML\extlibs\headers\AL\efx.h	160;"	d
AL_EFFECT_LAST_PARAMETER	.\dep\SFML\extlibs\headers\AL\efx.h	150;"	d
AL_EFFECT_NULL	.\dep\SFML\extlibs\headers\AL\efx.h	154;"	d
AL_EFFECT_PITCH_SHIFTER	.\dep\SFML\extlibs\headers\AL\efx.h	162;"	d
AL_EFFECT_REVERB	.\dep\SFML\extlibs\headers\AL\efx.h	155;"	d
AL_EFFECT_RING_MODULATOR	.\dep\SFML\extlibs\headers\AL\efx.h	163;"	d
AL_EFFECT_TYPE	.\dep\SFML\extlibs\headers\AL\efx.h	151;"	d
AL_EFFECT_VOCAL_MORPHER	.\dep\SFML\extlibs\headers\AL\efx.h	161;"	d
AL_EFX_H	.\dep\SFML\extlibs\headers\AL\efx.h	2;"	d
AL_EQUALIZER_DEFAULT_HIGH_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	722;"	d
AL_EQUALIZER_DEFAULT_HIGH_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	718;"	d
AL_EQUALIZER_DEFAULT_LOW_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	690;"	d
AL_EQUALIZER_DEFAULT_LOW_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	686;"	d
AL_EQUALIZER_DEFAULT_MID1_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	698;"	d
AL_EQUALIZER_DEFAULT_MID1_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	694;"	d
AL_EQUALIZER_DEFAULT_MID1_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	702;"	d
AL_EQUALIZER_DEFAULT_MID2_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	710;"	d
AL_EQUALIZER_DEFAULT_MID2_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	706;"	d
AL_EQUALIZER_DEFAULT_MID2_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	714;"	d
AL_EQUALIZER_HIGH_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	146;"	d
AL_EQUALIZER_HIGH_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	145;"	d
AL_EQUALIZER_LOW_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	138;"	d
AL_EQUALIZER_LOW_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	137;"	d
AL_EQUALIZER_MAX_HIGH_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	721;"	d
AL_EQUALIZER_MAX_HIGH_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	717;"	d
AL_EQUALIZER_MAX_LOW_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	689;"	d
AL_EQUALIZER_MAX_LOW_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	685;"	d
AL_EQUALIZER_MAX_MID1_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	697;"	d
AL_EQUALIZER_MAX_MID1_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	693;"	d
AL_EQUALIZER_MAX_MID1_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	701;"	d
AL_EQUALIZER_MAX_MID2_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	709;"	d
AL_EQUALIZER_MAX_MID2_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	705;"	d
AL_EQUALIZER_MAX_MID2_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	713;"	d
AL_EQUALIZER_MID1_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	140;"	d
AL_EQUALIZER_MID1_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	139;"	d
AL_EQUALIZER_MID1_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	141;"	d
AL_EQUALIZER_MID2_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	143;"	d
AL_EQUALIZER_MID2_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	142;"	d
AL_EQUALIZER_MID2_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	144;"	d
AL_EQUALIZER_MIN_HIGH_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	720;"	d
AL_EQUALIZER_MIN_HIGH_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	716;"	d
AL_EQUALIZER_MIN_LOW_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	688;"	d
AL_EQUALIZER_MIN_LOW_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	684;"	d
AL_EQUALIZER_MIN_MID1_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	696;"	d
AL_EQUALIZER_MIN_MID1_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	692;"	d
AL_EQUALIZER_MIN_MID1_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	700;"	d
AL_EQUALIZER_MIN_MID2_CENTER	.\dep\SFML\extlibs\headers\AL\efx.h	708;"	d
AL_EQUALIZER_MIN_MID2_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	704;"	d
AL_EQUALIZER_MIN_MID2_WIDTH	.\dep\SFML\extlibs\headers\AL\efx.h	712;"	d
AL_EXPONENT_DISTANCE	.\dep\SFML\extlibs\headers\AL\al.h	449;"	d
AL_EXPONENT_DISTANCE_CLAMPED	.\dep\SFML\extlibs\headers\AL\al.h	450;"	d
AL_EXTENSIONS	.\dep\SFML\extlibs\headers\AL\al.h	389;"	d
AL_EXT_ALAW	.\dep\SFML\extlibs\headers\AL\alext.h	86;"	d
AL_EXT_FOLDBACK	.\dep\SFML\extlibs\headers\AL\alext.h	183;"	d
AL_EXT_FOLDBACK_NAME	.\dep\SFML\extlibs\headers\AL\alext.h	184;"	d
AL_EXT_IMA4	.\dep\SFML\extlibs\headers\AL\alext.h	129;"	d
AL_EXT_MCFORMATS	.\dep\SFML\extlibs\headers\AL\alext.h	99;"	d
AL_EXT_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	80;"	d
AL_EXT_MULAW_MCFORMATS	.\dep\SFML\extlibs\headers\AL\alext.h	118;"	d
AL_EXT_SOURCE_RADIUS	.\dep\SFML\extlibs\headers\AL\alext.h	313;"	d
AL_EXT_STATIC_BUFFER	.\dep\SFML\extlibs\headers\AL\alext.h	135;"	d
AL_EXT_STEREO_ANGLES	.\dep\SFML\extlibs\headers\AL\alext.h	308;"	d
AL_EXT_double	.\dep\SFML\extlibs\headers\AL\alext.h	74;"	d
AL_EXT_float32	.\dep\SFML\extlibs\headers\AL\alext.h	68;"	d
AL_EXT_source_distance_model	.\dep\SFML\extlibs\headers\AL\alext.h	163;"	d
AL_EXT_vorbis	.\dep\SFML\extlibs\headers\AL\alext.h	57;"	d
AL_FALSE	.\dep\SFML\extlibs\headers\AL\al.h	83;"	d
AL_FILTER_BANDPASS	.\dep\SFML\extlibs\headers\AL\efx.h	202;"	d
AL_FILTER_FIRST_PARAMETER	.\dep\SFML\extlibs\headers\AL\efx.h	194;"	d
AL_FILTER_HIGHPASS	.\dep\SFML\extlibs\headers\AL\efx.h	201;"	d
AL_FILTER_LAST_PARAMETER	.\dep\SFML\extlibs\headers\AL\efx.h	195;"	d
AL_FILTER_LOWPASS	.\dep\SFML\extlibs\headers\AL\efx.h	200;"	d
AL_FILTER_NULL	.\dep\SFML\extlibs\headers\AL\efx.h	199;"	d
AL_FILTER_TYPE	.\dep\SFML\extlibs\headers\AL\efx.h	196;"	d
AL_FLANGER_DEFAULT_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	556;"	d
AL_FLANGER_DEFAULT_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	548;"	d
AL_FLANGER_DEFAULT_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	552;"	d
AL_FLANGER_DEFAULT_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	540;"	d
AL_FLANGER_DEFAULT_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	544;"	d
AL_FLANGER_DEFAULT_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	536;"	d
AL_FLANGER_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	103;"	d
AL_FLANGER_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	101;"	d
AL_FLANGER_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	102;"	d
AL_FLANGER_MAX_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	555;"	d
AL_FLANGER_MAX_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	547;"	d
AL_FLANGER_MAX_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	551;"	d
AL_FLANGER_MAX_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	539;"	d
AL_FLANGER_MAX_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	543;"	d
AL_FLANGER_MAX_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	535;"	d
AL_FLANGER_MIN_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	554;"	d
AL_FLANGER_MIN_DEPTH	.\dep\SFML\extlibs\headers\AL\efx.h	546;"	d
AL_FLANGER_MIN_FEEDBACK	.\dep\SFML\extlibs\headers\AL\efx.h	550;"	d
AL_FLANGER_MIN_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	538;"	d
AL_FLANGER_MIN_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	542;"	d
AL_FLANGER_MIN_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	534;"	d
AL_FLANGER_PHASE	.\dep\SFML\extlibs\headers\AL\efx.h	99;"	d
AL_FLANGER_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	100;"	d
AL_FLANGER_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	98;"	d
AL_FLANGER_WAVEFORM_SINUSOID	.\dep\SFML\extlibs\headers\AL\efx.h	531;"	d
AL_FLANGER_WAVEFORM_TRIANGLE	.\dep\SFML\extlibs\headers\AL\efx.h	532;"	d
AL_FLOAT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	224;"	d
AL_FOLDBACK_EVENT_BLOCK	.\dep\SFML\extlibs\headers\AL\alext.h	185;"	d
AL_FOLDBACK_EVENT_START	.\dep\SFML\extlibs\headers\AL\alext.h	186;"	d
AL_FOLDBACK_EVENT_STOP	.\dep\SFML\extlibs\headers\AL\alext.h	187;"	d
AL_FOLDBACK_MODE_MONO	.\dep\SFML\extlibs\headers\AL\alext.h	188;"	d
AL_FOLDBACK_MODE_STEREO	.\dep\SFML\extlibs\headers\AL\alext.h	189;"	d
AL_FORMAT_51CHN16	.\dep\SFML\extlibs\headers\AL\alext.h	107;"	d
AL_FORMAT_51CHN32	.\dep\SFML\extlibs\headers\AL\alext.h	108;"	d
AL_FORMAT_51CHN8	.\dep\SFML\extlibs\headers\AL\alext.h	106;"	d
AL_FORMAT_51CHN_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	123;"	d
AL_FORMAT_61CHN16	.\dep\SFML\extlibs\headers\AL\alext.h	110;"	d
AL_FORMAT_61CHN32	.\dep\SFML\extlibs\headers\AL\alext.h	111;"	d
AL_FORMAT_61CHN8	.\dep\SFML\extlibs\headers\AL\alext.h	109;"	d
AL_FORMAT_61CHN_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	124;"	d
AL_FORMAT_71CHN16	.\dep\SFML\extlibs\headers\AL\alext.h	113;"	d
AL_FORMAT_71CHN32	.\dep\SFML\extlibs\headers\AL\alext.h	114;"	d
AL_FORMAT_71CHN8	.\dep\SFML\extlibs\headers\AL\alext.h	112;"	d
AL_FORMAT_71CHN_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	125;"	d
AL_FORMAT_IMA_ADPCM_MONO16_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	47;"	d
AL_FORMAT_IMA_ADPCM_STEREO16_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	48;"	d
AL_FORMAT_MONO16	.\dep\SFML\extlibs\headers\AL\al.h	340;"	d
AL_FORMAT_MONO8	.\dep\SFML\extlibs\headers\AL\al.h	339;"	d
AL_FORMAT_MONO_ALAW_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	87;"	d
AL_FORMAT_MONO_DOUBLE_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	75;"	d
AL_FORMAT_MONO_FLOAT32	.\dep\SFML\extlibs\headers\AL\alext.h	69;"	d
AL_FORMAT_MONO_IMA4	.\dep\SFML\extlibs\headers\AL\alext.h	130;"	d
AL_FORMAT_MONO_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	119;"	d
AL_FORMAT_MONO_MULAW_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	81;"	d
AL_FORMAT_QUAD16	.\dep\SFML\extlibs\headers\AL\alext.h	101;"	d
AL_FORMAT_QUAD16_LOKI	.\dep\SFML\extlibs\headers\AL\alext.h	64;"	d
AL_FORMAT_QUAD32	.\dep\SFML\extlibs\headers\AL\alext.h	102;"	d
AL_FORMAT_QUAD8	.\dep\SFML\extlibs\headers\AL\alext.h	100;"	d
AL_FORMAT_QUAD8_LOKI	.\dep\SFML\extlibs\headers\AL\alext.h	63;"	d
AL_FORMAT_QUAD_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	121;"	d
AL_FORMAT_REAR16	.\dep\SFML\extlibs\headers\AL\alext.h	104;"	d
AL_FORMAT_REAR32	.\dep\SFML\extlibs\headers\AL\alext.h	105;"	d
AL_FORMAT_REAR8	.\dep\SFML\extlibs\headers\AL\alext.h	103;"	d
AL_FORMAT_REAR_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	122;"	d
AL_FORMAT_STEREO16	.\dep\SFML\extlibs\headers\AL\al.h	342;"	d
AL_FORMAT_STEREO8	.\dep\SFML\extlibs\headers\AL\al.h	341;"	d
AL_FORMAT_STEREO_ALAW_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	88;"	d
AL_FORMAT_STEREO_DOUBLE_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	76;"	d
AL_FORMAT_STEREO_FLOAT32	.\dep\SFML\extlibs\headers\AL\alext.h	70;"	d
AL_FORMAT_STEREO_IMA4	.\dep\SFML\extlibs\headers\AL\alext.h	131;"	d
AL_FORMAT_STEREO_MULAW	.\dep\SFML\extlibs\headers\AL\alext.h	120;"	d
AL_FORMAT_STEREO_MULAW_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	82;"	d
AL_FORMAT_VORBIS_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	58;"	d
AL_FORMAT_WAVE_EXT	.\dep\SFML\extlibs\headers\AL\alext.h	53;"	d
AL_FREQUENCY	.\dep\SFML\extlibs\headers\AL\al.h	345;"	d
AL_FREQUENCY_SHIFTER_DEFAULT_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	561;"	d
AL_FREQUENCY_SHIFTER_DEFAULT_LEFT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	565;"	d
AL_FREQUENCY_SHIFTER_DEFAULT_RIGHT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	573;"	d
AL_FREQUENCY_SHIFTER_DIRECTION_DOWN	.\dep\SFML\extlibs\headers\AL\efx.h	567;"	d
AL_FREQUENCY_SHIFTER_DIRECTION_OFF	.\dep\SFML\extlibs\headers\AL\efx.h	569;"	d
AL_FREQUENCY_SHIFTER_DIRECTION_UP	.\dep\SFML\extlibs\headers\AL\efx.h	568;"	d
AL_FREQUENCY_SHIFTER_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	106;"	d
AL_FREQUENCY_SHIFTER_LEFT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	107;"	d
AL_FREQUENCY_SHIFTER_MAX_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	560;"	d
AL_FREQUENCY_SHIFTER_MAX_LEFT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	564;"	d
AL_FREQUENCY_SHIFTER_MAX_RIGHT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	572;"	d
AL_FREQUENCY_SHIFTER_MIN_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	559;"	d
AL_FREQUENCY_SHIFTER_MIN_LEFT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	563;"	d
AL_FREQUENCY_SHIFTER_MIN_RIGHT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	571;"	d
AL_FREQUENCY_SHIFTER_RIGHT_DIRECTION	.\dep\SFML\extlibs\headers\AL\efx.h	108;"	d
AL_GAIN	.\dep\SFML\extlibs\headers\AL\al.h	196;"	d
AL_HIGHPASS_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	296;"	d
AL_HIGHPASS_DEFAULT_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	300;"	d
AL_HIGHPASS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	185;"	d
AL_HIGHPASS_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	186;"	d
AL_HIGHPASS_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	295;"	d
AL_HIGHPASS_MAX_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	299;"	d
AL_HIGHPASS_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	294;"	d
AL_HIGHPASS_MIN_GAINLF	.\dep\SFML\extlibs\headers\AL\efx.h	298;"	d
AL_ILLEGAL_COMMAND	.\dep\SFML\extlibs\headers\AL\al.h	31;"	d
AL_ILLEGAL_ENUM	.\dep\SFML\extlibs\headers\AL\al.h	30;"	d
AL_INITIAL	.\dep\SFML\extlibs\headers\AL\al.h	238;"	d
AL_INTERNAL_FORMAT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	253;"	d
AL_INT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	222;"	d
AL_INVALID	.\dep\SFML\extlibs\headers\AL\al.h	29;"	d
AL_INVALID_ENUM	.\dep\SFML\extlibs\headers\AL\al.h	370;"	d
AL_INVALID_NAME	.\dep\SFML\extlibs\headers\AL\al.h	367;"	d
AL_INVALID_OPERATION	.\dep\SFML\extlibs\headers\AL\al.h	376;"	d
AL_INVALID_VALUE	.\dep\SFML\extlibs\headers\AL\al.h	373;"	d
AL_INVERSE_DISTANCE	.\dep\SFML\extlibs\headers\AL\al.h	445;"	d
AL_INVERSE_DISTANCE_CLAMPED	.\dep\SFML\extlibs\headers\AL\al.h	446;"	d
AL_LINEAR_DISTANCE	.\dep\SFML\extlibs\headers\AL\al.h	447;"	d
AL_LINEAR_DISTANCE_CLAMPED	.\dep\SFML\extlibs\headers\AL\al.h	448;"	d
AL_LOKI_IMA_ADPCM_format	.\dep\SFML\extlibs\headers\AL\alext.h	46;"	d
AL_LOKI_WAVE_format	.\dep\SFML\extlibs\headers\AL\alext.h	52;"	d
AL_LOKI_quadriphonic	.\dep\SFML\extlibs\headers\AL\alext.h	62;"	d
AL_LOOPING	.\dep\SFML\extlibs\headers\AL\al.h	173;"	d
AL_LOOP_POINTS_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	179;"	d
AL_LOWPASS_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	287;"	d
AL_LOWPASS_DEFAULT_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	291;"	d
AL_LOWPASS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	181;"	d
AL_LOWPASS_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	182;"	d
AL_LOWPASS_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	286;"	d
AL_LOWPASS_MAX_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	290;"	d
AL_LOWPASS_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	285;"	d
AL_LOWPASS_MIN_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	289;"	d
AL_MAX_AIR_ABSORPTION_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	727;"	d
AL_MAX_AUXILIARY_SEND_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	747;"	d
AL_MAX_AUXILIARY_SEND_FILTER_GAIN_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	743;"	d
AL_MAX_CONE_OUTER_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	735;"	d
AL_MAX_DIRECT_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	739;"	d
AL_MAX_DISTANCE	.\dep\SFML\extlibs\headers\AL\al.h	309;"	d
AL_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\al.h	216;"	d
AL_MAX_METERS_PER_UNIT	.\dep\SFML\extlibs\headers\AL\efx.h	753;"	d
AL_MAX_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	731;"	d
AL_METERS_PER_UNIT	.\dep\SFML\extlibs\headers\AL\efx.h	20;"	d
AL_MIN_AIR_ABSORPTION_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	726;"	d
AL_MIN_AUXILIARY_SEND_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	746;"	d
AL_MIN_AUXILIARY_SEND_FILTER_GAIN_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	742;"	d
AL_MIN_CONE_OUTER_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	734;"	d
AL_MIN_DIRECT_FILTER_GAINHF_AUTO	.\dep\SFML\extlibs\headers\AL\efx.h	738;"	d
AL_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\al.h	206;"	d
AL_MIN_METERS_PER_UNIT	.\dep\SFML\extlibs\headers\AL\efx.h	752;"	d
AL_MIN_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	730;"	d
AL_MONO16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	231;"	d
AL_MONO32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	232;"	d
AL_MONO8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	230;"	d
AL_MONO_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	209;"	d
AL_NONE	.\dep\SFML\extlibs\headers\AL\al.h	80;"	d
AL_NO_ERROR	.\dep\SFML\extlibs\headers\AL\al.h	364;"	d
AL_ORIENTATION	.\dep\SFML\extlibs\headers\AL\al.h	228;"	d
AL_OUT_OF_MEMORY	.\dep\SFML\extlibs\headers\AL\al.h	379;"	d
AL_PAUSED	.\dep\SFML\extlibs\headers\AL\al.h	240;"	d
AL_PENDING	.\dep\SFML\extlibs\headers\AL\al.h	359;"	d
AL_PITCH	.\dep\SFML\extlibs\headers\AL\al.h	128;"	d
AL_PITCH_SHIFTER_COARSE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	119;"	d
AL_PITCH_SHIFTER_DEFAULT_COARSE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	638;"	d
AL_PITCH_SHIFTER_DEFAULT_FINE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	642;"	d
AL_PITCH_SHIFTER_FINE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	120;"	d
AL_PITCH_SHIFTER_MAX_COARSE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	637;"	d
AL_PITCH_SHIFTER_MAX_FINE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	641;"	d
AL_PITCH_SHIFTER_MIN_COARSE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	636;"	d
AL_PITCH_SHIFTER_MIN_FINE_TUNE	.\dep\SFML\extlibs\headers\AL\efx.h	640;"	d
AL_PLAYING	.\dep\SFML\extlibs\headers\AL\al.h	239;"	d
AL_POSITION	.\dep\SFML\extlibs\headers\AL\al.h	144;"	d
AL_PROCESSED	.\dep\SFML\extlibs\headers\AL\al.h	360;"	d
AL_QUAD16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	237;"	d
AL_QUAD32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	238;"	d
AL_QUAD8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	236;"	d
AL_QUAD_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	212;"	d
AL_REAR16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	240;"	d
AL_REAR32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	241;"	d
AL_REAR8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	239;"	d
AL_REAR_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	211;"	d
AL_REFERENCE_DISTANCE	.\dep\SFML\extlibs\headers\AL\al.h	274;"	d
AL_RENDERER	.\dep\SFML\extlibs\headers\AL\al.h	387;"	d
AL_REVERB_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	46;"	d
AL_REVERB_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	48;"	d
AL_REVERB_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	41;"	d
AL_REVERB_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	40;"	d
AL_REVERB_DEFAULT_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	361;"	d
AL_REVERB_DEFAULT_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	369;"	d
AL_REVERB_DEFAULT_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	341;"	d
AL_REVERB_DEFAULT_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	337;"	d
AL_REVERB_DEFAULT_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	321;"	d
AL_REVERB_DEFAULT_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	325;"	d
AL_REVERB_DEFAULT_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	329;"	d
AL_REVERB_DEFAULT_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	333;"	d
AL_REVERB_DEFAULT_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	357;"	d
AL_REVERB_DEFAULT_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	353;"	d
AL_REVERB_DEFAULT_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	349;"	d
AL_REVERB_DEFAULT_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	345;"	d
AL_REVERB_DEFAULT_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	365;"	d
AL_REVERB_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	36;"	d
AL_REVERB_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	37;"	d
AL_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	38;"	d
AL_REVERB_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	39;"	d
AL_REVERB_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	45;"	d
AL_REVERB_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	44;"	d
AL_REVERB_MAX_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	360;"	d
AL_REVERB_MAX_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	368;"	d
AL_REVERB_MAX_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	340;"	d
AL_REVERB_MAX_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	336;"	d
AL_REVERB_MAX_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	320;"	d
AL_REVERB_MAX_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	324;"	d
AL_REVERB_MAX_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	328;"	d
AL_REVERB_MAX_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	332;"	d
AL_REVERB_MAX_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	356;"	d
AL_REVERB_MAX_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	352;"	d
AL_REVERB_MAX_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	348;"	d
AL_REVERB_MAX_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	344;"	d
AL_REVERB_MAX_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	364;"	d
AL_REVERB_MIN_AIR_ABSORPTION_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	359;"	d
AL_REVERB_MIN_DECAY_HFLIMIT	.\dep\SFML\extlibs\headers\AL\efx.h	367;"	d
AL_REVERB_MIN_DECAY_HFRATIO	.\dep\SFML\extlibs\headers\AL\efx.h	339;"	d
AL_REVERB_MIN_DECAY_TIME	.\dep\SFML\extlibs\headers\AL\efx.h	335;"	d
AL_REVERB_MIN_DENSITY	.\dep\SFML\extlibs\headers\AL\efx.h	319;"	d
AL_REVERB_MIN_DIFFUSION	.\dep\SFML\extlibs\headers\AL\efx.h	323;"	d
AL_REVERB_MIN_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	327;"	d
AL_REVERB_MIN_GAINHF	.\dep\SFML\extlibs\headers\AL\efx.h	331;"	d
AL_REVERB_MIN_LATE_REVERB_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	355;"	d
AL_REVERB_MIN_LATE_REVERB_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	351;"	d
AL_REVERB_MIN_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	347;"	d
AL_REVERB_MIN_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	343;"	d
AL_REVERB_MIN_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	363;"	d
AL_REVERB_REFLECTIONS_DELAY	.\dep\SFML\extlibs\headers\AL\efx.h	43;"	d
AL_REVERB_REFLECTIONS_GAIN	.\dep\SFML\extlibs\headers\AL\efx.h	42;"	d
AL_REVERB_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	47;"	d
AL_RING_MODULATOR_DEFAULT_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	647;"	d
AL_RING_MODULATOR_DEFAULT_HIGHPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	651;"	d
AL_RING_MODULATOR_DEFAULT_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	659;"	d
AL_RING_MODULATOR_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	123;"	d
AL_RING_MODULATOR_HIGHPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	124;"	d
AL_RING_MODULATOR_MAX_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	646;"	d
AL_RING_MODULATOR_MAX_HIGHPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	650;"	d
AL_RING_MODULATOR_MAX_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	658;"	d
AL_RING_MODULATOR_MIN_FREQUENCY	.\dep\SFML\extlibs\headers\AL\efx.h	645;"	d
AL_RING_MODULATOR_MIN_HIGHPASS_CUTOFF	.\dep\SFML\extlibs\headers\AL\efx.h	649;"	d
AL_RING_MODULATOR_MIN_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	657;"	d
AL_RING_MODULATOR_SAWTOOTH	.\dep\SFML\extlibs\headers\AL\efx.h	654;"	d
AL_RING_MODULATOR_SINUSOID	.\dep\SFML\extlibs\headers\AL\efx.h	653;"	d
AL_RING_MODULATOR_SQUARE	.\dep\SFML\extlibs\headers\AL\efx.h	655;"	d
AL_RING_MODULATOR_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	125;"	d
AL_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\al.h	286;"	d
AL_ROOM_ROLLOFF_FACTOR	.\dep\SFML\extlibs\headers\AL\efx.h	26;"	d
AL_SAMPLE_LENGTH_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	255;"	d
AL_SAMPLE_OFFSET	.\dep\SFML\extlibs\headers\AL\al.h	314;"	d
AL_SAMPLE_OFFSET_LATENCY_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	319;"	d
AL_SAMPLE_RW_OFFSETS_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	170;"	d
AL_SEC_LENGTH_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	256;"	d
AL_SEC_OFFSET	.\dep\SFML\extlibs\headers\AL\al.h	312;"	d
AL_SEC_OFFSET_LATENCY_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	320;"	d
AL_SHORT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	220;"	d
AL_SIZE	.\dep\SFML\extlibs\headers\AL\al.h	351;"	d
AL_SOFT_buffer_samples	.\dep\SFML\extlibs\headers\AL\alext.h	207;"	d
AL_SOFT_buffer_sub_data	.\dep\SFML\extlibs\headers\AL\alext.h	168;"	d
AL_SOFT_direct_channels	.\dep\SFML\extlibs\headers\AL\alext.h	271;"	d
AL_SOFT_loop_points	.\dep\SFML\extlibs\headers\AL\alext.h	178;"	d
AL_SOFT_source_latency	.\dep\SFML\extlibs\headers\AL\alext.h	318;"	d
AL_SOURCE_DISTANCE_MODEL	.\dep\SFML\extlibs\headers\AL\alext.h	164;"	d
AL_SOURCE_RADIUS	.\dep\SFML\extlibs\headers\AL\alext.h	314;"	d
AL_SOURCE_RELATIVE	.\dep\SFML\extlibs\headers\AL\al.h	97;"	d
AL_SOURCE_STATE	.\dep\SFML\extlibs\headers\AL\al.h	235;"	d
AL_SOURCE_TYPE	.\dep\SFML\extlibs\headers\AL\al.h	331;"	d
AL_SPEED_OF_SOUND	.\dep\SFML\extlibs\headers\AL\al.h	420;"	d
AL_STATIC	.\dep\SFML\extlibs\headers\AL\al.h	334;"	d
AL_STEREO16_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	234;"	d
AL_STEREO32F_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	235;"	d
AL_STEREO8_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	233;"	d
AL_STEREO_ANGLES	.\dep\SFML\extlibs\headers\AL\alext.h	309;"	d
AL_STEREO_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	210;"	d
AL_STOPPED	.\dep\SFML\extlibs\headers\AL\al.h	241;"	d
AL_STREAMING	.\dep\SFML\extlibs\headers\AL\al.h	335;"	d
AL_TRUE	.\dep\SFML\extlibs\headers\AL\al.h	86;"	d
AL_UNDETERMINED	.\dep\SFML\extlibs\headers\AL\al.h	336;"	d
AL_UNSIGNED_BYTE3_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	227;"	d
AL_UNSIGNED_BYTE_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	219;"	d
AL_UNSIGNED_INT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	223;"	d
AL_UNSIGNED_SHORT_SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	221;"	d
AL_UNUSED	.\dep\SFML\extlibs\headers\AL\al.h	358;"	d
AL_VELOCITY	.\dep\SFML\extlibs\headers\AL\al.h	163;"	d
AL_VENDOR	.\dep\SFML\extlibs\headers\AL\al.h	383;"	d
AL_VERSION	.\dep\SFML\extlibs\headers\AL\al.h	385;"	d
AL_VERSION_1_0	.\dep\SFML\extlibs\headers\AL\al.h	34;"	d
AL_VERSION_1_1	.\dep\SFML\extlibs\headers\AL\al.h	35;"	d
AL_VOCAL_MORPHER_DEFAULT_PHONEMEA	.\dep\SFML\extlibs\headers\AL\efx.h	578;"	d
AL_VOCAL_MORPHER_DEFAULT_PHONEMEA_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	582;"	d
AL_VOCAL_MORPHER_DEFAULT_PHONEMEB	.\dep\SFML\extlibs\headers\AL\efx.h	586;"	d
AL_VOCAL_MORPHER_DEFAULT_PHONEMEB_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	590;"	d
AL_VOCAL_MORPHER_DEFAULT_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	633;"	d
AL_VOCAL_MORPHER_DEFAULT_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	629;"	d
AL_VOCAL_MORPHER_MAX_PHONEMEA	.\dep\SFML\extlibs\headers\AL\efx.h	577;"	d
AL_VOCAL_MORPHER_MAX_PHONEMEA_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	581;"	d
AL_VOCAL_MORPHER_MAX_PHONEMEB	.\dep\SFML\extlibs\headers\AL\efx.h	585;"	d
AL_VOCAL_MORPHER_MAX_PHONEMEB_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	589;"	d
AL_VOCAL_MORPHER_MAX_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	632;"	d
AL_VOCAL_MORPHER_MAX_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	628;"	d
AL_VOCAL_MORPHER_MIN_PHONEMEA	.\dep\SFML\extlibs\headers\AL\efx.h	576;"	d
AL_VOCAL_MORPHER_MIN_PHONEMEA_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	580;"	d
AL_VOCAL_MORPHER_MIN_PHONEMEB	.\dep\SFML\extlibs\headers\AL\efx.h	584;"	d
AL_VOCAL_MORPHER_MIN_PHONEMEB_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	588;"	d
AL_VOCAL_MORPHER_MIN_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	631;"	d
AL_VOCAL_MORPHER_MIN_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	627;"	d
AL_VOCAL_MORPHER_PHONEMEA	.\dep\SFML\extlibs\headers\AL\efx.h	111;"	d
AL_VOCAL_MORPHER_PHONEMEA_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	112;"	d
AL_VOCAL_MORPHER_PHONEMEB	.\dep\SFML\extlibs\headers\AL\efx.h	113;"	d
AL_VOCAL_MORPHER_PHONEMEB_COARSE_TUNING	.\dep\SFML\extlibs\headers\AL\efx.h	114;"	d
AL_VOCAL_MORPHER_PHONEME_A	.\dep\SFML\extlibs\headers\AL\efx.h	592;"	d
AL_VOCAL_MORPHER_PHONEME_AA	.\dep\SFML\extlibs\headers\AL\efx.h	597;"	d
AL_VOCAL_MORPHER_PHONEME_AE	.\dep\SFML\extlibs\headers\AL\efx.h	598;"	d
AL_VOCAL_MORPHER_PHONEME_AH	.\dep\SFML\extlibs\headers\AL\efx.h	599;"	d
AL_VOCAL_MORPHER_PHONEME_AO	.\dep\SFML\extlibs\headers\AL\efx.h	600;"	d
AL_VOCAL_MORPHER_PHONEME_B	.\dep\SFML\extlibs\headers\AL\efx.h	607;"	d
AL_VOCAL_MORPHER_PHONEME_D	.\dep\SFML\extlibs\headers\AL\efx.h	608;"	d
AL_VOCAL_MORPHER_PHONEME_E	.\dep\SFML\extlibs\headers\AL\efx.h	593;"	d
AL_VOCAL_MORPHER_PHONEME_EH	.\dep\SFML\extlibs\headers\AL\efx.h	601;"	d
AL_VOCAL_MORPHER_PHONEME_ER	.\dep\SFML\extlibs\headers\AL\efx.h	602;"	d
AL_VOCAL_MORPHER_PHONEME_F	.\dep\SFML\extlibs\headers\AL\efx.h	609;"	d
AL_VOCAL_MORPHER_PHONEME_G	.\dep\SFML\extlibs\headers\AL\efx.h	610;"	d
AL_VOCAL_MORPHER_PHONEME_I	.\dep\SFML\extlibs\headers\AL\efx.h	594;"	d
AL_VOCAL_MORPHER_PHONEME_IH	.\dep\SFML\extlibs\headers\AL\efx.h	603;"	d
AL_VOCAL_MORPHER_PHONEME_IY	.\dep\SFML\extlibs\headers\AL\efx.h	604;"	d
AL_VOCAL_MORPHER_PHONEME_J	.\dep\SFML\extlibs\headers\AL\efx.h	611;"	d
AL_VOCAL_MORPHER_PHONEME_K	.\dep\SFML\extlibs\headers\AL\efx.h	612;"	d
AL_VOCAL_MORPHER_PHONEME_L	.\dep\SFML\extlibs\headers\AL\efx.h	613;"	d
AL_VOCAL_MORPHER_PHONEME_M	.\dep\SFML\extlibs\headers\AL\efx.h	614;"	d
AL_VOCAL_MORPHER_PHONEME_N	.\dep\SFML\extlibs\headers\AL\efx.h	615;"	d
AL_VOCAL_MORPHER_PHONEME_O	.\dep\SFML\extlibs\headers\AL\efx.h	595;"	d
AL_VOCAL_MORPHER_PHONEME_P	.\dep\SFML\extlibs\headers\AL\efx.h	616;"	d
AL_VOCAL_MORPHER_PHONEME_R	.\dep\SFML\extlibs\headers\AL\efx.h	617;"	d
AL_VOCAL_MORPHER_PHONEME_S	.\dep\SFML\extlibs\headers\AL\efx.h	618;"	d
AL_VOCAL_MORPHER_PHONEME_T	.\dep\SFML\extlibs\headers\AL\efx.h	619;"	d
AL_VOCAL_MORPHER_PHONEME_U	.\dep\SFML\extlibs\headers\AL\efx.h	596;"	d
AL_VOCAL_MORPHER_PHONEME_UH	.\dep\SFML\extlibs\headers\AL\efx.h	605;"	d
AL_VOCAL_MORPHER_PHONEME_UW	.\dep\SFML\extlibs\headers\AL\efx.h	606;"	d
AL_VOCAL_MORPHER_PHONEME_V	.\dep\SFML\extlibs\headers\AL\efx.h	620;"	d
AL_VOCAL_MORPHER_PHONEME_Z	.\dep\SFML\extlibs\headers\AL\efx.h	621;"	d
AL_VOCAL_MORPHER_RATE	.\dep\SFML\extlibs\headers\AL\efx.h	116;"	d
AL_VOCAL_MORPHER_WAVEFORM	.\dep\SFML\extlibs\headers\AL\efx.h	115;"	d
AL_VOCAL_MORPHER_WAVEFORM_SAWTOOTH	.\dep\SFML\extlibs\headers\AL\efx.h	625;"	d
AL_VOCAL_MORPHER_WAVEFORM_SINUSOID	.\dep\SFML\extlibs\headers\AL\efx.h	623;"	d
AL_VOCAL_MORPHER_WAVEFORM_TRIANGLE	.\dep\SFML\extlibs\headers\AL\efx.h	624;"	d
ALboolean	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef char ALboolean;$/;"	t
ALbyte	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef signed char ALbyte;$/;"	t
ALchar	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef char ALchar;$/;"	t
ALdouble	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef double ALdouble;$/;"	t
ALenum	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef int ALenum;$/;"	t
ALfloat	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef float ALfloat;$/;"	t
ALint	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef int ALint;$/;"	t
ALint64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef int64_t ALint64SOFT;$/;"	t
ALshort	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef short ALshort;$/;"	t
ALsizei	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef int ALsizei;$/;"	t
ALubyte	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef unsigned char ALubyte;$/;"	t
ALuint	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef unsigned int ALuint;$/;"	t
ALuint64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef uint64_t ALuint64SOFT;$/;"	t
ALushort	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef unsigned short ALushort;$/;"	t
ALvoid	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void ALvoid;$/;"	t
AMOTION_EVENT_ACTION_HOVER_MOVE	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	38;"	d	file:
AMOTION_EVENT_ACTION_SCROLL	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	39;"	d	file:
AND_THEN	.\include\sol\Catch\include\catch.hpp	207;"	d
AND_THEN	.\include\sol\Catch\single_include\catch.hpp	10354;"	d
AND_WHEN	.\include\sol\Catch\include\catch.hpp	205;"	d
AND_WHEN	.\include\sol\Catch\single_include\catch.hpp	10352;"	d
ANON_TEST_CASE	.\include\sol\Catch\include\catch.hpp	184;"	d
ANativeActivity_onCreate	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^void ANativeActivity_onCreate(ANativeActivity* activity, void* savedState, size_t savedStateSize)$/;"	f
ANativeActivity_onCreate	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	/^void ANativeActivity_onCreate(ANativeActivity* activity, void* savedState, size_t savedStateSize)$/;"	f
APIENTRY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	55;"	d
APIENTRY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	57;"	d
APIENTRY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	59;"	d
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	319;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	322;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	325;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	328;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	331;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	334;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	337;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	341;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	326;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	329;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	332;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	335;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	338;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	341;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	344;"	d	file:
ARCHITECTURE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	348;"	d	file:
ASENSOR_TYPE_GRAVITY	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	33;"	d	file:
ASENSOR_TYPE_LINEAR_ACCELERATION	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	34;"	d	file:
ASENSOR_TYPE_ORIENTATION	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	35;"	d	file:
ATTRIBUTE	.\src\include\trmclr.hpp	/^    ATTRIBUTE,$/;"	e	enum:trmclr::StyleTypes
AUXMARK	.\dep\Lua\src\loadlib.c	670;"	d	file:
A_space	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  A_space;$/;"	m	struct:FT_WinFNT_HeaderRec_
Aborted	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void Aborted() {}$/;"	f	class:Catch::iTchRunnerReporter
Accelerometer	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Accelerometer,    \/\/\/< Measures the raw acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Accelerometer	.\include\SFML\Window\Sensor.hpp	/^        Accelerometer,    \/\/\/< Measures the raw acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Accepted	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed later by the server$/;"	e	enum:sf::Http::Response::Status
Accepted	.\include\SFML\Network\Http.hpp	/^            Accepted       = 202, \/\/\/< The request has been accepted, but will be processed later by the server$/;"	e	enum:sf::Http::Response::Status
ActivityStates	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^struct ActivityStates$/;"	s	namespace:sf::priv
Add	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        Add,     \/\/\/< Pixel = Src * SrcFactor + Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Add	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
Add	.\include\SFML\Graphics\BlendMode.hpp	/^        Add,     \/\/\/< Pixel = Src * SrcFactor + Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Add	.\include\SFML\Window\Keyboard.hpp	/^        Add,          \/\/\/< The + key$/;"	e	enum:sf::Keyboard::Key
AddrLength	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.hpp	/^    typedef socklen_t AddrLength;$/;"	t	class:sf::priv::SocketImpl
AddrLength	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	/^    typedef int AddrLength;$/;"	t	class:sf::priv::SocketImpl
Adobe_transform	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 Adobe_transform;	\/* Color transform code from Adobe marker *\/$/;"	m	struct:jpeg_decompress_struct
Ah	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ah, Al;			\/* progressive JPEG successive approx. parms *\/$/;"	m	struct:__anon82
Ah	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_compress_struct
Ah	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_decompress_struct
Al	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ah, Al;			\/* progressive JPEG successive approx. parms *\/$/;"	m	struct:__anon82
Al	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_compress_struct
Al	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_decompress_struct
AlResource	.\dep\SFML\include\SFML\Audio\AlResource.hpp	/^class SFML_AUDIO_API AlResource$/;"	c	namespace:sf
AlResource	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^AlResource::AlResource()$/;"	f	class:sf::AlResource
AlResource	.\include\SFML\Audio\AlResource.hpp	/^class SFML_AUDIO_API AlResource$/;"	c	namespace:sf
AllOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AllOf( AllOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AllOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        class AllOf : public MatcherImpl<AllOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AllOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::Generic::AllOf<ExpressionT> AllOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers
AllOf	.\include\sol\Catch\single_include\catch.hpp	/^            AllOf( AllOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	.\include\sol\Catch\single_include\catch.hpp	/^            AllOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
AllOf	.\include\sol\Catch\single_include\catch.hpp	/^        class AllOf : public MatcherImpl<AllOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AllOf	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::Generic::AllOf<ExpressionT> AllOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers
Always	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        Always,$/;"	e	enum:Catch::ShowDurations::OrNot
AnyOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AnyOf( AnyOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AnyOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        class AnyOf : public MatcherImpl<AnyOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AnyOf	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::Generic::AnyOf<ExpressionT> AnyOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers
AnyOf	.\include\sol\Catch\single_include\catch.hpp	/^            AnyOf( AnyOf const& other ) : m_matchers( other.m_matchers ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	.\include\sol\Catch\single_include\catch.hpp	/^            AnyOf() {}$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
AnyOf	.\include\sol\Catch\single_include\catch.hpp	/^        class AnyOf : public MatcherImpl<AnyOf<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
AnyOf	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::Generic::AnyOf<ExpressionT> AnyOf( Impl::Matcher<ExpressionT> const& m1,$/;"	f	namespace:Catch::Matchers
AnyPort	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon112
AnyPort	.\include\SFML\Network\Socket.hpp	/^        AnyPort = 0 \/\/\/< Special value that tells the system to pick any available port$/;"	e	enum:sf::Socket::__anon172
Approx	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        Approx( Approx const& other )$/;"	f	class:Catch::Detail::Approx
Approx	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        explicit Approx ( double value )$/;"	f	class:Catch::Detail::Approx
Approx	.\include\sol\Catch\include\internal\catch_approx.hpp	/^    class Approx {$/;"	c	namespace:Catch::Detail
Arch	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^            enum Arch { Big, Little };$/;"	g	struct:Catch::Detail::__anon183::Endianness
Arg	.\include\sol\Catch\include\external\clara.h	/^            Arg( Detail::BoundArgFunction<ConfigT> const& _boundField ) : CommonArgProperties<ConfigT>( _boundField ) {}$/;"	f	struct:Clara::CommandLine::Arg
Arg	.\include\sol\Catch\include\external\clara.h	/^            Arg() {}$/;"	f	struct:Clara::CommandLine::Arg
Arg	.\include\sol\Catch\include\external\clara.h	/^        struct Arg : CommonArgProperties<ConfigT>, OptionArgProperties, PositionalArgProperties {$/;"	s	class:Clara::CommandLine
Arg	.\include\sol\single\sol\sol.hpp	/^				typedef R Arg;$/;"	t	struct:sol::meta::meta_detail::callable_traits
Arg	.\include\sol\sol\bind_traits.hpp	/^				typedef R Arg;$/;"	t	struct:sol::meta::meta_detail::callable_traits
ArgAutoPtr	.\include\sol\Catch\include\external\clara.h	/^        typedef CLARA_AUTO_PTR( Arg ) ArgAutoPtr;$/;"	t	class:Clara::CommandLine
ArgBuilder	.\include\sol\Catch\include\external\clara.h	/^            ArgBuilder( Arg* arg ) : m_arg( arg ) {}$/;"	f	class:Clara::CommandLine::ArgBuilder
ArgBuilder	.\include\sol\Catch\include\external\clara.h	/^        class ArgBuilder {$/;"	c	class:Clara::CommandLine
Ascender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Ascender;$/;"	m	struct:TT_HoriHeader_
Ascender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Ascender;$/;"	m	struct:TT_VertHeader_
Ascii	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
Ascii	.\include\SFML\Network\Ftp.hpp	/^        Ascii,  \/\/\/< Text mode using ASCII encoding$/;"	e	enum:sf::Ftp::TransferMode
AssertionInfo	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionInfo	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    AssertionInfo::AssertionInfo(   std::string const& _macroName,$/;"	f	class:Catch::AssertionInfo
AssertionInfo	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionInfo() {}$/;"	f	struct:Catch::AssertionInfo
AssertionInfo	.\include\sol\Catch\single_include\catch.hpp	/^    struct AssertionInfo$/;"	s	namespace:Catch
AssertionPrinter	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            AssertionPrinter( std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages )$/;"	f	class:Catch::CompactReporter::AssertionPrinter
AssertionPrinter	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        class AssertionPrinter {$/;"	c	struct:Catch::CompactReporter
AssertionPrinter	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            AssertionPrinter( std::ostream& _stream, AssertionStats const& _stats, bool _printInfoMessages )$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
AssertionPrinter	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        class AssertionPrinter {$/;"	c	struct:Catch::ConsoleReporter
AssertionResult	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResult	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    AssertionResult::AssertionResult( AssertionInfo const& info, AssertionResultData const& data )$/;"	f	class:Catch::AssertionResult
AssertionResult	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    AssertionResult::AssertionResult() {}$/;"	f	class:Catch::AssertionResult
AssertionResult	.\include\sol\Catch\single_include\catch.hpp	/^    class AssertionResult {$/;"	c	namespace:Catch
AssertionResultData	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        AssertionResultData() : resultType( ResultWas::Unknown ) {}$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^    struct AssertionResultData$/;"	s	namespace:Catch
AssertionResultData	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionResultData() : resultType( ResultWas::Unknown ) {}$/;"	f	struct:Catch::AssertionResultData
AssertionResultData	.\include\sol\Catch\single_include\catch.hpp	/^    struct AssertionResultData$/;"	s	namespace:Catch
AssertionStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        AssertionStats( AssertionResult const& _assertionResult,$/;"	f	struct:Catch::AssertionStats
AssertionStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct AssertionStats {$/;"	s	namespace:Catch
Assertions	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            typedef std::vector<AssertionStats> Assertions;$/;"	t	struct:Catch::CumulativeReporterBase::SectionNode
AtomMap	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^    typedef std::map<std::string, xcb_atom_t> AtomMap;$/;"	t	namespace:__anon144	file:
Attribute	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    enum Attribute$/;"	g	struct:sf::ContextSettings
Attribute	.\include\SFML\Window\ContextSettings.hpp	/^    enum Attribute$/;"	g	struct:sf::ContextSettings
Attribute	.\src\include\trmclr.hpp	/^struct Attribute : Style$/;"	s	namespace:trmclr
AudioDevice	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^AudioDevice::AudioDevice()$/;"	f	class:sf::priv::AudioDevice
AudioDevice	.\dep\SFML\src\SFML\Audio\AudioDevice.hpp	/^class AudioDevice$/;"	c	namespace:sf::priv
AutoReg	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    AutoReg::AutoReg$/;"	f	class:Catch::AutoReg
AutoReg	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    AutoReg$/;"	f	struct:Catch::AutoReg
AutoReg	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
AutoReg	.\include\sol\Catch\single_include\catch.hpp	/^    AutoReg$/;"	f	struct:Catch::AutoReg
AutoReg	.\include\sol\Catch\single_include\catch.hpp	/^struct AutoReg {$/;"	s	namespace:Catch
AutoTestReg	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    AutoTestReg() {$/;"	f	struct:AutoTestReg
AutoTestReg	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^struct AutoTestReg {$/;"	s	file:
Awkward	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct Awkward$/;"	s	file:
Axis	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
Axis	.\include\SFML\Window\Joystick.hpp	/^    enum Axis$/;"	g	class:sf::Joystick
AxisCount	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon115
AxisCount	.\include\SFML\Window\Joystick.hpp	/^        AxisCount   = 8   \/\/\/< Maximum number of supported axes$/;"	e	enum:sf::Joystick::__anon175
AxisMap	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    typedef std::map<sf::Joystick::Axis, IOHIDElementRef> AxisMap;$/;"	t	class:sf::priv::JoystickImpl
B	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
B	.\include\SFML\Window\Keyboard.hpp	/^        B,            \/\/\/< The B key$/;"	e	enum:sf::Keyboard::Key
B	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace B {$/;"	n	file:
BACKGROUND	.\src\include\trmclr.hpp	/^    BACKGROUND,$/;"	e	enum:trmclr::StyleTypes
BASIC_STACK_SIZE	.\dep\Lua\src\lstate.h	50;"	d
BASIC_STACK_SIZE	.\include\lua\lstate.h	50;"	d
BDF_PROPERTY_TYPE_ATOM	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    BDF_PROPERTY_TYPE_ATOM     = 1,$/;"	e	enum:BDF_PropertyType_
BDF_PROPERTY_TYPE_CARDINAL	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    BDF_PROPERTY_TYPE_CARDINAL = 3$/;"	e	enum:BDF_PropertyType_
BDF_PROPERTY_TYPE_INTEGER	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    BDF_PROPERTY_TYPE_INTEGER  = 2,$/;"	e	enum:BDF_PropertyType_
BDF_PROPERTY_TYPE_NONE	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    BDF_PROPERTY_TYPE_NONE     = 0,$/;"	e	enum:BDF_PropertyType_
BDF_Property	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^  typedef struct BDF_PropertyRec_*  BDF_Property;$/;"	t	typeref:struct:BDF_PropertyRec_
BDF_PropertyRec	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^  } BDF_PropertyRec;$/;"	t	typeref:struct:BDF_PropertyRec_
BDF_PropertyRec_	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^  typedef struct  BDF_PropertyRec_$/;"	s
BDF_PropertyType	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^  } BDF_PropertyType;$/;"	t	typeref:enum:BDF_PropertyType_
BDF_PropertyType_	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^  typedef enum  BDF_PropertyType_$/;"	g
BITRK	.\dep\Lua\src\lopcodes.h	134;"	d
BITRK	.\include\lua\lopcodes.h	134;"	d
BITS_IN_JSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	24;"	d
BIT_ISCOLLECTABLE	.\dep\Lua\src\lobject.h	63;"	d
BIT_ISCOLLECTABLE	.\include\lua\lobject.h	63;"	d
BLACK	.\src\include\trmclr.hpp	/^        BLACK           =  40 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
BLACK	.\src\include\trmclr.hpp	/^        BLACK           = 30 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
BLACKBIT	.\dep\Lua\src\lgc.h	80;"	d
BLACKBIT	.\include\lua\lgc.h	80;"	d
BLINK	.\src\include\trmclr.hpp	/^        BLINK       = 0b100000      << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
BLOCK_SMOOTHING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	298;"	d
BLUE	.\src\include\trmclr.hpp	/^        BLUE            =  44 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
BLUE	.\src\include\trmclr.hpp	/^        BLUE            = 34 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
BMP_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	33;"	d
BOLD	.\src\include\trmclr.hpp	/^        BOLD        = 0b10          << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
BUILDDIR	.\include\sol\docs\make.bat	/^set BUILDDIR=build$/;"	v
B_space	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  B_space;$/;"	m	struct:FT_WinFNT_HeaderRec_
BackSlash	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        BackSlash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
BackSlash	.\include\SFML\Window\Keyboard.hpp	/^        BackSlash,    \/\/\/< The \\ key$/;"	e	enum:sf::Keyboard::Key
BackSpace	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        BackSpace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
BackSpace	.\include\SFML\Window\Keyboard.hpp	/^        BackSpace,    \/\/\/< The Backspace key$/;"	e	enum:sf::Keyboard::Key
Background	.\src\include\trmclr.hpp	/^struct Background : Style$/;"	s	namespace:trmclr
BadCommandSequence	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadCommandSequence	.\include\SFML\Network\Ftp.hpp	/^            BadCommandSequence      = 503, \/\/\/< Bad sequence of commands$/;"	e	enum:sf::Ftp::Response::Status
BadGateway	.\dep\SFML\include\SFML\Network\Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the source server$/;"	e	enum:sf::Http::Response::Status
BadGateway	.\include\SFML\Network\Http.hpp	/^            BadGateway          = 502, \/\/\/< The gateway server has received an error from the source server$/;"	e	enum:sf::Http::Response::Status
BadRelops	.\include\sol\Optional\test_optional.cpp	/^struct BadRelops$/;"	s	file:
BadRequest	.\dep\SFML\include\SFML\Network\Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (syntax error)$/;"	e	enum:sf::Http::Response::Status
BadRequest	.\include\SFML\Network\Http.hpp	/^            BadRequest          = 400, \/\/\/< The server couldn't understand the request (syntax error)$/;"	e	enum:sf::Http::Response::Status
Base	.\include\sol\test_usertypes.cpp	/^	Base(int a_num) : m_num(a_num) { }$/;"	f	class:Base
Base	.\include\sol\test_usertypes.cpp	/^class Base {$/;"	c	file:
BetweenGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    BetweenGenerator( T from, T to ) : m_from( from ), m_to( to ){}$/;"	f	class:Catch::BetweenGenerator
BetweenGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^class BetweenGenerator : public IGenerator<T> {$/;"	c	namespace:Catch
Big	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^            enum Arch { Big, Little };$/;"	e	enum:Catch::Detail::__anon183::Endianness::Arch
BinOpr	.\dep\Lua\src\lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	.\dep\Lua\src\lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
BinOpr	.\include\lua\lcode.h	/^typedef enum BinOpr {$/;"	g
BinOpr	.\include\lua\lcode.h	/^} BinOpr;$/;"	t	typeref:enum:BinOpr
Binary	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Binary	.\include\SFML\Network\Ftp.hpp	/^        Binary, \/\/\/< Binary mode (file is transfered as a sequence of bytes)$/;"	e	enum:sf::Ftp::TransferMode
Bits	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	g	namespace:EnumBitFieldTests	file:
Black	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color
Black	.\include\SFML\Graphics\Color.hpp	/^    static const Color Black;       \/\/\/< Black predefined color$/;"	m	class:sf::Color
BlendMode	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^struct SFML_GRAPHICS_API BlendMode$/;"	s	namespace:sf
BlendMode	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^BlendMode::BlendMode() :$/;"	f	class:sf::BlendMode
BlendMode	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^BlendMode::BlendMode(Factor colorSourceFactor, Factor colorDestinationFactor,$/;"	f	class:sf::BlendMode
BlendMode	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^BlendMode::BlendMode(Factor sourceFactor, Factor destinationFactor, Equation blendEquation) :$/;"	f	class:sf::BlendMode
BlendMode	.\include\SFML\Graphics\BlendMode.hpp	/^struct SFML_GRAPHICS_API BlendMode$/;"	s	namespace:sf
BlockCnt	.\dep\Lua\src\lparser.c	/^typedef struct BlockCnt {$/;"	s	file:
BlockCnt	.\dep\Lua\src\lparser.c	/^} BlockCnt;$/;"	t	typeref:struct:BlockCnt	file:
Blue	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color
Blue	.\include\SFML\Graphics\Color.hpp	/^    static const Color Blue;        \/\/\/< Blue predefined color$/;"	m	class:sf::Color
Blue	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Blue,$/;"	e	enum:Catch::Colour::Code
Bold	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^        Bold          = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
Bold	.\include\SFML\Graphics\Text.hpp	/^        Bold          = 1 << 0, \/\/\/< Bold characters$/;"	e	enum:sf::Text::Style
BoolType	.\dep\SFML\include\SFML\Network\Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet
BoolType	.\include\SFML\Network\Packet.hpp	/^    typedef bool (Packet::*BoolType)(std::size_t);$/;"	t	class:sf::Packet
Boolable	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    explicit Boolable( bool value ) : m_value( value ) {}$/;"	f	struct:Boolable
Boolable	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct Boolable$/;"	s	file:
BorgType	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct BorgType {$/;"	s	namespace:Catch::Detail
BorgType	.\include\sol\Catch\single_include\catch.hpp	/^    struct BorgType {$/;"	s	namespace:Catch::Detail
BoundArgFunction	.\include\sol\Catch\include\external\clara.h	/^            BoundArgFunction( BoundArgFunction const& other ) : functionObj( other.functionObj ? other.functionObj->clone() : CLARA_NULL ) {}$/;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	.\include\sol\Catch\include\external\clara.h	/^            BoundArgFunction( IArgFunction<ConfigT>* _functionObj ) : functionObj( _functionObj ) {}$/;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	.\include\sol\Catch\include\external\clara.h	/^            BoundArgFunction() : functionObj( CLARA_NULL ) {}$/;"	f	class:Clara::Detail::BoundArgFunction
BoundArgFunction	.\include\sol\Catch\include\external\clara.h	/^        class BoundArgFunction {$/;"	c	namespace:Clara::Detail
BoundBinaryFunction	.\include\sol\Catch\include\external\clara.h	/^            BoundBinaryFunction( void (*_function)( C&, T ) ) : function( _function ) {}$/;"	f	struct:Clara::Detail::BoundBinaryFunction
BoundBinaryFunction	.\include\sol\Catch\include\external\clara.h	/^        struct BoundBinaryFunction : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundDataMember	.\include\sol\Catch\include\external\clara.h	/^            BoundDataMember( M C::* _member ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundDataMember
BoundDataMember	.\include\sol\Catch\include\external\clara.h	/^        struct BoundDataMember : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundNullaryMethod	.\include\sol\Catch\include\external\clara.h	/^            BoundNullaryMethod( void (C::*_member)() ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundNullaryMethod
BoundNullaryMethod	.\include\sol\Catch\include\external\clara.h	/^        struct BoundNullaryMethod : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundUnaryFunction	.\include\sol\Catch\include\external\clara.h	/^            BoundUnaryFunction( void (*_function)( C& ) ) : function( _function ) {}$/;"	f	struct:Clara::Detail::BoundUnaryFunction
BoundUnaryFunction	.\include\sol\Catch\include\external\clara.h	/^        struct BoundUnaryFunction : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
BoundUnaryMethod	.\include\sol\Catch\include\external\clara.h	/^            BoundUnaryMethod( void (C::*_member)( M ) ) : member( _member ) {}$/;"	f	struct:Clara::Detail::BoundUnaryMethod
BoundUnaryMethod	.\include\sol\Catch\include\external\clara.h	/^        struct BoundUnaryMethod : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
Branch	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^            Branch,$/;"	e	enum:Catch::RunningSection::State
Bright	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Bright = 0x10,$/;"	e	enum:Catch::Colour::Code
BrightGreen	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            BrightGreen = Bright | Green,$/;"	e	enum:Catch::Colour::Code
BrightRed	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            BrightRed = Bright | Red,$/;"	e	enum:Catch::Colour::Code
BrightWhite	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            BrightWhite = Bright | White,$/;"	e	enum:Catch::Colour::Code
Broadcast	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages to everyone on a local network)$/;"	m	class:sf::IpAddress
Broadcast	.\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress Broadcast; \/\/\/< The "broadcast" address (for sending UDP messages to everyone on a local network)$/;"	m	class:sf::IpAddress
BufferCount	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^        BufferCount = 3 \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon110
BufferCount	.\include\SFML\Audio\SoundStream.hpp	/^        BufferCount = 3 \/\/\/< Number of audio buffers used by the streaming loop$/;"	e	enum:sf::SoundStream::__anon170
Button	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
Button	.\include\SFML\Window\Mouse.hpp	/^    enum Button$/;"	g	class:sf::Mouse
ButtonCount	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon115
ButtonCount	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
ButtonCount	.\include\SFML\Window\Joystick.hpp	/^        ButtonCount = 32, \/\/\/< Maximum number of supported buttons$/;"	e	enum:sf::Joystick::__anon175
ButtonCount	.\include\SFML\Window\Mouse.hpp	/^        ButtonCount \/\/\/< Keep last -- the total number of mouse buttons$/;"	e	enum:sf::Mouse::Button
ButtonsVector	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    typedef std::vector<IOHIDElementRef>                  ButtonsVector;$/;"	t	class:sf::priv::JoystickImpl
BySectionInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^			BySectionInfo( BySectionInfo const& other ) : m_other( other.m_other ) {}$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo
BySectionInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            BySectionInfo( SectionInfo const& other ) : m_other( other ) {}$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo
BySectionInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        struct BySectionInfo {$/;"	s	struct:Catch::CumulativeReporterBase
C	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
C	.\include\SFML\Window\Keyboard.hpp	/^        C,            \/\/\/< The C key$/;"	e	enum:sf::Keyboard::Key
CAPTURE	.\include\sol\Catch\include\catch.hpp	164;"	d
CAP_POSITION	.\dep\Lua\src\lstrlib.c	211;"	d	file:
CAP_UNFINISHED	.\dep\Lua\src\lstrlib.c	210;"	d	file:
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1244;"	d
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1262;"	d
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3925;"	d
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3938;"	d
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3942;"	d
CASE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3955;"	d
CAT	.\include\sol\Optional\test_optional.cpp	22;"	d	file:
CAT2	.\include\sol\Optional\test_optional.cpp	21;"	d	file:
CATCH_AND_THEN	.\include\sol\Catch\include\catch.hpp	134;"	d
CATCH_AND_THEN	.\include\sol\Catch\single_include\catch.hpp	10281;"	d
CATCH_AND_WHEN	.\include\sol\Catch\include\catch.hpp	132;"	d
CATCH_AND_WHEN	.\include\sol\Catch\single_include\catch.hpp	10279;"	d
CATCH_ANON_TEST_CASE	.\include\sol\Catch\include\catch.hpp	115;"	d
CATCH_ANON_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	10262;"	d
CATCH_ARC_ENABLED	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	14;"	d
CATCH_ARC_ENABLED	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	16;"	d
CATCH_ARC_ENABLED	.\include\sol\Catch\single_include\catch.hpp	1469;"	d
CATCH_ARC_STRONG	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	32;"	d
CATCH_ARC_STRONG	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	48;"	d
CATCH_ARC_STRONG	.\include\sol\Catch\single_include\catch.hpp	1487;"	d
CATCH_ARC_STRONG	.\include\sol\Catch\single_include\catch.hpp	1503;"	d
CATCH_AUTO_PTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	215;"	d
CATCH_AUTO_PTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	217;"	d
CATCH_AUTO_PTR	.\include\sol\Catch\single_include\catch.hpp	275;"	d
CATCH_AUTO_PTR	.\include\sol\Catch\single_include\catch.hpp	277;"	d
CATCH_BREAK_INTO_DEBUGGER	.\include\sol\Catch\include\internal\catch_debugger.h	28;"	d
CATCH_BREAK_INTO_DEBUGGER	.\include\sol\Catch\include\internal\catch_debugger.h	46;"	d
CATCH_BREAK_INTO_DEBUGGER	.\include\sol\Catch\single_include\catch.hpp	1976;"	d
CATCH_BREAK_INTO_DEBUGGER	.\include\sol\Catch\single_include\catch.hpp	1994;"	d
CATCH_CAPTURE	.\include\sol\Catch\include\catch.hpp	95;"	d
CATCH_CAPTURE	.\include\sol\Catch\single_include\catch.hpp	10242;"	d
CATCH_CHECK	.\include\sol\Catch\include\catch.hpp	78;"	d
CATCH_CHECK	.\include\sol\Catch\single_include\catch.hpp	10225;"	d
CATCH_CHECKED_ELSE	.\include\sol\Catch\include\catch.hpp	81;"	d
CATCH_CHECKED_ELSE	.\include\sol\Catch\single_include\catch.hpp	10228;"	d
CATCH_CHECKED_IF	.\include\sol\Catch\include\catch.hpp	80;"	d
CATCH_CHECKED_IF	.\include\sol\Catch\single_include\catch.hpp	10227;"	d
CATCH_CHECK_FALSE	.\include\sol\Catch\include\catch.hpp	79;"	d
CATCH_CHECK_FALSE	.\include\sol\Catch\single_include\catch.hpp	10226;"	d
CATCH_CHECK_NOFAIL	.\include\sol\Catch\include\catch.hpp	82;"	d
CATCH_CHECK_NOFAIL	.\include\sol\Catch\single_include\catch.hpp	10229;"	d
CATCH_CHECK_NOTHROW	.\include\sol\Catch\include\catch.hpp	87;"	d
CATCH_CHECK_NOTHROW	.\include\sol\Catch\single_include\catch.hpp	10234;"	d
CATCH_CHECK_THROWS	.\include\sol\Catch\include\catch.hpp	84;"	d
CATCH_CHECK_THROWS	.\include\sol\Catch\single_include\catch.hpp	10231;"	d
CATCH_CHECK_THROWS_AS	.\include\sol\Catch\include\catch.hpp	85;"	d
CATCH_CHECK_THROWS_AS	.\include\sol\Catch\single_include\catch.hpp	10232;"	d
CATCH_CHECK_THROWS_WITH	.\include\sol\Catch\include\catch.hpp	86;"	d
CATCH_CHECK_THROWS_WITH	.\include\sol\Catch\single_include\catch.hpp	10233;"	d
CATCH_CONFIG_COLOUR_WINDOWS	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	35;"	d
CATCH_CONFIG_COLOUR_WINDOWS	.\include\sol\Catch\single_include\catch.hpp	6912;"	d
CATCH_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_config.hpp	23;"	d
CATCH_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	3425;"	d
CATCH_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	168;"	d
CATCH_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	229;"	d
CATCH_CONFIG_CPP11_IS_ENUM	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	171;"	d
CATCH_CONFIG_CPP11_IS_ENUM	.\include\sol\Catch\single_include\catch.hpp	232;"	d
CATCH_CONFIG_CPP11_LONG_LONG	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	180;"	d
CATCH_CONFIG_CPP11_LONG_LONG	.\include\sol\Catch\single_include\catch.hpp	241;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	165;"	d
CATCH_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	226;"	d
CATCH_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	162;"	d
CATCH_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	223;"	d
CATCH_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	183;"	d
CATCH_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	244;"	d
CATCH_CONFIG_CPP11_TUPLE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	174;"	d
CATCH_CONFIG_CPP11_TUPLE	.\include\sol\Catch\single_include\catch.hpp	235;"	d
CATCH_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	186;"	d
CATCH_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	247;"	d
CATCH_CONFIG_MAIN	.\include\sol\Catch\include\catch_with_main.hpp	11;"	d
CATCH_CONFIG_MAIN	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	9;"	d	file:
CATCH_CONFIG_MAIN	.\include\sol\tests.cpp	1;"	d	file:
CATCH_CONFIG_PREFIX_ALL	.\include\sol\Catch\projects\SelfTest\GeneratorTests.cpp	11;"	d	file:
CATCH_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	177;"	d
CATCH_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\single_include\catch.hpp	238;"	d
CATCH_CPP11_OR_GREATER	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	120;"	d
CATCH_CPP11_OR_GREATER	.\include\sol\Catch\single_include\catch.hpp	182;"	d
CATCH_FAIL	.\include\sol\Catch\include\catch.hpp	104;"	d
CATCH_FAIL	.\include\sol\Catch\include\catch.hpp	112;"	d
CATCH_FAIL	.\include\sol\Catch\single_include\catch.hpp	10251;"	d
CATCH_GENERATE	.\include\sol\Catch\include\catch.hpp	120;"	d
CATCH_GENERATE	.\include\sol\Catch\single_include\catch.hpp	10267;"	d
CATCH_GIVEN	.\include\sol\Catch\include\catch.hpp	130;"	d
CATCH_GIVEN	.\include\sol\Catch\single_include\catch.hpp	10277;"	d
CATCH_IMPL	.\include\sol\Catch\include\catch.hpp	21;"	d
CATCH_IMPL	.\include\sol\Catch\single_include\catch.hpp	47;"	d
CATCH_INFO	.\include\sol\Catch\include\catch.hpp	92;"	d
CATCH_INFO	.\include\sol\Catch\single_include\catch.hpp	10239;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	131;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	97;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	159;"	d
CATCH_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	193;"	d
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	135;"	d
CATCH_INTERNAL_CONFIG_CPP11_IS_ENUM	.\include\sol\Catch\single_include\catch.hpp	197;"	d
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	147;"	d
CATCH_INTERNAL_CONFIG_CPP11_LONG_LONG	.\include\sol\Catch\single_include\catch.hpp	209;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	127;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	46;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	96;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	112;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	158;"	d
CATCH_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	189;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	123;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	42;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	77;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	91;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	108;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	140;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	153;"	d
CATCH_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	185;"	d
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	151;"	d
CATCH_INTERNAL_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	213;"	d
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	139;"	d
CATCH_INTERNAL_CONFIG_CPP11_TUPLE	.\include\sol\Catch\single_include\catch.hpp	201;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	154;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	92;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	154;"	d
CATCH_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	216;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	110;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	143;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\single_include\catch.hpp	172;"	d
CATCH_INTERNAL_CONFIG_VARIADIC_MACROS	.\include\sol\Catch\single_include\catch.hpp	205;"	d
CATCH_INTERNAL_ERROR	.\include\sol\Catch\include\internal\catch_common.h	138;"	d
CATCH_INTERNAL_ERROR	.\include\sol\Catch\single_include\catch.hpp	394;"	d
CATCH_INTERNAL_LINEINFO	.\include\sol\Catch\include\internal\catch_common.h	137;"	d
CATCH_INTERNAL_LINEINFO	.\include\sol\Catch\single_include\catch.hpp	393;"	d
CATCH_METHOD_AS_TEST_CASE	.\include\sol\Catch\include\catch.hpp	101;"	d
CATCH_METHOD_AS_TEST_CASE	.\include\sol\Catch\include\catch.hpp	109;"	d
CATCH_METHOD_AS_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	10248;"	d
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	192;"	d
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	195;"	d
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^        virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual ~CoutStream() CATCH_NOEXCEPT;$/;"	m	class:Catch::CoutStream
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual ~DebugOutStream() CATCH_NOEXCEPT;$/;"	m	class:Catch::DebugOutStream
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual ~FileStream() CATCH_NOEXCEPT;$/;"	m	class:Catch::FileStream
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual ~IStream() CATCH_NOEXCEPT;$/;"	m	struct:Catch::IStream
CATCH_NOEXCEPT	.\include\sol\Catch\include\internal\catch_streambuf.h	/^        virtual ~StreamBufBase() CATCH_NOEXCEPT;$/;"	m	class:Catch::StreamBufBase
CATCH_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	/^        virtual const char* what() const CATCH_NOEXCEPT;$/;"	m	class:Catch::NotImplementedException
CATCH_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	252;"	d
CATCH_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	255;"	d
CATCH_NOEXCEPT_IS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	193;"	d
CATCH_NOEXCEPT_IS	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	196;"	d
CATCH_NOEXCEPT_IS	.\include\sol\Catch\single_include\catch.hpp	253;"	d
CATCH_NOEXCEPT_IS	.\include\sol\Catch\single_include\catch.hpp	256;"	d
CATCH_NOT_IMPLEMENTED	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	34;"	d
CATCH_NOT_IMPLEMENTED	.\include\sol\Catch\single_include\catch.hpp	418;"	d
CATCH_NULL	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	201;"	d
CATCH_NULL	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	203;"	d
CATCH_NULL	.\include\sol\Catch\single_include\catch.hpp	261;"	d
CATCH_NULL	.\include\sol\Catch\single_include\catch.hpp	263;"	d
CATCH_OVERRIDE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	208;"	d
CATCH_OVERRIDE	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	210;"	d
CATCH_OVERRIDE	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual std::ostream& stream() const CATCH_OVERRIDE;$/;"	m	class:Catch::CoutStream
CATCH_OVERRIDE	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual std::ostream& stream() const CATCH_OVERRIDE;$/;"	m	class:Catch::DebugOutStream
CATCH_OVERRIDE	.\include\sol\Catch\include\internal\catch_stream.h	/^        virtual std::ostream& stream() const CATCH_OVERRIDE;$/;"	m	class:Catch::FileStream
CATCH_OVERRIDE	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        virtual ~StreamingReporterBase() CATCH_OVERRIDE;$/;"	m	struct:Catch::StreamingReporterBase
CATCH_OVERRIDE	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        virtual ~ConsoleReporter() CATCH_OVERRIDE;$/;"	m	struct:Catch::ConsoleReporter
CATCH_OVERRIDE	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        virtual ~JunitReporter() CATCH_OVERRIDE;$/;"	m	class:Catch::JunitReporter
CATCH_OVERRIDE	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        virtual ~TeamCityReporter() CATCH_OVERRIDE;$/;"	m	struct:Catch::TeamCityReporter
CATCH_OVERRIDE	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        virtual ~XmlReporter() CATCH_OVERRIDE;$/;"	m	class:Catch::XmlReporter
CATCH_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	268;"	d
CATCH_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	270;"	d
CATCH_PLATFORM_IPHONE	.\include\sol\Catch\include\internal\catch_platform.h	15;"	d
CATCH_PLATFORM_MAC	.\include\sol\Catch\include\internal\catch_platform.h	13;"	d
CATCH_PLATFORM_MAC	.\include\sol\Catch\single_include\catch.hpp	1955;"	d
CATCH_PLATFORM_WINDOWS	.\include\sol\Catch\include\internal\catch_platform.h	17;"	d
CATCH_REGISTER_LEGACY_REPORTER	.\include\sol\Catch\include\catch.hpp	118;"	d
CATCH_REGISTER_LEGACY_REPORTER	.\include\sol\Catch\single_include\catch.hpp	10265;"	d
CATCH_REGISTER_REPORTER	.\include\sol\Catch\include\catch.hpp	117;"	d
CATCH_REGISTER_REPORTER	.\include\sol\Catch\single_include\catch.hpp	10264;"	d
CATCH_REGISTER_TAG_ALIAS	.\include\sol\Catch\include\internal\catch_tag_alias.h	32;"	d
CATCH_REGISTER_TAG_ALIAS	.\include\sol\Catch\single_include\catch.hpp	2675;"	d
CATCH_REGISTER_TEST_CASE	.\include\sol\Catch\include\catch.hpp	102;"	d
CATCH_REGISTER_TEST_CASE	.\include\sol\Catch\include\catch.hpp	110;"	d
CATCH_REGISTER_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	10249;"	d
CATCH_REQUIRE	.\include\sol\Catch\include\catch.hpp	70;"	d
CATCH_REQUIRE	.\include\sol\Catch\single_include\catch.hpp	10217;"	d
CATCH_REQUIRE_FALSE	.\include\sol\Catch\include\catch.hpp	71;"	d
CATCH_REQUIRE_FALSE	.\include\sol\Catch\single_include\catch.hpp	10218;"	d
CATCH_REQUIRE_NOTHROW	.\include\sol\Catch\include\catch.hpp	76;"	d
CATCH_REQUIRE_NOTHROW	.\include\sol\Catch\single_include\catch.hpp	10223;"	d
CATCH_REQUIRE_THAT	.\include\sol\Catch\include\catch.hpp	90;"	d
CATCH_REQUIRE_THAT	.\include\sol\Catch\single_include\catch.hpp	10237;"	d
CATCH_REQUIRE_THROWS	.\include\sol\Catch\include\catch.hpp	73;"	d
CATCH_REQUIRE_THROWS	.\include\sol\Catch\single_include\catch.hpp	10220;"	d
CATCH_REQUIRE_THROWS_AS	.\include\sol\Catch\include\catch.hpp	74;"	d
CATCH_REQUIRE_THROWS_AS	.\include\sol\Catch\single_include\catch.hpp	10221;"	d
CATCH_REQUIRE_THROWS_WITH	.\include\sol\Catch\include\catch.hpp	75;"	d
CATCH_REQUIRE_THROWS_WITH	.\include\sol\Catch\single_include\catch.hpp	10222;"	d
CATCH_SCENARIO	.\include\sol\Catch\include\catch.hpp	124;"	d
CATCH_SCENARIO	.\include\sol\Catch\include\catch.hpp	127;"	d
CATCH_SCENARIO	.\include\sol\Catch\single_include\catch.hpp	10271;"	d
CATCH_SCENARIO_METHOD	.\include\sol\Catch\include\catch.hpp	125;"	d
CATCH_SCENARIO_METHOD	.\include\sol\Catch\include\catch.hpp	128;"	d
CATCH_SCENARIO_METHOD	.\include\sol\Catch\single_include\catch.hpp	10272;"	d
CATCH_SCOPED_CAPTURE	.\include\sol\Catch\include\catch.hpp	96;"	d
CATCH_SCOPED_CAPTURE	.\include\sol\Catch\single_include\catch.hpp	10243;"	d
CATCH_SCOPED_INFO	.\include\sol\Catch\include\catch.hpp	94;"	d
CATCH_SCOPED_INFO	.\include\sol\Catch\single_include\catch.hpp	10241;"	d
CATCH_SECTION	.\include\sol\Catch\include\catch.hpp	103;"	d
CATCH_SECTION	.\include\sol\Catch\include\catch.hpp	111;"	d
CATCH_SECTION	.\include\sol\Catch\single_include\catch.hpp	10250;"	d
CATCH_SUCCEED	.\include\sol\Catch\include\catch.hpp	105;"	d
CATCH_SUCCEED	.\include\sol\Catch\include\catch.hpp	113;"	d
CATCH_SUCCEED	.\include\sol\Catch\single_include\catch.hpp	10252;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_clara.h	14;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_clara.h	29;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	3566;"	d
CATCH_TEMP_CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	4574;"	d
CATCH_TEST_CASE	.\include\sol\Catch\include\catch.hpp	107;"	d
CATCH_TEST_CASE	.\include\sol\Catch\include\catch.hpp	99;"	d
CATCH_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	10246;"	d
CATCH_TEST_CASE_METHOD	.\include\sol\Catch\include\catch.hpp	100;"	d
CATCH_TEST_CASE_METHOD	.\include\sol\Catch\include\catch.hpp	108;"	d
CATCH_TEST_CASE_METHOD	.\include\sol\Catch\single_include\catch.hpp	10247;"	d
CATCH_THEN	.\include\sol\Catch\include\catch.hpp	133;"	d
CATCH_THEN	.\include\sol\Catch\single_include\catch.hpp	10280;"	d
CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\include\catch.hpp	193;"	d
CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^CATCH_TRANSLATE_EXCEPTION( CustomException& ex )$/;"	f
CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^CATCH_TRANSLATE_EXCEPTION( CustomStdException& ex )$/;"	f
CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^CATCH_TRANSLATE_EXCEPTION( double& ex )$/;"	f
CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\single_include\catch.hpp	10340;"	d
CATCH_UNSAFE_UNRETAINED	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	31;"	d
CATCH_UNSAFE_UNRETAINED	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	47;"	d
CATCH_UNSAFE_UNRETAINED	.\include\sol\Catch\single_include\catch.hpp	1486;"	d
CATCH_UNSAFE_UNRETAINED	.\include\sol\Catch\single_include\catch.hpp	1502;"	d
CATCH_WARN	.\include\sol\Catch\include\catch.hpp	93;"	d
CATCH_WARN	.\include\sol\Catch\single_include\catch.hpp	10240;"	d
CATCH_WHEN	.\include\sol\Catch\include\catch.hpp	131;"	d
CATCH_WHEN	.\include\sol\Catch\single_include\catch.hpp	10278;"	d
CCIR601_sampling	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean CCIR601_sampling;	\/* TRUE=first samples are cosited *\/$/;"	m	struct:jpeg_compress_struct
CCIR601_sampling	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean CCIR601_sampling;	\/* TRUE=first samples are cosited *\/$/;"	m	struct:jpeg_decompress_struct
CClosure	.\dep\Lua\src\lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	.\dep\Lua\src\lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CClosure	.\include\lua\lobject.h	/^typedef struct CClosure {$/;"	s
CClosure	.\include\lua\lobject.h	/^} CClosure;$/;"	t	typeref:struct:CClosure
CENTERJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	75;"	d
CENTERJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	89;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_X1	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	785;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_X2	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	788;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_X3	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	791;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_X4	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	794;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y1	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	786;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y2	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	789;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y3	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	792;"	d
CFF_CONFIG_OPTION_DARKENING_PARAMETER_Y4	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	795;"	d
CHAR_IS_UNSIGNED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	9;"	d
CHECK	.\include\sol\Catch\include\catch.hpp	147;"	d
CHECKED_ELSE	.\include\sol\Catch\include\catch.hpp	150;"	d
CHECKED_IF	.\include\sol\Catch\include\catch.hpp	149;"	d
CHECK_FALSE	.\include\sol\Catch\include\catch.hpp	148;"	d
CHECK_NOFAIL	.\include\sol\Catch\include\catch.hpp	151;"	d
CHECK_NOTHROW	.\include\sol\Catch\include\catch.hpp	156;"	d
CHECK_THAT	.\include\sol\Catch\include\catch.hpp	158;"	d
CHECK_THAT	.\include\sol\Catch\include\catch.hpp	89;"	d
CHECK_THAT	.\include\sol\Catch\single_include\catch.hpp	10236;"	d
CHECK_THROWS	.\include\sol\Catch\include\catch.hpp	153;"	d
CHECK_THROWS_AS	.\include\sol\Catch\include\catch.hpp	154;"	d
CHECK_THROWS_WITH	.\include\sol\Catch\include\catch.hpp	155;"	d
CID_FaceDict	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct CID_FaceDictRec_*  CID_FaceDict;$/;"	t	typeref:struct:CID_FaceDictRec_
CID_FaceDictRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } CID_FaceDictRec;$/;"	t	typeref:struct:CID_FaceDictRec_
CID_FaceDictRec_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  CID_FaceDictRec_$/;"	s
CID_FaceInfo	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct CID_FaceInfoRec_*  CID_FaceInfo;$/;"	t	typeref:struct:CID_FaceInfoRec_
CID_FaceInfoRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } CID_FaceInfoRec;$/;"	t	typeref:struct:CID_FaceInfoRec_
CID_FaceInfoRec_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  CID_FaceInfoRec_$/;"	s
CID_FontDict	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef CID_FaceDictRec  CID_FontDict;$/;"	t
CID_Info	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef CID_FaceInfoRec  CID_Info;$/;"	t
CIST_FRESH	.\dep\Lua\src\lstate.h	101;"	d
CIST_FRESH	.\include\lua\lstate.h	101;"	d
CIST_HOOKED	.\dep\Lua\src\lstate.h	100;"	d
CIST_HOOKED	.\include\lua\lstate.h	100;"	d
CIST_HOOKYIELD	.\dep\Lua\src\lstate.h	105;"	d
CIST_HOOKYIELD	.\include\lua\lstate.h	105;"	d
CIST_LEQ	.\dep\Lua\src\lstate.h	106;"	d
CIST_LEQ	.\include\lua\lstate.h	106;"	d
CIST_LUA	.\dep\Lua\src\lstate.h	99;"	d
CIST_LUA	.\include\lua\lstate.h	99;"	d
CIST_OAH	.\dep\Lua\src\lstate.h	98;"	d
CIST_OAH	.\include\lua\lstate.h	98;"	d
CIST_TAIL	.\dep\Lua\src\lstate.h	104;"	d
CIST_TAIL	.\include\lua\lstate.h	104;"	d
CIST_YPCALL	.\dep\Lua\src\lstate.h	103;"	d
CIST_YPCALL	.\include\lua\lstate.h	103;"	d
CLARA_AUTO_PTR	.\include\sol\Catch\include\external\clara.h	330;"	d
CLARA_AUTO_PTR	.\include\sol\Catch\single_include\catch.hpp	3877;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_clara.h	15;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_clara.h	17;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_clara.h	28;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	3567;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	3569;"	d
CLARA_CONFIG_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	4573;"	d
CLARA_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\external\clara.h	295;"	d
CLARA_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	3843;"	d
CLARA_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\external\clara.h	292;"	d
CLARA_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	3840;"	d
CLARA_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\external\clara.h	289;"	d
CLARA_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	3837;"	d
CLARA_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\include\external\clara.h	298;"	d
CLARA_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	3846;"	d
CLARA_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\external\clara.h	301;"	d
CLARA_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	3849;"	d
CLARA_CONFIG_MAIN	.\include\sol\Catch\include\catch.hpp	27;"	d
CLARA_CONFIG_MAIN	.\include\sol\Catch\include\catch.hpp	62;"	d
CLARA_CONFIG_MAIN	.\include\sol\Catch\single_include\catch.hpp	10209;"	d
CLARA_CONFIG_MAIN	.\include\sol\Catch\single_include\catch.hpp	53;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	.\include\sol\Catch\include\catch.hpp	26;"	d
CLARA_CONFIG_MAIN_NOT_DEFINED	.\include\sol\Catch\single_include\catch.hpp	52;"	d
CLARA_CPP11_OR_GREATER	.\include\sol\Catch\include\external\clara.h	263;"	d
CLARA_CPP11_OR_GREATER	.\include\sol\Catch\single_include\catch.hpp	3812;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\external\clara.h	251;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\include\external\clara.h	274;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	3801;"	d
CLARA_INTERNAL_CONFIG_CPP11_GENERATED_METHODS	.\include\sol\Catch\single_include\catch.hpp	3823;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\external\clara.h	222;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\external\clara.h	250;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\include\external\clara.h	270;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	3772;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	3800;"	d
CLARA_INTERNAL_CONFIG_CPP11_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	3819;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\external\clara.h	218;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\external\clara.h	232;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\external\clara.h	245;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\include\external\clara.h	266;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	3768;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	3782;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	3795;"	d
CLARA_INTERNAL_CONFIG_CPP11_NULLPTR	.\include\sol\Catch\single_include\catch.hpp	3815;"	d
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\include\external\clara.h	278;"	d
CLARA_INTERNAL_CONFIG_CPP11_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	3827;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\external\clara.h	246;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\include\external\clara.h	281;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	3796;"	d
CLARA_INTERNAL_CONFIG_CPP11_UNIQUE_PTR	.\include\sol\Catch\single_include\catch.hpp	3830;"	d
CLARA_NOEXCEPT	.\include\sol\Catch\include\external\clara.h	307;"	d
CLARA_NOEXCEPT	.\include\sol\Catch\single_include\catch.hpp	3854;"	d
CLARA_NOEXCEPT_IS	.\include\sol\Catch\include\external\clara.h	308;"	d
CLARA_NOEXCEPT_IS	.\include\sol\Catch\single_include\catch.hpp	3855;"	d
CLARA_NULL	.\include\sol\Catch\include\external\clara.h	316;"	d
CLARA_NULL	.\include\sol\Catch\single_include\catch.hpp	3863;"	d
CLARA_OVERRIDE	.\include\sol\Catch\include\external\clara.h	323;"	d
CLARA_OVERRIDE	.\include\sol\Catch\single_include\catch.hpp	3870;"	d
CLIBS	.\dep\Lua\src\loadlib.c	/^static const int CLIBS = 0;$/;"	v	file:
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\include\external\tbc_text_format.h	/^namespace CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE {$/;"	n
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\include\internal\catch_text.h	15;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\include\internal\catch_text.h	17;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	4757;"	d
CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	4905;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	66;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	68;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	38;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	40;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	43;"	d
CODEGEN_FUNCPTR	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	45;"	d
CODEGEN_REMOVE_FUNCPTR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	64;"	d
COLORS_H	.\src\include\Colors.h	2;"	d
COMBO	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1243;"	d
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	103;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	111;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	114;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	116;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	125;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	133;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	138;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	145;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	148;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	156;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	175;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	183;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	188;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	191;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	208;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	211;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	214;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	39;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	64;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	70;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	76;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	82;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	96;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	106;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	109;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	111;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	120;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	128;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	133;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	140;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	143;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	146;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	154;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	173;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	181;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	186;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	191;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	198;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	215;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	218;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	221;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	59;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	65;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	71;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	91;"	d	file:
COMPILER_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	98;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	105;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	119;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	126;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	134;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	140;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	149;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	14;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	158;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	177;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	194;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	199;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	20;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	40;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	53;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	72;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	78;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	85;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	90;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	98;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	100;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	114;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	121;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	129;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	135;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	147;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	156;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	15;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	175;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	193;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	201;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	206;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	35;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	48;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	60;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	67;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	73;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	80;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	85;"	d	file:
COMPILER_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	93;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	106;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	120;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	127;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	135;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	141;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	150;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	159;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	178;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	195;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	200;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	41;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	66;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	73;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	79;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	86;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	91;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	99;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	101;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	115;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	122;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	130;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	136;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	148;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	157;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	16;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	176;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	194;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	202;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	207;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	36;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	49;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	61;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	68;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	74;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	81;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	86;"	d	file:
COMPILER_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	94;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	100;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	107;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	121;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	129;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	142;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	152;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	163;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	166;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	179;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	196;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	201;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	23;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	25;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	43;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	55;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	67;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	87;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	92;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	102;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	116;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	124;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	137;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	150;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	161;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	164;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	177;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	18;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	195;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	203;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	208;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	20;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	38;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	50;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	62;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	82;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	87;"	d	file:
COMPILER_VERSION_PATCH	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	95;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	170;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	29;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	49;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	168;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	24;"	d	file:
COMPILER_VERSION_TWEAK	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	44;"	d	file:
CORE_ASSERT	.\src\include\Logger.h	159;"	d
CORE_ASSERT	.\src\include\Logger.h	64;"	d
CORE_DEBUG	.\src\include\Logger.h	104;"	d
CORE_DEBUG	.\src\include\Logger.h	156;"	d
CORE_ERROR	.\src\include\Logger.h	135;"	d
CORE_ERROR	.\src\include\Logger.h	83;"	d
CORE_FATAL	.\src\include\Logger.h	127;"	d
CORE_FATAL	.\src\include\Logger.h	74;"	d
CORE_INFO	.\src\include\Logger.h	163;"	d
CORE_LOG	.\src\include\Logger.h	111;"	d
CORE_LOG	.\src\include\Logger.h	158;"	d
CORE_VERBOSE	.\src\include\Logger.h	118;"	d
CORE_VERBOSE	.\src\include\Logger.h	157;"	d
CORE_WARN	.\src\include\Logger.h	148;"	d
CORE_WARN	.\src\include\Logger.h	97;"	d
CORE_WARNING	.\src\include\Logger.h	142;"	d
CORE_WARNING	.\src\include\Logger.h	90;"	d
CREATE_ABC	.\dep\Lua\src\lopcodes.h	116;"	d
CREATE_ABC	.\include\lua\lopcodes.h	116;"	d
CREATE_ABx	.\dep\Lua\src\lopcodes.h	121;"	d
CREATE_ABx	.\include\lua\lopcodes.h	121;"	d
CREATE_Ax	.\dep\Lua\src\lopcodes.h	125;"	d
CREATE_Ax	.\include\lua\lopcodes.h	125;"	d
CYAN	.\src\include\trmclr.hpp	/^        CYAN            =  46 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
CYAN	.\src\include\trmclr.hpp	/^        CYAN            = 36 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
C_ARITH_CODING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	276;"	d
C_A_T_C_H_Context	.\include\sol\Catch\projects\SelfTest\PartTrackerTests.cpp	/^inline Catch::TrackerContext& C_A_T_C_H_Context() {$/;"	f
C_MAX_BLOCKS_IN_MCU	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	64;"	d
C_MULTISCAN_FILES_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	277;"	d
C_PROGRESSIVE_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	278;"	d
C_space	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  C_space;$/;"	m	struct:FT_WinFNT_HeaderRec_
CallInfo	.\dep\Lua\src\lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	.\dep\Lua\src\lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallInfo	.\include\lua\lstate.h	/^typedef struct CallInfo {$/;"	s
CallInfo	.\include\lua\lstate.h	/^} CallInfo;$/;"	t	typeref:struct:CallInfo
CallS	.\dep\Lua\src\lapi.c	/^struct CallS {  \/* data to 'f_call' *\/$/;"	s	file:
CapHeight	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  CapHeight;$/;"	m	struct:TT_PCLT_
CaseSensitive	.\include\sol\Catch\include\internal\catch_common.h	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
CaseSensitive	.\include\sol\Catch\single_include\catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	s	namespace:Catch
CasedString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity )$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
CasedString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        struct CasedString$/;"	s	namespace:Catch::Matchers::Impl::StdString
CasedString	.\include\sol\Catch\single_include\catch.hpp	/^            CasedString( std::string const& str, CaseSensitive::Choice caseSensitivity )$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
CasedString	.\include\sol\Catch\single_include\catch.hpp	/^        struct CasedString$/;"	s	namespace:Catch::Matchers::Impl::StdString
Catch	.\include\sol\Catch\include\catch_session.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_approx.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_common.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_common.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_config.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_context.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_debugger.h	/^namespace Catch{$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_debugger.hpp	/^    namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_debugger.hpp	/^    namespace Catch{$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_fatal_condition.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_generators.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_impl.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_capture.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_generators.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_registry_hub.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^namespace Catch$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_runner.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_tag_alias_registry.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_interfaces_testcase.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.h	/^namespace Catch$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^namespace Catch$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_list.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_message.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_message.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_notimplemented_exception.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_objc.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_option.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_result_builder.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_result_type.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_section.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_section.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_section_info.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_stream.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_stream.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_streambuf.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_tag_alias_registry.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_text.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_timer.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_timer.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_tostring.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_totals.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_version.h	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_version.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^namespace Catch$/;"	n
Catch	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^namespace Catch {$/;"	n
Catch	.\include\sol\Catch\projects\SelfTest\PartTrackerTests.cpp	/^namespace Catch$/;"	n	file:
Catch	.\include\sol\Catch\projects\SelfTest\ToStringPair.cpp	/^namespace Catch {$/;"	n	file:
Catch	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^namespace Catch {$/;"	n	file:
Catch	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace Catch$/;"	n	file:
Catch	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^namespace Catch$/;"	n
Catch	.\include\sol\Catch\single_include\catch.hpp	/^namespace Catch {$/;"	n
CharacterComplement	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    CharacterComplement[8];$/;"	m	struct:TT_PCLT_
CheckSum_Adjust	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Long    CheckSum_Adjust;$/;"	m	struct:TT_Header_
ChildNodes	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            typedef std::vector<Ptr<ChildNodeT> > ChildNodes;$/;"	t	struct:Catch::CumulativeReporterBase::Node
ChildSections	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            typedef std::vector<Ptr<SectionNode> > ChildSections;$/;"	t	struct:Catch::CumulativeReporterBase::SectionNode
Children	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        typedef std::vector<Ptr<ITracker> > Children;$/;"	t	class:Catch::TestCaseTracking::TrackerBase
Choice	.\include\sol\Catch\include\internal\catch_common.h	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Choice	.\include\sol\Catch\single_include\catch.hpp	/^    struct CaseSensitive { enum Choice {$/;"	g	struct:Catch::CaseSensitive
Chunk	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
Chunk	.\include\SFML\Audio\SoundStream.hpp	/^    struct Chunk$/;"	s	class:sf::SoundStream
CircleShape	.\dep\SFML\include\SFML\Graphics\CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
CircleShape	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^CircleShape::CircleShape(float radius, std::size_t pointCount) :$/;"	f	class:sf::CircleShape
CircleShape	.\include\SFML\Graphics\CircleShape.hpp	/^class SFML_GRAPHICS_API CircleShape : public Shape$/;"	c	namespace:sf
Clara	.\include\sol\Catch\include\external\clara.h	/^namespace Clara {$/;"	n
ClassName	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^class ClassName {};$/;"	c	file:
ClearExtensionVars	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static void ClearExtensionVars()$/;"	f	file:
ClearExtensionVars	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static void ClearExtensionVars(void)$/;"	f	file:
ClearExtensionVars	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static void ClearExtensionVars(void)$/;"	f	file:
ClientData	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^    struct ClientData$/;"	s	class:sf::priv::SoundFileReaderFlac
Clock	.\dep\SFML\include\SFML\System\Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
Clock	.\dep\SFML\src\SFML\System\Clock.cpp	/^Clock::Clock() :$/;"	f	class:sf::Clock
Clock	.\include\SFML\System\Clock.hpp	/^class SFML_SYSTEM_API Clock$/;"	c	namespace:sf
ClockImpl	.\dep\SFML\src\SFML\System\Unix\ClockImpl.hpp	/^class ClockImpl$/;"	c	namespace:sf::priv
ClockImpl	.\dep\SFML\src\SFML\System\Win32\ClockImpl.hpp	/^class ClockImpl$/;"	c	namespace:sf::priv
Close	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Title bar + close button$/;"	e	enum:sf::Style::__anon116
Close	.\include\SFML\Window\WindowStyle.hpp	/^        Close      = 1 << 2, \/\/\/< Title bar + close button$/;"	e	enum:sf::Style::__anon176
CloseConnection	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^void CloseConnection(xcb_connection_t* connection)$/;"	f	namespace:sf::priv
CloseDisplay	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^void CloseDisplay(Display* display)$/;"	f	namespace:sf::priv
Closed	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
Closed	.\include\SFML\Window\Event.hpp	/^        Closed,                 \/\/\/< The window requested to be closed (no data)$/;"	e	enum:sf::Event::EventType
ClosingConnection	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingConnection	.\include\SFML\Network\Ftp.hpp	/^            ClosingConnection     = 221, \/\/\/< Service closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action successful$/;"	e	enum:sf::Ftp::Response::Status
ClosingDataConnection	.\include\SFML\Network\Ftp.hpp	/^            ClosingDataConnection = 226, \/\/\/< Closing data connection, requested file action successful$/;"	e	enum:sf::Ftp::Response::Status
Closure	.\dep\Lua\src\lobject.h	/^typedef union Closure {$/;"	u
Closure	.\dep\Lua\src\lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
Closure	.\include\lua\lobject.h	/^typedef union Closure {$/;"	u
Closure	.\include\lua\lobject.h	/^} Closure;$/;"	t	typeref:union:Closure
ClosureHeader	.\dep\Lua\src\lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	.\dep\Lua\src\lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	.\dep\Lua\src\lobject.h	443;"	d
ClosureHeader	.\include\lua\lobject.h	/^  ClosureHeader;$/;"	m	struct:CClosure
ClosureHeader	.\include\lua\lobject.h	/^  ClosureHeader;$/;"	m	struct:LClosure
ClosureHeader	.\include\lua\lobject.h	443;"	d
Code	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^        enum Code {$/;"	g	struct:Catch::Colour
Color	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Color	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color::Color() :$/;"	f	class:sf::Color
Color	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color::Color(Uint32 color) :$/;"	f	class:sf::Color
Color	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color::Color(Uint8 red, Uint8 green, Uint8 blue, Uint8 alpha) :$/;"	f	class:sf::Color
Color	.\include\SFML\Graphics\Color.hpp	/^class SFML_GRAPHICS_API Color$/;"	c	namespace:sf
Color	.\src\include\Color.h	/^	Color(byte r, byte g, byte b, byte a) : $/;"	f	struct:Color
Color	.\src\include\Color.h	/^struct Color {$/;"	s
Colour	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^    struct Colour {$/;"	s	namespace:Catch
Colour	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    Colour::Colour( Code _colourCode ) : m_moved( false ) { use( _colourCode ); }$/;"	f	class:Catch::Colour
Colour	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    Colour::Colour( Colour const& _other ) : m_moved( false ) { const_cast<Colour&>( _other ).m_moved = true; }$/;"	f	class:Catch::Colour
ColourIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^        ColourIndex( Colour::Code _colour, std::size_t _fromIndex, std::size_t _toIndex )$/;"	f	struct:ColourString::ColourIndex
ColourIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    struct ColourIndex {$/;"	s	class:ColourString	file:
ColourString	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    ColourString( std::string const& _string )$/;"	f	class:ColourString
ColourString	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    ColourString( std::string const& _string, std::vector<ColourIndex> const& _colours )$/;"	f	class:ColourString
ColourString	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^class ColourString {$/;"	c	file:
Combined	.\include\sol\Optional\test_optional.cpp	/^  constexpr Combined() : m{5}, n{6} {}$/;"	f	struct:Combined
Combined	.\include\sol\Optional\test_optional.cpp	/^  constexpr Combined(int m, int n) : m{m}, n{n} {}$/;"	f	struct:Combined
Combined	.\include\sol\Optional\test_optional.cpp	/^struct Combined$/;"	s	file:
Comma	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
Comma	.\include\SFML\Window\Keyboard.hpp	/^        Comma,        \/\/\/< The , key$/;"	e	enum:sf::Keyboard::Key
CommandLine	.\include\sol\Catch\include\external\clara.h	/^        CommandLine( CommandLine const& other )$/;"	f	class:Clara::CommandLine
CommandLine	.\include\sol\Catch\include\external\clara.h	/^        CommandLine()$/;"	f	class:Clara::CommandLine
CommandLine	.\include\sol\Catch\include\external\clara.h	/^    class CommandLine {$/;"	c	namespace:Clara
CommandNotImplemented	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandNotImplemented	.\include\SFML\Network\Ftp.hpp	/^            CommandNotImplemented   = 502, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
CommandUnknown	.\include\SFML\Network\Ftp.hpp	/^            CommandUnknown          = 500, \/\/\/< Syntax error, command unrecognized$/;"	e	enum:sf::Ftp::Response::Status
CommonArgProperties	.\include\sol\Catch\include\external\clara.h	/^        CommonArgProperties( Detail::BoundArgFunction<ConfigT> const& _boundField ) : boundField( _boundField ) {}$/;"	f	struct:Clara::CommonArgProperties
CommonArgProperties	.\include\sol\Catch\include\external\clara.h	/^        CommonArgProperties() {}$/;"	f	struct:Clara::CommonArgProperties
CommonArgProperties	.\include\sol\Catch\include\external\clara.h	/^    struct CommonArgProperties {$/;"	s	namespace:Clara
CommonHeader	.\dep\Lua\src\lobject.h	/^  CommonHeader;$/;"	m	struct:GCObject
CommonHeader	.\dep\Lua\src\lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	.\dep\Lua\src\lobject.h	/^  CommonHeader;$/;"	m	struct:TString
CommonHeader	.\dep\Lua\src\lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	.\dep\Lua\src\lobject.h	/^  CommonHeader;$/;"	m	struct:Udata
CommonHeader	.\dep\Lua\src\lobject.h	79;"	d
CommonHeader	.\dep\Lua\src\lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
CommonHeader	.\include\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:GCObject
CommonHeader	.\include\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:Proto
CommonHeader	.\include\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:TString
CommonHeader	.\include\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:Table
CommonHeader	.\include\lua\lobject.h	/^  CommonHeader;$/;"	m	struct:Udata
CommonHeader	.\include\lua\lobject.h	79;"	d
CommonHeader	.\include\lua\lstate.h	/^  CommonHeader;$/;"	m	struct:lua_State
CompactReporter	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        CompactReporter( ReporterConfig const& _config )$/;"	f	struct:Catch::CompactReporter
CompactReporter	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^    struct CompactReporter : StreamingReporterBase {$/;"	s	namespace:Catch
CompletedCycle	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            CompletedCycle$/;"	e	enum:Catch::TestCaseTracking::TrackerContext::RunState
CompletedSuccessfully	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            CompletedSuccessfully,$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
CompositeGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator( CompositeGenerator& other )$/;"	f	class:Catch::CompositeGenerator
CompositeGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator() : m_totalSize( 0 ) {}$/;"	f	class:Catch::CompositeGenerator
CompositeGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^class CompositeGenerator {$/;"	c	namespace:Catch
Config	.\include\sol\Catch\include\internal\catch_config.hpp	/^        Config( ConfigData const& data )$/;"	f	class:Catch::Config
Config	.\include\sol\Catch\include\internal\catch_config.hpp	/^        Config()$/;"	f	class:Catch::Config
Config	.\include\sol\Catch\include\internal\catch_config.hpp	/^    class Config : public SharedImpl<IConfig> {$/;"	c	namespace:Catch
ConfigData	.\include\sol\Catch\include\internal\catch_config.hpp	/^        ConfigData()$/;"	f	struct:Catch::ConfigData
ConfigData	.\include\sol\Catch\include\internal\catch_config.hpp	/^    struct ConfigData {$/;"	s	namespace:Catch
ConnectionCache	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^        ConnectionCache() : connected(false) {}$/;"	f	struct:__anon152::ConnectionCache
ConnectionCache	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^    struct ConnectionCache$/;"	s	namespace:__anon152	file:
ConnectionClosed	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML when the low-level socket connection is unexpectedly closed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionClosed	.\include\SFML\Network\Ftp.hpp	/^            ConnectionClosed = 1002, \/\/\/< Not part of the FTP standard, generated by SFML when the low-level socket connection is unexpectedly closed$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML when the low-level socket connection with the server fails$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	.\dep\SFML\include\SFML\Network\Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConnectionFailed	.\include\SFML\Network\Ftp.hpp	/^            ConnectionFailed = 1001, \/\/\/< Not part of the FTP standard, generated by SFML when the low-level socket connection with the server fails$/;"	e	enum:sf::Ftp::Response::Status
ConnectionFailed	.\include\SFML\Network\Http.hpp	/^            ConnectionFailed = 1001  \/\/\/< Connection with server failed$/;"	e	enum:sf::Http::Response::Status
ConsControl	.\dep\Lua\src\lparser.c	/^struct ConsControl {$/;"	s	file:
ConsoleColors	.\src\include\Colors.h	/^namespace ConsoleColors {$/;"	n
ConsoleColors	.\src\src\Colors.cpp	/^namespace ConsoleColors {$/;"	n	file:
ConsoleReporter	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        ConsoleReporter( ReporterConfig const& _config )$/;"	f	struct:Catch::ConsoleReporter
ConsoleReporter	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^    struct ConsoleReporter : StreamingReporterBase {$/;"	s	namespace:Catch
ConstIterator	.\dep\SFML\include\SFML\System\String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator type$/;"	t	class:sf::String
ConstIterator	.\include\SFML\System\String.hpp	/^    typedef std::basic_string<Uint32>::const_iterator ConstIterator; \/\/\/< Read-only iterator type$/;"	t	class:sf::String
Contains	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Contains( Contains const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Contains( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        struct Contains : MatcherImpl<Contains, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Contains	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::Contains    Contains( const char* substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Contains	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::Contains    Contains( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Contains	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                Contains( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains
Contains	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            Contains( NSString* substr ){ return Impl::NSStringMatchers::Contains( substr ); }$/;"	f	namespace:Catch::Matchers
Contains	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            struct Contains : StringHolder<Contains> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
Contains	.\include\sol\Catch\single_include\catch.hpp	/^            Contains( Contains const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	.\include\sol\Catch\single_include\catch.hpp	/^            Contains( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
Contains	.\include\sol\Catch\single_include\catch.hpp	/^        struct Contains : MatcherImpl<Contains, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Contains	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::Contains    Contains( const char* substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Contains	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::Contains    Contains( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Context	.\dep\SFML\include\SFML\Window\Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
Context	.\dep\SFML\src\SFML\Window\Context.cpp	/^Context::Context()$/;"	f	class:sf::Context
Context	.\dep\SFML\src\SFML\Window\Context.cpp	/^Context::Context(const ContextSettings& settings, unsigned int width, unsigned int height)$/;"	f	class:sf::Context
Context	.\include\SFML\Window\Context.hpp	/^class SFML_WINDOW_API Context : GlResource, NonCopyable$/;"	c	namespace:sf
Context	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        Context() : m_config( CATCH_NULL ), m_runner( CATCH_NULL ), m_resultCapture( CATCH_NULL ) {}$/;"	f	class:Catch::Context
Context	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^    class Context : public IMutableContext {$/;"	c	namespace:Catch
ContextSettings	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default) :$/;"	f	struct:sf::ContextSettings
ContextSettings	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ContextSettings	.\include\SFML\Window\ContextSettings.hpp	/^    explicit ContextSettings(unsigned int depth = 0, unsigned int stencil = 0, unsigned int antialiasing = 0, unsigned int major = 1, unsigned int minor = 1, unsigned int attributes = Default) :$/;"	f	struct:sf::ContextSettings
ContextSettings	.\include\SFML\Window\ContextSettings.hpp	/^struct ContextSettings$/;"	s	namespace:sf
ContextType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^        typedef sf::priv::EaglContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^        typedef sf::priv::EglContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^        typedef sf::priv::GlxContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^        typedef sf::priv::SFContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^        typedef sf::priv::WglContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    typedef sf::priv::EglContext ContextType;$/;"	t	file:
ContextType	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    typedef sf::priv::GlxContext ContextType;$/;"	t	file:
ContinueOnFailure	.\include\sol\Catch\include\internal\catch_result_type.h	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ContinueOnFailure	.\include\sol\Catch\single_include\catch.hpp	/^        ContinueOnFailure = 0x02,   \/\/ Failures fail test, but execution continues$/;"	e	enum:Catch::ResultDisposition::Flags
ConvexShape	.\dep\SFML\include\SFML\Graphics\ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
ConvexShape	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^ConvexShape::ConvexShape(std::size_t pointCount)$/;"	f	class:sf::ConvexShape
ConvexShape	.\include\SFML\Graphics\ConvexShape.hpp	/^class SFML_GRAPHICS_API ConvexShape : public Shape$/;"	c	namespace:sf
CoordinateType	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
CoordinateType	.\include\SFML\Graphics\Texture.hpp	/^    enum CoordinateType$/;"	g	class:sf::Texture
CopyableStream	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	.\include\sol\Catch\include\internal\catch_result_builder.h	/^    struct CopyableStream {$/;"	s	namespace:Catch
CopyableStream	.\include\sol\Catch\single_include\catch.hpp	/^        CopyableStream( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
CopyableStream	.\include\sol\Catch\single_include\catch.hpp	/^        CopyableStream() {}$/;"	f	struct:Catch::CopyableStream
CopyableStream	.\include\sol\Catch\single_include\catch.hpp	/^    struct CopyableStream {$/;"	s	namespace:Catch
Core	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^        Core    = 1 << 0, \/\/\/< Core attribute$/;"	e	enum:sf::ContextSettings::Attribute
Core	.\include\SFML\Window\ContextSettings.hpp	/^        Core    = 1 << 0, \/\/\/< Core attribute$/;"	e	enum:sf::ContextSettings::Attribute
Count	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon115
Count	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Count             \/\/\/< Keep last -- the total number of sensor types$/;"	e	enum:sf::Sensor::Type
Count	.\include\SFML\Window\Event.hpp	/^        Count                   \/\/\/< Keep last -- the total number of event types$/;"	e	enum:sf::Event::EventType
Count	.\include\SFML\Window\Joystick.hpp	/^        Count       = 8,  \/\/\/< Maximum number of supported joysticks$/;"	e	enum:sf::Joystick::__anon175
Count	.\include\SFML\Window\Sensor.hpp	/^        Count             \/\/\/< Keep last -- the total number of sensor types$/;"	e	enum:sf::Sensor::Type
CountedObject	.\include\sol\Optional\test_optional.cpp	/^  CountedObject(CountedObject const& rhs) : _throw(rhs._throw) { if (_throw) throw int(); }$/;"	f	struct:CountedObject
CountedObject	.\include\sol\Optional\test_optional.cpp	/^  CountedObject(bool b) : _throw(b) { ++_counter; }$/;"	f	struct:CountedObject
CountedObject	.\include\sol\Optional\test_optional.cpp	/^struct CountedObject$/;"	s	file:
Counts	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Counts() : passed( 0 ), failed( 0 ), failedButOk( 0 ) {}$/;"	f	struct:Catch::Counts
Counts	.\include\sol\Catch\include\internal\catch_totals.hpp	/^    struct Counts {$/;"	s	namespace:Catch
CoutStream	.\include\sol\Catch\include\internal\catch_stream.h	/^    class CoutStream : public IStream {$/;"	c	namespace:Catch
CoutStream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    CoutStream::CoutStream()$/;"	f	class:Catch::CoutStream
Created	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Long    Created [2];$/;"	m	struct:TT_Header_
Created	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
Created	.\include\SFML\Network\Http.hpp	/^            Created        = 201, \/\/\/< The resource has successfully been created$/;"	e	enum:sf::Http::Response::Status
CumulativeReporterBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        CumulativeReporterBase( ReporterConfig const& _config )$/;"	f	struct:Catch::CumulativeReporterBase
CumulativeReporterBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^    struct CumulativeReporterBase : SharedImpl<IStreamingReporter> {$/;"	s	namespace:Catch
CurrentDateTime	.\src\src\Logger.cpp	/^const std::string Logger::CurrentDateTime() {$/;"	f	class:Logger
CurrentGameState	.\src\include\Game.h	/^	static GameState CurrentGameState;$/;"	m	class:Game
CurrentGameState	.\src\src\Game.cpp	/^Game::GameState Game::CurrentGameState = Uninitalized;$/;"	m	class:Game	file:
CurrentTexture	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader
CurrentTexture	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^Shader::CurrentTextureType Shader::CurrentTexture;$/;"	m	class:sf::Shader	file:
CurrentTexture	.\include\SFML\Graphics\Shader.hpp	/^    static CurrentTextureType CurrentTexture;$/;"	m	class:sf::Shader
CurrentTextureType	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
CurrentTextureType	.\include\SFML\Graphics\Shader.hpp	/^    struct CurrentTextureType {};$/;"	s	class:sf::Shader
CurrentTime	.\src\src\Logger.cpp	/^const std::string Logger::CurrentTime() {$/;"	f	class:Logger
CurrentWindow	.\src\include\Game.h	/^	static Window* CurrentWindow;$/;"	m	class:Game
CurrentWindow	.\src\src\Game.cpp	/^Window* Game::CurrentWindow            = nullptr;$/;"	m	class:Game	file:
CustomException	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    CustomException( const std::string& msg )$/;"	f	class:CustomException
CustomException	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^class CustomException$/;"	c	file:
CustomStdException	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    CustomStdException( const std::string& msg )$/;"	f	class:CustomStdException
CustomStdException	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^class CustomStdException : public std::exception$/;"	c	file:
Cyan	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color
Cyan	.\include\SFML\Graphics\Color.hpp	/^    static const Color Cyan;        \/\/\/< Cyan predefined color$/;"	m	class:sf::Color
Cyan	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Cyan,$/;"	e	enum:Catch::Colour::Code
CycleState	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        enum CycleState {$/;"	g	class:Catch::TestCaseTracking::TrackerBase
D	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
D	.\include\SFML\Window\Keyboard.hpp	/^        D,            \/\/\/< The D key$/;"	e	enum:sf::Keyboard::Key
DARK_GRAY	.\src\include\trmclr.hpp	/^        DARK_GRAY       = 100 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
DARK_GRAY	.\src\include\trmclr.hpp	/^        DARK_GRAY       = 90 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
DCTSIZE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	50;"	d
DCTSIZE2	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	51;"	d
DCT_FLOAT_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	272;"	d
DCT_IFAST_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	271;"	d
DCT_ISLOW_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	270;"	d
DCT_SCALING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	279;"	d
DCT_h_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int DCT_h_scaled_size;$/;"	m	struct:__anon81
DCT_v_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int DCT_v_scaled_size;$/;"	m	struct:__anon81
DEBUG_BREAK	.\src\include\Logger.h	53;"	d
DEBUG_BREAK	.\src\include\Logger.h	55;"	d
DEBUG_BREAK	.\src\include\Logger.h	57;"	d
DEBUG_BREAK	.\src\include\Logger.h	60;"	d
DEC	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	345;"	d	file:
DEC	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	352;"	d	file:
DEFAULT	.\src\include\trmclr.hpp	/^        DEFAULT         =  49 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
DEFAULT	.\src\include\trmclr.hpp	/^        DEFAULT         = 39 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
DEFAULT	.\src\include\trmclr.hpp	/^        DEFAULT     = 0b1           << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
DIGITBIT	.\dep\Lua\src\lctype.h	40;"	d
DIGITBIT	.\include\lua\lctype.h	40;"	d
DIM	.\src\include\trmclr.hpp	/^        DIM         = 0b100         << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
DLMSG	.\dep\Lua\src\loadlib.c	250;"	d	file:
DONT_USE_B_MODE	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	42;"	d
DO_DEBUG	.\src\src\main.cpp	4;"	d	file:
D_ARITH_CODING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	293;"	d
D_MAX_BLOCKS_IN_MCU	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	66;"	d
D_MULTISCAN_FILES_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	294;"	d
D_PROGRESSIVE_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	295;"	d
Dash	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Dash,         \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Dash	.\include\SFML\Window\Keyboard.hpp	/^        Dash,         \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Data	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket
Data	.\include\SFML\Network\TcpSocket.hpp	/^        std::vector<char> Data;         \/\/\/< Data of the packet$/;"	m	struct:sf::TcpSocket::PendingPacket
DataChannel	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::DataChannel::DataChannel(Ftp& owner) :$/;"	f	class:sf::Ftp::DataChannel
DataChannel	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^class Ftp::DataChannel : NonCopyable$/;"	c	class:sf::Ftp	file:
DataConnectionAlreadyOpened	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer starting$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionAlreadyOpened	.\include\SFML\Network\Ftp.hpp	/^            DataConnectionAlreadyOpened = 125, \/\/\/< Data connection already opened, transfer starting$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionOpened	.\include\SFML\Network\Ftp.hpp	/^            DataConnectionOpened  = 225, \/\/\/< Data connection open, no transfer in progress$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
DataConnectionUnavailable	.\include\SFML\Network\Ftp.hpp	/^            DataConnectionUnavailable = 425, \/\/\/< Can't open data connection$/;"	e	enum:sf::Ftp::Response::Status
Date	.\include\sol\Optional\test_optional.cpp	/^    Date(Date&& d) : i(d.i) { d.i = 0; }$/;"	f	struct:Date
Date	.\include\sol\Optional\test_optional.cpp	/^    Date(int i) : i{i} {};$/;"	f	struct:Date
Date	.\include\sol\Optional\test_optional.cpp	/^struct Date$/;"	s	file:
Debug	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^        Debug   = 1 << 2  \/\/\/< Debug attribute$/;"	e	enum:sf::ContextSettings::Attribute
Debug	.\include\SFML\Window\ContextSettings.hpp	/^        Debug   = 1 << 2  \/\/\/< Debug attribute$/;"	e	enum:sf::ContextSettings::Attribute
DebugOutStream	.\include\sol\Catch\include\internal\catch_stream.h	/^    class DebugOutStream : public IStream {$/;"	c	namespace:Catch
DebugOutStream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    DebugOutStream::DebugOutStream()$/;"	f	class:Catch::DebugOutStream
Default	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render states$/;"	m	class:sf::RenderStates
Default	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^        Default = 0,      \/\/\/< Non-debug, compatibility context (this and the core attribute are mutually exclusive)$/;"	e	enum:sf::ContextSettings::Attribute
Default	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon116
Default	.\include\SFML\Graphics\RenderStates.hpp	/^    static const RenderStates Default; \/\/\/< Special instance holding the default render states$/;"	m	class:sf::RenderStates
Default	.\include\SFML\Window\ContextSettings.hpp	/^        Default = 0,      \/\/\/< Non-debug, compatibility context (this and the core attribute are mutually exclusive)$/;"	e	enum:sf::ContextSettings::Attribute
Default	.\include\SFML\Window\WindowStyle.hpp	/^        Default = Titlebar | Resize | Close \/\/\/< Default window style$/;"	e	enum:sf::Style::__anon176
DefaultErrStreamBuf	.\dep\SFML\src\SFML\System\Err.cpp	/^    DefaultErrStreamBuf()$/;"	f	class:__anon135::DefaultErrStreamBuf
DefaultErrStreamBuf	.\dep\SFML\src\SFML\System\Err.cpp	/^class DefaultErrStreamBuf : public std::streambuf$/;"	c	namespace:__anon135	file:
DefaultForReporter	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        DefaultForReporter,$/;"	e	enum:Catch::ShowDurations::OrNot
Delete	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Delete	.\include\SFML\Network\Http.hpp	/^            Delete \/\/\/< Request in delete mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Delete	.\include\SFML\Window\Keyboard.hpp	/^        Delete,       \/\/\/< The Delete key$/;"	e	enum:sf::Keyboard::Key
Derived	.\include\sol\test_usertypes.cpp	/^	Derived(int a_num) : Base(a_num) { }$/;"	f	class:Derived
Derived	.\include\sol\test_usertypes.cpp	/^class Derived : public Base {$/;"	c	file:
Descender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Descender;$/;"	m	struct:TT_HoriHeader_
Descender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Descender;$/;"	m	struct:TT_VertHeader_
Detail	.\include\sol\Catch\include\external\clara.h	/^    namespace Detail {$/;"	n	namespace:Clara
Detail	.\include\sol\Catch\include\internal\catch_approx.hpp	/^namespace Detail {$/;"	n	namespace:Catch
Detail	.\include\sol\Catch\include\internal\catch_objc.hpp	/^    namespace Detail{$/;"	n	namespace:Catch
Detail	.\include\sol\Catch\include\internal\catch_tostring.h	/^namespace Detail {$/;"	n	namespace:Catch
Detail	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^namespace Detail {$/;"	n	namespace:Catch
Detail	.\include\sol\Catch\single_include\catch.hpp	/^namespace Detail {$/;"	n	namespace:Catch
DeviceName	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    CHAR   DeviceName[32];$/;"	m	struct:_GPU_DEVICE
DeviceString	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    CHAR   DeviceString[128];$/;"	m	struct:_GPU_DEVICE
DidntThrowException	.\include\sol\Catch\include\internal\catch_result_type.h	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DidntThrowException	.\include\sol\Catch\single_include\catch.hpp	/^        DidntThrowException = Exception | 2,$/;"	e	enum:Catch::ResultWas::OfType
DirectoryOfThisScript	.\.ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
DirectoryOk	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryOk	.\include\SFML\Network\Ftp.hpp	/^            DirectoryOk           = 257, \/\/\/< PATHNAME created$/;"	e	enum:sf::Ftp::Response::Status
DirectoryResponse	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryResponse	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::DirectoryResponse::DirectoryResponse(const Ftp::Response& response) :$/;"	f	class:sf::Ftp::DirectoryResponse
DirectoryResponse	.\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API DirectoryResponse : public Response$/;"	c	class:sf::Ftp
DirectoryStatus	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
DirectoryStatus	.\include\SFML\Network\Ftp.hpp	/^            DirectoryStatus       = 212, \/\/\/< Directory status$/;"	e	enum:sf::Ftp::Response::Status
Disconnected	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Disconnected	.\include\SFML\Network\Socket.hpp	/^        Disconnected, \/\/\/< The TCP socket has been disconnected$/;"	e	enum:sf::Socket::Status
Divide	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Divide	.\include\SFML\Window\Keyboard.hpp	/^        Divide,       \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
DoWhat	.\include\sol\Catch\include\catch_session.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	g	struct:Catch::Session::OnUnusedOptions
Done	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Done	.\include\SFML\Network\Socket.hpp	/^        Done,         \/\/\/< The socket has sent \/ received the data$/;"	e	enum:sf::Socket::Status
Down	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Down	.\include\SFML\Window\Keyboard.hpp	/^        Down,         \/\/\/< Down arrow$/;"	e	enum:sf::Keyboard::Key
Drawable	.\dep\SFML\include\SFML\Graphics\Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
Drawable	.\include\SFML\Graphics\Drawable.hpp	/^class SFML_GRAPHICS_API Drawable$/;"	c	namespace:sf
DstAlpha	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        DstAlpha,         \/\/\/< (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstAlpha	.\include\SFML\Graphics\BlendMode.hpp	/^        DstAlpha,         \/\/\/< (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstColor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        DstColor,         \/\/\/< (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DstColor	.\include\SFML\Graphics\BlendMode.hpp	/^        DstColor,         \/\/\/< (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
DumpBlock	.\dep\Lua\src\ldump.c	/^static void DumpBlock (const void *b, size_t size, DumpState *D) {$/;"	f	file:
DumpByte	.\dep\Lua\src\ldump.c	/^static void DumpByte (int y, DumpState *D) {$/;"	f	file:
DumpCode	.\dep\Lua\src\ldump.c	/^static void DumpCode (const Proto *f, DumpState *D) {$/;"	f	file:
DumpConstants	.\dep\Lua\src\ldump.c	/^static void DumpConstants (const Proto *f, DumpState *D) {$/;"	f	file:
DumpDebug	.\dep\Lua\src\ldump.c	/^static void DumpDebug (const Proto *f, DumpState *D) {$/;"	f	file:
DumpFunction	.\dep\Lua\src\ldump.c	/^static void DumpFunction (const Proto *f, TString *psource, DumpState *D) {$/;"	f	file:
DumpHeader	.\dep\Lua\src\ldump.c	/^static void DumpHeader (DumpState *D) {$/;"	f	file:
DumpInt	.\dep\Lua\src\ldump.c	/^static void DumpInt (int x, DumpState *D) {$/;"	f	file:
DumpInteger	.\dep\Lua\src\ldump.c	/^static void DumpInteger (lua_Integer x, DumpState *D) {$/;"	f	file:
DumpLiteral	.\dep\Lua\src\ldump.c	37;"	d	file:
DumpNumber	.\dep\Lua\src\ldump.c	/^static void DumpNumber (lua_Number x, DumpState *D) {$/;"	f	file:
DumpProtos	.\dep\Lua\src\ldump.c	/^static void DumpProtos (const Proto *f, DumpState *D) {$/;"	f	file:
DumpState	.\dep\Lua\src\ldump.c	/^} DumpState;$/;"	t	typeref:struct:__anon1	file:
DumpString	.\dep\Lua\src\ldump.c	/^static void DumpString (const TString *s, DumpState *D) {$/;"	f	file:
DumpUpvalues	.\dep\Lua\src\ldump.c	/^static void DumpUpvalues (const Proto *f, DumpState *D) {$/;"	f	file:
DumpVar	.\dep\Lua\src\ldump.c	49;"	d	file:
DumpVector	.\dep\Lua\src\ldump.c	35;"	d	file:
Dyndata	.\dep\Lua\src\lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	.\dep\Lua\src\lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
Dyndata	.\include\lua\lparser.h	/^typedef struct Dyndata {$/;"	s
Dyndata	.\include\lua\lparser.h	/^} Dyndata;$/;"	t	typeref:struct:Dyndata
E	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
E	.\include\SFML\Window\Keyboard.hpp	/^        E,            \/\/\/< The E key$/;"	e	enum:sf::Keyboard::Key
EAGLContext	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^SFML_DECLARE_OBJC_CLASS(EAGLContext);$/;"	v
EFXEAXREVERBPROPERTIES	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^} EFXEAXREVERBPROPERTIES, *LPEFXEAXREVERBPROPERTIES;$/;"	t	typeref:struct:__anon23
EFXEAXREVERBPROPERTIES_DEFINED	.\dep\SFML\extlibs\headers\AL\efx-presets.h	7;"	d
EFX_PRESETS_H	.\dep\SFML\extlibs\headers\AL\efx-presets.h	4;"	d
EFX_REVERB_PRESET_ALLEY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	79;"	d
EFX_REVERB_PRESET_ARENA	.\dep\SFML\extlibs\headers\AL\efx-presets.h	64;"	d
EFX_REVERB_PRESET_AUDITORIUM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	55;"	d
EFX_REVERB_PRESET_BATHROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	46;"	d
EFX_REVERB_PRESET_CARPETEDHALLWAY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	70;"	d
EFX_REVERB_PRESET_CASTLE_ALCOVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	141;"	d
EFX_REVERB_PRESET_CASTLE_COURTYARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	138;"	d
EFX_REVERB_PRESET_CASTLE_CUPBOARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	135;"	d
EFX_REVERB_PRESET_CASTLE_HALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	132;"	d
EFX_REVERB_PRESET_CASTLE_LARGEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	126;"	d
EFX_REVERB_PRESET_CASTLE_LONGPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	129;"	d
EFX_REVERB_PRESET_CASTLE_MEDIUMROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	123;"	d
EFX_REVERB_PRESET_CASTLE_SHORTPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	120;"	d
EFX_REVERB_PRESET_CASTLE_SMALLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	117;"	d
EFX_REVERB_PRESET_CAVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	61;"	d
EFX_REVERB_PRESET_CHAPEL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	396;"	d
EFX_REVERB_PRESET_CITY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	85;"	d
EFX_REVERB_PRESET_CITY_ABANDONED	.\dep\SFML\extlibs\headers\AL\efx-presets.h	388;"	d
EFX_REVERB_PRESET_CITY_LIBRARY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	382;"	d
EFX_REVERB_PRESET_CITY_MUSEUM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	379;"	d
EFX_REVERB_PRESET_CITY_STREETS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	373;"	d
EFX_REVERB_PRESET_CITY_SUBWAY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	376;"	d
EFX_REVERB_PRESET_CITY_UNDERPASS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	385;"	d
EFX_REVERB_PRESET_CONCERTHALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	58;"	d
EFX_REVERB_PRESET_DIZZY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	109;"	d
EFX_REVERB_PRESET_DOME_SAINTPAULS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	305;"	d
EFX_REVERB_PRESET_DOME_TOMB	.\dep\SFML\extlibs\headers\AL\efx-presets.h	299;"	d
EFX_REVERB_PRESET_DRIVING_COMMENTATOR	.\dep\SFML\extlibs\headers\AL\efx-presets.h	347;"	d
EFX_REVERB_PRESET_DRIVING_EMPTYGRANDSTAND	.\dep\SFML\extlibs\headers\AL\efx-presets.h	365;"	d
EFX_REVERB_PRESET_DRIVING_FULLGRANDSTAND	.\dep\SFML\extlibs\headers\AL\efx-presets.h	362;"	d
EFX_REVERB_PRESET_DRIVING_INCAR_LUXURY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	359;"	d
EFX_REVERB_PRESET_DRIVING_INCAR_RACER	.\dep\SFML\extlibs\headers\AL\efx-presets.h	353;"	d
EFX_REVERB_PRESET_DRIVING_INCAR_SPORTS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	356;"	d
EFX_REVERB_PRESET_DRIVING_PITGARAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	350;"	d
EFX_REVERB_PRESET_DRIVING_TUNNEL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	368;"	d
EFX_REVERB_PRESET_DRUGGED	.\dep\SFML\extlibs\headers\AL\efx-presets.h	106;"	d
EFX_REVERB_PRESET_DUSTYROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	393;"	d
EFX_REVERB_PRESET_FACTORY_ALCOVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	170;"	d
EFX_REVERB_PRESET_FACTORY_COURTYARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	167;"	d
EFX_REVERB_PRESET_FACTORY_CUPBOARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	164;"	d
EFX_REVERB_PRESET_FACTORY_HALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	161;"	d
EFX_REVERB_PRESET_FACTORY_LARGEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	155;"	d
EFX_REVERB_PRESET_FACTORY_LONGPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	158;"	d
EFX_REVERB_PRESET_FACTORY_MEDIUMROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	152;"	d
EFX_REVERB_PRESET_FACTORY_SHORTPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	149;"	d
EFX_REVERB_PRESET_FACTORY_SMALLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	146;"	d
EFX_REVERB_PRESET_FOREST	.\dep\SFML\extlibs\headers\AL\efx-presets.h	82;"	d
EFX_REVERB_PRESET_GENERIC	.\dep\SFML\extlibs\headers\AL\efx-presets.h	37;"	d
EFX_REVERB_PRESET_HALLWAY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	73;"	d
EFX_REVERB_PRESET_HANGAR	.\dep\SFML\extlibs\headers\AL\efx-presets.h	67;"	d
EFX_REVERB_PRESET_ICEPALACE_ALCOVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	199;"	d
EFX_REVERB_PRESET_ICEPALACE_COURTYARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	196;"	d
EFX_REVERB_PRESET_ICEPALACE_CUPBOARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	193;"	d
EFX_REVERB_PRESET_ICEPALACE_HALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	190;"	d
EFX_REVERB_PRESET_ICEPALACE_LARGEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	184;"	d
EFX_REVERB_PRESET_ICEPALACE_LONGPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	187;"	d
EFX_REVERB_PRESET_ICEPALACE_MEDIUMROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	181;"	d
EFX_REVERB_PRESET_ICEPALACE_SHORTPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	178;"	d
EFX_REVERB_PRESET_ICEPALACE_SMALLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	175;"	d
EFX_REVERB_PRESET_LIVINGROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	49;"	d
EFX_REVERB_PRESET_MOOD_HEAVEN	.\dep\SFML\extlibs\headers\AL\efx-presets.h	336;"	d
EFX_REVERB_PRESET_MOOD_HELL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	339;"	d
EFX_REVERB_PRESET_MOOD_MEMORY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	342;"	d
EFX_REVERB_PRESET_MOUNTAINS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	88;"	d
EFX_REVERB_PRESET_OUTDOORS_BACKYARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	319;"	d
EFX_REVERB_PRESET_OUTDOORS_CREEK	.\dep\SFML\extlibs\headers\AL\efx-presets.h	328;"	d
EFX_REVERB_PRESET_OUTDOORS_DEEPCANYON	.\dep\SFML\extlibs\headers\AL\efx-presets.h	325;"	d
EFX_REVERB_PRESET_OUTDOORS_ROLLINGPLAINS	.\dep\SFML\extlibs\headers\AL\efx-presets.h	322;"	d
EFX_REVERB_PRESET_OUTDOORS_VALLEY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	331;"	d
EFX_REVERB_PRESET_PADDEDCELL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	40;"	d
EFX_REVERB_PRESET_PARKINGLOT	.\dep\SFML\extlibs\headers\AL\efx-presets.h	97;"	d
EFX_REVERB_PRESET_PIPE_LARGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	311;"	d
EFX_REVERB_PRESET_PIPE_LONGTHIN	.\dep\SFML\extlibs\headers\AL\efx-presets.h	308;"	d
EFX_REVERB_PRESET_PIPE_RESONANT	.\dep\SFML\extlibs\headers\AL\efx-presets.h	314;"	d
EFX_REVERB_PRESET_PIPE_SMALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	302;"	d
EFX_REVERB_PRESET_PLAIN	.\dep\SFML\extlibs\headers\AL\efx-presets.h	94;"	d
EFX_REVERB_PRESET_PREFAB_CARAVAN	.\dep\SFML\extlibs\headers\AL\efx-presets.h	294;"	d
EFX_REVERB_PRESET_PREFAB_OUTHOUSE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	291;"	d
EFX_REVERB_PRESET_PREFAB_PRACTISEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	288;"	d
EFX_REVERB_PRESET_PREFAB_SCHOOLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	285;"	d
EFX_REVERB_PRESET_PREFAB_WORKSHOP	.\dep\SFML\extlibs\headers\AL\efx-presets.h	282;"	d
EFX_REVERB_PRESET_PSYCHOTIC	.\dep\SFML\extlibs\headers\AL\efx-presets.h	112;"	d
EFX_REVERB_PRESET_QUARRY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	91;"	d
EFX_REVERB_PRESET_ROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	43;"	d
EFX_REVERB_PRESET_SEWERPIPE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	100;"	d
EFX_REVERB_PRESET_SMALLWATERROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	399;"	d
EFX_REVERB_PRESET_SPACESTATION_ALCOVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	225;"	d
EFX_REVERB_PRESET_SPACESTATION_CUPBOARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	222;"	d
EFX_REVERB_PRESET_SPACESTATION_HALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	219;"	d
EFX_REVERB_PRESET_SPACESTATION_LARGEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	213;"	d
EFX_REVERB_PRESET_SPACESTATION_LONGPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	216;"	d
EFX_REVERB_PRESET_SPACESTATION_MEDIUMROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	210;"	d
EFX_REVERB_PRESET_SPACESTATION_SHORTPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	207;"	d
EFX_REVERB_PRESET_SPACESTATION_SMALLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	204;"	d
EFX_REVERB_PRESET_SPORT_EMPTYSTADIUM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	259;"	d
EFX_REVERB_PRESET_SPORT_FULLSTADIUM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	274;"	d
EFX_REVERB_PRESET_SPORT_GYMNASIUM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	271;"	d
EFX_REVERB_PRESET_SPORT_LARGESWIMMINGPOOL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	268;"	d
EFX_REVERB_PRESET_SPORT_SMALLSWIMMINGPOOL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	265;"	d
EFX_REVERB_PRESET_SPORT_SQUASHCOURT	.\dep\SFML\extlibs\headers\AL\efx-presets.h	262;"	d
EFX_REVERB_PRESET_SPORT_STADIUMTANNOY	.\dep\SFML\extlibs\headers\AL\efx-presets.h	277;"	d
EFX_REVERB_PRESET_STONECORRIDOR	.\dep\SFML\extlibs\headers\AL\efx-presets.h	76;"	d
EFX_REVERB_PRESET_STONEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	52;"	d
EFX_REVERB_PRESET_UNDERWATER	.\dep\SFML\extlibs\headers\AL\efx-presets.h	103;"	d
EFX_REVERB_PRESET_WOODEN_ALCOVE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	254;"	d
EFX_REVERB_PRESET_WOODEN_COURTYARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	251;"	d
EFX_REVERB_PRESET_WOODEN_CUPBOARD	.\dep\SFML\extlibs\headers\AL\efx-presets.h	248;"	d
EFX_REVERB_PRESET_WOODEN_HALL	.\dep\SFML\extlibs\headers\AL\efx-presets.h	245;"	d
EFX_REVERB_PRESET_WOODEN_LARGEROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	239;"	d
EFX_REVERB_PRESET_WOODEN_LONGPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	242;"	d
EFX_REVERB_PRESET_WOODEN_MEDIUMROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	236;"	d
EFX_REVERB_PRESET_WOODEN_SHORTPASSAGE	.\dep\SFML\extlibs\headers\AL\efx-presets.h	233;"	d
EFX_REVERB_PRESET_WOODEN_SMALLROOM	.\dep\SFML\extlibs\headers\AL\efx-presets.h	230;"	d
ENEMY_WIDTH	.\src\include\Common.h	5;"	d
ENTROPY_OPT_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	280;"	d
EOFMARK	.\dep\Lua\src\lua.c	280;"	d	file:
EOZ	.\dep\Lua\src\lzio.h	16;"	d
EOZ	.\include\lua\lzio.h	16;"	d
ERREXIT	.\dep\SFML\extlibs\headers\jpeg\jerror.h	209;"	d
ERREXIT1	.\dep\SFML\extlibs\headers\jpeg\jerror.h	212;"	d
ERREXIT2	.\dep\SFML\extlibs\headers\jpeg\jerror.h	216;"	d
ERREXIT3	.\dep\SFML\extlibs\headers\jpeg\jerror.h	221;"	d
ERREXIT4	.\dep\SFML\extlibs\headers\jpeg\jerror.h	227;"	d
ERREXIT6	.\dep\SFML\extlibs\headers\jpeg\jerror.h	234;"	d
ERREXITS	.\dep\SFML\extlibs\headers\jpeg\jerror.h	243;"	d
ERRFUNC	.\dep\Lua\src\loadlib.c	320;"	d	file:
ERRLIB	.\dep\Lua\src\loadlib.c	319;"	d	file:
ERRORSTACKSIZE	.\dep\Lua\src\ldo.c	174;"	d	file:
EXTERN	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	197;"	d
EXTRA_STACK	.\dep\Lua\src\lstate.h	47;"	d
EXTRA_STACK	.\include\lua\lstate.h	47;"	d
EaglContext	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^class EaglContext : public GlContext$/;"	c	namespace:sf::priv
Ebcdic	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
Ebcdic	.\include\SFML\Network\Ftp.hpp	/^        Ebcdic  \/\/\/< Text mode using EBCDIC encoding$/;"	e	enum:sf::Ftp::TransferMode
EglContext	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^EglContext::EglContext(EglContext* shared) :$/;"	f	class:sf::priv::EglContext
EglContext	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^EglContext::EglContext(EglContext* shared, const ContextSettings& settings, const WindowImpl* owner, unsigned int bitsPerPixel) :$/;"	f	class:sf::priv::EglContext
EglContext	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^EglContext::EglContext(EglContext* shared, const ContextSettings& settings, unsigned int width, unsigned int height) :$/;"	f	class:sf::priv::EglContext
EglContext	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^class EglContext : public GlContext$/;"	c	namespace:sf::priv
End	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
End	.\include\SFML\Window\Keyboard.hpp	/^        End,          \/\/\/< The End key$/;"	e	enum:sf::Keyboard::Key
EndGroup	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void EndGroup( const std::string&, const Totals& ){}$/;"	f	class:Catch::iTchRunnerReporter
EndSection	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void EndSection( const std::string&, const Counts& ){}$/;"	f	class:Catch::iTchRunnerReporter
EndTestCase	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void EndTestCase( const TestCaseInfo&, const Totals&, const std::string&, const std::string& ){}$/;"	f	class:Catch::iTchRunnerReporter
EndTesting	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void EndTesting$/;"	f	class:Catch::iTchRunnerReporter
Endianness	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^        struct Endianness {$/;"	s	namespace:Catch::Detail::__anon183
Ending	.\src\include\Game.h	/^	enum GameState {Uninitalized, Paused, Playing, Ending};$/;"	e	enum:Game::GameState
EndsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            EndsWith( EndsWith const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            EndsWith( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        struct EndsWith : MatcherImpl<EndsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
EndsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers
EndsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers
EndsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                EndsWith( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith
EndsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            EndsWith( NSString* substr ){ return Impl::NSStringMatchers::EndsWith( substr ); }$/;"	f	namespace:Catch::Matchers
EndsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            struct EndsWith : StringHolder<EndsWith> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
EndsWith	.\include\sol\Catch\single_include\catch.hpp	/^            EndsWith( EndsWith const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	.\include\sol\Catch\single_include\catch.hpp	/^            EndsWith( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
EndsWith	.\include\sol\Catch\single_include\catch.hpp	/^        struct EndsWith : MatcherImpl<EndsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
EndsWith	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers
EndsWith	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::EndsWith    EndsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers
Enemy	.\src\include\Enemy.h	/^class Enemy : public Object {$/;"	c
Enemy	.\src\src\Enemy.cpp	/^Enemy::Enemy() {$/;"	f	class:Enemy
Enemy	.\src\src\Enemy.cpp	/^Enemy::Enemy(Map* map, float health, Stats s, Path* p, int collRadius) :$/;"	f	class:Enemy
EnteringPassiveMode	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
EnteringPassiveMode	.\include\SFML\Network\Ftp.hpp	/^            EnteringPassiveMode   = 227, \/\/\/< Entering passive mode$/;"	e	enum:sf::Ftp::Response::Status
Enum1	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum1 { Enum1Value0, Enum1Value1 };$/;"	g	file:
Enum1Value0	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum1 { Enum1Value0, Enum1Value1 };$/;"	e	enum:Enum1	file:
Enum1Value1	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum1 { Enum1Value0, Enum1Value1 };$/;"	e	enum:Enum1	file:
Enum2	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum2 { Enum2Value0, Enum2Value1 };$/;"	g	file:
Enum2Value0	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum2 { Enum2Value0, Enum2Value1 };$/;"	e	enum:Enum2	file:
Enum2Value1	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum Enum2 { Enum2Value0, Enum2Value1 };$/;"	e	enum:Enum2	file:
EnumBitFieldTests	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace EnumBitFieldTests$/;"	n	file:
EnumClass1	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum class EnumClass1 { EnumClass1Value0, EnumClass1Value1 };$/;"	c	file:
EnumClass1Value0	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum class EnumClass1 { EnumClass1Value0, EnumClass1Value1 };$/;"	m	class:EnumClass1	file:
EnumClass2	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum class EnumClass2 : short { EnumClass2Value0, EnumClass2Value1 };$/;"	c	file:
EnumClass2Value0	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^enum class EnumClass2 : short { EnumClass2Value0, EnumClass2Value1 };$/;"	m	class:EnumClass2	file:
EnumStringMaker	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct EnumStringMaker$/;"	s	namespace:Catch::Detail
EnumStringMaker	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct EnumStringMaker<T,true>$/;"	s	namespace:Catch::Detail
EnumStringMaker	.\include\sol\Catch\single_include\catch.hpp	/^    struct EnumStringMaker$/;"	s	namespace:Catch::Detail
EnumStringMaker	.\include\sol\Catch\single_include\catch.hpp	/^    struct EnumStringMaker<T,true>$/;"	s	namespace:Catch::Detail
Equal	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Equal	.\include\SFML\Window\Keyboard.hpp	/^        Equal,        \/\/\/< The = key$/;"	e	enum:sf::Keyboard::Key
Equals	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Equals( Equals const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        struct Equals : MatcherImpl<Equals, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Equals	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::Equals      Equals( const char* str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Equals	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::Equals      Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Equals	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                Equals( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals
Equals	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            Equals( NSString* substr ){ return Impl::NSStringMatchers::Equals( substr ); }$/;"	f	namespace:Catch::Matchers
Equals	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            struct Equals : StringHolder<Equals> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
Equals	.\include\sol\Catch\single_include\catch.hpp	/^            Equals( Equals const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	.\include\sol\Catch\single_include\catch.hpp	/^            Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
Equals	.\include\sol\Catch\single_include\catch.hpp	/^        struct Equals : MatcherImpl<Equals, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
Equals	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::Equals      Equals( const char* str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Equals	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::Equals      Equals( std::string const& str, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes ) {$/;"	f	namespace:Catch::Matchers
Equation	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    enum Equation$/;"	g	struct:sf::BlendMode
Equation	.\include\SFML\Graphics\BlendMode.hpp	/^    enum Equation$/;"	g	struct:sf::BlendMode
Error	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Error	.\include\SFML\Network\Socket.hpp	/^        Error         \/\/\/< An unexpected error happened$/;"	e	enum:sf::Socket::Status
Error	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Error = BrightRed,$/;"	e	enum:Catch::Colour::Code
Escape	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Escape	.\include\SFML\Window\Keyboard.hpp	/^        Escape,       \/\/\/< The Escape key$/;"	e	enum:sf::Keyboard::Key
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    class Evaluator{};$/;"	c	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    class Evaluator{};$/;"	c	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThan> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsGreaterThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsLessThan> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsLessThanOrEqualTo> {$/;"	s	namespace:Catch::Internal
Evaluator	.\include\sol\Catch\single_include\catch.hpp	/^    struct Evaluator<T1, T2, IsNotEqualTo> {$/;"	s	namespace:Catch::Internal
Event	.\dep\SFML\include\SFML\Window\Event.hpp	/^class Event$/;"	c	namespace:sf
Event	.\include\SFML\Window\Event.hpp	/^class Event$/;"	c	namespace:sf
EventType	.\dep\SFML\include\SFML\Window\Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
EventType	.\include\SFML\Window\Event.hpp	/^    enum EventType$/;"	g	class:sf::Event
Ex	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    Ex( T ){}$/;"	f	struct:Ex
Ex	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^struct Ex$/;"	s	file:
Exception	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
Exception	.\include\sol\Catch\single_include\catch.hpp	/^        Exception = 0x100 | FailureBit,$/;"	e	enum:Catch::ResultWas::OfType
ExceptionTranslator	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^            ExceptionTranslator( std::string(*translateFunction)( T& ) )$/;"	f	class:Catch::ExceptionTranslatorRegistrar::ExceptionTranslator
ExceptionTranslator	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^        class ExceptionTranslator : public IExceptionTranslator {$/;"	c	class:Catch::ExceptionTranslatorRegistrar
ExceptionTranslatorRegistrar	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^        ExceptionTranslatorRegistrar( std::string(*translateFunction)( T& ) ) {$/;"	f	class:Catch::ExceptionTranslatorRegistrar
ExceptionTranslatorRegistrar	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^    class ExceptionTranslatorRegistrar {$/;"	c	namespace:Catch
ExceptionTranslatorRegistry	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^    class ExceptionTranslatorRegistry : public IExceptionTranslatorRegistry {$/;"	c	namespace:Catch
ExceptionTranslators	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^    typedef std::vector<const IExceptionTranslator*> ExceptionTranslators;$/;"	t	namespace:Catch
ExcludedPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            ExcludedPattern( Ptr<Pattern> const& underlyingPattern ) : m_underlyingPattern( underlyingPattern ) {}$/;"	f	class:Catch::TestSpec::ExcludedPattern
ExcludedPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        class ExcludedPattern : public Pattern {$/;"	c	class:Catch::TestSpec
Executing	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            Executing,$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
Executing	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            Executing,$/;"	e	enum:Catch::TestCaseTracking::TrackerContext::RunState
ExecutingChildren	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            ExecutingChildren,$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
ExplicitFailure	.\include\sol\Catch\include\internal\catch_result_type.h	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExplicitFailure	.\include\sol\Catch\single_include\catch.hpp	/^        ExplicitFailure = FailureBit | 2,$/;"	e	enum:Catch::ResultWas::OfType
ExplicitStr	.\include\sol\Optional\test_optional.cpp	/^    explicit ExplicitStr(const char* chp) : s(chp) {};$/;"	f	struct:ExplicitStr
ExplicitStr	.\include\sol\Optional\test_optional.cpp	/^struct ExplicitStr$/;"	s	file:
ExprComponents	.\include\sol\Catch\include\internal\catch_result_builder.h	/^            ExprComponents() : testFalse( false ) {}$/;"	f	struct:Catch::ResultBuilder::ExprComponents
ExprComponents	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        struct ExprComponents {$/;"	s	class:Catch::ResultBuilder
ExprComponents	.\include\sol\Catch\single_include\catch.hpp	/^            ExprComponents() : testFalse( false ) {}$/;"	f	struct:Catch::ResultBuilder::ExprComponents
ExprComponents	.\include\sol\Catch\single_include\catch.hpp	/^        struct ExprComponents {$/;"	s	class:Catch::ResultBuilder
ExpressionFailed	.\include\sol\Catch\include\internal\catch_result_type.h	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionFailed	.\include\sol\Catch\single_include\catch.hpp	/^        ExpressionFailed = FailureBit | 1,$/;"	e	enum:Catch::ResultWas::OfType
ExpressionLhs	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ExpressionLhs( ResultBuilder& rb, T lhs ) : m_rb( rb ), m_lhs( lhs ) {}$/;"	f	class:Catch::ExpressionLhs
ExpressionLhs	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^class ExpressionLhs {$/;"	c	namespace:Catch
ExpressionType	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        typedef ExpressionT ExpressionType;$/;"	t	struct:Catch::Matchers::Impl::Matcher
ExpressionType	.\include\sol\Catch\single_include\catch.hpp	/^        typedef ExpressionT ExpressionType;$/;"	t	struct:Catch::Matchers::Impl::Matcher
ExtensionMap	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static sfogl_StrToExtMap ExtensionMap[13] = {$/;"	v	file:
ExtensionMap	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static sfglx_StrToExtMap ExtensionMap[6] = {$/;"	v	file:
ExtensionMap	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static sfwgl_StrToExtMap ExtensionMap[5] = {$/;"	v	file:
F	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F	.\include\SFML\Window\Keyboard.hpp	/^        F,            \/\/\/< The F key$/;"	e	enum:sf::Keyboard::Key
F	.\include\sol\sol\call.hpp	/^			typedef overload_set<Fs...> F;$/;"	t	struct:sol::call_detail::lua_call_wrapper
F	.\include\sol\sol\call.hpp	/^			typedef protect_t<V> F;$/;"	t	struct:sol::call_detail::lua_call_wrapper
F	.\include\sol\sol\call.hpp	/^			typedef sol::constructor_list<Args...> F;$/;"	t	struct:sol::call_detail::lua_call_wrapper
F	.\include\sol\sol\call.hpp	/^			typedef sol::constructor_wrapper<Cxs...> F;$/;"	t	struct:sol::call_detail::lua_call_wrapper
F	.\include\sol\sol\call.hpp	/^			typedef sol::destructor_wrapper<Fx> F;$/;"	t	struct:sol::call_detail::lua_call_wrapper
F1	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F1	.\include\SFML\Window\Keyboard.hpp	/^        F1,           \/\/\/< The F1 key$/;"	e	enum:sf::Keyboard::Key
F10	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F10	.\include\SFML\Window\Keyboard.hpp	/^        F10,          \/\/\/< The F10 key$/;"	e	enum:sf::Keyboard::Key
F11	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F11	.\include\SFML\Window\Keyboard.hpp	/^        F11,          \/\/\/< The F11 key$/;"	e	enum:sf::Keyboard::Key
F12	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F12	.\include\SFML\Window\Keyboard.hpp	/^        F12,          \/\/\/< The F12 key$/;"	e	enum:sf::Keyboard::Key
F13	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F13	.\include\SFML\Window\Keyboard.hpp	/^        F13,          \/\/\/< The F13 key$/;"	e	enum:sf::Keyboard::Key
F14	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F14	.\include\SFML\Window\Keyboard.hpp	/^        F14,          \/\/\/< The F14 key$/;"	e	enum:sf::Keyboard::Key
F15	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F15	.\include\SFML\Window\Keyboard.hpp	/^        F15,          \/\/\/< The F15 key$/;"	e	enum:sf::Keyboard::Key
F2	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F2	.\include\SFML\Window\Keyboard.hpp	/^        F2,           \/\/\/< The F2 key$/;"	e	enum:sf::Keyboard::Key
F3	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F3	.\include\SFML\Window\Keyboard.hpp	/^        F3,           \/\/\/< The F3 key$/;"	e	enum:sf::Keyboard::Key
F4	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F4	.\include\SFML\Window\Keyboard.hpp	/^        F4,           \/\/\/< The F4 key$/;"	e	enum:sf::Keyboard::Key
F5	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F5	.\include\SFML\Window\Keyboard.hpp	/^        F5,           \/\/\/< The F5 key$/;"	e	enum:sf::Keyboard::Key
F6	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F6	.\include\SFML\Window\Keyboard.hpp	/^        F6,           \/\/\/< The F6 key$/;"	e	enum:sf::Keyboard::Key
F7	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F7	.\include\SFML\Window\Keyboard.hpp	/^        F7,           \/\/\/< The F7 key$/;"	e	enum:sf::Keyboard::Key
F8	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F8	.\include\SFML\Window\Keyboard.hpp	/^        F8,           \/\/\/< The F8 key$/;"	e	enum:sf::Keyboard::Key
F9	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
F9	.\include\SFML\Window\Keyboard.hpp	/^        F9,           \/\/\/< The F9 key$/;"	e	enum:sf::Keyboard::Key
FAIL	.\include\sol\Catch\include\catch.hpp	173;"	d
FAIL	.\include\sol\Catch\include\catch.hpp	181;"	d
FALSE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	239;"	d
FAR	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	221;"	d
FAR	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	223;"	d
FAST_BITS	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1340;"	d
FAST_FLOAT	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	365;"	d
FAST_FLOAT	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	367;"	d
FINALIZEDBIT	.\dep\Lua\src\lgc.h	81;"	d
FINALIZEDBIT	.\include\lua\lgc.h	81;"	d
FIRST_RESERVED	.\dep\Lua\src\llex.h	14;"	d
FIRST_RESERVED	.\include\lua\llex.h	14;"	d
FLAC_API	.\dep\SFML\extlibs\headers\FLAC\export.h	60;"	d
FLAC_API	.\dep\SFML\extlibs\headers\FLAC\export.h	64;"	d
FLAC_API	.\dep\SFML\extlibs\headers\FLAC\export.h	66;"	d
FLAC_API	.\dep\SFML\extlibs\headers\FLAC\export.h	70;"	d
FLAC_API	.\dep\SFML\extlibs\headers\FLAC\export.h	73;"	d
FLAC_API_VERSION_AGE	.\dep\SFML\extlibs\headers\FLAC\export.h	82;"	d
FLAC_API_VERSION_CURRENT	.\dep\SFML\extlibs\headers\FLAC\export.h	80;"	d
FLAC_API_VERSION_REVISION	.\dep\SFML\extlibs\headers\FLAC\export.h	81;"	d
FLAC__ALL_H	.\dep\SFML\extlibs\headers\FLAC\all.h	34;"	d
FLAC__ASSERT	.\dep\SFML\extlibs\headers\FLAC\assert.h	39;"	d
FLAC__ASSERT	.\dep\SFML\extlibs\headers\FLAC\assert.h	42;"	d
FLAC__ASSERT_DECLARATION	.\dep\SFML\extlibs\headers\FLAC\assert.h	40;"	d
FLAC__ASSERT_DECLARATION	.\dep\SFML\extlibs\headers\FLAC\assert.h	43;"	d
FLAC__ASSERT_H	.\dep\SFML\extlibs\headers\FLAC\assert.h	34;"	d
FLAC__CALLBACK_H	.\dep\SFML\extlibs\headers\FLAC\callback.h	34;"	d
FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__CHANNEL_ASSIGNMENT_INDEPENDENT = 0, \/**< independent channels *\/$/;"	e	enum:__anon37
FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__CHANNEL_ASSIGNMENT_LEFT_SIDE = 1, \/**< left+side stereo *\/$/;"	e	enum:__anon37
FLAC__CHANNEL_ASSIGNMENT_MID_SIDE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__CHANNEL_ASSIGNMENT_MID_SIDE = 3 \/**< mid+side stereo *\/$/;"	e	enum:__anon37
FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__CHANNEL_ASSIGNMENT_RIGHT_SIDE = 2, \/**< right+side stereo *\/$/;"	e	enum:__anon37
FLAC__ChannelAssignment	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__ChannelAssignment;$/;"	t	typeref:enum:__anon37
FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE = 0,$/;"	e	enum:__anon25
FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__ENTROPY_CODING_METHOD_PARTITIONED_RICE2 = 1$/;"	e	enum:__anon25
FLAC__EXPORT_H	.\dep\SFML\extlibs\headers\FLAC\export.h	34;"	d
FLAC__EntropyCodingMethod	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__EntropyCodingMethod;$/;"	t	typeref:struct:__anon28
FLAC__EntropyCodingMethodType	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__EntropyCodingMethodType;$/;"	t	typeref:enum:__anon25
FLAC__EntropyCodingMethod_PartitionedRice	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__EntropyCodingMethod_PartitionedRice;$/;"	t	typeref:struct:__anon27
FLAC__EntropyCodingMethod_PartitionedRiceContents	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__EntropyCodingMethod_PartitionedRiceContents;$/;"	t	typeref:struct:__anon26
FLAC__FORMAT_H	.\dep\SFML\extlibs\headers\FLAC\format.h	34;"	d
FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__FRAME_NUMBER_TYPE_FRAME_NUMBER, \/**< number contains the frame number *\/$/;"	e	enum:__anon38
FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__FRAME_NUMBER_TYPE_SAMPLE_NUMBER \/**< number contains the sample number of first sample in frame *\/$/;"	e	enum:__anon38
FLAC__Frame	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Frame;$/;"	t	typeref:struct:__anon42
FLAC__FrameFooter	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__FrameFooter;$/;"	t	typeref:struct:__anon41
FLAC__FrameHeader	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__FrameHeader;$/;"	t	typeref:struct:__anon39
FLAC__FrameNumberType	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__FrameNumberType;$/;"	t	typeref:enum:__anon38
FLAC__IOCallback_Close	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef int (*FLAC__IOCallback_Close) (FLAC__IOHandle handle);$/;"	t
FLAC__IOCallback_Eof	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef int (*FLAC__IOCallback_Eof) (FLAC__IOHandle handle);$/;"	t
FLAC__IOCallback_Read	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef size_t (*FLAC__IOCallback_Read) (void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle);$/;"	t
FLAC__IOCallback_Seek	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef int (*FLAC__IOCallback_Seek) (FLAC__IOHandle handle, FLAC__int64 offset, int whence);$/;"	t
FLAC__IOCallback_Tell	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef FLAC__int64 (*FLAC__IOCallback_Tell) (FLAC__IOHandle handle);$/;"	t
FLAC__IOCallback_Write	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef size_t (*FLAC__IOCallback_Write) (const void *ptr, size_t size, size_t nmemb, FLAC__IOHandle handle);$/;"	t
FLAC__IOCallbacks	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^} FLAC__IOCallbacks;$/;"	t	typeref:struct:__anon24
FLAC__IOHandle	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^typedef void* FLAC__IOHandle;$/;"	t
FLAC__MAX_BITS_PER_SAMPLE	.\dep\SFML\extlibs\headers\FLAC\format.h	112;"	d
FLAC__MAX_BLOCK_SIZE	.\dep\SFML\extlibs\headers\FLAC\format.h	99;"	d
FLAC__MAX_CHANNELS	.\dep\SFML\extlibs\headers\FLAC\format.h	106;"	d
FLAC__MAX_FIXED_ORDER	.\dep\SFML\extlibs\headers\FLAC\format.h	148;"	d
FLAC__MAX_LPC_ORDER	.\dep\SFML\extlibs\headers\FLAC\format.h	131;"	d
FLAC__MAX_METADATA_TYPE_CODE	.\dep\SFML\extlibs\headers\FLAC\format.h	93;"	d
FLAC__MAX_QLP_COEFF_PRECISION	.\dep\SFML\extlibs\headers\FLAC\format.h	145;"	d
FLAC__MAX_RICE_PARTITION_ORDER	.\dep\SFML\extlibs\headers\FLAC\format.h	151;"	d
FLAC__MAX_SAMPLE_RATE	.\dep\SFML\extlibs\headers\FLAC\format.h	128;"	d
FLAC__METADATA_CHAIN_STATUS_BAD_METADATA	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_BAD_METADATA,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_ERROR_OPENING_FILE,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_ILLEGAL_INPUT,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_INTERNAL_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_INVALID_CALLBACKS,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_MEMORY_ALLOCATION_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_NOT_A_FLAC_FILE,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_NOT_WRITABLE,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_OK = 0,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_READ_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_READ_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_READ_WRITE_MISMATCH,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_RENAME_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_SEEK_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_UNLINK_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_WRITE_ERROR,$/;"	e	enum:__anon60
FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_CHAIN_STATUS_WRONG_WRITE_CALL$/;"	e	enum:__anon60
FLAC__METADATA_H	.\dep\SFML\extlibs\headers\FLAC\metadata.h	34;"	d
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_BAD_METADATA,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ERROR_OPENING_FILE,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_ILLEGAL_INPUT,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_INTERNAL_ERROR$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_MEMORY_ALLOCATION_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_A_FLAC_FILE,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_NOT_WRITABLE,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_OK = 0,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_READ_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_RENAME_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_SEEK_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_UNLINK_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^	FLAC__METADATA_SIMPLE_ITERATOR_STATUS_WRITE_ERROR,$/;"	e	enum:__anon59
FLAC__METADATA_TYPE_APPLICATION	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_APPLICATION = 2,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_CUESHEET	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_CUESHEET = 5,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_PADDING	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_PADDING = 1,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_PICTURE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_PICTURE = 6,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_SEEKTABLE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_SEEKTABLE = 3,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_STREAMINFO	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_STREAMINFO = 0,$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_UNDEFINED	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_UNDEFINED = 7$/;"	e	enum:__anon43
FLAC__METADATA_TYPE_VORBIS_COMMENT	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__METADATA_TYPE_VORBIS_COMMENT = 4,$/;"	e	enum:__anon43
FLAC__MIN_BITS_PER_SAMPLE	.\dep\SFML\extlibs\headers\FLAC\format.h	109;"	d
FLAC__MIN_BLOCK_SIZE	.\dep\SFML\extlibs\headers\FLAC\format.h	96;"	d
FLAC__MIN_QLP_COEFF_PRECISION	.\dep\SFML\extlibs\headers\FLAC\format.h	140;"	d
FLAC__MetadataType	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__MetadataType;$/;"	t	typeref:enum:__anon43
FLAC__Metadata_Chain	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^typedef struct FLAC__Metadata_Chain FLAC__Metadata_Chain;$/;"	t	typeref:struct:FLAC__Metadata_Chain
FLAC__Metadata_ChainStatus	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^} FLAC__Metadata_ChainStatus;$/;"	t	typeref:enum:__anon60
FLAC__Metadata_Iterator	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^typedef struct FLAC__Metadata_Iterator FLAC__Metadata_Iterator;$/;"	t	typeref:struct:FLAC__Metadata_Iterator
FLAC__Metadata_SimpleIterator	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^typedef struct FLAC__Metadata_SimpleIterator FLAC__Metadata_SimpleIterator;$/;"	t	typeref:struct:FLAC__Metadata_SimpleIterator
FLAC__Metadata_SimpleIteratorStatus	.\dep\SFML\extlibs\headers\FLAC\metadata.h	/^} FLAC__Metadata_SimpleIteratorStatus;$/;"	t	typeref:enum:__anon59
FLAC__ORDINALS_H	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	34;"	d
FLAC__REFERENCE_CODEC_MAX_BITS_PER_SAMPLE	.\dep\SFML\extlibs\headers\FLAC\format.h	122;"	d
FLAC__STREAM_DECODER_ABORTED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_ABORTED,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_END_OF_STREAM	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_END_OF_STREAM,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_ERROR_STATUS_BAD_HEADER,$/;"	e	enum:__anon68
FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_ERROR_STATUS_FRAME_CRC_MISMATCH,$/;"	e	enum:__anon68
FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_ERROR_STATUS_LOST_SYNC,$/;"	e	enum:__anon68
FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_ERROR_STATUS_UNPARSEABLE_STREAM$/;"	e	enum:__anon68
FLAC__STREAM_DECODER_H	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	34;"	d
FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_ALREADY_INITIALIZED$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_ERROR_OPENING_FILE,$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_INVALID_CALLBACKS,$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_MEMORY_ALLOCATION_ERROR,$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_INIT_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_OK = 0,$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_INIT_STATUS_UNSUPPORTED_CONTAINER,$/;"	e	enum:__anon62
FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_LENGTH_STATUS_ERROR,$/;"	e	enum:__anon66
FLAC__STREAM_DECODER_LENGTH_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_LENGTH_STATUS_OK,$/;"	e	enum:__anon66
FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_LENGTH_STATUS_UNSUPPORTED$/;"	e	enum:__anon66
FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_MEMORY_ALLOCATION_ERROR,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_OGG_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_OGG_ERROR,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_READ_FRAME	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_READ_FRAME,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_READ_METADATA	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_READ_METADATA,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_READ_STATUS_ABORT	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_READ_STATUS_ABORT$/;"	e	enum:__anon63
FLAC__STREAM_DECODER_READ_STATUS_CONTINUE	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_READ_STATUS_CONTINUE,$/;"	e	enum:__anon63
FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_READ_STATUS_END_OF_STREAM,$/;"	e	enum:__anon63
FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEARCH_FOR_FRAME_SYNC,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_SEARCH_FOR_METADATA	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEARCH_FOR_METADATA = 0,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_SEEK_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEEK_ERROR,$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_SEEK_STATUS_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEEK_STATUS_ERROR,$/;"	e	enum:__anon64
FLAC__STREAM_DECODER_SEEK_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEEK_STATUS_OK,$/;"	e	enum:__anon64
FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_SEEK_STATUS_UNSUPPORTED$/;"	e	enum:__anon64
FLAC__STREAM_DECODER_TELL_STATUS_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_TELL_STATUS_ERROR,$/;"	e	enum:__anon65
FLAC__STREAM_DECODER_TELL_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_TELL_STATUS_OK,$/;"	e	enum:__anon65
FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_TELL_STATUS_UNSUPPORTED$/;"	e	enum:__anon65
FLAC__STREAM_DECODER_UNINITIALIZED	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_UNINITIALIZED$/;"	e	enum:__anon61
FLAC__STREAM_DECODER_WRITE_STATUS_ABORT	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_WRITE_STATUS_ABORT$/;"	e	enum:__anon67
FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	FLAC__STREAM_DECODER_WRITE_STATUS_CONTINUE,$/;"	e	enum:__anon67
FLAC__STREAM_ENCODER_CLIENT_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_CLIENT_ERROR,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_FRAMING_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_FRAMING_ERROR,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_H	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	34;"	d
FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_ALREADY_INITIALIZED$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_BLOCK_SIZE_TOO_SMALL_FOR_LPC_ORDER,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_ENCODER_ERROR,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BITS_PER_SAMPLE,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_BLOCK_SIZE,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_CALLBACKS,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_MAX_LPC_ORDER,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_METADATA,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_NUMBER_OF_CHANNELS,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_QLP_COEFF_PRECISION,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_INVALID_SAMPLE_RATE,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_NOT_STREAMABLE,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_OK = 0,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_INIT_STATUS_UNSUPPORTED_CONTAINER,$/;"	e	enum:__anon71
FLAC__STREAM_ENCODER_IO_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_IO_ERROR,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_MEMORY_ALLOCATION_ERROR$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_OGG_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_OGG_ERROR,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_OK	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_OK = 0,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_READ_STATUS_ABORT	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_READ_STATUS_ABORT,$/;"	e	enum:__anon72
FLAC__STREAM_ENCODER_READ_STATUS_CONTINUE	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_READ_STATUS_CONTINUE,$/;"	e	enum:__anon72
FLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_READ_STATUS_END_OF_STREAM,$/;"	e	enum:__anon72
FLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_READ_STATUS_UNSUPPORTED$/;"	e	enum:__anon72
FLAC__STREAM_ENCODER_SEEK_STATUS_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_SEEK_STATUS_ERROR,$/;"	e	enum:__anon74
FLAC__STREAM_ENCODER_SEEK_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_SEEK_STATUS_OK,$/;"	e	enum:__anon74
FLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_SEEK_STATUS_UNSUPPORTED$/;"	e	enum:__anon74
FLAC__STREAM_ENCODER_TELL_STATUS_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_TELL_STATUS_ERROR,$/;"	e	enum:__anon75
FLAC__STREAM_ENCODER_TELL_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_TELL_STATUS_OK,$/;"	e	enum:__anon75
FLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_TELL_STATUS_UNSUPPORTED$/;"	e	enum:__anon75
FLAC__STREAM_ENCODER_UNINITIALIZED	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_UNINITIALIZED,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_VERIFY_DECODER_ERROR,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_VERIFY_MISMATCH_IN_AUDIO_DATA,$/;"	e	enum:__anon70
FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_WRITE_STATUS_FATAL_ERROR$/;"	e	enum:__anon73
FLAC__STREAM_ENCODER_WRITE_STATUS_OK	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	FLAC__STREAM_ENCODER_WRITE_STATUS_OK = 0,$/;"	e	enum:__anon73
FLAC__STREAM_METADATA_HEADER_LENGTH	.\dep\SFML\extlibs\headers\FLAC\format.h	863;"	d
FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_ARTIST = 8, \/**< Artist\/performer *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_BACK_COVER = 4, \/**< Cover (back) *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_BAND	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_BAND = 10, \/**< Band\/Orchestra *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_BAND_LOGOTYPE = 19, \/**< Band\/artist logotype *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_COMPOSER = 11, \/**< Composer *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_CONDUCTOR = 9, \/**< Conductor *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_PERFORMANCE = 15, \/**< During performance *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_DURING_RECORDING = 14, \/**< During recording *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON = 2, \/**< Other file icon *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_FILE_ICON_STANDARD = 1, \/**< 32x32 pixels 'file icon' (PNG only) *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_FISH	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_FISH = 17, \/**< A bright coloured fish *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_FRONT_COVER = 3, \/**< Cover (front) *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_ILLUSTRATION = 18, \/**< Illustration *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_LEAD_ARTIST = 7, \/**< Lead artist\/lead performer\/soloist *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_LEAFLET_PAGE = 5, \/**< Leaflet page *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_LYRICIST = 12, \/**< Lyricist\/text writer *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_MEDIA = 6, \/**< Media (e.g. label side of CD) *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_OTHER = 0, \/**< Other *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_PUBLISHER_LOGOTYPE = 20, \/**< Publisher\/Studio logotype *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_RECORDING_LOCATION = 13, \/**< Recording Location *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_UNDEFINED$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__STREAM_METADATA_PICTURE_TYPE_VIDEO_SCREEN_CAPTURE = 16, \/**< Movie\/video screen capture *\/$/;"	e	enum:__anon54
FLAC__STREAM_METADATA_SEEKPOINT_LENGTH	.\dep\SFML\extlibs\headers\FLAC\format.h	589;"	d
FLAC__STREAM_METADATA_STREAMINFO_LENGTH	.\dep\SFML\extlibs\headers\FLAC\format.h	548;"	d
FLAC__STREAM_SYNC_LENGTH	.\dep\SFML\extlibs\headers\FLAC\format.h	182;"	d
FLAC__SUBFRAME_TYPE_CONSTANT	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__SUBFRAME_TYPE_CONSTANT = 0, \/**< constant signal *\/$/;"	e	enum:__anon30
FLAC__SUBFRAME_TYPE_FIXED	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__SUBFRAME_TYPE_FIXED = 2, \/**< fixed polynomial prediction *\/$/;"	e	enum:__anon30
FLAC__SUBFRAME_TYPE_LPC	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__SUBFRAME_TYPE_LPC = 3 \/**< linear prediction *\/$/;"	e	enum:__anon30
FLAC__SUBFRAME_TYPE_VERBATIM	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__SUBFRAME_TYPE_VERBATIM = 1, \/**< uncompressed signal *\/$/;"	e	enum:__anon30
FLAC__SUBSET_MAX_BLOCK_SIZE_48000HZ	.\dep\SFML\extlibs\headers\FLAC\format.h	103;"	d
FLAC__SUBSET_MAX_LPC_ORDER_48000HZ	.\dep\SFML\extlibs\headers\FLAC\format.h	135;"	d
FLAC__SUBSET_MAX_RICE_PARTITION_ORDER	.\dep\SFML\extlibs\headers\FLAC\format.h	154;"	d
FLAC__StreamDecoder	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoder;$/;"	t	typeref:struct:__anon69
FLAC__StreamDecoderEofCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__bool (*FLAC__StreamDecoderEofCallback)(const FLAC__StreamDecoder *decoder, void *client_data);$/;"	t
FLAC__StreamDecoderErrorCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef void (*FLAC__StreamDecoderErrorCallback)(const FLAC__StreamDecoder *decoder, FLAC__StreamDecoderErrorStatus status, void *client_data);$/;"	t
FLAC__StreamDecoderErrorStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderErrorStatus;$/;"	t	typeref:enum:__anon68
FLAC__StreamDecoderInitStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderInitStatus;$/;"	t	typeref:enum:__anon62
FLAC__StreamDecoderLengthCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__StreamDecoderLengthStatus (*FLAC__StreamDecoderLengthCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 *stream_length, void *client_data);$/;"	t
FLAC__StreamDecoderLengthStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderLengthStatus;$/;"	t	typeref:enum:__anon66
FLAC__StreamDecoderMetadataCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef void (*FLAC__StreamDecoderMetadataCallback)(const FLAC__StreamDecoder *decoder, const FLAC__StreamMetadata *metadata, void *client_data);$/;"	t
FLAC__StreamDecoderReadCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__StreamDecoderReadStatus (*FLAC__StreamDecoderReadCallback)(const FLAC__StreamDecoder *decoder, FLAC__byte buffer[], size_t *bytes, void *client_data);$/;"	t
FLAC__StreamDecoderReadStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderReadStatus;$/;"	t	typeref:enum:__anon63
FLAC__StreamDecoderSeekCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__StreamDecoderSeekStatus (*FLAC__StreamDecoderSeekCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 absolute_byte_offset, void *client_data);$/;"	t
FLAC__StreamDecoderSeekStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderSeekStatus;$/;"	t	typeref:enum:__anon64
FLAC__StreamDecoderState	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderState;$/;"	t	typeref:enum:__anon61
FLAC__StreamDecoderTellCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__StreamDecoderTellStatus (*FLAC__StreamDecoderTellCallback)(const FLAC__StreamDecoder *decoder, FLAC__uint64 *absolute_byte_offset, void *client_data);$/;"	t
FLAC__StreamDecoderTellStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderTellStatus;$/;"	t	typeref:enum:__anon65
FLAC__StreamDecoderWriteCallback	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^typedef FLAC__StreamDecoderWriteStatus (*FLAC__StreamDecoderWriteCallback)(const FLAC__StreamDecoder *decoder, const FLAC__Frame *frame, const FLAC__int32 * const buffer[], void *client_data);$/;"	t
FLAC__StreamDecoderWriteStatus	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^} FLAC__StreamDecoderWriteStatus;$/;"	t	typeref:enum:__anon67
FLAC__StreamEncoder	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoder;$/;"	t	typeref:struct:__anon76
FLAC__StreamEncoderInitStatus	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderInitStatus;$/;"	t	typeref:enum:__anon71
FLAC__StreamEncoderMetadataCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef void (*FLAC__StreamEncoderMetadataCallback)(const FLAC__StreamEncoder *encoder, const FLAC__StreamMetadata *metadata, void *client_data);$/;"	t
FLAC__StreamEncoderProgressCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef void (*FLAC__StreamEncoderProgressCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 bytes_written, FLAC__uint64 samples_written, unsigned frames_written, unsigned total_frames_estimate, void *client_data);$/;"	t
FLAC__StreamEncoderReadCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef FLAC__StreamEncoderReadStatus (*FLAC__StreamEncoderReadCallback)(const FLAC__StreamEncoder *encoder, FLAC__byte buffer[], size_t *bytes, void *client_data);$/;"	t
FLAC__StreamEncoderReadStatus	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderReadStatus;$/;"	t	typeref:enum:__anon72
FLAC__StreamEncoderSeekCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef FLAC__StreamEncoderSeekStatus (*FLAC__StreamEncoderSeekCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 absolute_byte_offset, void *client_data);$/;"	t
FLAC__StreamEncoderSeekStatus	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderSeekStatus;$/;"	t	typeref:enum:__anon74
FLAC__StreamEncoderState	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderState;$/;"	t	typeref:enum:__anon70
FLAC__StreamEncoderTellCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef FLAC__StreamEncoderTellStatus (*FLAC__StreamEncoderTellCallback)(const FLAC__StreamEncoder *encoder, FLAC__uint64 *absolute_byte_offset, void *client_data);$/;"	t
FLAC__StreamEncoderTellStatus	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderTellStatus;$/;"	t	typeref:enum:__anon75
FLAC__StreamEncoderWriteCallback	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^typedef FLAC__StreamEncoderWriteStatus (*FLAC__StreamEncoderWriteCallback)(const FLAC__StreamEncoder *encoder, const FLAC__byte buffer[], size_t bytes, unsigned samples, unsigned current_frame, void *client_data);$/;"	t
FLAC__StreamEncoderWriteStatus	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^} FLAC__StreamEncoderWriteStatus;$/;"	t	typeref:enum:__anon73
FLAC__StreamMetadata	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata;$/;"	t	typeref:struct:__anon57
FLAC__StreamMetadata_Application	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_Application;$/;"	t	typeref:struct:__anon46
FLAC__StreamMetadata_CueSheet	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_CueSheet;$/;"	t	typeref:struct:__anon53
FLAC__StreamMetadata_CueSheet_Index	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_CueSheet_Index;$/;"	t	typeref:struct:__anon51
FLAC__StreamMetadata_CueSheet_Track	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_CueSheet_Track;$/;"	t	typeref:struct:__anon52
FLAC__StreamMetadata_Padding	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_Padding;$/;"	t	typeref:struct:__anon45
FLAC__StreamMetadata_Picture	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_Picture;$/;"	t	typeref:struct:__anon55
FLAC__StreamMetadata_Picture_Type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_Picture_Type;$/;"	t	typeref:enum:__anon54
FLAC__StreamMetadata_SeekPoint	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_SeekPoint;$/;"	t	typeref:struct:__anon47
FLAC__StreamMetadata_SeekTable	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_SeekTable;$/;"	t	typeref:struct:__anon48
FLAC__StreamMetadata_StreamInfo	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_StreamInfo;$/;"	t	typeref:struct:__anon44
FLAC__StreamMetadata_Unknown	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_Unknown;$/;"	t	typeref:struct:__anon56
FLAC__StreamMetadata_VorbisComment	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_VorbisComment;$/;"	t	typeref:struct:__anon50
FLAC__StreamMetadata_VorbisComment_Entry	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__StreamMetadata_VorbisComment_Entry;$/;"	t	typeref:struct:__anon49
FLAC__Subframe	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Subframe;$/;"	t	typeref:struct:__anon35
FLAC__SubframeType	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__SubframeType;$/;"	t	typeref:enum:__anon30
FLAC__Subframe_Constant	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Subframe_Constant;$/;"	t	typeref:struct:__anon31
FLAC__Subframe_Fixed	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Subframe_Fixed;$/;"	t	typeref:struct:__anon33
FLAC__Subframe_LPC	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Subframe_LPC;$/;"	t	typeref:struct:__anon34
FLAC__Subframe_Verbatim	.\dep\SFML\extlibs\headers\FLAC\format.h	/^} FLAC__Subframe_Verbatim;$/;"	t	typeref:struct:__anon32
FLAC__bool	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef int FLAC__bool;$/;"	t
FLAC__byte	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef FLAC__uint8 FLAC__byte;$/;"	t
FLAC__int16	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef __int16 FLAC__int16;$/;"	t
FLAC__int16	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef int16_t FLAC__int16;$/;"	t
FLAC__int32	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef __int32 FLAC__int32;$/;"	t
FLAC__int32	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef int32_t FLAC__int32;$/;"	t
FLAC__int64	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef __int64 FLAC__int64;$/;"	t
FLAC__int64	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef int64_t FLAC__int64;$/;"	t
FLAC__int8	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef __int8 FLAC__int8;$/;"	t
FLAC__int8	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef int8_t FLAC__int8;$/;"	t
FLAC__uint16	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef uint16_t FLAC__uint16;$/;"	t
FLAC__uint16	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef unsigned __int16 FLAC__uint16;$/;"	t
FLAC__uint32	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef uint32_t FLAC__uint32;$/;"	t
FLAC__uint32	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef unsigned __int32 FLAC__uint32;$/;"	t
FLAC__uint64	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef uint64_t FLAC__uint64;$/;"	t
FLAC__uint64	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef unsigned __int64 FLAC__uint64;$/;"	t
FLAC__uint8	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef uint8_t FLAC__uint8;$/;"	t
FLAC__uint8	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	/^typedef unsigned __int8 FLAC__uint8;$/;"	t
FLAGS	.\dep\Lua\src\lstrlib.c	899;"	d	file:
FOREGROUND	.\src\include\trmclr.hpp	/^    FOREGROUND,$/;"	e	enum:trmclr::StyleTypes
FPS	.\src\include\FPS.h	/^    FPS() : frame(0), fps(0) {}$/;"	f	class:FPS
FPS	.\src\include\FPS.h	/^class FPS { $/;"	c
FREETYPE_MAJOR	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3938;"	d
FREETYPE_MINOR	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3939;"	d
FREETYPE_PATCH	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3940;"	d
FTC_CMapCache	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_CMapCacheRec_*  FTC_CMapCache;$/;"	t	typeref:struct:FTC_CMapCacheRec_
FTC_FaceID	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef FT_Pointer  FTC_FaceID;$/;"	t
FTC_Face_Requester	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  (*FTC_Face_Requester)( FTC_FaceID  face_id,$/;"	t
FTC_IMAGE_TYPE_COMPARE	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	692;"	d
FTC_ImageCache	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_ImageCacheRec_*  FTC_ImageCache;$/;"	t	typeref:struct:FTC_ImageCacheRec_
FTC_ImageType	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_ImageTypeRec_*  FTC_ImageType;$/;"	t	typeref:struct:FTC_ImageTypeRec_
FTC_ImageTypeRec	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  } FTC_ImageTypeRec;$/;"	t	typeref:struct:FTC_ImageTypeRec_
FTC_ImageTypeRec_	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct  FTC_ImageTypeRec_$/;"	s
FTC_Manager	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_ManagerRec_*  FTC_Manager;$/;"	t	typeref:struct:FTC_ManagerRec_
FTC_Node	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_NodeRec_*  FTC_Node;$/;"	t	typeref:struct:FTC_NodeRec_
FTC_SBit	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_SBitRec_*  FTC_SBit;$/;"	t	typeref:struct:FTC_SBitRec_
FTC_SBitCache	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_SBitCacheRec_*  FTC_SBitCache;$/;"	t	typeref:struct:FTC_SBitCacheRec_
FTC_SBitRec	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  } FTC_SBitRec;$/;"	t	typeref:struct:FTC_SBitRec_
FTC_SBitRec_	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct  FTC_SBitRec_$/;"	s
FTC_Scaler	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct FTC_ScalerRec_*  FTC_Scaler;$/;"	t	typeref:struct:FTC_ScalerRec_
FTC_ScalerRec	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  } FTC_ScalerRec;$/;"	t	typeref:struct:FTC_ScalerRec_
FTC_ScalerRec_	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  typedef struct  FTC_ScalerRec_$/;"	s
FTRenderer_getCBox	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	114;"	d
FTRenderer_render	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	112;"	d
FTRenderer_setMode	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	115;"	d
FTRenderer_transform	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	113;"	d
FT_ADVANCES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	793;"	d
FT_ADVANCE_FLAG_FAST_ONLY	.\dep\SFML\extlibs\headers\freetype2\ftadvanc.h	80;"	d
FT_ANGLE_2PI	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	76;"	d
FT_ANGLE_PI	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	64;"	d
FT_ANGLE_PI2	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	88;"	d
FT_ANGLE_PI4	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	100;"	d
FT_AUTOHINTER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	328;"	d
FT_AUTOHINTER_SCRIPT_CJK	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	233;"	d
FT_AUTOHINTER_SCRIPT_INDIC	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	234;"	d
FT_AUTOHINTER_SCRIPT_LATIN	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	232;"	d
FT_AUTOHINTER_SCRIPT_NONE	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	231;"	d
FT_Alloc_Func	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  (*FT_Alloc_Func)( FT_Memory  memory,$/;"	t
FT_Angle	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	/^  typedef FT_Fixed  FT_Angle;$/;"	t
FT_BASE	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	351;"	d
FT_BASE	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	353;"	d
FT_BASE_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	362;"	d
FT_BASE_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	364;"	d
FT_BBOX_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	528;"	d
FT_BBox	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_BBox;$/;"	t	typeref:struct:FT_BBox_
FT_BBox_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_BBox_$/;"	s
FT_BDF_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	423;"	d
FT_BEGIN_HEADER	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	34;"	d
FT_BEGIN_HEADER	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	36;"	d
FT_BEGIN_STMNT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	322;"	d
FT_BITMAP_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	515;"	d
FT_BOOL	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	578;"	d
FT_BZIP2_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	476;"	d
FT_Bitmap	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Bitmap;$/;"	t	typeref:struct:FT_Bitmap_
FT_BitmapGlyph	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct FT_BitmapGlyphRec_*  FT_BitmapGlyph;$/;"	t	typeref:struct:FT_BitmapGlyphRec_
FT_BitmapGlyphRec	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  } FT_BitmapGlyphRec;$/;"	t	typeref:struct:FT_BitmapGlyphRec_
FT_BitmapGlyphRec_	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct  FT_BitmapGlyphRec_$/;"	s
FT_Bitmap_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Bitmap_$/;"	s
FT_Bitmap_Size	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Bitmap_Size;$/;"	t	typeref:struct:FT_Bitmap_Size_
FT_Bitmap_Size_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Bitmap_Size_$/;"	s
FT_Bool	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned char  FT_Bool;$/;"	t
FT_Byte	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned char  FT_Byte;$/;"	t
FT_Bytes	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef const FT_Byte*  FT_Bytes;$/;"	t
FT_CACHE_CHARMAP_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	598;"	d
FT_CACHE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	541;"	d
FT_CACHE_IMAGE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	561;"	d
FT_CACHE_INTERNAL_CACHE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	808;"	d
FT_CACHE_INTERNAL_GLYPH_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	809;"	d
FT_CACHE_INTERNAL_IMAGE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	810;"	d
FT_CACHE_INTERNAL_MANAGER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	807;"	d
FT_CACHE_INTERNAL_MRU_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	806;"	d
FT_CACHE_INTERNAL_SBITS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	811;"	d
FT_CACHE_MANAGER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	805;"	d
FT_CACHE_SMALL_BITMAPS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	582;"	d
FT_CALLBACK_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	427;"	d
FT_CALLBACK_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	429;"	d
FT_CALLBACK_TABLE	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	435;"	d
FT_CALLBACK_TABLE	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	438;"	d
FT_CALLBACK_TABLE_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	436;"	d
FT_CALLBACK_TABLE_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	439;"	d
FT_CFF_DRIVER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	341;"	d
FT_CFF_HINTING_ADOBE	.\dep\SFML\extlibs\headers\freetype2\ftcffdrv.h	172;"	d
FT_CFF_HINTING_FREETYPE	.\dep\SFML\extlibs\headers\freetype2\ftcffdrv.h	171;"	d
FT_CHAR_BIT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	70;"	d
FT_CHAR_BIT	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	62;"	d
FT_CID_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	437;"	d
FT_CONFIG_CONFIG_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	110;"	d
FT_CONFIG_MODULES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	156;"	d
FT_CONFIG_OPTIONS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	140;"	d
FT_CONFIG_OPTION_ADOBE_GLYPH_LIST	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	326;"	d
FT_CONFIG_OPTION_FORCE_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	115;"	d
FT_CONFIG_OPTION_GUESSING_EMBEDDED_RFORK	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	361;"	d
FT_CONFIG_OPTION_INCREMENTAL	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	373;"	d
FT_CONFIG_OPTION_INLINE_MULFIX	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	136;"	d
FT_CONFIG_OPTION_MAC_FONTS	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	339;"	d
FT_CONFIG_OPTION_POSTSCRIPT_NAMES	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	308;"	d
FT_CONFIG_OPTION_USE_LZW	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	151;"	d
FT_CONFIG_OPTION_USE_MODULE_ERRORS	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	484;"	d
FT_CONFIG_OPTION_USE_ZLIB	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	166;"	d
FT_CONFIG_STANDARD_LIBRARY_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	125;"	d
FT_CURVE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	456;"	d
FT_CURVE_TAG_CONIC	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	459;"	d
FT_CURVE_TAG_CUBIC	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	460;"	d
FT_CURVE_TAG_HAS_SCANMODE	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	462;"	d
FT_CURVE_TAG_ON	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	458;"	d
FT_CURVE_TAG_TOUCH_BOTH	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	467;"	d
FT_CURVE_TAG_TOUCH_X	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	464;"	d
FT_CURVE_TAG_TOUCH_Y	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	465;"	d
FT_Char	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed char  FT_Char;$/;"	t
FT_CharMap	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_CharMapRec_*  FT_CharMap;$/;"	t	typeref:struct:FT_CharMapRec_
FT_CharMapRec	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_CharMapRec;$/;"	t	typeref:struct:FT_CharMapRec_
FT_CharMapRec_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_CharMapRec_$/;"	s
FT_Curve_Tag_Conic	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	471;"	d
FT_Curve_Tag_Cubic	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	472;"	d
FT_Curve_Tag_On	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	470;"	d
FT_Curve_Tag_Touch_X	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	473;"	d
FT_Curve_Tag_Touch_Y	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	474;"	d
FT_DEPRECATED_ATTRIBUTE	.\dep\SFML\extlibs\headers\freetype2\ftmac.h	42;"	d
FT_DUMMY_STMNT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	324;"	d
FT_Data	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_Data;$/;"	t	typeref:struct:FT_Data_
FT_Data_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_Data_$/;"	s
FT_DebugHook_Func	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  (*FT_DebugHook_Func)( void*  arg );$/;"	t
FT_Driver	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_DriverRec_*  FT_Driver;$/;"	t	typeref:struct:FT_DriverRec_
FT_ENCODING_MS_BIG5	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENCODING_MS_BIG5    = FT_ENCODING_BIG5,$/;"	e	enum:FT_Encoding_
FT_ENCODING_MS_GB2312	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENCODING_MS_GB2312  = FT_ENCODING_GB2312,$/;"	e	enum:FT_Encoding_
FT_ENCODING_MS_JOHAB	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENCODING_MS_JOHAB   = FT_ENCODING_JOHAB,$/;"	e	enum:FT_Encoding_
FT_ENCODING_MS_SJIS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENCODING_MS_SJIS    = FT_ENCODING_SJIS,$/;"	e	enum:FT_Encoding_
FT_ENCODING_MS_WANSUNG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENCODING_MS_WANSUNG = FT_ENCODING_WANSUNG,$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_ADOBE_CUSTOM,   'A', 'D', 'B', 'C' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_ADOBE_EXPERT,   'A', 'D', 'B', 'E' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_ADOBE_LATIN_1,  'l', 'a', 't', '1' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_ADOBE_STANDARD, 'A', 'D', 'O', 'B' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_APPLE_ROMAN, 'a', 'r', 'm', 'n' )$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_BIG5,    'b', 'i', 'g', '5' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_GB2312,  'g', 'b', ' ', ' ' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_JOHAB,   'j', 'o', 'h', 'a' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_MS_SYMBOL, 's', 'y', 'm', 'b' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_NONE, 0, 0, 0, 0 ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_OLD_LATIN_2, 'l', 'a', 't', '2' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_SJIS,    's', 'j', 'i', 's' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_UNICODE,   'u', 'n', 'i', 'c' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ENC_TAG( FT_ENCODING_WANSUNG, 'w', 'a', 'n', 's' ),$/;"	e	enum:FT_Encoding_
FT_ENC_TAG	.\dep\SFML\extlibs\headers\freetype2\freetype.h	593;"	d
FT_END_HEADER	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	52;"	d
FT_END_HEADER	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	54;"	d
FT_END_STMNT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	323;"	d
FT_ERR	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	586;"	d
FT_ERRORDEF	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	133;"	d
FT_ERRORDEF	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	183;"	d
FT_ERRORDEF_	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	146;"	d
FT_ERRORDEF_	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	184;"	d
FT_ERRORS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	188;"	d
FT_ERROR_BASE	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	588;"	d
FT_ERROR_DEFINITIONS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	798;"	d
FT_ERROR_END_LIST	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	135;"	d
FT_ERROR_END_LIST	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	181;"	d
FT_ERROR_MODULE	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	589;"	d
FT_ERROR_START_LIST	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	134;"	d
FT_ERROR_START_LIST	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	180;"	d
FT_ERR_BASE	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	117;"	d
FT_ERR_BASE	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	122;"	d
FT_ERR_BASE	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	123;"	d
FT_ERR_BASE	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	188;"	d
FT_ERR_CAT	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	582;"	d
FT_ERR_EQ	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	591;"	d
FT_ERR_NEQ	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	593;"	d
FT_ERR_PREFIX	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	108;"	d
FT_ERR_PREFIX	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	192;"	d
FT_ERR_XCAT	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	581;"	d
FT_EXPORT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	373;"	d
FT_EXPORT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	375;"	d
FT_EXPORT_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	384;"	d
FT_EXPORT_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	386;"	d
FT_EXPORT_VAR	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	395;"	d
FT_EXPORT_VAR	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	397;"	d
FT_Encoding	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Encoding;$/;"	t	typeref:enum:FT_Encoding_
FT_Encoding_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef enum  FT_Encoding_$/;"	g
FT_Error	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef int  FT_Error;$/;"	t
FT_F26Dot6	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed long  FT_F26Dot6;$/;"	t
FT_F2Dot14	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed short  FT_F2Dot14;$/;"	t
FT_FACE_FLAG_CID_KEYED	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1168;"	d
FT_FACE_FLAG_COLOR	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1170;"	d
FT_FACE_FLAG_EXTERNAL_STREAM	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1166;"	d
FT_FACE_FLAG_FAST_GLYPHS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1163;"	d
FT_FACE_FLAG_FIXED_SIZES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1157;"	d
FT_FACE_FLAG_FIXED_WIDTH	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1158;"	d
FT_FACE_FLAG_GLYPH_NAMES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1165;"	d
FT_FACE_FLAG_HINTER	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1167;"	d
FT_FACE_FLAG_HORIZONTAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1160;"	d
FT_FACE_FLAG_KERNING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1162;"	d
FT_FACE_FLAG_MULTIPLE_MASTERS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1164;"	d
FT_FACE_FLAG_SCALABLE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1156;"	d
FT_FACE_FLAG_SFNT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1159;"	d
FT_FACE_FLAG_TRICKY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1169;"	d
FT_FACE_FLAG_VERTICAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1161;"	d
FT_FILE	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	103;"	d
FT_FREETYPE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	173;"	d
FT_FSTYPE_BITMAP_EMBEDDING_ONLY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3445;"	d
FT_FSTYPE_EDITABLE_EMBEDDING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3443;"	d
FT_FSTYPE_INSTALLABLE_EMBEDDING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3440;"	d
FT_FSTYPE_NO_SUBSETTING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3444;"	d
FT_FSTYPE_PREVIEW_AND_PRINT_EMBEDDING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3442;"	d
FT_FSTYPE_RESTRICTED_LICENSE_EMBEDDING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3441;"	d
FT_FWord	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed short  FT_FWord;   \/* distance in FUnits *\/$/;"	t
FT_Face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_FaceRec_*  FT_Face;$/;"	t	typeref:struct:FT_FaceRec_
FT_FaceRec	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_FaceRec;$/;"	t	typeref:struct:FT_FaceRec_
FT_FaceRec_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_FaceRec_$/;"	s
FT_Face_Internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_Face_InternalRec_*  FT_Face_Internal;$/;"	t	typeref:struct:FT_Face_InternalRec_
FT_Fast	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef int            FT_Fast;$/;"	t
FT_Fast	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef long           FT_Fast;$/;"	t
FT_Fixed	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed long  FT_Fixed;$/;"	t
FT_Free_Func	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  (*FT_Free_Func)( FT_Memory  memory,$/;"	t
FT_GASP_DO_GRAY	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	94;"	d
FT_GASP_DO_GRIDFIT	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	93;"	d
FT_GASP_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	781;"	d
FT_GASP_NO_TABLE	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	92;"	d
FT_GASP_SYMMETRIC_GRIDFIT	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	96;"	d
FT_GASP_SYMMETRIC_SMOOTHING	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	95;"	d
FT_GLYPH_BBOX_GRIDFIT	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GLYPH_BBOX_GRIDFIT   = 1,$/;"	e	enum:FT_Glyph_BBox_Mode_
FT_GLYPH_BBOX_PIXELS	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GLYPH_BBOX_PIXELS    = 3$/;"	e	enum:FT_Glyph_BBox_Mode_
FT_GLYPH_BBOX_SUBPIXELS	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GLYPH_BBOX_SUBPIXELS = 0,$/;"	e	enum:FT_Glyph_BBox_Mode_
FT_GLYPH_BBOX_TRUNCATE	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GLYPH_BBOX_TRUNCATE  = 2,$/;"	e	enum:FT_Glyph_BBox_Mode_
FT_GLYPH_BBOX_UNSCALED	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GLYPH_BBOX_UNSCALED  = 0,$/;"	e	enum:FT_Glyph_BBox_Mode_
FT_GLYPH_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	502;"	d
FT_GX_VALIDATE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	670;"	d
FT_GZIP_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	450;"	d
FT_Generic	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_Generic;$/;"	t	typeref:struct:FT_Generic_
FT_Generic_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_Generic_$/;"	s
FT_Generic_Finalizer	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef void  (*FT_Generic_Finalizer)(void*  object);$/;"	t
FT_Glyph	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct FT_GlyphRec_*  FT_Glyph;$/;"	t	typeref:struct:FT_GlyphRec_
FT_GlyphRec	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  } FT_GlyphRec;$/;"	t	typeref:struct:FT_GlyphRec_
FT_GlyphRec_	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct  FT_GlyphRec_$/;"	s
FT_GlyphSlot	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_GlyphSlotRec_*  FT_GlyphSlot;$/;"	t	typeref:struct:FT_GlyphSlotRec_
FT_GlyphSlotRec	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_GlyphSlotRec;$/;"	t	typeref:struct:FT_GlyphSlotRec_
FT_GlyphSlotRec_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_GlyphSlotRec_$/;"	s
FT_Glyph_BBox_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	69;"	d
FT_Glyph_BBox_Mode	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  } FT_Glyph_BBox_Mode;$/;"	t	typeref:enum:FT_Glyph_BBox_Mode_
FT_Glyph_BBox_Mode_	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef enum  FT_Glyph_BBox_Mode_$/;"	g
FT_Glyph_Class	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct FT_Glyph_Class_  FT_Glyph_Class;$/;"	t	typeref:struct:FT_Glyph_Class_
FT_Glyph_Class_	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  struct  FT_Glyph_Class_$/;"	s
FT_Glyph_CopyFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_CopyFunc)( FT_Glyph   source,$/;"	t
FT_Glyph_Copy_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	70;"	d
FT_Glyph_DoneFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_DoneFunc)( FT_Glyph  glyph );$/;"	t
FT_Glyph_Done_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	67;"	d
FT_Glyph_Format	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Glyph_Format;$/;"	t	typeref:enum:FT_Glyph_Format_
FT_Glyph_Format_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef enum  FT_Glyph_Format_$/;"	g
FT_Glyph_GetBBoxFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_GetBBoxFunc)( FT_Glyph  glyph,$/;"	t
FT_Glyph_InitFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_InitFunc)( FT_Glyph      glyph,$/;"	t
FT_Glyph_Init_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	66;"	d
FT_Glyph_Metrics	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Glyph_Metrics;$/;"	t	typeref:struct:FT_Glyph_Metrics_
FT_Glyph_Metrics_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Glyph_Metrics_$/;"	s
FT_Glyph_PrepareFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_PrepareFunc)( FT_Glyph      glyph,$/;"	t
FT_Glyph_Prepare_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	71;"	d
FT_Glyph_TransformFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Glyph_TransformFunc)( FT_Glyph          glyph,$/;"	t
FT_Glyph_Transform_Func	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	68;"	d
FT_HAS_COLOR	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1365;"	d
FT_HAS_FAST_GLYPHS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1291;"	d
FT_HAS_FIXED_SIZES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1278;"	d
FT_HAS_GLYPH_NAMES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1304;"	d
FT_HAS_HORIZONTAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1186;"	d
FT_HAS_KERNING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1214;"	d
FT_HAS_MULTIPLE_MASTERS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1319;"	d
FT_HAS_VERTICAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1200;"	d
FT_IMAGE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	233;"	d
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_IMAGE_TAG( FT_GLYPH_FORMAT_BITMAP,    'b', 'i', 't', 's' ),$/;"	e	enum:FT_Glyph_Format_
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_IMAGE_TAG( FT_GLYPH_FORMAT_COMPOSITE, 'c', 'o', 'm', 'p' ),$/;"	e	enum:FT_Glyph_Format_
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_IMAGE_TAG( FT_GLYPH_FORMAT_NONE, 0, 0, 0, 0 ),$/;"	e	enum:FT_Glyph_Format_
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_IMAGE_TAG( FT_GLYPH_FORMAT_OUTLINE,   'o', 'u', 't', 'l' ),$/;"	e	enum:FT_Glyph_Format_
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_IMAGE_TAG( FT_GLYPH_FORMAT_PLOTTER,   'p', 'l', 'o', 't' )$/;"	e	enum:FT_Glyph_Format_
FT_IMAGE_TAG	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	674;"	d
FT_INCREMENTAL_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	769;"	d
FT_INCREMENTAL_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	814;"	d
FT_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	266;"	d
FT_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	282;"	d
FT_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	292;"	d
FT_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	302;"	d
FT_INT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	309;"	d
FT_INTERNAL_INTERNAL_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	824;"	d
FT_INT_MAX	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	64;"	d
FT_INT_MIN	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	65;"	d
FT_IS_CID_KEYED	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1337;"	d
FT_IS_EMPTY	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	577;"	d
FT_IS_FIXED_WIDTH	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1263;"	d
FT_IS_SCALABLE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1229;"	d
FT_IS_SFNT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1248;"	d
FT_IS_TRICKY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1351;"	d
FT_Incremental	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  typedef struct FT_IncrementalRec_*  FT_Incremental;$/;"	t	typeref:struct:FT_IncrementalRec_
FT_Incremental_FreeGlyphDataFunc	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  (*FT_Incremental_FreeGlyphDataFunc)( FT_Incremental  incremental,$/;"	t
FT_Incremental_FuncsRec	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  } FT_Incremental_FuncsRec;$/;"	t	typeref:struct:FT_Incremental_FuncsRec_
FT_Incremental_FuncsRec_	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  typedef struct  FT_Incremental_FuncsRec_$/;"	s
FT_Incremental_GetGlyphDataFunc	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  (*FT_Incremental_GetGlyphDataFunc)( FT_Incremental  incremental,$/;"	t
FT_Incremental_GetGlyphMetricsFunc	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  (*FT_Incremental_GetGlyphMetricsFunc)$/;"	t
FT_Incremental_Interface	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  typedef FT_Incremental_InterfaceRec*   FT_Incremental_Interface;$/;"	t
FT_Incremental_InterfaceRec	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  } FT_Incremental_InterfaceRec;$/;"	t	typeref:struct:FT_Incremental_InterfaceRec_
FT_Incremental_InterfaceRec_	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  typedef struct  FT_Incremental_InterfaceRec_$/;"	s
FT_Incremental_Metrics	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^   typedef struct FT_Incremental_MetricsRec_*  FT_Incremental_Metrics;$/;"	t	typeref:struct:FT_Incremental_MetricsRec_
FT_Incremental_MetricsRec	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  } FT_Incremental_MetricsRec;$/;"	t	typeref:struct:FT_Incremental_MetricsRec_
FT_Incremental_MetricsRec_	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^  typedef struct  FT_Incremental_MetricsRec_$/;"	s
FT_Int	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed int  FT_Int;$/;"	t
FT_Int16	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef signed short  FT_Int16;$/;"	t
FT_Int32	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef signed int      FT_Int32;$/;"	t
FT_Int32	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef signed long     FT_Int32;$/;"	t
FT_Int64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef FT_INT64   FT_Int64;$/;"	t
FT_KERNING_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_KERNING_DEFAULT  = 0,$/;"	e	enum:FT_Kerning_Mode_
FT_KERNING_UNFITTED	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_KERNING_UNFITTED,$/;"	e	enum:FT_Kerning_Mode_
FT_KERNING_UNSCALED	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_KERNING_UNSCALED$/;"	e	enum:FT_Kerning_Mode_
FT_Kerning_Mode	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Kerning_Mode;$/;"	t	typeref:enum:FT_Kerning_Mode_
FT_Kerning_Mode_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef enum  FT_Kerning_Mode_$/;"	g
FT_LCD_FILTER_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^    FT_LCD_FILTER_DEFAULT = 1,$/;"	e	enum:FT_LcdFilter_
FT_LCD_FILTER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	745;"	d
FT_LCD_FILTER_LEGACY	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^    FT_LCD_FILTER_LEGACY  = 16,$/;"	e	enum:FT_LcdFilter_
FT_LCD_FILTER_LIGHT	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^    FT_LCD_FILTER_LIGHT   = 2,$/;"	e	enum:FT_LcdFilter_
FT_LCD_FILTER_MAX	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^    FT_LCD_FILTER_MAX   \/* do not remove *\/$/;"	e	enum:FT_LcdFilter_
FT_LCD_FILTER_NONE	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^    FT_LCD_FILTER_NONE    = 0,$/;"	e	enum:FT_LcdFilter_
FT_LIST_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	263;"	d
FT_LOAD_ADVANCE_ONLY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2670;"	d
FT_LOAD_COLOR	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2665;"	d
FT_LOAD_CROP_BITMAP	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2656;"	d
FT_LOAD_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2649;"	d
FT_LOAD_FORCE_AUTOHINT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2655;"	d
FT_LOAD_IGNORE_GLOBAL_ADVANCE_WIDTH	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2658;"	d
FT_LOAD_IGNORE_TRANSFORM	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2660;"	d
FT_LOAD_LINEAR_DESIGN	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2662;"	d
FT_LOAD_MONOCHROME	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2661;"	d
FT_LOAD_NO_AUTOHINT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2663;"	d
FT_LOAD_NO_BITMAP	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2653;"	d
FT_LOAD_NO_HINTING	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2651;"	d
FT_LOAD_NO_RECURSE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2659;"	d
FT_LOAD_NO_SCALE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2650;"	d
FT_LOAD_PEDANTIC	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2657;"	d
FT_LOAD_RENDER	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2652;"	d
FT_LOAD_SBITS_ONLY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2671;"	d
FT_LOAD_TARGET_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2739;"	d
FT_LOAD_TARGET_LCD	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2744;"	d
FT_LOAD_TARGET_LCD_V	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2745;"	d
FT_LOAD_TARGET_LIGHT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2742;"	d
FT_LOAD_TARGET_MODE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2758;"	d
FT_LOAD_TARGET_MONO	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2743;"	d
FT_LOAD_TARGET_NORMAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2741;"	d
FT_LOAD_VERTICAL_LAYOUT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2654;"	d
FT_LOCAL	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	329;"	d
FT_LOCAL	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	335;"	d
FT_LOCAL	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	338;"	d
FT_LOCAL_ARRAY	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	344;"	d
FT_LOCAL_ARRAY_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	345;"	d
FT_LOCAL_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	330;"	d
FT_LOCAL_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	336;"	d
FT_LOCAL_DEF	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	339;"	d
FT_LONG64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	265;"	d
FT_LONG64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	281;"	d
FT_LONG64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	291;"	d
FT_LONG64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	301;"	d
FT_LONG64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	308;"	d
FT_LZW_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	463;"	d
FT_LcdFilter	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^  } FT_LcdFilter;$/;"	t	typeref:enum:FT_LcdFilter_
FT_LcdFilter_	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	/^  typedef enum  FT_LcdFilter_$/;"	g
FT_Library	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_LibraryRec_  *FT_Library;$/;"	t	typeref:struct:FT_LibraryRec_
FT_List	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct FT_ListRec_*  FT_List;$/;"	t	typeref:struct:FT_ListRec_
FT_ListNode	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct FT_ListNodeRec_*  FT_ListNode;$/;"	t	typeref:struct:FT_ListNodeRec_
FT_ListNodeRec	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_ListNodeRec;$/;"	t	typeref:struct:FT_ListNodeRec_
FT_ListNodeRec_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_ListNodeRec_$/;"	s
FT_ListRec	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_ListRec;$/;"	t	typeref:struct:FT_ListRec_
FT_ListRec_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_ListRec_$/;"	s
FT_List_Destructor	.\dep\SFML\extlibs\headers\freetype2\ftlist.h	/^  (*FT_List_Destructor)( FT_Memory  memory,$/;"	t
FT_List_Iterator	.\dep\SFML\extlibs\headers\freetype2\ftlist.h	/^  (*FT_List_Iterator)( FT_ListNode  node,$/;"	t
FT_Long	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed long  FT_Long;$/;"	t
FT_MACINTOSH	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	133;"	d
FT_MAC_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	615;"	d
FT_MAKE_TAG	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	480;"	d
FT_MAX_MODULES	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	395;"	d
FT_MM_Axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  } FT_MM_Axis;$/;"	t	typeref:struct:FT_MM_Axis_
FT_MM_Axis_	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  typedef struct  FT_MM_Axis_$/;"	s
FT_MM_Var	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  } FT_MM_Var;$/;"	t	typeref:struct:FT_MM_Var_
FT_MM_Var_	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  typedef struct  FT_MM_Var_$/;"	s
FT_MODERRDEF	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	112;"	d
FT_MODERRDEF	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	114;"	d
FT_MODERRDEF	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	187;"	d
FT_MODERR_END_LIST	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	118;"	d
FT_MODERR_END_LIST	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	186;"	d
FT_MODERR_START_LIST	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	117;"	d
FT_MODERR_START_LIST	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	185;"	d
FT_MODULE_DRIVER_HAS_HINTER	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	118;"	d
FT_MODULE_DRIVER_NO_OUTLINES	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	116;"	d
FT_MODULE_DRIVER_SCALABLE	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	114;"	d
FT_MODULE_ERRORS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	201;"	d
FT_MODULE_FONT_DRIVER	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	109;"	d
FT_MODULE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	302;"	d
FT_MODULE_HINTER	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	111;"	d
FT_MODULE_RENDERER	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	110;"	d
FT_MODULE_STYLER	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	112;"	d
FT_MULTIPLE_MASTERS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	628;"	d
FT_Matrix	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_Matrix;$/;"	t	typeref:struct:FT_Matrix_
FT_Matrix_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_Matrix_$/;"	s
FT_Memory	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  typedef struct FT_MemoryRec_*  FT_Memory;$/;"	t	typeref:struct:FT_MemoryRec_
FT_MemoryRec_	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  struct  FT_MemoryRec_$/;"	s
FT_Module	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_ModuleRec_*  FT_Module;$/;"	t	typeref:struct:FT_ModuleRec_
FT_Module_Class	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  } FT_Module_Class;$/;"	t	typeref:struct:FT_Module_Class_
FT_Module_Class_	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  typedef struct  FT_Module_Class_$/;"	s
FT_Module_Constructor	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  (*FT_Module_Constructor)( FT_Module  module );$/;"	t
FT_Module_Destructor	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  (*FT_Module_Destructor)( FT_Module  module );$/;"	t
FT_Module_Interface	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  typedef FT_Pointer  FT_Module_Interface;$/;"	t
FT_Module_Requester	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  (*FT_Module_Requester)( FT_Module    module,$/;"	t
FT_Multi_Master	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  } FT_Multi_Master;$/;"	t	typeref:struct:FT_Multi_Master_
FT_Multi_Master_	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  typedef struct  FT_Multi_Master_$/;"	s
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	101;"	d
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	138;"	d
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	187;"	d
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	107;"	d
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	121;"	d
FT_NEED_EXTERN_C	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	188;"	d
FT_NOERRORDEF_	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	150;"	d
FT_NOERRORDEF_	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	185;"	d
FT_OPENTYPE_VALIDATE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	656;"	d
FT_OPEN_DRIVER	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1829;"	d
FT_OPEN_MEMORY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1826;"	d
FT_OPEN_PARAMS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1830;"	d
FT_OPEN_PATHNAME	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1828;"	d
FT_OPEN_STREAM	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1827;"	d
FT_ORIENTATION_FILL_LEFT	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^    FT_ORIENTATION_FILL_LEFT  = FT_ORIENTATION_POSTSCRIPT,$/;"	e	enum:FT_Orientation_
FT_ORIENTATION_FILL_RIGHT	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^    FT_ORIENTATION_FILL_RIGHT = FT_ORIENTATION_TRUETYPE,$/;"	e	enum:FT_Orientation_
FT_ORIENTATION_NONE	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^    FT_ORIENTATION_NONE$/;"	e	enum:FT_Orientation_
FT_ORIENTATION_POSTSCRIPT	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^    FT_ORIENTATION_POSTSCRIPT = 1,$/;"	e	enum:FT_Orientation_
FT_ORIENTATION_TRUETYPE	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^    FT_ORIENTATION_TRUETYPE   = 0,$/;"	e	enum:FT_Orientation_
FT_OUTLINE_CONTOURS_MAX	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	356;"	d
FT_OUTLINE_EVEN_ODD_FILL	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	434;"	d
FT_OUTLINE_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	276;"	d
FT_OUTLINE_HIGH_PRECISION	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	440;"	d
FT_OUTLINE_IGNORE_DROPOUTS	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	436;"	d
FT_OUTLINE_INCLUDE_STUBS	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	438;"	d
FT_OUTLINE_NONE	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	432;"	d
FT_OUTLINE_OWNER	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	433;"	d
FT_OUTLINE_POINTS_MAX	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	357;"	d
FT_OUTLINE_REVERSE_FILL	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	435;"	d
FT_OUTLINE_SINGLE_PASS	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	441;"	d
FT_OUTLINE_SMART_DROPOUTS	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	437;"	d
FT_Offset	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef size_t  FT_Offset;$/;"	t
FT_Open_Args	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Open_Args;$/;"	t	typeref:struct:FT_Open_Args_
FT_Open_Args_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Open_Args_$/;"	s
FT_Orientation	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^  } FT_Orientation;$/;"	t	typeref:enum:FT_Orientation_
FT_Orientation_	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^  typedef enum  FT_Orientation_$/;"	g
FT_Outline	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Outline;$/;"	t	typeref:struct:FT_Outline_
FT_OutlineGlyph	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct FT_OutlineGlyphRec_*  FT_OutlineGlyph;$/;"	t	typeref:struct:FT_OutlineGlyphRec_
FT_OutlineGlyphRec	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  } FT_OutlineGlyphRec;$/;"	t	typeref:struct:FT_OutlineGlyphRec_
FT_OutlineGlyphRec_	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  typedef struct  FT_OutlineGlyphRec_$/;"	s
FT_Outline_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Outline_$/;"	s
FT_Outline_ConicToFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Outline_ConicToFunc)( const FT_Vector*  control,$/;"	t
FT_Outline_ConicTo_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	560;"	d
FT_Outline_CubicToFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Outline_CubicToFunc)( const FT_Vector*  control1,$/;"	t
FT_Outline_CubicTo_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	593;"	d
FT_Outline_Funcs	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Outline_Funcs;$/;"	t	typeref:struct:FT_Outline_Funcs_
FT_Outline_Funcs_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Outline_Funcs_$/;"	s
FT_Outline_LineToFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Outline_LineToFunc)( const FT_Vector*  to,$/;"	t
FT_Outline_LineTo_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	528;"	d
FT_Outline_MoveToFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Outline_MoveToFunc)( const FT_Vector*  to,$/;"	t
FT_Outline_MoveTo_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	501;"	d
FT_PARAM_TAG_IGNORE_PREFERRED_FAMILY	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	175;"	d
FT_PARAM_TAG_IGNORE_PREFERRED_SUBFAMILY	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	190;"	d
FT_PARAM_TAG_INCREMENTAL	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	344;"	d
FT_PARAM_TAG_UNPATENTED_HINTING	.\dep\SFML\extlibs\headers\freetype2\ttunpat.h	49;"	d
FT_PFR_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	683;"	d
FT_PIXEL_MODE_BGRA	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_BGRA,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_GRAY	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_GRAY,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_GRAY2	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_GRAY2,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_GRAY4	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_GRAY4,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_LCD	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_LCD,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_LCD_V	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_LCD_V,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_MAX	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_MAX      \/* do not remove *\/$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_MONO	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_MONO,$/;"	e	enum:FT_Pixel_Mode_
FT_PIXEL_MODE_NONE	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_PIXEL_MODE_NONE = 0,$/;"	e	enum:FT_Pixel_Mode_
FT_Parameter	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Parameter;$/;"	t	typeref:struct:FT_Parameter_
FT_Parameter_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Parameter_$/;"	s
FT_Pixel_Mode	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Pixel_Mode;$/;"	t	typeref:enum:FT_Pixel_Mode_
FT_Pixel_Mode_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef enum  FT_Pixel_Mode_$/;"	g
FT_Pointer	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef void*  FT_Pointer;$/;"	t
FT_Pos	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef signed long  FT_Pos;$/;"	t
FT_Prop_GlyphToScriptMap	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^  } FT_Prop_GlyphToScriptMap;$/;"	t	typeref:struct:FT_Prop_GlyphToScriptMap_
FT_Prop_GlyphToScriptMap_	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^  typedef struct  FT_Prop_GlyphToScriptMap_$/;"	s
FT_Prop_IncreaseXHeight	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^  } FT_Prop_IncreaseXHeight;$/;"	t	typeref:struct:FT_Prop_IncreaseXHeight_
FT_Prop_IncreaseXHeight_	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^  typedef struct  FT_Prop_IncreaseXHeight_$/;"	s
FT_PtrDist	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef ft_ptrdiff_t  FT_PtrDist;$/;"	t
FT_RASTER_FLAG_AA	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	956;"	d
FT_RASTER_FLAG_CLIP	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	958;"	d
FT_RASTER_FLAG_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	955;"	d
FT_RASTER_FLAG_DIRECT	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	957;"	d
FT_RENDER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	315;"	d
FT_RENDER_MODE_LCD	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_LCD,$/;"	e	enum:FT_Render_Mode_
FT_RENDER_MODE_LCD_V	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_LCD_V,$/;"	e	enum:FT_Render_Mode_
FT_RENDER_MODE_LIGHT	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_LIGHT,$/;"	e	enum:FT_Render_Mode_
FT_RENDER_MODE_MAX	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_MAX$/;"	e	enum:FT_Render_Mode_
FT_RENDER_MODE_MONO	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_MONO,$/;"	e	enum:FT_Render_Mode_
FT_RENDER_MODE_NORMAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_RENDER_MODE_NORMAL = 0,$/;"	e	enum:FT_Render_Mode_
FT_RENDER_POOL_SIZE	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	385;"	d
FT_Raster	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct FT_RasterRec_*  FT_Raster;$/;"	t	typeref:struct:FT_RasterRec_
FT_Raster_BitSet_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_BitSet_Func)( int    y,$/;"	t
FT_Raster_BitTest_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_BitTest_Func)( int    y,$/;"	t
FT_Raster_DoneFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_DoneFunc)( FT_Raster  raster );$/;"	t
FT_Raster_Done_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	1072;"	d
FT_Raster_Funcs	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Raster_Funcs;$/;"	t	typeref:struct:FT_Raster_Funcs_
FT_Raster_Funcs_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Raster_Funcs_$/;"	s
FT_Raster_NewFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_NewFunc)( void*       memory,$/;"	t
FT_Raster_New_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	1055;"	d
FT_Raster_Params	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Raster_Params;$/;"	t	typeref:struct:FT_Raster_Params_
FT_Raster_Params_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Raster_Params_$/;"	s
FT_Raster_RenderFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_RenderFunc)( FT_Raster                raster,$/;"	t
FT_Raster_Render_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	1174;"	d
FT_Raster_ResetFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_ResetFunc)( FT_Raster       raster,$/;"	t
FT_Raster_Reset_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	1107;"	d
FT_Raster_SetModeFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_Raster_SetModeFunc)( FT_Raster      raster,$/;"	t
FT_Raster_Set_Mode_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	1133;"	d
FT_Raster_Span_Func	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	884;"	d
FT_Realloc_Func	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  (*FT_Realloc_Func)( FT_Memory  memory,$/;"	t
FT_Render_Mode	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Render_Mode;$/;"	t	typeref:enum:FT_Render_Mode_
FT_Render_Mode_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef enum  FT_Render_Mode_$/;"	g
FT_Renderer	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_RendererRec_*  FT_Renderer;$/;"	t	typeref:struct:FT_RendererRec_
FT_Renderer_Class	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  } FT_Renderer_Class;$/;"	t	typeref:struct:FT_Renderer_Class_
FT_Renderer_Class_	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  typedef struct  FT_Renderer_Class_$/;"	s
FT_Renderer_GetCBoxFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Renderer_GetCBoxFunc)( FT_Renderer   renderer,$/;"	t
FT_Renderer_RenderFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Renderer_RenderFunc)( FT_Renderer       renderer,$/;"	t
FT_Renderer_SetModeFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Renderer_SetModeFunc)( FT_Renderer  renderer,$/;"	t
FT_Renderer_TransformFunc	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^  (*FT_Renderer_TransformFunc)( FT_Renderer       renderer,$/;"	t
FT_SFNT_HEAD	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_HEAD,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_HHEA	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_HHEA,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_MAX	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_MAX$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_MAXP	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_MAXP,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_NAMES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	642;"	d
FT_SFNT_OS2	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_OS2,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_PCLT	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_PCLT,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_POST	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_POST,$/;"	e	enum:FT_Sfnt_Tag_
FT_SFNT_VHEA	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_SFNT_VHEA,$/;"	e	enum:FT_Sfnt_Tag_
FT_SIZEOF_INT	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	76;"	d
FT_SIZEOF_LONG	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	88;"	d
FT_SIZES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	289;"	d
FT_SIZE_REQUEST_TYPE_BBOX	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_BBOX,$/;"	e	enum:FT_Size_Request_Type_
FT_SIZE_REQUEST_TYPE_CELL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_CELL,$/;"	e	enum:FT_Size_Request_Type_
FT_SIZE_REQUEST_TYPE_MAX	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_MAX$/;"	e	enum:FT_Size_Request_Type_
FT_SIZE_REQUEST_TYPE_NOMINAL	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_NOMINAL,$/;"	e	enum:FT_Size_Request_Type_
FT_SIZE_REQUEST_TYPE_REAL_DIM	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_REAL_DIM,$/;"	e	enum:FT_Size_Request_Type_
FT_SIZE_REQUEST_TYPE_SCALES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SIZE_REQUEST_TYPE_SCALES,$/;"	e	enum:FT_Size_Request_Type_
FT_STROKER_BORDER_LEFT	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_BORDER_LEFT = 0,$/;"	e	enum:FT_StrokerBorder_
FT_STROKER_BORDER_RIGHT	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_BORDER_RIGHT$/;"	e	enum:FT_StrokerBorder_
FT_STROKER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	695;"	d
FT_STROKER_LINECAP_BUTT	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINECAP_BUTT = 0,$/;"	e	enum:FT_Stroker_LineCap_
FT_STROKER_LINECAP_ROUND	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINECAP_ROUND,$/;"	e	enum:FT_Stroker_LineCap_
FT_STROKER_LINECAP_SQUARE	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINECAP_SQUARE$/;"	e	enum:FT_Stroker_LineCap_
FT_STROKER_LINEJOIN_BEVEL	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINEJOIN_BEVEL          = 1,$/;"	e	enum:FT_Stroker_LineJoin_
FT_STROKER_LINEJOIN_MITER	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINEJOIN_MITER          = FT_STROKER_LINEJOIN_MITER_VARIABLE,$/;"	e	enum:FT_Stroker_LineJoin_
FT_STROKER_LINEJOIN_MITER_FIXED	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINEJOIN_MITER_FIXED    = 3$/;"	e	enum:FT_Stroker_LineJoin_
FT_STROKER_LINEJOIN_MITER_VARIABLE	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINEJOIN_MITER_VARIABLE = 2,$/;"	e	enum:FT_Stroker_LineJoin_
FT_STROKER_LINEJOIN_ROUND	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^    FT_STROKER_LINEJOIN_ROUND          = 0,$/;"	e	enum:FT_Stroker_LineJoin_
FT_STYLE_FLAG_BOLD	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1392;"	d
FT_STYLE_FLAG_ITALIC	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1391;"	d
FT_SUBGLYPH_FLAG_2X2	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3332;"	d
FT_SUBGLYPH_FLAG_ARGS_ARE_WORDS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3327;"	d
FT_SUBGLYPH_FLAG_ARGS_ARE_XY_VALUES	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3328;"	d
FT_SUBGLYPH_FLAG_ROUND_XY_TO_GRID	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3329;"	d
FT_SUBGLYPH_FLAG_SCALE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3330;"	d
FT_SUBGLYPH_FLAG_USE_MY_METRICS	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3333;"	d
FT_SUBGLYPH_FLAG_XY_SCALE	.\dep\SFML\extlibs\headers\freetype2\freetype.h	3331;"	d
FT_SYNTHESIS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	707;"	d
FT_SYSTEM_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	217;"	d
FT_SfntName	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^  } FT_SfntName;$/;"	t	typeref:struct:FT_SfntName_
FT_SfntName_	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^  typedef struct  FT_SfntName_$/;"	s
FT_Sfnt_Tag	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } FT_Sfnt_Tag;$/;"	t	typeref:enum:FT_Sfnt_Tag_
FT_Sfnt_Tag_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef enum  FT_Sfnt_Tag_$/;"	g
FT_Short	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef signed short  FT_Short;$/;"	t
FT_Size	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_SizeRec_*  FT_Size;$/;"	t	typeref:struct:FT_SizeRec_
FT_SizeRec	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_SizeRec;$/;"	t	typeref:struct:FT_SizeRec_
FT_SizeRec_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_SizeRec_$/;"	s
FT_Size_Internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_Size_InternalRec_*  FT_Size_Internal;$/;"	t	typeref:struct:FT_Size_InternalRec_
FT_Size_Metrics	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Size_Metrics;$/;"	t	typeref:struct:FT_Size_Metrics_
FT_Size_Metrics_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Size_Metrics_$/;"	s
FT_Size_Request	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_Size_RequestRec_  *FT_Size_Request;$/;"	t	typeref:struct:FT_Size_RequestRec_
FT_Size_RequestRec	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Size_RequestRec;$/;"	t	typeref:struct:FT_Size_RequestRec_
FT_Size_RequestRec_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct  FT_Size_RequestRec_$/;"	s
FT_Size_Request_Type	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  } FT_Size_Request_Type;$/;"	t	typeref:enum:FT_Size_Request_Type_
FT_Size_Request_Type_	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef enum  FT_Size_Request_Type_$/;"	g
FT_Slot_Internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_Slot_InternalRec_*  FT_Slot_Internal;$/;"	t	typeref:struct:FT_Slot_InternalRec_
FT_Span	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Span;$/;"	t	typeref:struct:FT_Span_
FT_SpanFunc	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  (*FT_SpanFunc)( int             y,$/;"	t
FT_Span_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Span_$/;"	s
FT_Stream	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  typedef struct FT_StreamRec_*  FT_Stream;$/;"	t	typeref:struct:FT_StreamRec_
FT_StreamDesc	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  } FT_StreamDesc;$/;"	t	typeref:union:FT_StreamDesc_
FT_StreamDesc_	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  typedef union  FT_StreamDesc_$/;"	u
FT_StreamRec	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  } FT_StreamRec;$/;"	t	typeref:struct:FT_StreamRec_
FT_StreamRec_	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  typedef struct  FT_StreamRec_$/;"	s
FT_Stream_CloseFunc	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  (*FT_Stream_CloseFunc)( FT_Stream  stream );$/;"	t
FT_Stream_IoFunc	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^  (*FT_Stream_IoFunc)( FT_Stream       stream,$/;"	t
FT_String	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef char  FT_String;$/;"	t
FT_Stroker	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  typedef struct FT_StrokerRec_*  FT_Stroker;$/;"	t	typeref:struct:FT_StrokerRec_
FT_StrokerBorder	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  } FT_StrokerBorder;$/;"	t	typeref:enum:FT_StrokerBorder_
FT_StrokerBorder_	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  typedef enum  FT_StrokerBorder_$/;"	g
FT_Stroker_LineCap	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  } FT_Stroker_LineCap;$/;"	t	typeref:enum:FT_Stroker_LineCap_
FT_Stroker_LineCap_	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  typedef enum  FT_Stroker_LineCap_$/;"	g
FT_Stroker_LineJoin	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  } FT_Stroker_LineJoin;$/;"	t	typeref:enum:FT_Stroker_LineJoin_
FT_Stroker_LineJoin_	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  typedef enum  FT_Stroker_LineJoin_$/;"	g
FT_SubGlyph	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  typedef struct FT_SubGlyphRec_*  FT_SubGlyph;$/;"	t	typeref:struct:FT_SubGlyphRec_
FT_TRIGONOMETRY_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	733;"	d
FT_TRUETYPE_DRIVER_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	354;"	d
FT_TRUETYPE_ENGINE_TYPE_NONE	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_TRUETYPE_ENGINE_TYPE_NONE = 0,$/;"	e	enum:FT_TrueTypeEngineType_
FT_TRUETYPE_ENGINE_TYPE_PATENTED	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_TRUETYPE_ENGINE_TYPE_PATENTED$/;"	e	enum:FT_TrueTypeEngineType_
FT_TRUETYPE_ENGINE_TYPE_UNPATENTED	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_TRUETYPE_ENGINE_TYPE_UNPATENTED,$/;"	e	enum:FT_TrueTypeEngineType_
FT_TRUETYPE_IDS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	382;"	d
FT_TRUETYPE_TABLES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	395;"	d
FT_TRUETYPE_TAGS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	409;"	d
FT_TRUETYPE_UNPATENTED_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	816;"	d
FT_TYPE1_TABLES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	367;"	d
FT_TYPES_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	248;"	d
FT_Tag	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef FT_UInt32  FT_Tag;$/;"	t
FT_TrueTypeEngineType	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  } FT_TrueTypeEngineType;$/;"	t	typeref:enum:FT_TrueTypeEngineType_
FT_TrueTypeEngineType_	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  typedef enum  FT_TrueTypeEngineType_$/;"	g
FT_UFWord	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned short  FT_UFWord;  \/* unsigned distance *\/$/;"	t
FT_UFast	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef unsigned int   FT_UFast;$/;"	t
FT_UFast	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef unsigned long  FT_UFast;$/;"	t
FT_UINT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	267;"	d
FT_UINT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	283;"	d
FT_UINT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	293;"	d
FT_UINT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	303;"	d
FT_UINT64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	310;"	d
FT_UINT_MAX	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	66;"	d
FT_UInt	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned int  FT_UInt;$/;"	t
FT_UInt16	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef unsigned short  FT_UInt16;$/;"	t
FT_UInt32	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef unsigned int    FT_UInt32;$/;"	t
FT_UInt32	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef unsigned long   FT_UInt32;$/;"	t
FT_UInt64	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	/^  typedef FT_UINT64  FT_UInt64;$/;"	t
FT_ULONG_MAX	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	67;"	d
FT_ULong	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned long  FT_ULong;$/;"	t
FT_UNPATENTED_HINTING_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	757;"	d
FT_UNUSED	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	101;"	d
FT_USHORT_MAX	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	63;"	d
FT_UShort	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef unsigned short  FT_UShort;$/;"	t
FT_UnitVector	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  } FT_UnitVector;$/;"	t	typeref:struct:FT_UnitVector_
FT_UnitVector_	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^  typedef struct  FT_UnitVector_$/;"	s
FT_VALIDATE_APPLE	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	279;"	d
FT_VALIDATE_BASE	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	102;"	d
FT_VALIDATE_CKERN	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	281;"	d
FT_VALIDATE_GDEF	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	103;"	d
FT_VALIDATE_GPOS	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	104;"	d
FT_VALIDATE_GSUB	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	105;"	d
FT_VALIDATE_GX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	172;"	d
FT_VALIDATE_GX_BITFIELD	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	111;"	d
FT_VALIDATE_GX_LAST_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	92;"	d
FT_VALIDATE_GX_LENGTH	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	104;"	d
FT_VALIDATE_GX_START	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	110;"	d
FT_VALIDATE_JSTF	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	106;"	d
FT_VALIDATE_MATH	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	107;"	d
FT_VALIDATE_MS	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	278;"	d
FT_VALIDATE_OT	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	109;"	d
FT_VALIDATE_bsln	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	164;"	d
FT_VALIDATE_bsln_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	85;"	d
FT_VALIDATE_feat	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	161;"	d
FT_VALIDATE_feat_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	82;"	d
FT_VALIDATE_just	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	165;"	d
FT_VALIDATE_just_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	86;"	d
FT_VALIDATE_kern	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	166;"	d
FT_VALIDATE_kern_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	87;"	d
FT_VALIDATE_lcar	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	170;"	d
FT_VALIDATE_lcar_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	91;"	d
FT_VALIDATE_mort	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	162;"	d
FT_VALIDATE_mort_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	83;"	d
FT_VALIDATE_morx	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	163;"	d
FT_VALIDATE_morx_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	84;"	d
FT_VALIDATE_opbd	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	167;"	d
FT_VALIDATE_opbd_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	88;"	d
FT_VALIDATE_prop	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	169;"	d
FT_VALIDATE_prop_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	90;"	d
FT_VALIDATE_trak	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	168;"	d
FT_VALIDATE_trak_INDEX	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	89;"	d
FT_Var_Axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  } FT_Var_Axis;$/;"	t	typeref:struct:FT_Var_Axis_
FT_Var_Axis_	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  typedef struct  FT_Var_Axis_$/;"	s
FT_Var_Named_Style	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  } FT_Var_Named_Style;$/;"	t	typeref:struct:FT_Var_Named_Style_
FT_Var_Named_Style_	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^  typedef struct  FT_Var_Named_Style_$/;"	s
FT_Vector	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  } FT_Vector;$/;"	t	typeref:struct:FT_Vector_
FT_Vector_	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^  typedef struct  FT_Vector_$/;"	s
FT_WINFONTS_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	489;"	d
FT_WinFNT_Header	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^  typedef struct FT_WinFNT_HeaderRec_*  FT_WinFNT_Header;$/;"	t	typeref:struct:FT_WinFNT_HeaderRec_
FT_WinFNT_HeaderRec	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^  } FT_WinFNT_HeaderRec;$/;"	t	typeref:struct:FT_WinFNT_HeaderRec_
FT_WinFNT_HeaderRec_	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^  typedef struct  FT_WinFNT_HeaderRec_$/;"	s
FT_WinFNT_ID_CP1250	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	172;"	d
FT_WinFNT_ID_CP1251	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	170;"	d
FT_WinFNT_ID_CP1252	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	155;"	d
FT_WinFNT_ID_CP1253	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	164;"	d
FT_WinFNT_ID_CP1254	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	165;"	d
FT_WinFNT_ID_CP1255	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	167;"	d
FT_WinFNT_ID_CP1256	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	168;"	d
FT_WinFNT_ID_CP1257	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	169;"	d
FT_WinFNT_ID_CP1258	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	166;"	d
FT_WinFNT_ID_CP1361	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	161;"	d
FT_WinFNT_ID_CP874	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	171;"	d
FT_WinFNT_ID_CP932	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	159;"	d
FT_WinFNT_ID_CP936	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	162;"	d
FT_WinFNT_ID_CP949	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	160;"	d
FT_WinFNT_ID_CP950	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	163;"	d
FT_WinFNT_ID_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	156;"	d
FT_WinFNT_ID_MAC	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	158;"	d
FT_WinFNT_ID_OEM	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	173;"	d
FT_WinFNT_ID_SYMBOL	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	157;"	d
FT_XFREE86_H	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	720;"	d
FUNCTION	.\dep\Lua\src\luac.c	120;"	d	file:
Factor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    enum Factor$/;"	g	struct:sf::BlendMode
Factor	.\include\SFML\Graphics\BlendMode.hpp	/^    enum Factor$/;"	g	struct:sf::BlendMode
Factorial	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline unsigned int Factorial( unsigned int number )$/;"	f
FactoryMap	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        typedef std::map<std::string, Ptr<IReporterFactory> > FactoryMap;$/;"	t	struct:Catch::IReporterRegistry
Fail	.\include\sol\Catch\include\catch_session.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	e	enum:Catch::Session::OnUnusedOptions::DoWhat
Failed	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            Failed$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
FailureBit	.\include\sol\Catch\include\internal\catch_result_type.h	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FailureBit	.\include\sol\Catch\single_include\catch.hpp	/^        FailureBit = 0x10,$/;"	e	enum:Catch::ResultWas::OfType
FalseTest	.\include\sol\Catch\include\internal\catch_result_type.h	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseTest	.\include\sol\Catch\single_include\catch.hpp	/^        FalseTest = 0x04,           \/\/ Prefix expression with !$/;"	e	enum:Catch::ResultDisposition::Flags
FalseType	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct FalseType { char sizer[2]; };$/;"	s	namespace:Catch::Detail
FalseType	.\include\sol\Catch\single_include\catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	s	namespace:Catch::Detail
FatalConditionHandler	.\include\sol\Catch\include\internal\catch_fatal_condition.hpp	/^    struct FatalConditionHandler {$/;"	s	namespace:Catch
FatalErrorCondition	.\include\sol\Catch\include\internal\catch_result_type.h	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FatalErrorCondition	.\include\sol\Catch\single_include\catch.hpp	/^        FatalErrorCondition = 0x200 | FailureBit$/;"	e	enum:Catch::ResultWas::OfType
FieldTable	.\dep\SFML\include\SFML\Network\Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request
FieldTable	.\dep\SFML\include\SFML\Network\Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response
FieldTable	.\include\SFML\Network\Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Request
FieldTable	.\include\SFML\Network\Http.hpp	/^        typedef std::map<std::string, std::string> FieldTable;$/;"	t	class:sf::Http::Response
FileActionAborted	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionAborted	.\include\SFML\Network\Ftp.hpp	/^            FileActionAborted         = 450, \/\/\/< Requested file action not taken$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileActionOk	.\include\SFML\Network\Ftp.hpp	/^            FileActionOk          = 250, \/\/\/< Requested file action ok$/;"	e	enum:sf::Ftp::Response::Status
FileInputStream	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileInputStream	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^FileInputStream::FileInputStream()$/;"	f	class:sf::FileInputStream
FileInputStream	.\include\SFML\System\FileInputStream.hpp	/^class SFML_SYSTEM_API FileInputStream : public InputStream, NonCopyable$/;"	c	namespace:sf
FileName	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    FileName[6];$/;"	m	struct:TT_PCLT_
FileName	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            FileName = LightGrey,$/;"	e	enum:Catch::Colour::Code
FileStatus	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileStatus	.\include\SFML\Network\Ftp.hpp	/^            FileStatus            = 213, \/\/\/< File status$/;"	e	enum:sf::Ftp::Response::Status
FileStream	.\include\sol\Catch\include\internal\catch_stream.h	/^    class FileStream : public IStream {$/;"	c	namespace:Catch
FileStream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    FileStream::FileStream( std::string const& filename ) {$/;"	f	class:Catch::FileStream
FileUnavailable	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FileUnavailable	.\include\SFML\Network\Ftp.hpp	/^            FileUnavailable         = 550, \/\/\/< Requested action not taken, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not allowed$/;"	e	enum:sf::Ftp::Response::Status
FilenameNotAllowed	.\include\SFML\Network\Ftp.hpp	/^            FilenameNotAllowed      = 553, \/\/\/< Requested action not taken, file name not allowed$/;"	e	enum:sf::Ftp::Response::Status
Filter	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        struct Filter {$/;"	s	class:Catch::TestSpec
FindExtEntry	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static sfogl_StrToExtMap *FindExtEntry(const char *extensionName)$/;"	f	file:
FindExtEntry	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static sfglx_StrToExtMap *FindExtEntry(const char *extensionName)$/;"	f	file:
FindExtEntry	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static sfwgl_StrToExtMap *FindExtEntry(const char *extensionName)$/;"	f	file:
Fixture	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^    Fixture()$/;"	f	struct:__anon184::Fixture
Fixture	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^struct Fixture$/;"	s	namespace:__anon184	file:
Fixture	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^    Fixture() : m_a( 1 ) {}$/;"	f	struct:Fixture
Fixture	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^struct Fixture$/;"	s	file:
Flags	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Flags;$/;"	m	struct:TT_Header_
Flags	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    DWORD  Flags;$/;"	m	struct:_GPU_DEVICE
Flags	.\include\sol\Catch\include\internal\catch_result_type.h	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
Flags	.\include\sol\Catch\single_include\catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	g	struct:Catch::ResultDisposition
FlagsForFile	.\.ycm_extra_conf.py	/^def FlagsForFile( filename, **kwargs ):$/;"	f
FloatRect	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf
FloatRect	.\include\SFML\Graphics\Rect.hpp	/^typedef Rect<float> FloatRect;$/;"	t	namespace:sf
Font	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
Font	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Font::Font() :$/;"	f	class:sf::Font
Font	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Font::Font(const Font& copy) :$/;"	f	class:sf::Font
Font	.\include\SFML\Graphics\Font.hpp	/^class SFML_GRAPHICS_API Font$/;"	c	namespace:sf
FontNumber	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   FontNumber;$/;"	m	struct:TT_PCLT_
Font_Direction	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Font_Direction;$/;"	m	struct:TT_Header_
Font_Revision	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   Font_Revision;$/;"	m	struct:TT_Header_
ForAttributes	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        enum ForWhat { ForTextNodes, ForAttributes };$/;"	e	enum:Catch::XmlEncode::ForWhat
ForTextNodes	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        enum ForWhat { ForTextNodes, ForAttributes };$/;"	e	enum:Catch::XmlEncode::ForWhat
ForWhat	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        enum ForWhat { ForTextNodes, ForAttributes };$/;"	g	class:Catch::XmlEncode
Forbidden	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, even with authentication$/;"	e	enum:sf::Http::Response::Status
Forbidden	.\include\SFML\Network\Http.hpp	/^            Forbidden           = 403, \/\/\/< The requested page cannot be accessed at all, even with authentication$/;"	e	enum:sf::Http::Response::Status
Foreground	.\src\include\trmclr.hpp	/^struct Foreground : Style$/;"	s	namespace:trmclr
FormatType	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed  FormatType;$/;"	m	struct:TT_Postscript_
Fps	.\src\include\Game.h	/^	static FPS Fps;$/;"	m	class:Game
Fps	.\src\src\Game.cpp	/^FPS Game::Fps;$/;"	m	class:Game	file:
Fragment	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^        Fragment \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
Fragment	.\include\SFML\Graphics\Shader.hpp	/^        Fragment \/\/\/< Fragment (pixel) shader$/;"	e	enum:sf::Shader::Type
FreeFunctionTestCase	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        FreeFunctionTestCase( TestFunction fun ) : m_fun( fun ) {}$/;"	f	class:Catch::FreeFunctionTestCase
FreeFunctionTestCase	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    class FreeFunctionTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
Ftp	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Ftp	.\include\SFML\Network\Ftp.hpp	/^class SFML_NETWORK_API Ftp : NonCopyable$/;"	c	namespace:sf
Ftypes	.\dep\Lua\src\lstrlib.c	/^typedef union Ftypes {$/;"	u	file:
Ftypes	.\dep\Lua\src\lstrlib.c	/^} Ftypes;$/;"	t	typeref:union:Ftypes	file:
Fullscreen	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon116
Fullscreen	.\include\SFML\Window\WindowStyle.hpp	/^        Fullscreen = 1 << 3, \/\/\/< Fullscreen mode (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon176
FuncState	.\dep\Lua\src\lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	.\dep\Lua\src\lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
FuncState	.\include\lua\lparser.h	/^typedef struct FuncState {$/;"	s
FuncState	.\include\lua\lparser.h	/^} FuncState;$/;"	t	typeref:struct:FuncState
Function	.\include\sol\single\sol\sol.hpp	/^			typedef meta::unwrapped_t<meta::unqualified_t<Func>> Function;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
Function	.\include\sol\sol\function_types_stateful.hpp	/^			typedef meta::unwrapped_t<meta::unqualified_t<Func>> Function;$/;"	t	struct:sol::function_detail::functor_function
G	.\dep\Lua\src\lstate.h	186;"	d
G	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
G	.\include\SFML\Window\Keyboard.hpp	/^        G,            \/\/\/< The G key$/;"	e	enum:sf::Keyboard::Key
G	.\include\lua\lstate.h	186;"	d
GCFINALIZECOST	.\dep\Lua\src\lgc.c	45;"	d	file:
GCObject	.\dep\Lua\src\lobject.h	/^struct GCObject {$/;"	s
GCObject	.\dep\Lua\src\lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCObject	.\include\lua\lobject.h	/^struct GCObject {$/;"	s
GCObject	.\include\lua\lobject.h	/^typedef struct GCObject GCObject;$/;"	t	typeref:struct:GCObject
GCSTEPSIZE	.\dep\Lua\src\lgc.h	32;"	d
GCSTEPSIZE	.\include\lua\lgc.h	32;"	d
GCSWEEPCOST	.\dep\Lua\src\lgc.c	39;"	d	file:
GCSWEEPMAX	.\dep\Lua\src\lgc.c	42;"	d	file:
GCSatomic	.\dep\Lua\src\lgc.h	40;"	d
GCSatomic	.\include\lua\lgc.h	40;"	d
GCScallfin	.\dep\Lua\src\lgc.h	45;"	d
GCScallfin	.\include\lua\lgc.h	45;"	d
GCSinsideatomic	.\dep\Lua\src\lgc.c	33;"	d	file:
GCSpause	.\dep\Lua\src\lgc.h	46;"	d
GCSpause	.\include\lua\lgc.h	46;"	d
GCSpropagate	.\dep\Lua\src\lgc.h	39;"	d
GCSpropagate	.\include\lua\lgc.h	39;"	d
GCSswpallgc	.\dep\Lua\src\lgc.h	41;"	d
GCSswpallgc	.\include\lua\lgc.h	41;"	d
GCSswpend	.\dep\Lua\src\lgc.h	44;"	d
GCSswpend	.\include\lua\lgc.h	44;"	d
GCSswpfinobj	.\dep\Lua\src\lgc.h	42;"	d
GCSswpfinobj	.\include\lua\lgc.h	42;"	d
GCSswptobefnz	.\dep\Lua\src\lgc.h	43;"	d
GCSswptobefnz	.\include\lua\lgc.h	43;"	d
GCTM	.\dep\Lua\src\lgc.c	/^static void GCTM (lua_State *L, int propagateerrors) {$/;"	f	file:
GCUnion	.\dep\Lua\src\lstate.h	/^union GCUnion {$/;"	u
GCUnion	.\include\lua\lstate.h	/^union GCUnion {$/;"	u
GCdebt	.\dep\Lua\src\lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCdebt	.\include\lua\lstate.h	/^  l_mem GCdebt;  \/* bytes allocated not yet compensated by the collector *\/$/;"	m	struct:global_State
GCestimate	.\dep\Lua\src\lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCestimate	.\include\lua\lstate.h	/^  lu_mem GCestimate;  \/* an estimate of the non-garbage memory in use *\/$/;"	m	struct:global_State
GCmemtrav	.\dep\Lua\src\lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GCmemtrav	.\include\lua\lstate.h	/^  lu_mem GCmemtrav;  \/* memory traversed by the GC *\/$/;"	m	struct:global_State
GENERATE	.\include\sol\Catch\include\catch.hpp	189;"	d
GETARG_A	.\dep\Lua\src\lopcodes.h	97;"	d
GETARG_A	.\include\lua\lopcodes.h	97;"	d
GETARG_Ax	.\dep\Lua\src\lopcodes.h	109;"	d
GETARG_Ax	.\include\lua\lopcodes.h	109;"	d
GETARG_B	.\dep\Lua\src\lopcodes.h	100;"	d
GETARG_B	.\include\lua\lopcodes.h	100;"	d
GETARG_Bx	.\dep\Lua\src\lopcodes.h	106;"	d
GETARG_Bx	.\include\lua\lopcodes.h	106;"	d
GETARG_C	.\dep\Lua\src\lopcodes.h	103;"	d
GETARG_C	.\include\lua\lopcodes.h	103;"	d
GETARG_sBx	.\dep\Lua\src\lopcodes.h	112;"	d
GETARG_sBx	.\include\lua\lopcodes.h	112;"	d
GETJOCTET	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	112;"	d
GETJOCTET	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	118;"	d
GETJOCTET	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	120;"	d
GETJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	61;"	d
GETJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	67;"	d
GETJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	69;"	d
GETJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	86;"	d
GET_OPCODE	.\dep\Lua\src\lopcodes.h	89;"	d
GET_OPCODE	.\include\lua\lopcodes.h	89;"	d
GIF_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	34;"	d
GIVEN	.\include\sol\Catch\include\catch.hpp	203;"	d
GIVEN	.\include\sol\Catch\single_include\catch.hpp	10350;"	d
GLAPI	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	75;"	d
GLAPI	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	77;"	d
GLAPI	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	80;"	d
GLDEBUGPROC	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef void (APIENTRY *GLDEBUGPROC)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLDEBUGPROCAMD	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef void (APIENTRY *GLDEBUGPROCAMD)(GLuint id,GLenum category,GLenum severity,GLsizei length,const GLchar *message,void *userParam);$/;"	t
GLDEBUGPROCARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef void (APIENTRY *GLDEBUGPROCARB)(GLenum source,GLenum type,GLuint id,GLenum severity,GLsizei length,const GLchar *message,const void *userParam);$/;"	t
GLEXT_64_TYPES_DEFINED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	95;"	d
GLEXT_64_TYPES_DEFINED	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	73;"	d
GLEXT_EXT_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	135;"	d
GLEXT_EXT_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	48;"	d
GLEXT_GL_CLAMP	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	122;"	d
GLEXT_GL_CLAMP	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	53;"	d
GLEXT_GL_CLAMP_TO_EDGE	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	132;"	d
GLEXT_GL_CLAMP_TO_EDGE	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	54;"	d
GLEXT_GL_COLOR_ATTACHMENT0	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	106;"	d
GLEXT_GL_COLOR_ATTACHMENT0	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	214;"	d
GLEXT_GL_DEPTH_ATTACHMENT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	107;"	d
GLEXT_GL_DEPTH_ATTACHMENT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	215;"	d
GLEXT_GL_DEPTH_COMPONENT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	105;"	d
GLEXT_GL_DEPTH_COMPONENT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	121;"	d
GLEXT_GL_FRAGMENT_SHADER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	191;"	d
GLEXT_GL_FRAMEBUFFER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	103;"	d
GLEXT_GL_FRAMEBUFFER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	212;"	d
GLEXT_GL_FRAMEBUFFER_BINDING	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	109;"	d
GLEXT_GL_FRAMEBUFFER_BINDING	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	217;"	d
GLEXT_GL_FRAMEBUFFER_COMPLETE	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	108;"	d
GLEXT_GL_FRAMEBUFFER_COMPLETE	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	216;"	d
GLEXT_GL_FUNC_ADD	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	140;"	d
GLEXT_GL_FUNC_ADD	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	65;"	d
GLEXT_GL_FUNC_SUBTRACT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	144;"	d
GLEXT_GL_FUNC_SUBTRACT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	66;"	d
GLEXT_GL_INVALID_FRAMEBUFFER_OPERATION	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	110;"	d
GLEXT_GL_INVALID_FRAMEBUFFER_OPERATION	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	218;"	d
GLEXT_GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	187;"	d
GLEXT_GL_OBJECT_COMPILE_STATUS	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	180;"	d
GLEXT_GL_OBJECT_LINK_STATUS	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	181;"	d
GLEXT_GL_PROGRAM_OBJECT	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	179;"	d
GLEXT_GL_RENDERBUFFER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	104;"	d
GLEXT_GL_RENDERBUFFER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	213;"	d
GLEXT_GL_TEXTURE0	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	150;"	d
GLEXT_GL_TEXTURE0	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	52;"	d
GLEXT_GL_VERTEX_SHADER	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	186;"	d
GLEXT_GLhandle	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	182;"	d
GLEXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	197;"	d
GLEXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	82;"	d
GLEXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	84;"	d
GLEXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	153;"	d
GLEXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	73;"	d
GLEXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	75;"	d
GLEXT_blend_minmax	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	138;"	d
GLEXT_blend_minmax	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	49;"	d
GLEXT_blend_subtract	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	143;"	d
GLEXT_blend_subtract	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	63;"	d
GLEXT_fragment_shader	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	190;"	d
GLEXT_framebuffer_object	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	201;"	d
GLEXT_framebuffer_object	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	92;"	d
GLEXT_glActiveTexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	149;"	d
GLEXT_glActiveTexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	51;"	d
GLEXT_glAttachObject	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	167;"	d
GLEXT_glBindFramebuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	206;"	d
GLEXT_glBindFramebuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	97;"	d
GLEXT_glBindRenderbuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	202;"	d
GLEXT_glBindRenderbuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	93;"	d
GLEXT_glBlendEquation	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	139;"	d
GLEXT_glBlendEquation	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	64;"	d
GLEXT_glBlendEquationSeparate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	198;"	d
GLEXT_glBlendEquationSeparate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	86;"	d
GLEXT_glBlendFuncSeparate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	154;"	d
GLEXT_glBlendFuncSeparate	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	77;"	d
GLEXT_glCheckFramebufferStatus	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	100;"	d
GLEXT_glCheckFramebufferStatus	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	209;"	d
GLEXT_glClientActiveTexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	148;"	d
GLEXT_glClientActiveTexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	50;"	d
GLEXT_glCompileShader	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	165;"	d
GLEXT_glCreateProgramObject	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	166;"	d
GLEXT_glCreateShaderObject	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	163;"	d
GLEXT_glDeleteFramebuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	207;"	d
GLEXT_glDeleteFramebuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	98;"	d
GLEXT_glDeleteObject	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	161;"	d
GLEXT_glDeleteRenderbuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	203;"	d
GLEXT_glDeleteRenderbuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	94;"	d
GLEXT_glFramebufferRenderbuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	102;"	d
GLEXT_glFramebufferRenderbuffer	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	211;"	d
GLEXT_glFramebufferTexture2D	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	101;"	d
GLEXT_glFramebufferTexture2D	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	210;"	d
GLEXT_glGenFramebuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	208;"	d
GLEXT_glGenFramebuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	99;"	d
GLEXT_glGenRenderbuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	204;"	d
GLEXT_glGenRenderbuffers	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	95;"	d
GLEXT_glGetHandle	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	162;"	d
GLEXT_glGetInfoLog	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	177;"	d
GLEXT_glGetObjectParameteriv	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	176;"	d
GLEXT_glGetUniformLocation	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	178;"	d
GLEXT_glLinkProgram	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	168;"	d
GLEXT_glRenderbufferStorage	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	205;"	d
GLEXT_glRenderbufferStorage	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	96;"	d
GLEXT_glShaderSource	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	164;"	d
GLEXT_glUniform1f	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	170;"	d
GLEXT_glUniform1i	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	174;"	d
GLEXT_glUniform2f	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	171;"	d
GLEXT_glUniform3f	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	172;"	d
GLEXT_glUniform4f	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	173;"	d
GLEXT_glUniformMatrix4fv	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	175;"	d
GLEXT_glUseProgramObject	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	169;"	d
GLEXT_multitexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	147;"	d
GLEXT_multitexture	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	46;"	d
GLEXT_shader_objects	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	160;"	d
GLEXT_shading_language_100	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	157;"	d
GLEXT_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	131;"	d
GLEXT_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	47;"	d
GLEXT_texture_non_power_of_two	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	194;"	d
GLEXT_texture_non_power_of_two	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	89;"	d
GLEXT_vertex_shader	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	185;"	d
GLOBAL	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	195;"	d
GLXContext	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef struct __GLXcontextRec *GLXContext;$/;"	t	typeref:struct:__GLXcontextRec
GLXContextID	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXContextID;$/;"	t
GLXDrawable	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXDrawable;$/;"	t
GLXFBConfig	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef struct __GLXFBConfigRec *GLXFBConfig;$/;"	t	typeref:struct:__GLXFBConfigRec
GLXFBConfigSGIX	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef struct __GLXFBConfigRec *GLXFBConfigSGIX;$/;"	t	typeref:struct:__GLXFBConfigRec
GLXHyperpipeConfigSGIX	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^} GLXHyperpipeConfigSGIX;$/;"	t	typeref:struct:__anon147
GLXHyperpipeNetworkSGIX	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^} GLXHyperpipeNetworkSGIX;$/;"	t	typeref:struct:__anon146
GLXPbuffer	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXPbuffer;$/;"	t
GLXPbufferSGIX	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXPbufferSGIX;$/;"	t
GLXPipeRect	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^} GLXPipeRect;$/;"	t	typeref:struct:__anon148
GLXPipeRectLimits	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^} GLXPipeRectLimits;$/;"	t	typeref:struct:__anon149
GLXPixmap	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXPixmap;$/;"	t
GLXVideoCaptureDeviceNV	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXVideoCaptureDeviceNV;$/;"	t
GLXVideoDeviceNV	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef unsigned int GLXVideoDeviceNV;$/;"	t
GLXVideoSourceSGIX	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef XID GLXVideoSourceSGIX;$/;"	t
GLX_ARB_create_context	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	184;"	d
GLX_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	163;"	d
GLX_CONTEXT_CORE_PROFILE_BIT_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	164;"	d
GLX_CONTEXT_DEBUG_BIT_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	157;"	d
GLX_CONTEXT_FLAGS_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	158;"	d
GLX_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	159;"	d
GLX_CONTEXT_MAJOR_VERSION_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	160;"	d
GLX_CONTEXT_MINOR_VERSION_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	161;"	d
GLX_CONTEXT_PROFILE_MASK_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	165;"	d
GLX_EXT_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	168;"	d
GLX_MAX_SWAP_INTERVAL_EXT	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	151;"	d
GLX_SAMPLES_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	154;"	d
GLX_SAMPLE_BUFFERS_ARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	155;"	d
GLX_SGI_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	178;"	d
GLX_SWAP_INTERVAL_EXT	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	152;"	d
GL_2D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	347;"	d
GL_2_BYTES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	348;"	d
GL_3D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	349;"	d
GL_3D_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	350;"	d
GL_3D_COLOR_TEXTURE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	351;"	d
GL_3_BYTES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	352;"	d
GL_4D_COLOR_TEXTURE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	353;"	d
GL_4_BYTES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	354;"	d
GL_ACCUM	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	355;"	d
GL_ACCUM_ALPHA_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	356;"	d
GL_ACCUM_BLUE_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	357;"	d
GL_ACCUM_BUFFER_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	358;"	d
GL_ACCUM_CLEAR_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	359;"	d
GL_ACCUM_GREEN_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	360;"	d
GL_ACCUM_RED_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	361;"	d
GL_ACTIVE_TEXTURE_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	202;"	d
GL_ADD	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	362;"	d
GL_ALL_ATTRIB_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	363;"	d
GL_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	364;"	d
GL_ALPHA12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	365;"	d
GL_ALPHA16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	366;"	d
GL_ALPHA4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	367;"	d
GL_ALPHA8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	368;"	d
GL_ALPHA_BIAS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	369;"	d
GL_ALPHA_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	370;"	d
GL_ALPHA_SCALE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	371;"	d
GL_ALPHA_TEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	372;"	d
GL_ALPHA_TEST_FUNC	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	373;"	d
GL_ALPHA_TEST_REF	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	374;"	d
GL_ALWAYS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	375;"	d
GL_AMBIENT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	376;"	d
GL_AMBIENT_AND_DIFFUSE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	377;"	d
GL_AND	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	378;"	d
GL_AND_INVERTED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	379;"	d
GL_AND_REVERSE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	380;"	d
GL_ARB_multitexture	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	798;"	d
GL_ARB_shader_objects	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	812;"	d
GL_ARB_vertex_shader	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	894;"	d
GL_ATTRIB_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	381;"	d
GL_AUTO_NORMAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	382;"	d
GL_BACK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	383;"	d
GL_BITMAP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	384;"	d
GL_BITMAP_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	385;"	d
GL_BLEND	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	386;"	d
GL_BLEND_DST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	387;"	d
GL_BLEND_DST_ALPHA_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	238;"	d
GL_BLEND_DST_RGB_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	239;"	d
GL_BLEND_EQUATION_ALPHA_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	292;"	d
GL_BLEND_EQUATION_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	194;"	d
GL_BLEND_EQUATION_RGB_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	293;"	d
GL_BLEND_SRC	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	388;"	d
GL_BLEND_SRC_ALPHA_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	240;"	d
GL_BLEND_SRC_RGB_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	241;"	d
GL_BLUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	389;"	d
GL_BLUE_BIAS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	390;"	d
GL_BLUE_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	391;"	d
GL_BLUE_SCALE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	392;"	d
GL_BOOL_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	245;"	d
GL_BOOL_VEC2_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	246;"	d
GL_BOOL_VEC3_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	247;"	d
GL_BOOL_VEC4_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	248;"	d
GL_BYTE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	393;"	d
GL_C3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	394;"	d
GL_C4F_N3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	395;"	d
GL_C4UB_V2F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	396;"	d
GL_C4UB_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	397;"	d
GL_CCW	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	398;"	d
GL_CLAMP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	399;"	d
GL_CLAMP_TO_EDGE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	192;"	d
GL_CLAMP_TO_EDGE_SGIS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	190;"	d
GL_CLEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	400;"	d
GL_CLIENT_ACTIVE_TEXTURE_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	203;"	d
GL_CLIENT_ALL_ATTRIB_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	401;"	d
GL_CLIENT_ATTRIB_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	402;"	d
GL_CLIENT_PIXEL_STORE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	403;"	d
GL_CLIENT_VERTEX_ARRAY_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	404;"	d
GL_CLIP_PLANE0	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	405;"	d
GL_CLIP_PLANE1	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	406;"	d
GL_CLIP_PLANE2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	407;"	d
GL_CLIP_PLANE3	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	408;"	d
GL_CLIP_PLANE4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	409;"	d
GL_CLIP_PLANE5	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	410;"	d
GL_COEFF	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	411;"	d
GL_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	412;"	d
GL_COLOR_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	413;"	d
GL_COLOR_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	414;"	d
GL_COLOR_ARRAY_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	415;"	d
GL_COLOR_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	416;"	d
GL_COLOR_ARRAY_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	417;"	d
GL_COLOR_ATTACHMENT0_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	295;"	d
GL_COLOR_ATTACHMENT10_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	296;"	d
GL_COLOR_ATTACHMENT11_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	297;"	d
GL_COLOR_ATTACHMENT12_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	298;"	d
GL_COLOR_ATTACHMENT13_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	299;"	d
GL_COLOR_ATTACHMENT14_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	300;"	d
GL_COLOR_ATTACHMENT15_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	301;"	d
GL_COLOR_ATTACHMENT1_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	302;"	d
GL_COLOR_ATTACHMENT2_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	303;"	d
GL_COLOR_ATTACHMENT3_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	304;"	d
GL_COLOR_ATTACHMENT4_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	305;"	d
GL_COLOR_ATTACHMENT5_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	306;"	d
GL_COLOR_ATTACHMENT6_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	307;"	d
GL_COLOR_ATTACHMENT7_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	308;"	d
GL_COLOR_ATTACHMENT8_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	309;"	d
GL_COLOR_ATTACHMENT9_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	310;"	d
GL_COLOR_BUFFER_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	418;"	d
GL_COLOR_CLEAR_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	419;"	d
GL_COLOR_INDEX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	420;"	d
GL_COLOR_INDEXES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	421;"	d
GL_COLOR_LOGIC_OP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	422;"	d
GL_COLOR_MATERIAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	423;"	d
GL_COLOR_MATERIAL_FACE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	424;"	d
GL_COLOR_MATERIAL_PARAMETER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	425;"	d
GL_COLOR_WRITEMASK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	426;"	d
GL_COMPILE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	427;"	d
GL_COMPILE_AND_EXECUTE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	428;"	d
GL_CONSTANT_ATTENUATION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	429;"	d
GL_CONTEXT_COMPATIBILITY_PROFILE_BIT	.\dep\SFML\src\SFML\Window\GlContext.cpp	116;"	d	file:
GL_CONTEXT_CORE_PROFILE_BIT	.\dep\SFML\src\SFML\Window\GlContext.cpp	112;"	d	file:
GL_CONTEXT_FLAGS	.\dep\SFML\src\SFML\Window\GlContext.cpp	100;"	d	file:
GL_CONTEXT_FLAG_DEBUG_BIT	.\dep\SFML\src\SFML\Window\GlContext.cpp	104;"	d	file:
GL_CONTEXT_PROFILE_MASK	.\dep\SFML\src\SFML\Window\GlContext.cpp	108;"	d	file:
GL_COPY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	430;"	d
GL_COPY_INVERTED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	431;"	d
GL_COPY_PIXEL_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	432;"	d
GL_CULL_FACE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	433;"	d
GL_CULL_FACE_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	434;"	d
GL_CURRENT_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	435;"	d
GL_CURRENT_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	436;"	d
GL_CURRENT_INDEX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	437;"	d
GL_CURRENT_NORMAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	438;"	d
GL_CURRENT_RASTER_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	439;"	d
GL_CURRENT_RASTER_DISTANCE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	440;"	d
GL_CURRENT_RASTER_INDEX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	441;"	d
GL_CURRENT_RASTER_POSITION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	442;"	d
GL_CURRENT_RASTER_POSITION_VALID	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	443;"	d
GL_CURRENT_RASTER_TEXTURE_COORDS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	444;"	d
GL_CURRENT_TEXTURE_COORDS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	445;"	d
GL_CW	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	446;"	d
GL_DECAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	447;"	d
GL_DECR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	448;"	d
GL_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	449;"	d
GL_DEPTH_ATTACHMENT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	311;"	d
GL_DEPTH_BIAS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	450;"	d
GL_DEPTH_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	451;"	d
GL_DEPTH_BUFFER_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	452;"	d
GL_DEPTH_CLEAR_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	453;"	d
GL_DEPTH_COMPONENT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	454;"	d
GL_DEPTH_FUNC	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	455;"	d
GL_DEPTH_RANGE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	456;"	d
GL_DEPTH_SCALE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	457;"	d
GL_DEPTH_TEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	458;"	d
GL_DEPTH_WRITEMASK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	459;"	d
GL_DITHER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	460;"	d
GL_DOMAIN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	461;"	d
GL_DONT_CARE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	462;"	d
GL_DOUBLE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	463;"	d
GL_DOUBLEBUFFER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	464;"	d
GL_DRAW_BUFFER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	465;"	d
GL_DRAW_PIXEL_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	466;"	d
GL_DST_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	467;"	d
GL_DST_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	468;"	d
GL_EDGE_FLAG	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	469;"	d
GL_EDGE_FLAG_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	470;"	d
GL_EDGE_FLAG_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	471;"	d
GL_EDGE_FLAG_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	472;"	d
GL_EMISSION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	473;"	d
GL_ENABLE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	474;"	d
GL_EQUAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	475;"	d
GL_EQUIV	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	476;"	d
GL_EVAL_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	477;"	d
GL_EXP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	478;"	d
GL_EXP2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	479;"	d
GL_EXTENSIONS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	480;"	d
GL_EXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	906;"	d
GL_EXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	806;"	d
GL_EXT_blend_minmax	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	791;"	d
GL_EXT_framebuffer_object	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	912;"	d
GL_EYE_LINEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	481;"	d
GL_EYE_PLANE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	482;"	d
GL_FALSE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	483;"	d
GL_FASTEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	484;"	d
GL_FEEDBACK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	485;"	d
GL_FEEDBACK_BUFFER_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	486;"	d
GL_FEEDBACK_BUFFER_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	487;"	d
GL_FEEDBACK_BUFFER_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	488;"	d
GL_FILL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	489;"	d
GL_FLAT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	490;"	d
GL_FLOAT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	491;"	d
GL_FLOAT_MAT2_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	249;"	d
GL_FLOAT_MAT3_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	250;"	d
GL_FLOAT_MAT4_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	251;"	d
GL_FLOAT_VEC2_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	252;"	d
GL_FLOAT_VEC3_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	253;"	d
GL_FLOAT_VEC4_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	254;"	d
GL_FRAGMENT_SHADER_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	288;"	d
GL_FRAGMENT_SHADER_DERIVATIVE_HINT_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	289;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_NAME_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	312;"	d
GL_FRAMEBUFFER_ATTACHMENT_OBJECT_TYPE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	313;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_3D_ZOFFSET_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	314;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_CUBE_MAP_FACE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	315;"	d
GL_FRAMEBUFFER_ATTACHMENT_TEXTURE_LEVEL_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	316;"	d
GL_FRAMEBUFFER_BINDING_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	317;"	d
GL_FRAMEBUFFER_COMPLETE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	318;"	d
GL_FRAMEBUFFER_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	319;"	d
GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	320;"	d
GL_FRAMEBUFFER_INCOMPLETE_DIMENSIONS_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	321;"	d
GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	322;"	d
GL_FRAMEBUFFER_INCOMPLETE_FORMATS_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	323;"	d
GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	324;"	d
GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	325;"	d
GL_FRAMEBUFFER_UNSUPPORTED_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	326;"	d
GL_FRONT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	492;"	d
GL_FRONT_AND_BACK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	493;"	d
GL_FRONT_FACE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	494;"	d
GL_FUNC_ADD_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	195;"	d
GL_FUNC_REVERSE_SUBTRACT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	199;"	d
GL_FUNC_SUBTRACT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	200;"	d
GL_GEQUAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	495;"	d
GL_GREATER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	496;"	d
GL_GREEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	497;"	d
GL_GREEN_BIAS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	498;"	d
GL_GREEN_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	499;"	d
GL_GREEN_SCALE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	500;"	d
GL_HINT_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	501;"	d
GL_INCR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	502;"	d
GL_INDEX_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	503;"	d
GL_INDEX_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	504;"	d
GL_INDEX_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	505;"	d
GL_INDEX_ARRAY_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	506;"	d
GL_INDEX_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	507;"	d
GL_INDEX_CLEAR_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	508;"	d
GL_INDEX_LOGIC_OP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	509;"	d
GL_INDEX_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	510;"	d
GL_INDEX_OFFSET	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	511;"	d
GL_INDEX_SHIFT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	512;"	d
GL_INDEX_WRITEMASK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	513;"	d
GL_INT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	514;"	d
GL_INTENSITY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	515;"	d
GL_INTENSITY12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	516;"	d
GL_INTENSITY16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	517;"	d
GL_INTENSITY4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	518;"	d
GL_INTENSITY8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	519;"	d
GL_INT_VEC2_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	255;"	d
GL_INT_VEC3_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	256;"	d
GL_INT_VEC4_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	257;"	d
GL_INVALID_ENUM	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	520;"	d
GL_INVALID_FRAMEBUFFER_OPERATION_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	327;"	d
GL_INVALID_OPERATION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	521;"	d
GL_INVALID_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	522;"	d
GL_INVERT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	523;"	d
GL_KEEP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	524;"	d
GL_LEQUAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	525;"	d
GL_LESS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	526;"	d
GL_LIGHTING	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	527;"	d
GL_LINE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	528;"	d
GL_LINEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	529;"	d
GL_LINEAR_ATTENUATION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	530;"	d
GL_LINEAR_MIPMAP_LINEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	531;"	d
GL_LINEAR_MIPMAP_NEAREST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	532;"	d
GL_LINES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	533;"	d
GL_LINE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	534;"	d
GL_LINE_LOOP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	535;"	d
GL_LINE_RESET_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	536;"	d
GL_LINE_SMOOTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	537;"	d
GL_LINE_SMOOTH_HINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	538;"	d
GL_LINE_STIPPLE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	539;"	d
GL_LINE_STIPPLE_PATTERN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	540;"	d
GL_LINE_STIPPLE_REPEAT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	541;"	d
GL_LINE_STRIP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	542;"	d
GL_LINE_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	543;"	d
GL_LINE_WIDTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	544;"	d
GL_LINE_WIDTH_GRANULARITY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	545;"	d
GL_LINE_WIDTH_RANGE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	546;"	d
GL_LOAD	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	547;"	d
GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	86;"	d
GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	43;"	d
GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	65;"	d
GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	48;"	d
GL_LOAD_GEN_BASIC_OPENGL_TYPEDEFS	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	70;"	d
GL_LOGIC_OP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	548;"	d
GL_LOGIC_OP_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	549;"	d
GL_LUMINANCE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	550;"	d
GL_LUMINANCE12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	551;"	d
GL_LUMINANCE12_ALPHA12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	552;"	d
GL_LUMINANCE12_ALPHA4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	553;"	d
GL_LUMINANCE16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	554;"	d
GL_LUMINANCE16_ALPHA16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	555;"	d
GL_LUMINANCE4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	556;"	d
GL_LUMINANCE4_ALPHA4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	557;"	d
GL_LUMINANCE6_ALPHA2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	558;"	d
GL_LUMINANCE8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	559;"	d
GL_LUMINANCE8_ALPHA8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	560;"	d
GL_LUMINANCE_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	561;"	d
GL_MAJOR_VERSION	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	36;"	d	file:
GL_MAJOR_VERSION	.\dep\SFML\src\SFML\Window\GlContext.cpp	88;"	d	file:
GL_MAP_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	562;"	d
GL_MAP_STENCIL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	563;"	d
GL_MATRIX_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	564;"	d
GL_MAX_ATTRIB_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	565;"	d
GL_MAX_CLIENT_ATTRIB_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	566;"	d
GL_MAX_CLIP_PLANES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	567;"	d
GL_MAX_COLOR_ATTACHMENTS_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	328;"	d
GL_MAX_COMBINED_TEXTURE_IMAGE_UNITS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	280;"	d
GL_MAX_EVAL_ORDER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	568;"	d
GL_MAX_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	196;"	d
GL_MAX_FRAGMENT_UNIFORM_COMPONENTS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	290;"	d
GL_MAX_LIGHTS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	569;"	d
GL_MAX_LIST_NESTING	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	570;"	d
GL_MAX_MODELVIEW_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	571;"	d
GL_MAX_NAME_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	572;"	d
GL_MAX_PIXEL_MAP_TABLE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	573;"	d
GL_MAX_PROJECTION_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	574;"	d
GL_MAX_RENDERBUFFER_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	329;"	d
GL_MAX_TEXTURE_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	575;"	d
GL_MAX_TEXTURE_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	576;"	d
GL_MAX_TEXTURE_UNITS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	204;"	d
GL_MAX_VARYING_FLOATS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	281;"	d
GL_MAX_VERTEX_TEXTURE_IMAGE_UNITS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	282;"	d
GL_MAX_VERTEX_UNIFORM_COMPONENTS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	283;"	d
GL_MAX_VIEWPORT_DIMS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	577;"	d
GL_MINOR_VERSION	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	40;"	d	file:
GL_MINOR_VERSION	.\dep\SFML\src\SFML\Window\GlContext.cpp	92;"	d	file:
GL_MIN_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	197;"	d
GL_MODELVIEW	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	578;"	d
GL_MODELVIEW_MATRIX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	579;"	d
GL_MODELVIEW_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	580;"	d
GL_MODULATE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	581;"	d
GL_MULT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	582;"	d
GL_MULTISAMPLE	.\dep\SFML\src\SFML\Window\GlContext.cpp	84;"	d	file:
GL_N3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	583;"	d
GL_NAND	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	584;"	d
GL_NEAREST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	585;"	d
GL_NEAREST_MIPMAP_LINEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	586;"	d
GL_NEAREST_MIPMAP_NEAREST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	587;"	d
GL_NEVER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	588;"	d
GL_NICEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	589;"	d
GL_NONE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	590;"	d
GL_NOOP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	591;"	d
GL_NOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	592;"	d
GL_NORMALIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	593;"	d
GL_NORMAL_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	594;"	d
GL_NORMAL_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	595;"	d
GL_NORMAL_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	596;"	d
GL_NORMAL_ARRAY_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	597;"	d
GL_NOTEQUAL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	598;"	d
GL_NO_ERROR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	599;"	d
GL_NUM_EXTENSIONS	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	44;"	d	file:
GL_NUM_EXTENSIONS	.\dep\SFML\src\SFML\Window\GlContext.cpp	96;"	d	file:
GL_OBJECT_ACTIVE_ATTRIBUTES_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	284;"	d
GL_OBJECT_ACTIVE_ATTRIBUTE_MAX_LENGTH_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	285;"	d
GL_OBJECT_ACTIVE_UNIFORMS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	258;"	d
GL_OBJECT_ACTIVE_UNIFORM_MAX_LENGTH_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	259;"	d
GL_OBJECT_ATTACHED_OBJECTS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	260;"	d
GL_OBJECT_COMPILE_STATUS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	261;"	d
GL_OBJECT_DELETE_STATUS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	262;"	d
GL_OBJECT_INFO_LOG_LENGTH_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	263;"	d
GL_OBJECT_LINEAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	600;"	d
GL_OBJECT_LINK_STATUS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	264;"	d
GL_OBJECT_PLANE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	601;"	d
GL_OBJECT_SHADER_SOURCE_LENGTH_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	265;"	d
GL_OBJECT_SUBTYPE_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	266;"	d
GL_OBJECT_TYPE_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	267;"	d
GL_OBJECT_VALIDATE_STATUS_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	268;"	d
GL_ONE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	602;"	d
GL_ONE_MINUS_DST_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	603;"	d
GL_ONE_MINUS_DST_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	604;"	d
GL_ONE_MINUS_SRC_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	605;"	d
GL_ONE_MINUS_SRC_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	606;"	d
GL_OR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	607;"	d
GL_ORDER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	608;"	d
GL_OR_INVERTED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	609;"	d
GL_OR_REVERSE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	610;"	d
GL_OUT_OF_MEMORY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	611;"	d
GL_PACK_ALIGNMENT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	612;"	d
GL_PACK_LSB_FIRST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	613;"	d
GL_PACK_ROW_LENGTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	614;"	d
GL_PACK_SKIP_PIXELS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	615;"	d
GL_PACK_SKIP_ROWS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	616;"	d
GL_PACK_SWAP_BYTES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	617;"	d
GL_PASS_THROUGH_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	618;"	d
GL_PERSPECTIVE_CORRECTION_HINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	619;"	d
GL_PIXEL_MODE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	620;"	d
GL_POINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	621;"	d
GL_POINTS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	622;"	d
GL_POINT_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	623;"	d
GL_POINT_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	624;"	d
GL_POINT_SIZE_GRANULARITY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	625;"	d
GL_POINT_SIZE_RANGE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	626;"	d
GL_POINT_SMOOTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	627;"	d
GL_POINT_SMOOTH_HINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	628;"	d
GL_POINT_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	629;"	d
GL_POLYGON	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	630;"	d
GL_POLYGON_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	631;"	d
GL_POLYGON_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	632;"	d
GL_POLYGON_OFFSET_FACTOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	633;"	d
GL_POLYGON_OFFSET_FILL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	634;"	d
GL_POLYGON_OFFSET_LINE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	635;"	d
GL_POLYGON_OFFSET_POINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	636;"	d
GL_POLYGON_OFFSET_UNITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	637;"	d
GL_POLYGON_SMOOTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	638;"	d
GL_POLYGON_SMOOTH_HINT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	639;"	d
GL_POLYGON_STIPPLE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	640;"	d
GL_POLYGON_STIPPLE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	641;"	d
GL_POLYGON_TOKEN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	642;"	d
GL_POSITION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	643;"	d
GL_PROGRAM_OBJECT_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	269;"	d
GL_PROJECTION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	644;"	d
GL_PROJECTION_MATRIX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	645;"	d
GL_PROJECTION_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	646;"	d
GL_PROXY_TEXTURE_1D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	647;"	d
GL_PROXY_TEXTURE_2D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	648;"	d
GL_Q	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	649;"	d
GL_QUADRATIC_ATTENUATION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	650;"	d
GL_QUADS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	651;"	d
GL_QUADS	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	213;"	d	file:
GL_QUAD_STRIP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	652;"	d
GL_R	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	653;"	d
GL_R3_G3_B2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	654;"	d
GL_READ_BUFFER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	655;"	d
GL_RED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	656;"	d
GL_RED_BIAS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	657;"	d
GL_RED_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	658;"	d
GL_RED_SCALE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	659;"	d
GL_RENDER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	660;"	d
GL_RENDERBUFFER_ALPHA_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	330;"	d
GL_RENDERBUFFER_BINDING_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	331;"	d
GL_RENDERBUFFER_BLUE_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	332;"	d
GL_RENDERBUFFER_DEPTH_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	333;"	d
GL_RENDERBUFFER_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	334;"	d
GL_RENDERBUFFER_GREEN_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	335;"	d
GL_RENDERBUFFER_HEIGHT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	336;"	d
GL_RENDERBUFFER_INTERNAL_FORMAT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	337;"	d
GL_RENDERBUFFER_RED_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	338;"	d
GL_RENDERBUFFER_STENCIL_SIZE_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	339;"	d
GL_RENDERBUFFER_WIDTH_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	340;"	d
GL_RENDERER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	661;"	d
GL_RENDER_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	662;"	d
GL_REPEAT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	663;"	d
GL_REPLACE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	664;"	d
GL_RETURN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	665;"	d
GL_RGB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	666;"	d
GL_RGB10	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	667;"	d
GL_RGB10_A2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	668;"	d
GL_RGB12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	669;"	d
GL_RGB16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	670;"	d
GL_RGB4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	671;"	d
GL_RGB5	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	672;"	d
GL_RGB5_A1	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	673;"	d
GL_RGB8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	674;"	d
GL_RGBA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	675;"	d
GL_RGBA12	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	676;"	d
GL_RGBA16	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	677;"	d
GL_RGBA2	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	678;"	d
GL_RGBA4	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	679;"	d
GL_RGBA8	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	680;"	d
GL_RGBA_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	681;"	d
GL_S	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	682;"	d
GL_SAMPLER_1D_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	270;"	d
GL_SAMPLER_1D_SHADOW_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	271;"	d
GL_SAMPLER_2D_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	272;"	d
GL_SAMPLER_2D_RECT_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	273;"	d
GL_SAMPLER_2D_RECT_SHADOW_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	274;"	d
GL_SAMPLER_2D_SHADOW_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	275;"	d
GL_SAMPLER_3D_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	276;"	d
GL_SAMPLER_CUBE_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	277;"	d
GL_SCISSOR_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	683;"	d
GL_SCISSOR_BOX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	684;"	d
GL_SCISSOR_TEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	685;"	d
GL_SET	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	686;"	d
GL_SHADER_OBJECT_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	278;"	d
GL_SHADE_MODEL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	687;"	d
GL_SHADING_LANGUAGE_VERSION_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	243;"	d
GL_SHININESS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	688;"	d
GL_SHORT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	689;"	d
GL_SMOOTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	690;"	d
GL_SPECULAR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	691;"	d
GL_SPHERE_MAP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	692;"	d
GL_SRC_ALPHA	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	693;"	d
GL_SRC_ALPHA_SATURATE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	694;"	d
GL_SRC_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	695;"	d
GL_STACK_OVERFLOW	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	696;"	d
GL_STACK_UNDERFLOW	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	697;"	d
GL_STENCIL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	698;"	d
GL_STENCIL_ATTACHMENT_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	341;"	d
GL_STENCIL_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	699;"	d
GL_STENCIL_BUFFER_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	700;"	d
GL_STENCIL_CLEAR_VALUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	701;"	d
GL_STENCIL_FAIL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	702;"	d
GL_STENCIL_FUNC	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	703;"	d
GL_STENCIL_INDEX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	704;"	d
GL_STENCIL_INDEX16_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	342;"	d
GL_STENCIL_INDEX1_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	343;"	d
GL_STENCIL_INDEX4_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	344;"	d
GL_STENCIL_INDEX8_EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	345;"	d
GL_STENCIL_PASS_DEPTH_FAIL	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	705;"	d
GL_STENCIL_PASS_DEPTH_PASS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	706;"	d
GL_STENCIL_REF	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	707;"	d
GL_STENCIL_TEST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	708;"	d
GL_STENCIL_VALUE_MASK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	709;"	d
GL_STENCIL_WRITEMASK	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	710;"	d
GL_STEREO	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	711;"	d
GL_SUBPIXEL_BITS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	712;"	d
GL_T	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	713;"	d
GL_T2F_C3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	714;"	d
GL_T2F_C4F_N3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	715;"	d
GL_T2F_C4UB_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	716;"	d
GL_T2F_N3F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	717;"	d
GL_T2F_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	718;"	d
GL_T4F_C4F_N3F_V4F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	719;"	d
GL_T4F_V4F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	720;"	d
GL_TEXTURE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	721;"	d
GL_TEXTURE0_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	205;"	d
GL_TEXTURE10_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	206;"	d
GL_TEXTURE11_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	207;"	d
GL_TEXTURE12_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	208;"	d
GL_TEXTURE13_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	209;"	d
GL_TEXTURE14_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	210;"	d
GL_TEXTURE15_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	211;"	d
GL_TEXTURE16_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	212;"	d
GL_TEXTURE17_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	213;"	d
GL_TEXTURE18_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	214;"	d
GL_TEXTURE19_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	215;"	d
GL_TEXTURE1_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	216;"	d
GL_TEXTURE20_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	217;"	d
GL_TEXTURE21_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	218;"	d
GL_TEXTURE22_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	219;"	d
GL_TEXTURE23_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	220;"	d
GL_TEXTURE24_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	221;"	d
GL_TEXTURE25_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	222;"	d
GL_TEXTURE26_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	223;"	d
GL_TEXTURE27_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	224;"	d
GL_TEXTURE28_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	225;"	d
GL_TEXTURE29_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	226;"	d
GL_TEXTURE2_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	227;"	d
GL_TEXTURE30_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	228;"	d
GL_TEXTURE31_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	229;"	d
GL_TEXTURE3_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	230;"	d
GL_TEXTURE4_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	231;"	d
GL_TEXTURE5_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	232;"	d
GL_TEXTURE6_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	233;"	d
GL_TEXTURE7_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	234;"	d
GL_TEXTURE8_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	235;"	d
GL_TEXTURE9_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	236;"	d
GL_TEXTURE_1D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	722;"	d
GL_TEXTURE_2D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	723;"	d
GL_TEXTURE_ALPHA_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	724;"	d
GL_TEXTURE_BINDING_1D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	725;"	d
GL_TEXTURE_BINDING_2D	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	726;"	d
GL_TEXTURE_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	727;"	d
GL_TEXTURE_BLUE_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	728;"	d
GL_TEXTURE_BORDER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	729;"	d
GL_TEXTURE_BORDER_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	730;"	d
GL_TEXTURE_COMPONENTS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	731;"	d
GL_TEXTURE_COORD_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	732;"	d
GL_TEXTURE_COORD_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	733;"	d
GL_TEXTURE_COORD_ARRAY_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	734;"	d
GL_TEXTURE_COORD_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	735;"	d
GL_TEXTURE_COORD_ARRAY_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	736;"	d
GL_TEXTURE_ENV	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	737;"	d
GL_TEXTURE_ENV_COLOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	738;"	d
GL_TEXTURE_ENV_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	739;"	d
GL_TEXTURE_GEN_MODE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	740;"	d
GL_TEXTURE_GEN_Q	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	741;"	d
GL_TEXTURE_GEN_R	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	742;"	d
GL_TEXTURE_GEN_S	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	743;"	d
GL_TEXTURE_GEN_T	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	744;"	d
GL_TEXTURE_GREEN_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	745;"	d
GL_TEXTURE_HEIGHT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	746;"	d
GL_TEXTURE_INTENSITY_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	747;"	d
GL_TEXTURE_INTERNAL_FORMAT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	748;"	d
GL_TEXTURE_LUMINANCE_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	749;"	d
GL_TEXTURE_MAG_FILTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	750;"	d
GL_TEXTURE_MATRIX	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	751;"	d
GL_TEXTURE_MIN_FILTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	752;"	d
GL_TEXTURE_PRIORITY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	753;"	d
GL_TEXTURE_RED_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	754;"	d
GL_TEXTURE_RESIDENT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	755;"	d
GL_TEXTURE_STACK_DEPTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	756;"	d
GL_TEXTURE_WIDTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	757;"	d
GL_TEXTURE_WRAP_S	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	758;"	d
GL_TEXTURE_WRAP_T	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	759;"	d
GL_TRANSFORM_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	760;"	d
GL_TRIANGLES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	761;"	d
GL_TRIANGLE_FAN	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	762;"	d
GL_TRIANGLE_STRIP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	763;"	d
GL_TRUE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	764;"	d
GL_UNPACK_ALIGNMENT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	765;"	d
GL_UNPACK_LSB_FIRST	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	766;"	d
GL_UNPACK_ROW_LENGTH	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	767;"	d
GL_UNPACK_SKIP_PIXELS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	768;"	d
GL_UNPACK_SKIP_ROWS	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	769;"	d
GL_UNPACK_SWAP_BYTES	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	770;"	d
GL_UNSIGNED_BYTE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	771;"	d
GL_UNSIGNED_INT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	772;"	d
GL_UNSIGNED_SHORT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	773;"	d
GL_V2F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	774;"	d
GL_V3F	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	775;"	d
GL_VENDOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	776;"	d
GL_VERSION	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	777;"	d
GL_VERTEX_ARRAY	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	778;"	d
GL_VERTEX_ARRAY_POINTER	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	779;"	d
GL_VERTEX_ARRAY_SIZE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	780;"	d
GL_VERTEX_ARRAY_STRIDE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	781;"	d
GL_VERTEX_ARRAY_TYPE	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	782;"	d
GL_VERTEX_SHADER_ARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	286;"	d
GL_VIEWPORT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	783;"	d
GL_VIEWPORT_BIT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	784;"	d
GL_XOR	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	785;"	d
GL_ZERO	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	786;"	d
GL_ZOOM_X	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	787;"	d
GL_ZOOM_Y	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	788;"	d
GLbitfield	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned int GLbitfield;$/;"	t
GLbitfield	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned int GLbitfield;$/;"	t
GLbitfield	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned int GLbitfield;$/;"	t
GLboolean	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned char GLboolean;$/;"	t
GLboolean	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned char GLboolean;$/;"	t
GLboolean	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned char GLboolean;$/;"	t
GLbyte	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef signed char GLbyte;$/;"	t
GLbyte	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef signed char GLbyte;$/;"	t
GLbyte	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef signed char GLbyte;$/;"	t
GLchar	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef char GLchar;$/;"	t
GLcharARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef char GLcharARB;$/;"	t
GLclampd	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef double GLclampd;$/;"	t
GLclampd	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef double GLclampd;$/;"	t
GLclampd	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef double GLclampd;$/;"	t
GLclampf	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef float GLclampf;$/;"	t
GLclampf	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef float GLclampf;$/;"	t
GLclampf	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef float GLclampf;$/;"	t
GLdouble	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef double GLdouble;$/;"	t
GLdouble	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef double GLdouble;$/;"	t
GLdouble	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef double GLdouble;$/;"	t
GLenum	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned int GLenum;$/;"	t
GLenum	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned int GLenum;$/;"	t
GLenum	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned int GLenum;$/;"	t
GLfixed	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef GLint GLfixed;$/;"	t
GLfloat	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef float GLfloat;$/;"	t
GLfloat	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef float GLfloat;$/;"	t
GLfloat	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef float GLfloat;$/;"	t
GLhalf	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned short GLhalf;$/;"	t
GLhalfARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned short GLhalfARB;$/;"	t
GLhalfNV	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned short GLhalfNV;$/;"	t
GLhandleARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned int GLhandleARB;$/;"	t
GLhandleARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef void *GLhandleARB;$/;"	t
GLint	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef int GLint;$/;"	t
GLint	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef int GLint;$/;"	t
GLint	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef int GLint;$/;"	t
GLint64	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef int64_t GLint64;$/;"	t
GLint64EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef int64_t GLint64EXT;$/;"	t
GLintptr	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef ptrdiff_t GLintptr;$/;"	t
GLintptrARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef ptrdiff_t GLintptrARB;$/;"	t
GLshort	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef short GLshort;$/;"	t
GLshort	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef short GLshort;$/;"	t
GLshort	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef short GLshort;$/;"	t
GLsizei	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef int GLsizei;$/;"	t
GLsizei	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef int GLsizei;$/;"	t
GLsizei	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef int GLsizei;$/;"	t
GLsizeiptr	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef ptrdiff_t GLsizeiptr;$/;"	t
GLsizeiptrARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef ptrdiff_t GLsizeiptrARB;$/;"	t
GLsync	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef struct __GLsync *GLsync;$/;"	t	typeref:struct:__GLsync
GLubyte	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned char GLubyte;$/;"	t
GLubyte	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned char GLubyte;$/;"	t
GLubyte	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned char GLubyte;$/;"	t
GLuint	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned int GLuint;$/;"	t
GLuint	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned int GLuint;$/;"	t
GLuint	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned int GLuint;$/;"	t
GLuint64	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef uint64_t GLuint64;$/;"	t
GLuint64EXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef uint64_t GLuint64EXT;$/;"	t
GLushort	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned short GLushort;$/;"	t
GLushort	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned short GLushort;$/;"	t
GLushort	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef unsigned short GLushort;$/;"	t
GLvdpauSurfaceNV	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef GLintptr GLvdpauSurfaceNV;$/;"	t
GLvoid	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef void GLvoid;$/;"	t
GLvoid	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	59;"	d
GLvoid	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	64;"	d
GMatchState	.\dep\Lua\src\lstrlib.c	/^typedef struct GMatchState {$/;"	s	file:
GMatchState	.\dep\Lua\src\lstrlib.c	/^} GMatchState;$/;"	t	typeref:struct:GMatchState	file:
GREEN	.\src\include\trmclr.hpp	/^        GREEN           =  42 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
GREEN	.\src\include\trmclr.hpp	/^        GREEN           = 32 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
GUI_COMPONENT_H	.\src\include\GuiComponent.h	2;"	d
GainedFocus	.\dep\SFML\include\SFML\Window\Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
GainedFocus	.\include\SFML\Window\Event.hpp	/^        GainedFocus,            \/\/\/< The window gained the focus (no data)$/;"	e	enum:sf::Event::EventType
Game	.\src\include\Game.h	/^class Game {$/;"	c
GameState	.\src\include\Game.h	/^	enum GameState {Uninitalized, Paused, Playing, Ending};$/;"	g	class:Game
GameWindow	.\src\include\GameWindow.h	/^class GameWindow : public Window {$/;"	c
GameWindow	.\src\src\GameWindow.cpp	/^GameWindow::GameWindow(Vector2 size) {$/;"	f	class:GameWindow
GatewayTimeout	.\dep\SFML\include\SFML\Network\Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response from the source server$/;"	e	enum:sf::Http::Response::Status
GatewayTimeout	.\include\SFML\Network\Http.hpp	/^            GatewayTimeout      = 504, \/\/\/< The gateway server couldn't receive a response from the source server$/;"	e	enum:sf::Http::Response::Status
GeneratorInfo	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        GeneratorInfo( std::size_t size )$/;"	f	struct:Catch::GeneratorInfo
GeneratorInfo	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^    struct GeneratorInfo : IGeneratorInfo {$/;"	s	namespace:Catch
Generators	.\include\sol\Catch\include\internal\catch_generators.hpp	/^namespace Generators$/;"	n	namespace:Catch
GeneratorsForTest	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^    class GeneratorsForTest : public IGeneratorsForTest {$/;"	c	namespace:Catch
Generic	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    namespace Generic {$/;"	n	namespace:Catch::Matchers::Impl
Generic	.\include\sol\Catch\single_include\catch.hpp	/^    namespace Generic {$/;"	n	namespace:Catch::Matchers::Impl
Get	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
Get	.\include\SFML\Network\Http.hpp	/^            Get,   \/\/\/< Request in get mode, standard method to retrieve a page$/;"	e	enum:sf::Http::Request::Method
GetCompilationInfoForFile	.\.ycm_extra_conf.py	/^def GetCompilationInfoForFile( filename ):$/;"	f
GetCurrentDir	.\src\include\Convert.h	12;"	d
GetCurrentDir	.\src\include\Convert.h	15;"	d
GetGLVersion	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static void GetGLVersion()$/;"	f	file:
GlContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlContext::GlContext()$/;"	f	class:sf::priv::GlContext
GlContext	.\dep\SFML\src\SFML\Window\GlContext.hpp	/^class GlContext : NonCopyable$/;"	c	namespace:sf::priv
GlFunctionPointer	.\dep\SFML\include\SFML\Window\Context.hpp	/^typedef void (*GlFunctionPointer)();$/;"	t	namespace:sf
GlFunctionPointer	.\include\SFML\Window\Context.hpp	/^typedef void (*GlFunctionPointer)();$/;"	t	namespace:sf
GlResource	.\dep\SFML\include\SFML\Window\GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
GlResource	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^GlResource::GlResource()$/;"	f	class:sf::GlResource
GlResource	.\include\SFML\Window\GlResource.hpp	/^class SFML_WINDOW_API GlResource$/;"	c	namespace:sf
GlxContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^GlxContext::GlxContext(GlxContext* shared) :$/;"	f	class:sf::priv::GlxContext
GlxContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^GlxContext::GlxContext(GlxContext* shared, const ContextSettings& settings, const WindowImpl* owner, unsigned int bitsPerPixel) :$/;"	f	class:sf::priv::GlxContext
GlxContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^GlxContext::GlxContext(GlxContext* shared, const ContextSettings& settings, unsigned int width, unsigned int height) :$/;"	f	class:sf::priv::GlxContext
GlxContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^class GlxContext : public GlContext$/;"	c	namespace:sf::priv
GlxErrorHandler	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^        GlxErrorHandler(::Display* display) :$/;"	f	class:__anon145::GlxErrorHandler
GlxErrorHandler	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^    class GlxErrorHandler$/;"	c	namespace:__anon145	file:
Glyph	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
Glyph	.\include\SFML\Graphics\Glyph.hpp	/^    Glyph() : advance(0) {}$/;"	f	class:sf::Glyph
Glyph	.\include\SFML\Graphics\Glyph.hpp	/^class SFML_GRAPHICS_API Glyph$/;"	c	namespace:sf
GlyphTable	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    typedef std::map<Uint32, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font
GlyphTable	.\include\SFML\Graphics\Font.hpp	/^    typedef std::map<Uint32, Glyph> GlyphTable; \/\/\/< Table mapping a codepoint to its glyph$/;"	t	class:sf::Font
Glyph_Data_Format	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Glyph_Data_Format;$/;"	m	struct:TT_Header_
Gravity	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Gravity,          \/\/\/< Measures the direction and intensity of gravity, independent of device acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Gravity	.\include\SFML\Window\Sensor.hpp	/^        Gravity,          \/\/\/< Measures the direction and intensity of gravity, independent of device acceleration (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Green	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color
Green	.\include\SFML\Graphics\Color.hpp	/^    static const Color Green;       \/\/\/< Green predefined color$/;"	m	class:sf::Color
Green	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Green,$/;"	e	enum:Catch::Colour::Code
Grey	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Grey,$/;"	e	enum:Catch::Colour::Code
GroupInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        GroupInfo(  std::string const& _name,$/;"	f	struct:Catch::GroupInfo
GroupInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct GroupInfo {$/;"	s	namespace:Catch
Guard	.\include\sol\Optional\test_optional.cpp	/^    Guard() : val{} {}$/;"	f	struct:Guard
Guard	.\include\sol\Optional\test_optional.cpp	/^    explicit Guard(std::string s, int = 0) : val(s) {}$/;"	f	struct:Guard
Guard	.\include\sol\Optional\test_optional.cpp	/^struct Guard$/;"	s	file:
GuiComponent	.\src\include\GuiComponent.h	/^class GuiComponent : public sf::Drawable, public sf::Transformable {$/;"	c
GuiComponent	.\src\src\GuiComponent.cpp	/^GuiComponent::GuiComponent() {}$/;"	f	class:GuiComponent
GuiComponent	.\src\src\GuiComponent.cpp	/^GuiComponent::GuiComponent(Vector2 pos, Vector2 size, Vector2 windowSize) {$/;"	f	class:GuiComponent
Gyroscope	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Gyroscope,        \/\/\/< Measures the raw rotation rates (degrees\/s)$/;"	e	enum:sf::Sensor::Type
Gyroscope	.\include\SFML\Window\Sensor.hpp	/^        Gyroscope,        \/\/\/< Measures the raw rotation rates (degrees\/s)$/;"	e	enum:sf::Sensor::Type
H	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
H	.\include\SFML\Window\Keyboard.hpp	/^        H,            \/\/\/< The H key$/;"	e	enum:sf::Keyboard::Key
HAVE_BOOLEAN	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	22;"	d
HAVE_LIMIT_ON_IDENTS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1200;"	d
HAVE_PROTOTYPES	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	4;"	d
HAVE_STDDEF_H	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	10;"	d
HAVE_STDLIB_H	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	11;"	d
HAVE_UNSIGNED_CHAR	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	5;"	d
HAVE_UNSIGNED_SHORT	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	6;"	d
HEX	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	356;"	d	file:
HEX	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	363;"	d	file:
HGPUNV	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HGPUNV);$/;"	v
HIDDEN	.\src\include\trmclr.hpp	/^        HIDDEN      = 0b100000000   << SHIFT$/;"	e	enum:trmclr::Attribute::__anon191
HIDInputManager	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^class HIDInputManager : NonCopyable$/;"	c	namespace:sf::priv
HIDJoystickManager	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^HIDJoystickManager::HIDJoystickManager() :$/;"	f	class:sf::priv::HIDJoystickManager
HIDJoystickManager	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	/^class HIDJoystickManager : NonCopyable$/;"	c	namespace:sf::priv
HOOKKEY	.\dep\Lua\src\ldblib.c	/^static const int HOOKKEY = 0;$/;"	v	file:
HPBUFFERARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HPBUFFERARB);$/;"	v
HPBUFFEREXT	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HPBUFFEREXT);$/;"	v
HPVIDEODEV	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HPVIDEODEV);$/;"	v
HVIDEOINPUTDEVICENV	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HVIDEOINPUTDEVICENV);$/;"	v
HVIDEOOUTPUTDEVICENV	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^DECLARE_HANDLE(HVIDEOOUTPUTDEVICENV);$/;"	v
HandleXError	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^    int HandleXError(::Display*, XErrorEvent*)$/;"	f	namespace:__anon145
Head	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Head	.\include\SFML\Network\Http.hpp	/^            Head,  \/\/\/< Request a page's header only$/;"	e	enum:sf::Http::Request::Method
Header	.\dep\Lua\src\lstrlib.c	/^typedef struct Header {$/;"	s	file:
Header	.\dep\Lua\src\lstrlib.c	/^} Header;$/;"	t	typeref:struct:Header	file:
Headers	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Headers = White$/;"	e	enum:Catch::Colour::Code
HelpMessage	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
HelpMessage	.\include\SFML\Network\Ftp.hpp	/^            HelpMessage           = 214, \/\/\/< Help message$/;"	e	enum:sf::Ftp::Response::Status
Home	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
Home	.\include\SFML\Window\Keyboard.hpp	/^        Home,         \/\/\/< The Home key$/;"	e	enum:sf::Keyboard::Key
HorizontalWheel	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        HorizontalWheel \/\/\/< The horizontal mouse wheel$/;"	e	enum:sf::Mouse::Wheel
HorizontalWheel	.\include\SFML\Window\Mouse.hpp	/^        HorizontalWheel \/\/\/< The horizontal mouse wheel$/;"	e	enum:sf::Mouse::Wheel
Http	.\dep\SFML\include\SFML\Network\Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
Http	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Http() :$/;"	f	class:sf::Http
Http	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Http(const std::string& host, unsigned short port)$/;"	f	class:sf::Http
Http	.\include\SFML\Network\Http.hpp	/^class SFML_NETWORK_API Http : NonCopyable$/;"	c	namespace:sf
I	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
I	.\include\SFML\Window\Keyboard.hpp	/^        I,            \/\/\/< The I key$/;"	e	enum:sf::Keyboard::Key
I18NSPHINXOPTS	.\include\sol\docs\make.bat	/^	set I18NSPHINXOPTS=-D latex_paper_size=%PAPER% %I18NSPHINXOPTS%$/;"	v
I18NSPHINXOPTS	.\include\sol\docs\make.bat	/^set I18NSPHINXOPTS=%SPHINXOPTS% source$/;"	v
IArgFunction	.\include\sol\Catch\include\external\clara.h	/^        struct IArgFunction {$/;"	s	namespace:Clara::Detail
IColourImpl	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        struct IColourImpl {$/;"	s	namespace:Catch::__anon177
IConfig	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct IConfig : IShared {$/;"	s	namespace:Catch
IContext	.\include\sol\Catch\include\internal\catch_context.h	/^    struct IContext$/;"	s	namespace:Catch
IContext	.\include\sol\Catch\single_include\catch.hpp	/^    struct IContext$/;"	s	namespace:Catch
IDCT_SCALING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	296;"	d
ID_VOID_MAIN	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	9;"	d	file:
IExceptionTranslator	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^    struct IExceptionTranslator {$/;"	s	namespace:Catch
IExceptionTranslatorRegistry	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^    struct IExceptionTranslatorRegistry {$/;"	s	namespace:Catch
IGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^struct IGenerator {$/;"	s	namespace:Catch
IGeneratorInfo	.\include\sol\Catch\include\internal\catch_interfaces_generators.h	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorInfo	.\include\sol\Catch\single_include\catch.hpp	/^    struct IGeneratorInfo {$/;"	s	namespace:Catch
IGeneratorsForTest	.\include\sol\Catch\include\internal\catch_interfaces_generators.h	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
IGeneratorsForTest	.\include\sol\Catch\single_include\catch.hpp	/^    struct IGeneratorsForTest {$/;"	s	namespace:Catch
IMutableContext	.\include\sol\Catch\include\internal\catch_context.h	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
IMutableContext	.\include\sol\Catch\single_include\catch.hpp	/^    struct IMutableContext : IContext$/;"	s	namespace:Catch
IMutableRegistryHub	.\include\sol\Catch\include\internal\catch_interfaces_registry_hub.h	/^    struct IMutableRegistryHub {$/;"	s	namespace:Catch
INCLUDE_INTTYPES_H	.\dep\SFML\extlibs\headers\ogg\config_types.h	5;"	d
INCLUDE_STB_IMAGE_WRITE_H	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	73;"	d
INCLUDE_STDINT_H	.\dep\SFML\extlibs\headers\ogg\config_types.h	6;"	d
INCLUDE_SYS_TYPES_H	.\dep\SFML\extlibs\headers\ogg\config_types.h	7;"	d
INCOMPLETE_TYPES_BROKEN	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	16;"	d
INDEXK	.\dep\Lua\src\lopcodes.h	140;"	d
INDEXK	.\include\lua\lopcodes.h	140;"	d
INFO	.\include\sol\Catch\include\catch.hpp	161;"	d
INITSET	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	109;"	d
INLINE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	337;"	d
INLINE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	340;"	d
INPUT_SMOOTHING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	289;"	d
INT16	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef short INT16;$/;"	t
INT32	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef long INT32;$/;"	t
INTERNAL_CATCH_ELSE	.\include\sol\Catch\include\internal\catch_capture.hpp	50;"	d
INTERNAL_CATCH_ELSE	.\include\sol\Catch\single_include\catch.hpp	2037;"	d
INTERNAL_CATCH_GENERATE	.\include\sol\Catch\include\internal\catch_generators.hpp	188;"	d
INTERNAL_CATCH_GENERATE	.\include\sol\Catch\single_include\catch.hpp	2468;"	d
INTERNAL_CATCH_IF	.\include\sol\Catch\include\internal\catch_capture.hpp	45;"	d
INTERNAL_CATCH_IF	.\include\sol\Catch\single_include\catch.hpp	2032;"	d
INTERNAL_CATCH_INFO	.\include\sol\Catch\include\internal\catch_capture.hpp	126;"	d
INTERNAL_CATCH_INFO	.\include\sol\Catch\single_include\catch.hpp	2112;"	d
INTERNAL_CATCH_LINESTR	.\include\sol\Catch\include\internal\catch_generators.hpp	186;"	d
INTERNAL_CATCH_LINESTR	.\include\sol\Catch\single_include\catch.hpp	2466;"	d
INTERNAL_CATCH_LINESTR2	.\include\sol\Catch\include\internal\catch_generators.hpp	185;"	d
INTERNAL_CATCH_LINESTR2	.\include\sol\Catch\single_include\catch.hpp	2465;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	.\include\sol\Catch\include\internal\catch_test_registry.hpp	94;"	d
INTERNAL_CATCH_METHOD_AS_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	681;"	d
INTERNAL_CATCH_MSG	.\include\sol\Catch\include\internal\catch_capture.hpp	108;"	d
INTERNAL_CATCH_MSG	.\include\sol\Catch\include\internal\catch_capture.hpp	116;"	d
INTERNAL_CATCH_MSG	.\include\sol\Catch\single_include\catch.hpp	2094;"	d
INTERNAL_CATCH_NO_THROW	.\include\sol\Catch\include\internal\catch_capture.hpp	55;"	d
INTERNAL_CATCH_NO_THROW	.\include\sol\Catch\single_include\catch.hpp	2042;"	d
INTERNAL_CATCH_REACT	.\include\sol\Catch\include\internal\catch_capture.hpp	26;"	d
INTERNAL_CATCH_REACT	.\include\sol\Catch\single_include\catch.hpp	2014;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	89;"	d
INTERNAL_CATCH_REGISTER_LEGACY_REPORTER	.\include\sol\Catch\single_include\catch.hpp	8749;"	d
INTERNAL_CATCH_REGISTER_LISTENER	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	95;"	d
INTERNAL_CATCH_REGISTER_LISTENER	.\include\sol\Catch\single_include\catch.hpp	8755;"	d
INTERNAL_CATCH_REGISTER_REPORTER	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	92;"	d
INTERNAL_CATCH_REGISTER_REPORTER	.\include\sol\Catch\single_include\catch.hpp	8752;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	.\include\sol\Catch\include\internal\catch_test_registry.hpp	108;"	d
INTERNAL_CATCH_REGISTER_TESTCASE	.\include\sol\Catch\single_include\catch.hpp	695;"	d
INTERNAL_CATCH_SECTION	.\include\sol\Catch\include\internal\catch_section.h	39;"	d
INTERNAL_CATCH_SECTION	.\include\sol\Catch\single_include\catch.hpp	2283;"	d
INTERNAL_CATCH_STRINGIFY	.\include\sol\Catch\include\internal\catch_common.h	16;"	d
INTERNAL_CATCH_STRINGIFY	.\include\sol\Catch\single_include\catch.hpp	68;"	d
INTERNAL_CATCH_STRINGIFY2	.\include\sol\Catch\include\internal\catch_common.h	15;"	d
INTERNAL_CATCH_STRINGIFY2	.\include\sol\Catch\single_include\catch.hpp	67;"	d
INTERNAL_CATCH_TEST	.\include\sol\Catch\include\internal\catch_capture.hpp	32;"	d
INTERNAL_CATCH_TEST	.\include\sol\Catch\single_include\catch.hpp	2019;"	d
INTERNAL_CATCH_TESTCASE	.\include\sol\Catch\include\internal\catch_test_registry.hpp	88;"	d
INTERNAL_CATCH_TESTCASE	.\include\sol\Catch\single_include\catch.hpp	675;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	.\include\sol\Catch\include\internal\catch_test_registry.hpp	98;"	d
INTERNAL_CATCH_TEST_CASE_METHOD	.\include\sol\Catch\single_include\catch.hpp	685;"	d
INTERNAL_CATCH_THROWS	.\include\sol\Catch\include\internal\catch_capture.hpp	69;"	d
INTERNAL_CATCH_THROWS	.\include\sol\Catch\single_include\catch.hpp	2056;"	d
INTERNAL_CATCH_THROWS_AS	.\include\sol\Catch\include\internal\catch_capture.hpp	86;"	d
INTERNAL_CATCH_THROWS_AS	.\include\sol\Catch\single_include\catch.hpp	2073;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	69;"	d
INTERNAL_CATCH_TRANSLATE_EXCEPTION	.\include\sol\Catch\single_include\catch.hpp	2566;"	d
INTERNAL_CATCH_UNIQUE_NAME	.\include\sol\Catch\include\internal\catch_common.h	13;"	d
INTERNAL_CATCH_UNIQUE_NAME	.\include\sol\Catch\single_include\catch.hpp	65;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	.\include\sol\Catch\include\internal\catch_common.h	12;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE	.\include\sol\Catch\single_include\catch.hpp	64;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	.\include\sol\Catch\include\internal\catch_common.h	11;"	d
INTERNAL_CATCH_UNIQUE_NAME_LINE2	.\include\sol\Catch\single_include\catch.hpp	63;"	d
INTERNAL_CHECK_THAT	.\include\sol\Catch\include\internal\catch_capture.hpp	130;"	d
INTERNAL_CHECK_THAT	.\include\sol\Catch\single_include\catch.hpp	2116;"	d
IOHIDElements	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^typedef std::vector<IOHIDElementRef> IOHIDElements;$/;"	t	namespace:sf::priv
IOPREF_LEN	.\dep\Lua\src\liolib.c	136;"	d	file:
IO_INPUT	.\dep\Lua\src\liolib.c	137;"	d	file:
IO_OUTPUT	.\dep\Lua\src\liolib.c	138;"	d	file:
IO_PREFIX	.\dep\Lua\src\liolib.c	135;"	d	file:
IRegistryHub	.\include\sol\Catch\include\internal\catch_interfaces_registry_hub.h	/^    struct IRegistryHub {$/;"	s	namespace:Catch
IReporter	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.h	/^    struct IReporter : IShared {$/;"	s	namespace:Catch
IReporterFactory	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct IReporterFactory : IShared {$/;"	s	namespace:Catch
IReporterRegistry	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct IReporterRegistry {$/;"	s	namespace:Catch
IResultCapture	.\include\sol\Catch\include\internal\catch_interfaces_capture.h	/^    struct IResultCapture {$/;"	s	namespace:Catch
IRunner	.\include\sol\Catch\include\internal\catch_interfaces_runner.h	/^    struct IRunner {$/;"	s	namespace:Catch
IS	.\dep\Lua\src\luac.c	70;"	d	file:
ISK	.\dep\Lua\src\lopcodes.h	137;"	d
ISK	.\include\lua\lopcodes.h	137;"	d
IShared	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
IShared	.\include\sol\Catch\single_include\catch.hpp	/^    struct IShared : NonCopyable {$/;"	s	namespace:Catch
IStream	.\include\sol\Catch\include\internal\catch_stream.h	/^    struct IStream {$/;"	s	namespace:Catch
IStreamingReporter	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct IStreamingReporter : IShared {$/;"	s	namespace:Catch
ITagAliasRegistry	.\include\sol\Catch\include\internal\catch_interfaces_tag_alias_registry.h	/^    struct ITagAliasRegistry {$/;"	s	namespace:Catch
ITestCase	.\include\sol\Catch\include\internal\catch_interfaces_testcase.h	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCase	.\include\sol\Catch\single_include\catch.hpp	/^    struct ITestCase : IShared {$/;"	s	namespace:Catch
ITestCaseRegistry	.\include\sol\Catch\include\internal\catch_interfaces_testcase.h	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITestCaseRegistry	.\include\sol\Catch\single_include\catch.hpp	/^    struct ITestCaseRegistry {$/;"	s	namespace:Catch
ITracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    struct ITracker : SharedImpl<> {$/;"	s	namespace:Catch::TestCaseTracking
Identification	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^    struct SFML_WINDOW_API Identification$/;"	s	class:sf::Joystick
Identification	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^Joystick::Identification::Identification() :$/;"	f	class:sf::Joystick::Identification
Identification	.\include\SFML\Window\Joystick.hpp	/^    struct SFML_WINDOW_API Identification$/;"	s	class:sf::Joystick
Identity	.\dep\SFML\include\SFML\Graphics\Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform
Identity	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^const Transform Transform::Identity;$/;"	m	class:sf::Transform	file:
Identity	.\include\SFML\Graphics\Transform.hpp	/^    static const Transform Identity; \/\/\/< The identity transform (does nothing)$/;"	m	class:sf::Transform
IdxT	.\dep\Lua\src\ltablib.c	/^typedef unsigned int IdxT;$/;"	t	file:
Ignore	.\include\sol\Catch\include\catch_session.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	e	enum:Catch::Session::OnUnusedOptions::DoWhat
Image	.\dep\SFML\include\SFML\Graphics\Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
Image	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^Image::Image() :$/;"	f	class:sf::Image
Image	.\include\SFML\Graphics\Image.hpp	/^class SFML_GRAPHICS_API Image$/;"	c	namespace:sf
ImageLoader	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^ImageLoader::ImageLoader()$/;"	f	class:sf::priv::ImageLoader
ImageLoader	.\dep\SFML\src\SFML\Graphics\ImageLoader.hpp	/^class ImageLoader : NonCopyable$/;"	c	namespace:sf::priv
Impl	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    namespace Impl {$/;"	n	namespace:Catch::Matchers
Impl	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        namespace Impl {$/;"	n	namespace:Catch::Matchers
Impl	.\include\sol\Catch\single_include\catch.hpp	/^    namespace Impl {$/;"	n	namespace:Catch::Matchers
InDeclarationOrder	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        InDeclarationOrder,$/;"	e	enum:Catch::RunTests::InWhatOrder
InLexicographicalOrder	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        InLexicographicalOrder,$/;"	e	enum:Catch::RunTests::InWhatOrder
InRandomOrder	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        InRandomOrder$/;"	e	enum:Catch::RunTests::InWhatOrder
InWhatOrder	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct RunTests { enum InWhatOrder {$/;"	g	struct:Catch::RunTests
IndexTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        IndexTracker( std::string const& name, TrackerContext& ctx, ITracker* parent, int size )$/;"	f	class:Catch::TestCaseTracking::IndexTracker
IndexTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    class IndexTracker : public TrackerBase {$/;"	c	namespace:Catch::TestCaseTracking
Index_To_Loc_Format	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Index_To_Loc_Format;$/;"	m	struct:TT_Header_
Info	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^    struct Info$/;"	s	class:sf::SoundFileReader
Info	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    struct Info$/;"	s	class:sf::Font
Info	.\include\SFML\Audio\SoundFileReader.hpp	/^    struct Info$/;"	s	class:sf::SoundFileReader
Info	.\include\SFML\Graphics\Font.hpp	/^    struct Info$/;"	s	class:sf::Font
Info	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Info	.\include\sol\Catch\single_include\catch.hpp	/^        Info = 1,$/;"	e	enum:Catch::ResultWas::OfType
Inner	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^namespace Inner$/;"	n	file:
InputImpl	.\dep\SFML\src\SFML\Window\Android\InputImpl.hpp	/^class InputImpl$/;"	c	namespace:sf::priv
InputImpl	.\dep\SFML\src\SFML\Window\OSX\InputImpl.hpp	/^class InputImpl$/;"	c	namespace:sf::priv
InputImpl	.\dep\SFML\src\SFML\Window\Unix\InputImpl.hpp	/^class InputImpl$/;"	c	namespace:sf::priv
InputImpl	.\dep\SFML\src\SFML\Window\Win32\InputImpl.hpp	/^class InputImpl$/;"	c	namespace:sf::priv
InputImpl	.\dep\SFML\src\SFML\Window\iOS\InputImpl.hpp	/^class InputImpl$/;"	c	namespace:sf::priv
InputSoundFile	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^class SFML_AUDIO_API InputSoundFile : NonCopyable$/;"	c	namespace:sf
InputSoundFile	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^InputSoundFile::InputSoundFile() :$/;"	f	class:sf::InputSoundFile
InputSoundFile	.\include\SFML\Audio\InputSoundFile.hpp	/^class SFML_AUDIO_API InputSoundFile : NonCopyable$/;"	c	namespace:sf
InputStream	.\dep\SFML\include\SFML\System\InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
InputStream	.\include\SFML\System\InputStream.hpp	/^class SFML_SYSTEM_API InputStream$/;"	c	namespace:sf
Insert	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
Insert	.\include\SFML\Window\Keyboard.hpp	/^        Insert,       \/\/\/< The Insert key$/;"	e	enum:sf::Keyboard::Key
Instruction	.\dep\Lua\src\llimits.h	/^typedef unsigned int Instruction;$/;"	t
Instruction	.\dep\Lua\src\llimits.h	/^typedef unsigned long Instruction;$/;"	t
Instruction	.\include\lua\llimits.h	/^typedef unsigned int Instruction;$/;"	t
Instruction	.\include\lua\llimits.h	/^typedef unsigned long Instruction;$/;"	t
InsufficientStorageSpace	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient storage space in system, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
InsufficientStorageSpace	.\include\SFML\Network\Ftp.hpp	/^            InsufficientStorageSpace  = 452, \/\/\/< Requested action not taken; insufficient storage space in system, file unavailable$/;"	e	enum:sf::Ftp::Response::Status
Int16	.\dep\SFML\include\SFML\Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf
Int16	.\include\SFML\Config.hpp	/^    typedef signed   short Int16;$/;"	t	namespace:sf
Int32	.\dep\SFML\include\SFML\Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf
Int32	.\include\SFML\Config.hpp	/^    typedef signed   int Int32;$/;"	t	namespace:sf
Int64	.\dep\SFML\include\SFML\Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf
Int64	.\dep\SFML\include\SFML\Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf
Int64	.\include\SFML\Config.hpp	/^        typedef signed   __int64 Int64;$/;"	t	namespace:sf
Int64	.\include\SFML\Config.hpp	/^        typedef signed   long long Int64;$/;"	t	namespace:sf
Int8	.\dep\SFML\include\SFML\Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf
Int8	.\include\SFML\Config.hpp	/^    typedef signed   char Int8;$/;"	t	namespace:sf
IntGetProcAddress	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static sf::GlFunctionPointer IntGetProcAddress(const char* name)$/;"	f	file:
IntGetProcAddress	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static sf::GlFunctionPointer IntGetProcAddress(const char* name)$/;"	f	file:
IntGetProcAddress	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static sf::GlFunctionPointer IntGetProcAddress(const char* name)$/;"	f	file:
IntPair	.\include\sol\Catch\projects\SelfTest\GeneratorTests.cpp	/^struct IntPair { int first, second; };$/;"	s	file:
IntRect	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf
IntRect	.\include\SFML\Graphics\Rect.hpp	/^typedef Rect<int>   IntRect;$/;"	t	namespace:sf
Internal	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^namespace Internal {$/;"	n	namespace:Catch
Internal	.\include\sol\Catch\single_include\catch.hpp	/^namespace Internal {$/;"	n	namespace:Catch
InternalServerError	.\dep\SFML\include\SFML\Network\Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InternalServerError	.\include\SFML\Network\Http.hpp	/^            InternalServerError = 500, \/\/\/< The server encountered an unexpected error$/;"	e	enum:sf::Http::Response::Status
InvalidFile	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML when a local file cannot be read or written$/;"	e	enum:sf::Ftp::Response::Status
InvalidFile	.\include\SFML\Network\Ftp.hpp	/^            InvalidFile      = 1003  \/\/\/< Not part of the FTP standard, generated by SFML when a local file cannot be read or written$/;"	e	enum:sf::Ftp::Response::Status
InvalidPos	.\dep\SFML\include\SFML\System\String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String
InvalidPos	.\dep\SFML\src\SFML\System\String.cpp	/^const std::size_t String::InvalidPos = std::basic_string<Uint32>::npos;$/;"	m	class:sf::String	file:
InvalidPos	.\include\SFML\System\String.hpp	/^    static const std::size_t InvalidPos; \/\/\/< Represents an invalid position in the string$/;"	m	class:sf::String
InvalidResponse	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML when a received response cannot be parsed$/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	.\dep\SFML\include\SFML\Network\Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
InvalidResponse	.\include\SFML\Network\Ftp.hpp	/^            InvalidResponse  = 1000, \/\/\/< Not part of the FTP standard, generated by SFML when a received response cannot be parsed$/;"	e	enum:sf::Ftp::Response::Status
InvalidResponse	.\include\SFML\Network\Http.hpp	/^            InvalidResponse  = 1000, \/\/\/< Response is not a valid HTTP one$/;"	e	enum:sf::Http::Response::Status
IpAddress	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IpAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress::IpAddress() :$/;"	f	class:sf::IpAddress
IpAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress::IpAddress(Uint32 address) :$/;"	f	class:sf::IpAddress
IpAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress::IpAddress(Uint8 byte0, Uint8 byte1, Uint8 byte2, Uint8 byte3) :$/;"	f	class:sf::IpAddress
IpAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress::IpAddress(const char* address) :$/;"	f	class:sf::IpAddress
IpAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress::IpAddress(const std::string& address) :$/;"	f	class:sf::IpAddress
IpAddress	.\include\SFML\Network\IpAddress.hpp	/^class SFML_NETWORK_API IpAddress$/;"	c	namespace:sf
IsBool	.\include\sol\Catch\include\external\clara.h	/^        template<>              struct IsBool<bool> { static const bool value = true; };$/;"	s	namespace:Clara::Detail
IsBool	.\include\sol\Catch\include\external\clara.h	/^        template<typename T>    struct IsBool       { static const bool value = false; };$/;"	s	namespace:Clara::Detail
IsEqualTo	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsEqualTo	.\include\sol\Catch\single_include\catch.hpp	/^        IsEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThan	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThan	.\include\sol\Catch\single_include\catch.hpp	/^        IsGreaterThan,$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsGreaterThanOrEqualTo	.\include\sol\Catch\single_include\catch.hpp	/^        IsGreaterThanOrEqualTo$/;"	e	enum:Catch::Internal::Operator
IsHeaderFile	.\.ycm_extra_conf.py	/^def IsHeaderFile( filename ):$/;"	f
IsHidden	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^            IsHidden = 1 << 1,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
IsLessThan	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThan	.\include\sol\Catch\single_include\catch.hpp	/^        IsLessThan,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsLessThanOrEqualTo	.\include\sol\Catch\single_include\catch.hpp	/^        IsLessThanOrEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNotEqualTo	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsNotEqualTo	.\include\sol\Catch\single_include\catch.hpp	/^        IsNotEqualTo,$/;"	e	enum:Catch::Internal::Operator
IsStreamInsertable	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
IsStreamInsertable	.\include\sol\Catch\single_include\catch.hpp	/^    struct IsStreamInsertable {$/;"	s	namespace:Catch::Detail
Italic	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^        Italic        = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Italic	.\include\SFML\Graphics\Text.hpp	/^        Italic        = 1 << 1, \/\/\/< Italic characters$/;"	e	enum:sf::Text::Style
Item	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^    struct Item$/;"	s	class:sf::priv::JoystickManager
Item	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^    struct Item$/;"	s	class:sf::priv::SensorManager
Iterator	.\dep\SFML\include\SFML\System\String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String
Iterator	.\include\SFML\System\String.hpp	/^    typedef std::basic_string<Uint32>::iterator       Iterator;      \/\/\/< Iterator type$/;"	t	class:sf::String
J	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
J	.\include\SFML\Window\Keyboard.hpp	/^        J,            \/\/\/< The J key$/;"	e	enum:sf::Keyboard::Key
JBLOCK	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JCOEF JBLOCK[DCTSIZE2];	\/* one block of coefficients *\/$/;"	t
JBLOCKARRAY	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JBLOCKROW *JBLOCKARRAY;		\/* a 2-D array of coefficient blocks *\/$/;"	t
JBLOCKIMAGE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JBLOCKARRAY *JBLOCKIMAGE;	\/* a 3-D array of coefficient blocks *\/$/;"	t
JBLOCKROW	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JBLOCK FAR *JBLOCKROW;	\/* pointer to one row of coefficient blocks *\/$/;"	t
JCOEF	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef short JCOEF;$/;"	t
JCOEFPTR	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JCOEF FAR *JCOEFPTR;	\/* useful in a couple of places *\/$/;"	t
JCS_CMYK	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_CMYK,		\/* C\/M\/Y\/K *\/$/;"	e	enum:__anon83
JCS_GRAYSCALE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_GRAYSCALE,		\/* monochrome *\/$/;"	e	enum:__anon83
JCS_RGB	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_RGB,		\/* red\/green\/blue *\/$/;"	e	enum:__anon83
JCS_UNKNOWN	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_UNKNOWN,		\/* error\/unspecified *\/$/;"	e	enum:__anon83
JCS_YCCK	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_YCCK		\/* Y\/Cb\/Cr\/K *\/$/;"	e	enum:__anon83
JCS_YCbCr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JCS_YCbCr,		\/* Y\/Cb\/Cr (also known as YUV) *\/$/;"	e	enum:__anon83
JDCT_DEFAULT	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	233;"	d
JDCT_FASTEST	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	236;"	d
JDCT_FLOAT	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDCT_FLOAT		\/* floating-point: accurate, fast on fast HW *\/$/;"	e	enum:__anon84
JDCT_IFAST	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDCT_IFAST,		\/* faster, less accurate integer method *\/$/;"	e	enum:__anon84
JDCT_ISLOW	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDCT_ISLOW,		\/* slow but accurate integer algorithm *\/$/;"	e	enum:__anon84
JDIMENSION	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned int JDIMENSION;$/;"	t
JDITHER_FS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDITHER_FS		\/* Floyd-Steinberg error diffusion dither *\/$/;"	e	enum:__anon85
JDITHER_NONE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDITHER_NONE,		\/* no dithering *\/$/;"	e	enum:__anon85
JDITHER_ORDERED	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^	JDITHER_ORDERED,	\/* simple ordered dither *\/$/;"	e	enum:__anon85
JERROR_H	.\dep\SFML\extlibs\headers\jpeg\jerror.h	203;"	d
JFIF_major_version	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 JFIF_major_version;	\/* JFIF version number *\/$/;"	m	struct:jpeg_decompress_struct
JFIF_major_version	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 JFIF_major_version;	\/* What to write for the JFIF version number *\/$/;"	m	struct:jpeg_compress_struct
JFIF_minor_version	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 JFIF_minor_version;$/;"	m	struct:jpeg_compress_struct
JFIF_minor_version	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 JFIF_minor_version;$/;"	m	struct:jpeg_decompress_struct
JHUFF_TBL	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} JHUFF_TBL;$/;"	t	typeref:struct:__anon80
JMAKE_ENUM_LIST	.\dep\SFML\extlibs\headers\jpeg\jerror.h	195;"	d
JMAKE_ENUM_LIST	.\dep\SFML\extlibs\headers\jpeg\jerror.h	25;"	d
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_ALIGN_TYPE, "ALIGN_TYPE is wrong, please fix")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_ALLOC_CHUNK, "MAX_ALLOC_CHUNK is wrong, please fix")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_BUFFER_MODE, "Bogus buffer control mode")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_COMPONENT_ID, "Invalid component ID %d in SOS")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_CROP_SPEC, "Invalid crop request")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_DCTSIZE, "DCT scaled block size %dx%d not supported")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_DCT_COEF, "DCT coefficient out of range")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_DROP_SAMPLING,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_HUFF_TABLE, "Bogus Huffman table definition")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_IN_COLORSPACE, "Bogus input colorspace")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_J_COLORSPACE, "Bogus JPEG colorspace")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_LENGTH, "Bogus marker length")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_LIB_VERSION,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_MCU_SIZE, "Sampling factors too large for interleaved scan")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_POOL_ID, "Invalid memory pool code %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_PRECISION, "Unsupported JPEG data precision %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_PROGRESSION,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_PROG_SCRIPT,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_SAMPLING, "Bogus sampling factors")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_SCAN_SCRIPT, "Invalid scan script at entry %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_STATE, "Improper call to JPEG library in state %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_STRUCT_SIZE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BAD_VIRTUAL_ACCESS, "Bogus virtual array access")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_BUFFER_SIZE, "Buffer passed to JPEG library is too small")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_CANT_SUSPEND, "Suspension not allowed here")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_CCIR601_NOTIMPL, "CCIR601 sampling not implemented yet")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_COMPONENT_COUNT, "Too many color components: %d, max %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_CONVERSION_NOTIMPL, "Unsupported color conversion request")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_DAC_INDEX, "Bogus DAC index %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_DAC_VALUE, "Bogus DAC value 0x%x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_DHT_INDEX, "Bogus DHT index %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_DQT_INDEX, "Bogus DQT index %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_EMPTY_IMAGE, "Empty JPEG image (DNL not supported)")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_EMS_READ, "Read from EMS failed")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_EMS_WRITE, "Write to EMS failed")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_EOI_EXPECTED, "Didn't expect more than one scan")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_FILE_READ, "Input file read error")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_FILE_WRITE, "Output file write error --- out of disk space?")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_FRACT_SAMPLE_NOTIMPL, "Fractional sampling not implemented yet")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_HUFF_CLEN_OVERFLOW, "Huffman code size table overflow")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_HUFF_MISSING_CODE, "Missing Huffman code table entry")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_IMAGE_TOO_BIG, "Maximum supported image dimension is %u pixels")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_INPUT_EMPTY, "Empty input file")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_INPUT_EOF, "Premature end of input file")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_MISMATCHED_QUANT_TABLE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_MISSING_DATA, "Scan script does not transmit all data")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_MODE_CHANGE, "Invalid color quantization mode change")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NOTIMPL, "Not implemented yet")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NOT_COMPILED, "Requested feature was omitted at compile time")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_ARITH_TABLE, "Arithmetic table 0x%02x was not defined")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_BACKING_STORE, "Backing store not supported")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_HUFF_TABLE, "Huffman table 0x%02x was not defined")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_IMAGE, "JPEG datastream contains no image")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_QUANT_TABLE, "Quantization table 0x%02x was not defined")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_NO_SOI, "Not a JPEG file: starts with 0x%02x 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_OUT_OF_MEMORY, "Insufficient memory (case %d)")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_QUANT_COMPONENTS,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_QUANT_FEW_COLORS, "Cannot quantize to fewer than %d colors")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_QUANT_MANY_COLORS, "Cannot quantize to more than %d colors")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_SOF_DUPLICATE, "Invalid JPEG file structure: two SOF markers")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_SOF_NO_SOS, "Invalid JPEG file structure: missing SOS marker")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_SOF_UNSUPPORTED, "Unsupported JPEG process: SOF type 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_SOI_DUPLICATE, "Invalid JPEG file structure: two SOI markers")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_SOS_NO_SOF, "Invalid JPEG file structure: SOS before SOF")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_TFILE_CREATE, "Failed to create temporary file %s")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_TFILE_READ, "Read failed on temporary file")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_TFILE_SEEK, "Seek failed on temporary file")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_TFILE_WRITE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_TOO_LITTLE_DATA, "Application transferred too few scanlines")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_UNKNOWN_MARKER, "Unsupported marker type 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_VIRTUAL_BUG, "Virtual array controller messed up")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_WIDTH_OVERFLOW, "Image too wide for this implementation")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_XMS_READ, "Read from XMS failed")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JERR_XMS_WRITE, "Write to XMS failed")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JMSG_COPYRIGHT, JCOPYRIGHT)$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JMSG_NOMESSAGE, "Bogus message code %d") \/* Must be first entry! *\/$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JMSG_VERSION, JVERSION)$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_16BIT_TABLES,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_ADOBE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_APP0, "Unknown APP0 marker (not JFIF), length %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_APP14, "Unknown APP14 marker (not Adobe), length %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_DAC, "Define Arithmetic Table 0x%02x: 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_DHT, "Define Huffman Table 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_DQT, "Define Quantization Table %d  precision %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_DRI, "Define Restart Interval %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_EMS_CLOSE, "Freed EMS handle %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_EMS_OPEN, "Obtained EMS handle %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_EOI, "End Of Image")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_HUFFBITS, "        %3d %3d %3d %3d %3d %3d %3d %3d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_JFIF, "JFIF APP0 marker: version %d.%02d, density %dx%d  %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_JFIF_BADTHUMBNAILSIZE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_JFIF_EXTENSION,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_JFIF_THUMBNAIL, "    with %d x %d thumbnail image")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_MISC_MARKER, "Miscellaneous marker 0x%02x, length %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_PARMLESS_MARKER, "Unexpected marker 0x%02x")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_QUANTVALS, "        %4u %4u %4u %4u %4u %4u %4u %4u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_QUANT_3_NCOLORS, "Quantizing to %d = %d*%d*%d colors")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_QUANT_NCOLORS, "Quantizing to %d colors")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_QUANT_SELECTED, "Selected %d colors for quantization")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_RECOVERY_ACTION, "At marker 0x%02x, recovery action %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_RST, "RST%d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SMOOTH_NOTIMPL,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOF, "Start Of Frame 0x%02x: width=%u, height=%u, components=%d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOF_COMPONENT, "    Component %d: %dhx%dv q=%d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOI, "Start of Image")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOS, "Start Of Scan: %d components")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOS_COMPONENT, "    Component %d: dc=%d ac=%d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_SOS_PARAMS, "  Ss=%d, Se=%d, Ah=%d, Al=%d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_TFILE_CLOSE, "Closed temporary file %s")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_TFILE_OPEN, "Opened temporary file %s")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_THUMB_JPEG,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_THUMB_PALETTE,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_THUMB_RGB,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_UNKNOWN_IDS,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_XMS_CLOSE, "Freed XMS handle %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JTRC_XMS_OPEN, "Obtained XMS handle %u")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_ADOBE_XFORM, "Unknown Adobe color transform code %d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_ARITH_BAD_CODE, "Corrupt JPEG data: bad arithmetic code")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_BOGUS_PROGRESSION,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_EXTRANEOUS_DATA,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_HIT_MARKER, "Corrupt JPEG data: premature end of data segment")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_HUFF_BAD_CODE, "Corrupt JPEG data: bad Huffman code")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_JFIF_MAJOR, "Warning: unknown JFIF revision number %d.%02d")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_JPEG_EOF, "Premature end of JPEG file")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_MUST_RESYNC,$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_NOT_SEQUENTIAL, "Invalid SOS parameters for sequential JPEG")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^JMESSAGE(JWRN_TOO_MUCH_DATA, "Application transferred too many scanlines")$/;"	e	enum:__anon78
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	199;"	d
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	28;"	d
JMESSAGE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	36;"	d
JMETHOD	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	207;"	d
JMETHOD	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	209;"	d
JMETHOD	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JMETHOD(boolean, jpeg_marker_parser_method, (j_decompress_ptr cinfo));$/;"	t
JMSG_LASTMSGCODE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^  JMSG_LASTMSGCODE$/;"	e	enum:__anon78
JMSG_LENGTH_MAX	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	691;"	d
JMSG_STR_PARM_MAX	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	699;"	d
JOCTET	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef char JOCTET;$/;"	t
JOCTET	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned char JOCTET;$/;"	t
JPEGLIB_H	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	15;"	d
JPEG_APP0	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1105;"	d
JPEG_COM	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1106;"	d
JPEG_EOI	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1104;"	d
JPEG_HEADER_OK	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1023;"	d
JPEG_HEADER_TABLES_ONLY	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1024;"	d
JPEG_INTERNAL_OPTIONS	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	254;"	d
JPEG_LIB_VERSION	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	40;"	d
JPEG_LIB_VERSION_MAJOR	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	41;"	d
JPEG_LIB_VERSION_MINOR	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	42;"	d
JPEG_MAX_DIMENSION	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	180;"	d
JPEG_REACHED_EOI	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1054;"	d
JPEG_REACHED_SOS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1053;"	d
JPEG_ROW_COMPLETED	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1055;"	d
JPEG_RST0	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1103;"	d
JPEG_SCAN_COMPLETED	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1056;"	d
JPEG_SUSPENDED	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	1022;"	d
JPOOL_IMAGE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	788;"	d
JPOOL_NUMPOOLS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	789;"	d
JPOOL_PERMANENT	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	787;"	d
JPP	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	857;"	d
JPP	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	859;"	d
JQUANT_TBL	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} JQUANT_TBL;$/;"	t	typeref:struct:__anon79
JSAMPARRAY	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JSAMPROW *JSAMPARRAY;	\/* ptr to some rows (a 2-D sample array) *\/$/;"	t
JSAMPIMAGE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JSAMPARRAY *JSAMPIMAGE;	\/* a 3-D sample array: top index is color *\/$/;"	t
JSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef char JSAMPLE;$/;"	t
JSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef short JSAMPLE;$/;"	t
JSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned char JSAMPLE;$/;"	t
JSAMPROW	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef JSAMPLE FAR *JSAMPROW;	\/* ptr to one image row of pixel samples. *\/$/;"	t
J_COLOR_SPACE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} J_COLOR_SPACE;$/;"	t	typeref:enum:__anon83
J_DCT_METHOD	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} J_DCT_METHOD;$/;"	t	typeref:enum:__anon84
J_DITHER_MODE	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} J_DITHER_MODE;$/;"	t	typeref:enum:__anon85
J_MESSAGE_CODE	.\dep\SFML\extlibs\headers\jpeg\jerror.h	/^} J_MESSAGE_CODE;$/;"	t	typeref:enum:__anon78
Joystick	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
Joystick	.\include\SFML\Window\Joystick.hpp	/^class SFML_WINDOW_API Joystick$/;"	c	namespace:sf
JoystickButtonEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonEvent	.\include\SFML\Window\Event.hpp	/^    struct JoystickButtonEvent$/;"	s	class:sf::Event
JoystickButtonPressed	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonPressed	.\include\SFML\Window\Event.hpp	/^        JoystickButtonPressed,  \/\/\/< A joystick button was pressed (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonReleased	.\include\SFML\Window\Event.hpp	/^        JoystickButtonReleased, \/\/\/< A joystick button was released (data in event.joystickButton)$/;"	e	enum:sf::Event::EventType
JoystickButtonSortPredicate	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^    bool JoystickButtonSortPredicate(IOHIDElementRef b1, IOHIDElementRef b2)$/;"	f	namespace:__anon143
JoystickCaps	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    JoystickCaps()$/;"	f	struct:sf::priv::JoystickCaps
JoystickCaps	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^struct JoystickCaps$/;"	s	namespace:sf::priv
JoystickConnectEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnectEvent	.\include\SFML\Window\Event.hpp	/^    struct JoystickConnectEvent$/;"	s	class:sf::Event
JoystickConnected	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickConnected	.\include\SFML\Window\Event.hpp	/^        JoystickConnected,      \/\/\/< A joystick was connected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickDisconnected	.\include\SFML\Window\Event.hpp	/^        JoystickDisconnected,   \/\/\/< A joystick was disconnected (data in event.joystickConnect)$/;"	e	enum:sf::Event::EventType
JoystickImpl	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickImpl	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickImpl	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickImpl	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickImpl	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickImpl	.\dep\SFML\src\SFML\Window\iOS\JoystickImpl.hpp	/^class JoystickImpl$/;"	c	namespace:sf::priv
JoystickList	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    typedef std::vector<JoystickRecord> JoystickList;$/;"	t	namespace:__anon150	file:
JoystickManager	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^JoystickManager::JoystickManager()$/;"	f	class:sf::priv::JoystickManager
JoystickManager	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^class JoystickManager : NonCopyable$/;"	c	namespace:sf::priv
JoystickMoveEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoveEvent	.\include\SFML\Window\Event.hpp	/^    struct JoystickMoveEvent$/;"	s	class:sf::Event
JoystickMoved	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystickMove)$/;"	e	enum:sf::Event::EventType
JoystickMoved	.\include\SFML\Window\Event.hpp	/^        JoystickMoved,          \/\/\/< The joystick moved along an axis (data in event.joystickMove)$/;"	e	enum:sf::Event::EventType
JoystickRecord	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    struct JoystickRecord$/;"	s	namespace:__anon150	file:
JoystickState	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    JoystickState()$/;"	f	struct:sf::priv::JoystickState
JoystickState	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^struct JoystickState$/;"	s	namespace:sf::priv
JunitReporter	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        JunitReporter( ReporterConfig const& _config )$/;"	f	class:Catch::JunitReporter
JunitReporter	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^    class JunitReporter : public CumulativeReporterBase {$/;"	c	namespace:Catch
K	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
K	.\include\SFML\Window\Keyboard.hpp	/^        K,            \/\/\/< The K key$/;"	e	enum:sf::Keyboard::Key
KEY	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	10;"	d	file:
KEY	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	12;"	d	file:
KEY	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	14;"	d	file:
KEY	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	6;"	d	file:
KEY	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	8;"	d	file:
KGC_EMERGENCY	.\dep\Lua\src\lstate.h	55;"	d
KGC_EMERGENCY	.\include\lua\lstate.h	55;"	d
KGC_NORMAL	.\dep\Lua\src\lstate.h	54;"	d
KGC_NORMAL	.\include\lua\lstate.h	54;"	d
KOption	.\dep\Lua\src\lstrlib.c	/^typedef enum KOption {$/;"	g	file:
KOption	.\dep\Lua\src\lstrlib.c	/^} KOption;$/;"	t	typeref:enum:KOption	file:
Kchar	.\dep\Lua\src\lstrlib.c	/^  Kchar,	\/* fixed-length strings *\/$/;"	e	enum:KOption	file:
Key	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
Key	.\include\SFML\Window\Keyboard.hpp	/^    enum Key$/;"	g	class:sf::Keyboard
KeyCount	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        KeyCount      \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyCount	.\include\SFML\Window\Keyboard.hpp	/^        KeyCount      \/\/\/< Keep last -- the total number of keyboard keys$/;"	e	enum:sf::Keyboard::Key
KeyEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyEvent	.\include\SFML\Window\Event.hpp	/^    struct KeyEvent$/;"	s	class:sf::Event
KeyPressed	.\dep\SFML\include\SFML\Window\Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyPressed	.\include\SFML\Window\Event.hpp	/^        KeyPressed,             \/\/\/< A key was pressed (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	.\dep\SFML\include\SFML\Window\Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
KeyReleased	.\include\SFML\Window\Event.hpp	/^        KeyReleased,            \/\/\/< A key was released (data in event.key)$/;"	e	enum:sf::Event::EventType
Keyboard	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
Keyboard	.\include\SFML\Window\Keyboard.hpp	/^class SFML_WINDOW_API Keyboard$/;"	c	namespace:sf
Kfloat	.\dep\Lua\src\lstrlib.c	/^  Kfloat,	\/* floating-point numbers *\/$/;"	e	enum:KOption	file:
Kint	.\dep\Lua\src\lstrlib.c	/^  Kint,		\/* signed integers *\/$/;"	e	enum:KOption	file:
Knop	.\dep\Lua\src\lstrlib.c	/^  Knop		\/* no-op (configuration or spaces) *\/$/;"	e	enum:KOption	file:
Kpaddalign	.\dep\Lua\src\lstrlib.c	/^  Kpaddalign,	\/* padding for alignment *\/$/;"	e	enum:KOption	file:
Kpadding	.\dep\Lua\src\lstrlib.c	/^  Kpadding,	\/* padding *\/$/;"	e	enum:KOption	file:
Kstring	.\dep\Lua\src\lstrlib.c	/^  Kstring,	\/* strings with prefixed length *\/$/;"	e	enum:KOption	file:
Kuint	.\dep\Lua\src\lstrlib.c	/^  Kuint,	\/* unsigned integers *\/$/;"	e	enum:KOption	file:
Kzstr	.\dep\Lua\src\lstrlib.c	/^  Kzstr,	\/* zero-terminated strings *\/$/;"	e	enum:KOption	file:
L	.\dep\Lua\src\lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	.\dep\Lua\src\ldump.c	/^  lua_State *L;$/;"	m	struct:__anon1	file:
L	.\dep\Lua\src\llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	.\dep\Lua\src\lstrlib.c	/^  lua_State *L;$/;"	m	struct:Header	file:
L	.\dep\Lua\src\lstrlib.c	/^  lua_State *L;$/;"	m	struct:MatchState	file:
L	.\dep\Lua\src\lundump.c	/^  lua_State *L;$/;"	m	struct:__anon22	file:
L	.\dep\Lua\src\lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
L	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
L	.\include\SFML\Window\Keyboard.hpp	/^        L,            \/\/\/< The L key$/;"	e	enum:sf::Keyboard::Key
L	.\include\lua\lauxlib.h	/^  lua_State *L;$/;"	m	struct:luaL_Buffer
L	.\include\lua\llex.h	/^  struct lua_State *L;$/;"	m	struct:LexState	typeref:struct:LexState::lua_State
L	.\include\lua\lzio.h	/^  lua_State *L;			\/* Lua state (for reader) *\/$/;"	m	struct:Zio
L	.\include\sol\single\sol\sol.hpp	/^			lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper_n
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L = nullptr; \/\/ non-owning$/;"	m	class:sol::sol::call_syntax::call_status::sol::reference
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L = nullptr;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::function_result
L	.\include\sol\single\sol\sol.hpp	/^		lua_State* L;$/;"	m	struct:sol::sol::this_state
L	.\include\sol\single\sol\sol.hpp	/^		reference(lua_State* L, detail::global_tag) noexcept : L(L) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::reference
L	.\include\sol\single\sol\sol.hpp	/^		reference(lua_State* L, int index = -1) noexcept : L(L) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::reference
L	.\include\sol\single\sol\sol.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::clean
L	.\include\sol\single\sol\sol.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::ref_clean
L	.\include\sol\sol\function_result.hpp	/^		lua_State* L;$/;"	m	struct:sol::function_result
L	.\include\sol\sol\load_result.hpp	/^		lua_State* L;$/;"	m	struct:sol::load_result
L	.\include\sol\sol\protected_function_result.hpp	/^		lua_State* L;$/;"	m	struct:sol::protected_function_result
L	.\include\sol\sol\reference.hpp	/^			lua_State* L;$/;"	m	struct:sol::stack::push_popper_n
L	.\include\sol\sol\reference.hpp	/^		lua_State* L = nullptr; \/\/ non-owning$/;"	m	class:sol::reference
L	.\include\sol\sol\reference.hpp	/^		reference(lua_State* L, detail::global_tag) noexcept : L(L) {$/;"	f	class:sol::reference
L	.\include\sol\sol\reference.hpp	/^		reference(lua_State* L, int index = -1) noexcept : L(L) {$/;"	f	class:sol::reference
L	.\include\sol\sol\stack_guard.hpp	/^		lua_State* L;$/;"	m	struct:sol::stack_guard
L	.\include\sol\sol\stack_proxy.hpp	/^		lua_State* L;$/;"	m	struct:sol::stack_proxy
L	.\include\sol\sol\stack_reference.hpp	/^		lua_State* L = nullptr;$/;"	m	class:sol::stack_reference
L	.\include\sol\sol\state_view.hpp	/^		lua_State* L;$/;"	m	class:sol::state_view
L	.\include\sol\sol\table_core.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::detail::clean
L	.\include\sol\sol\table_core.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::detail::ref_clean
L	.\include\sol\sol\types.hpp	/^		lua_State* L;$/;"	m	struct:sol::this_state
L	.\include\sol\sol\variadic_args.hpp	/^		lua_State* L;$/;"	m	struct:sol::va_iterator
L	.\include\sol\sol\variadic_args.hpp	/^		lua_State* L;$/;"	m	struct:sol::variadic_args
L	.\include\sol\test_stack_guard.hpp	/^	lua_State* L;$/;"	m	struct:test_stack_guard
L2	.\include\sol\single\sol\sol.hpp	/^    lua_State *L2;$/;"	m	struct:sol::luaL_Buffer_52
L2	.\include\sol\sol\compatibility\5.1.0.h	/^    lua_State *L2;$/;"	m	struct:luaL_Buffer_52
LAlt	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LAlt	.\include\SFML\Window\Keyboard.hpp	/^        LAlt,         \/\/\/< The left Alt key$/;"	e	enum:sf::Keyboard::Key
LBracket	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LBracket	.\include\SFML\Window\Keyboard.hpp	/^        LBracket,     \/\/\/< The [ key$/;"	e	enum:sf::Keyboard::Key
LClosure	.\dep\Lua\src\lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	.\dep\Lua\src\lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LClosure	.\include\lua\lobject.h	/^typedef struct LClosure {$/;"	s
LClosure	.\include\lua\lobject.h	/^} LClosure;$/;"	t	typeref:struct:LClosure
LControl	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LControl	.\include\SFML\Window\Keyboard.hpp	/^        LControl,     \/\/\/< The left Control key$/;"	e	enum:sf::Keyboard::Key
LEVELS1	.\dep\Lua\src\lauxlib.c	37;"	d	file:
LEVELS1	.\include\sol\single\sol\sol.hpp	2272;"	d
LEVELS2	.\dep\Lua\src\lauxlib.c	38;"	d	file:
LEVELS2	.\include\sol\single\sol\sol.hpp	2273;"	d
LEintfloat	.\dep\Lua\src\lvm.c	/^static int LEintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LEnum	.\dep\Lua\src\lvm.c	/^static int LEnum (const TValue *l, const TValue *r) {$/;"	f	file:
LFIELDS_PER_FLUSH	.\dep\Lua\src\lopcodes.h	292;"	d
LFIELDS_PER_FLUSH	.\include\lua\lopcodes.h	292;"	d
LG	.\dep\Lua\src\lstate.c	/^typedef struct LG {$/;"	s	file:
LG	.\dep\Lua\src\lstate.c	/^} LG;$/;"	t	typeref:struct:LG	file:
LHS_assign	.\dep\Lua\src\lparser.c	/^struct LHS_assign {$/;"	s	file:
LIB_FAIL	.\dep\Lua\src\loadlib.c	246;"	d	file:
LIB_FAIL	.\dep\Lua\src\loadlib.c	247;"	d	file:
LIB_FAIL	.\dep\Lua\src\loadlib.c	95;"	d	file:
LIGHT_BLUE	.\src\include\trmclr.hpp	/^        LIGHT_BLUE      = 104 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_BLUE	.\src\include\trmclr.hpp	/^        LIGHT_BLUE      = 94 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_CYAN	.\src\include\trmclr.hpp	/^        LIGHT_CYAN      = 106 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_CYAN	.\src\include\trmclr.hpp	/^        LIGHT_CYAN      = 96 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_GRAY	.\src\include\trmclr.hpp	/^        LIGHT_GRAY      =  47 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_GRAY	.\src\include\trmclr.hpp	/^        LIGHT_GRAY      = 37 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_GREEN	.\src\include\trmclr.hpp	/^        LIGHT_GREEN     = 102 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_GREEN	.\src\include\trmclr.hpp	/^        LIGHT_GREEN     = 92 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_MAGENTA	.\src\include\trmclr.hpp	/^        LIGHT_MAGENTA   = 105 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_MAGENTA	.\src\include\trmclr.hpp	/^        LIGHT_MAGENTA   = 95 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_RED	.\src\include\trmclr.hpp	/^        LIGHT_RED       = 101 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_RED	.\src\include\trmclr.hpp	/^        LIGHT_RED       = 91 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LIGHT_YELLOW	.\src\include\trmclr.hpp	/^        LIGHT_YELLOW    = 103 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
LIGHT_YELLOW	.\src\include\trmclr.hpp	/^        LIGHT_YELLOW    = 93 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
LL	.\dep\Lua\src\lobject.c	478;"	d	file:
LOCAL	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	193;"	d
LOCAL_EXPORT_C_INCLUDES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_EXPORT_C_INCLUDES := $(LOCAL_PATH)\/include$/;"	m
LOCAL_EXPORT_LDLIBS	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_EXPORT_LDLIBS := -lEGL -llog -landroid$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-activity$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-activity-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-audio$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-audio-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-graphics$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-graphics-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-main$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-main-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-network$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-network-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-system$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-system-d$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-window$/;"	m
LOCAL_MODULE	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_MODULE := sfml-window-d$/;"	m
LOCAL_PATH	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-system$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-system-d$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-window sfml-system openal$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-window sfml-system$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-window-d sfml-system-d openal$/;"	m
LOCAL_SHARED_LIBRARIES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SHARED_LIBRARIES := sfml-window-d sfml-system-d$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-activity-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-activity.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-audio-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-audio.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-graphics-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-graphics.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-main-d.a$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-main.a$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-network-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-network.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-system-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-system.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-window-d.so$/;"	m
LOCAL_SRC_FILES	.\dep\SFML\src\SFML\Android.mk	/^LOCAL_SRC_FILES := lib\/$(TARGET_ARCH_ABI)\/libsfml-window.so$/;"	m
LOGE	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	33;"	d	file:
LOGE	.\dep\SFML\src\SFML\System\Android\Activity.cpp	33;"	d	file:
LPALAUXILIARYEFFECTSLOTF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTF)(ALuint, ALenum, ALfloat);$/;"	t
LPALAUXILIARYEFFECTSLOTFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTFV)(ALuint, ALenum, const ALfloat*);$/;"	t
LPALAUXILIARYEFFECTSLOTI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTI)(ALuint, ALenum, ALint);$/;"	t
LPALAUXILIARYEFFECTSLOTIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALAUXILIARYEFFECTSLOTIV)(ALuint, ALenum, const ALint*);$/;"	t
LPALBUFFER3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFER3F)(ALuint buffer, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);$/;"	t
LPALBUFFER3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFER3I)(ALuint buffer, ALenum param, ALint value1, ALint value2, ALint value3);$/;"	t
LPALBUFFERDATA	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFERDATA)(ALuint buffer, ALenum format, const ALvoid *data, ALsizei size, ALsizei freq);$/;"	t
LPALBUFFERF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFERF)(ALuint buffer, ALenum param, ALfloat value);$/;"	t
LPALBUFFERFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFERFV)(ALuint buffer, ALenum param, const ALfloat *values);$/;"	t
LPALBUFFERI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFERI)(ALuint buffer, ALenum param, ALint value);$/;"	t
LPALBUFFERIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALBUFFERIV)(ALuint buffer, ALenum param, const ALint *values);$/;"	t
LPALBUFFERSAMPLESSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALBUFFERSAMPLESSOFT)(ALuint,ALuint,ALenum,ALsizei,ALenum,ALenum,const ALvoid*);$/;"	t
LPALBUFFERSUBSAMPLESSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALBUFFERSUBSAMPLESSOFT)(ALuint,ALsizei,ALsizei,ALenum,ALenum,const ALvoid*);$/;"	t
LPALCCAPTURECLOSEDEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCboolean     (ALC_APIENTRY *LPALCCAPTURECLOSEDEVICE)(ALCdevice *device);$/;"	t
LPALCCAPTUREOPENDEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCdevice*     (ALC_APIENTRY *LPALCCAPTUREOPENDEVICE)(const ALCchar *devicename, ALCuint frequency, ALCenum format, ALCsizei buffersize);$/;"	t
LPALCCAPTURESAMPLES	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCCAPTURESAMPLES)(ALCdevice *device, ALCvoid *buffer, ALCsizei samples);$/;"	t
LPALCCAPTURESTART	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCCAPTURESTART)(ALCdevice *device);$/;"	t
LPALCCAPTURESTOP	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCCAPTURESTOP)(ALCdevice *device);$/;"	t
LPALCCLOSEDEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCboolean     (ALC_APIENTRY *LPALCCLOSEDEVICE)(ALCdevice *device);$/;"	t
LPALCCREATECONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCcontext*    (ALC_APIENTRY *LPALCCREATECONTEXT)(ALCdevice *device, const ALCint *attrlist);$/;"	t
LPALCDESTROYCONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCDESTROYCONTEXT)(ALCcontext *context);$/;"	t
LPALCGETCONTEXTSDEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCdevice*     (ALC_APIENTRY *LPALCGETCONTEXTSDEVICE)(ALCcontext *context);$/;"	t
LPALCGETCURRENTCONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCcontext*    (ALC_APIENTRY *LPALCGETCURRENTCONTEXT)(void);$/;"	t
LPALCGETENUMVALUE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCenum        (ALC_APIENTRY *LPALCGETENUMVALUE)(ALCdevice *device, const ALCchar *enumname);$/;"	t
LPALCGETERROR	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCenum        (ALC_APIENTRY *LPALCGETERROR)(ALCdevice *device);$/;"	t
LPALCGETINTEGERV	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCGETINTEGERV)(ALCdevice *device, ALCenum param, ALCsizei size, ALCint *values);$/;"	t
LPALCGETPROCADDRESS	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void*          (ALC_APIENTRY *LPALCGETPROCADDRESS)(ALCdevice *device, const ALCchar *funcname);$/;"	t
LPALCGETSTRING	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef const ALCchar* (ALC_APIENTRY *LPALCGETSTRING)(ALCdevice *device, ALCenum param);$/;"	t
LPALCISEXTENSIONPRESENT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCboolean     (ALC_APIENTRY *LPALCISEXTENSIONPRESENT)(ALCdevice *device, const ALCchar *extname);$/;"	t
LPALCISRENDERFORMATSUPPORTEDSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALCboolean (ALC_APIENTRY*LPALCISRENDERFORMATSUPPORTEDSOFT)(ALCdevice*,ALCsizei,ALCenum,ALCenum);$/;"	t
LPALCLOOPBACKOPENDEVICESOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALCdevice* (ALC_APIENTRY*LPALCLOOPBACKOPENDEVICESOFT)(const ALCchar*);$/;"	t
LPALCMAKECONTEXTCURRENT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCboolean     (ALC_APIENTRY *LPALCMAKECONTEXTCURRENT)(ALCcontext *context);$/;"	t
LPALCOPENDEVICE	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef ALCdevice*     (ALC_APIENTRY *LPALCOPENDEVICE)(const ALCchar *devicename);$/;"	t
LPALCPROCESSCONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCPROCESSCONTEXT)(ALCcontext *context);$/;"	t
LPALCRENDERSAMPLESSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (ALC_APIENTRY*LPALCRENDERSAMPLESSOFT)(ALCdevice*,ALCvoid*,ALCsizei);$/;"	t
LPALCSUSPENDCONTEXT	.\dep\SFML\extlibs\headers\AL\alc.h	/^typedef void           (ALC_APIENTRY *LPALCSUSPENDCONTEXT)(ALCcontext *context);$/;"	t
LPALDELETEAUXILIARYEFFECTSLOTS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALDELETEAUXILIARYEFFECTSLOTS)(ALsizei, const ALuint*);$/;"	t
LPALDELETEBUFFERS	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDELETEBUFFERS)(ALsizei n, const ALuint *buffers);$/;"	t
LPALDELETEEFFECTS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALDELETEEFFECTS)(ALsizei, const ALuint*);$/;"	t
LPALDELETEFILTERS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALDELETEFILTERS)(ALsizei, const ALuint*);$/;"	t
LPALDELETESOURCES	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDELETESOURCES)(ALsizei n, const ALuint *sources);$/;"	t
LPALDISABLE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDISABLE)(ALenum capability);$/;"	t
LPALDISTANCEMODEL	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDISTANCEMODEL)(ALenum distanceModel);$/;"	t
LPALDOPPLERFACTOR	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDOPPLERFACTOR)(ALfloat value);$/;"	t
LPALDOPPLERVELOCITY	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALDOPPLERVELOCITY)(ALfloat value);$/;"	t
LPALEFFECTF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALEFFECTF)(ALuint, ALenum, ALfloat);$/;"	t
LPALEFFECTFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALEFFECTFV)(ALuint, ALenum, const ALfloat*);$/;"	t
LPALEFFECTI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALEFFECTI)(ALuint, ALenum, ALint);$/;"	t
LPALEFFECTIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALEFFECTIV)(ALuint, ALenum, const ALint*);$/;"	t
LPALENABLE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALENABLE)(ALenum capability);$/;"	t
LPALFILTERF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALFILTERF)(ALuint, ALenum, ALfloat);$/;"	t
LPALFILTERFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALFILTERFV)(ALuint, ALenum, const ALfloat*);$/;"	t
LPALFILTERI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALFILTERI)(ALuint, ALenum, ALint);$/;"	t
LPALFILTERIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALFILTERIV)(ALuint, ALenum, const ALint*);$/;"	t
LPALFOLDBACKCALLBACK	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALFOLDBACKCALLBACK)(ALenum,ALsizei);$/;"	t
LPALGENAUXILIARYEFFECTSLOTS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGENAUXILIARYEFFECTSLOTS)(ALsizei, ALuint*);$/;"	t
LPALGENBUFFERS	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGENBUFFERS)(ALsizei n, ALuint *buffers);$/;"	t
LPALGENEFFECTS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGENEFFECTS)(ALsizei, ALuint*);$/;"	t
LPALGENFILTERS	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGENFILTERS)(ALsizei, ALuint*);$/;"	t
LPALGENSOURCES	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGENSOURCES)(ALsizei n, ALuint *sources);$/;"	t
LPALGETAUXILIARYEFFECTSLOTF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTF)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETAUXILIARYEFFECTSLOTFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTFV)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETAUXILIARYEFFECTSLOTI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTI)(ALuint, ALenum, ALint*);$/;"	t
LPALGETAUXILIARYEFFECTSLOTIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETAUXILIARYEFFECTSLOTIV)(ALuint, ALenum, ALint*);$/;"	t
LPALGETBOOLEAN	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALboolean     (AL_APIENTRY *LPALGETBOOLEAN)(ALenum param);$/;"	t
LPALGETBOOLEANV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBOOLEANV)(ALenum param, ALboolean *values);$/;"	t
LPALGETBUFFER3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFER3F)(ALuint buffer, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);$/;"	t
LPALGETBUFFER3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFER3I)(ALuint buffer, ALenum param, ALint *value1, ALint *value2, ALint *value3);$/;"	t
LPALGETBUFFERF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFERF)(ALuint buffer, ALenum param, ALfloat *value);$/;"	t
LPALGETBUFFERFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFERFV)(ALuint buffer, ALenum param, ALfloat *values);$/;"	t
LPALGETBUFFERI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFERI)(ALuint buffer, ALenum param, ALint *value);$/;"	t
LPALGETBUFFERIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETBUFFERIV)(ALuint buffer, ALenum param, ALint *values);$/;"	t
LPALGETBUFFERSAMPLESSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETBUFFERSAMPLESSOFT)(ALuint,ALsizei,ALsizei,ALenum,ALenum,ALvoid*);$/;"	t
LPALGETDOUBLE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALdouble      (AL_APIENTRY *LPALGETDOUBLE)(ALenum param);$/;"	t
LPALGETDOUBLEV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETDOUBLEV)(ALenum param, ALdouble *values);$/;"	t
LPALGETEFFECTF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETEFFECTF)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETEFFECTFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETEFFECTFV)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETEFFECTI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETEFFECTI)(ALuint, ALenum, ALint*);$/;"	t
LPALGETEFFECTIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETEFFECTIV)(ALuint, ALenum, ALint*);$/;"	t
LPALGETENUMVALUE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALenum        (AL_APIENTRY *LPALGETENUMVALUE)(const ALchar *ename);$/;"	t
LPALGETERROR	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALenum        (AL_APIENTRY *LPALGETERROR)(void);$/;"	t
LPALGETFILTERF	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETFILTERF)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETFILTERFV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETFILTERFV)(ALuint, ALenum, ALfloat*);$/;"	t
LPALGETFILTERI	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETFILTERI)(ALuint, ALenum, ALint*);$/;"	t
LPALGETFILTERIV	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef void (AL_APIENTRY *LPALGETFILTERIV)(ALuint, ALenum, ALint*);$/;"	t
LPALGETFLOAT	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALfloat       (AL_APIENTRY *LPALGETFLOAT)(ALenum param);$/;"	t
LPALGETFLOATV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETFLOATV)(ALenum param, ALfloat *values);$/;"	t
LPALGETINTEGER	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALint         (AL_APIENTRY *LPALGETINTEGER)(ALenum param);$/;"	t
LPALGETINTEGERV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETINTEGERV)(ALenum param, ALint *values);$/;"	t
LPALGETLISTENER3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENER3F)(ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);$/;"	t
LPALGETLISTENER3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENER3I)(ALenum param, ALint *value1, ALint *value2, ALint *value3);$/;"	t
LPALGETLISTENERF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENERF)(ALenum param, ALfloat *value);$/;"	t
LPALGETLISTENERFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENERFV)(ALenum param, ALfloat *values);$/;"	t
LPALGETLISTENERI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENERI)(ALenum param, ALint *value);$/;"	t
LPALGETLISTENERIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETLISTENERIV)(ALenum param, ALint *values);$/;"	t
LPALGETPROCADDRESS	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void*         (AL_APIENTRY *LPALGETPROCADDRESS)(const ALchar *fname);$/;"	t
LPALGETSOURCE3DSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCE3DSOFT)(ALuint,ALenum,ALdouble*,ALdouble*,ALdouble*);$/;"	t
LPALGETSOURCE3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCE3F)(ALuint source, ALenum param, ALfloat *value1, ALfloat *value2, ALfloat *value3);$/;"	t
LPALGETSOURCE3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCE3I)(ALuint source, ALenum param, ALint *value1, ALint *value2, ALint *value3);$/;"	t
LPALGETSOURCE3I64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCE3I64SOFT)(ALuint,ALenum,ALint64SOFT*,ALint64SOFT*,ALint64SOFT*);$/;"	t
LPALGETSOURCEDSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCEDSOFT)(ALuint,ALenum,ALdouble*);$/;"	t
LPALGETSOURCEDVSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCEDVSOFT)(ALuint,ALenum,ALdouble*);$/;"	t
LPALGETSOURCEF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCEF)(ALuint source, ALenum param, ALfloat *value);$/;"	t
LPALGETSOURCEFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCEFV)(ALuint source, ALenum param, ALfloat *values);$/;"	t
LPALGETSOURCEI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCEI)(ALuint source, ALenum param, ALint *value);$/;"	t
LPALGETSOURCEI64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCEI64SOFT)(ALuint,ALenum,ALint64SOFT*);$/;"	t
LPALGETSOURCEI64VSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALGETSOURCEI64VSOFT)(ALuint,ALenum,ALint64SOFT*);$/;"	t
LPALGETSOURCEIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALGETSOURCEIV)(ALuint source, ALenum param, ALint *values);$/;"	t
LPALGETSTRING	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef const ALchar* (AL_APIENTRY *LPALGETSTRING)(ALenum param);$/;"	t
LPALISAUXILIARYEFFECTSLOT	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef ALboolean (AL_APIENTRY *LPALISAUXILIARYEFFECTSLOT)(ALuint);$/;"	t
LPALISBUFFER	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALboolean     (AL_APIENTRY *LPALISBUFFER)(ALuint buffer);$/;"	t
LPALISBUFFERFORMATSUPPORTEDSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALboolean (AL_APIENTRY*LPALISBUFFERFORMATSUPPORTEDSOFT)(ALenum);$/;"	t
LPALISEFFECT	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef ALboolean (AL_APIENTRY *LPALISEFFECT)(ALuint);$/;"	t
LPALISENABLED	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALboolean     (AL_APIENTRY *LPALISENABLED)(ALenum capability);$/;"	t
LPALISEXTENSIONPRESENT	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALboolean     (AL_APIENTRY *LPALISEXTENSIONPRESENT)(const ALchar *extname);$/;"	t
LPALISFILTER	.\dep\SFML\extlibs\headers\AL\efx.h	/^typedef ALboolean (AL_APIENTRY *LPALISFILTER)(ALuint);$/;"	t
LPALISSOURCE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef ALboolean     (AL_APIENTRY *LPALISSOURCE)(ALuint source);$/;"	t
LPALLISTENER3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENER3F)(ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);$/;"	t
LPALLISTENER3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENER3I)(ALenum param, ALint value1, ALint value2, ALint value3);$/;"	t
LPALLISTENERF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENERF)(ALenum param, ALfloat value);$/;"	t
LPALLISTENERFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENERFV)(ALenum param, const ALfloat *values);$/;"	t
LPALLISTENERI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENERI)(ALenum param, ALint value);$/;"	t
LPALLISTENERIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALLISTENERIV)(ALenum param, const ALint *values);$/;"	t
LPALREQUESTFOLDBACKSTART	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALREQUESTFOLDBACKSTART)(ALenum,ALsizei,ALsizei,ALfloat*,LPALFOLDBACKCALLBACK);$/;"	t
LPALREQUESTFOLDBACKSTOP	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALREQUESTFOLDBACKSTOP)(void);$/;"	t
LPALSOURCE3DSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCE3DSOFT)(ALuint,ALenum,ALdouble,ALdouble,ALdouble);$/;"	t
LPALSOURCE3F	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCE3F)(ALuint source, ALenum param, ALfloat value1, ALfloat value2, ALfloat value3);$/;"	t
LPALSOURCE3I	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCE3I)(ALuint source, ALenum param, ALint value1, ALint value2, ALint value3);$/;"	t
LPALSOURCE3I64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCE3I64SOFT)(ALuint,ALenum,ALint64SOFT,ALint64SOFT,ALint64SOFT);$/;"	t
LPALSOURCEDSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCEDSOFT)(ALuint,ALenum,ALdouble);$/;"	t
LPALSOURCEDVSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCEDVSOFT)(ALuint,ALenum,const ALdouble*);$/;"	t
LPALSOURCEF	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEF)(ALuint source, ALenum param, ALfloat value);$/;"	t
LPALSOURCEFV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEFV)(ALuint source, ALenum param, const ALfloat *values);$/;"	t
LPALSOURCEI	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEI)(ALuint source, ALenum param, ALint value);$/;"	t
LPALSOURCEI64SOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCEI64SOFT)(ALuint,ALenum,ALint64SOFT);$/;"	t
LPALSOURCEI64VSOFT	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef void (AL_APIENTRY*LPALSOURCEI64VSOFT)(ALuint,ALenum,const ALint64SOFT*);$/;"	t
LPALSOURCEIV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEIV)(ALuint source, ALenum param, const ALint *values);$/;"	t
LPALSOURCEPAUSE	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEPAUSE)(ALuint source);$/;"	t
LPALSOURCEPAUSEV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEPAUSEV)(ALsizei n, const ALuint *sources);$/;"	t
LPALSOURCEPLAY	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEPLAY)(ALuint source);$/;"	t
LPALSOURCEPLAYV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEPLAYV)(ALsizei n, const ALuint *sources);$/;"	t
LPALSOURCEQUEUEBUFFERS	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEQUEUEBUFFERS)(ALuint source, ALsizei nb, const ALuint *buffers);$/;"	t
LPALSOURCEREWIND	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEREWIND)(ALuint source);$/;"	t
LPALSOURCEREWINDV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEREWINDV)(ALsizei n, const ALuint *sources);$/;"	t
LPALSOURCESTOP	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCESTOP)(ALuint source);$/;"	t
LPALSOURCESTOPV	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCESTOPV)(ALsizei n, const ALuint *sources);$/;"	t
LPALSOURCEUNQUEUEBUFFERS	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSOURCEUNQUEUEBUFFERS)(ALuint source, ALsizei nb, ALuint *buffers);$/;"	t
LPALSPEEDOFSOUND	.\dep\SFML\extlibs\headers\AL\al.h	/^typedef void          (AL_APIENTRY *LPALSPEEDOFSOUND)(ALfloat value);$/;"	t
LPEFXEAXREVERBPROPERTIES	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^} EFXEAXREVERBPROPERTIES, *LPEFXEAXREVERBPROPERTIES;$/;"	t	typeref:struct:__anon23
LShift	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LShift	.\include\SFML\Window\Keyboard.hpp	/^        LShift,       \/\/\/< The left Shift key$/;"	e	enum:sf::Keyboard::Key
LStream	.\dep\Lua\src\liolib.c	/^typedef luaL_Stream LStream;$/;"	t	file:
LSystem	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
LSystem	.\include\SFML\Window\Keyboard.hpp	/^        LSystem,      \/\/\/< The left OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
LTintfloat	.\dep\Lua\src\lvm.c	/^static int LTintfloat (lua_Integer i, lua_Number f) {$/;"	f	file:
LTnum	.\dep\Lua\src\lvm.c	/^static int LTnum (const TValue *l, const TValue *r) {$/;"	f	file:
LUAC_DATA	.\dep\Lua\src\lundump.h	16;"	d
LUAC_DATA	.\include\lua\lundump.h	16;"	d
LUAC_FORMAT	.\dep\Lua\src\lundump.h	23;"	d
LUAC_FORMAT	.\include\lua\lundump.h	23;"	d
LUAC_INT	.\dep\Lua\src\lundump.h	18;"	d
LUAC_INT	.\include\lua\lundump.h	18;"	d
LUAC_NUM	.\dep\Lua\src\lundump.h	19;"	d
LUAC_NUM	.\include\lua\lundump.h	19;"	d
LUAC_VERSION	.\dep\Lua\src\lundump.h	22;"	d
LUAC_VERSION	.\include\lua\lundump.h	22;"	d
LUAI_BITSINT	.\dep\Lua\src\luaconf.h	91;"	d
LUAI_BITSINT	.\dep\Lua\src\luaconf.h	94;"	d
LUAI_BITSINT	.\include\lua\luaconf.h	91;"	d
LUAI_BITSINT	.\include\lua\luaconf.h	94;"	d
LUAI_DDEC	.\dep\Lua\src\luaconf.h	273;"	d
LUAI_DDEC	.\include\lua\luaconf.h	273;"	d
LUAI_DDEF	.\dep\Lua\src\luaconf.h	274;"	d
LUAI_DDEF	.\include\lua\luaconf.h	274;"	d
LUAI_EXTRAIEEE	.\include\sol\single\sol\sol.hpp	2451;"	d
LUAI_EXTRAIEEE	.\include\sol\single\sol\sol.hpp	2456;"	d
LUAI_FUNC	.\dep\Lua\src\luaconf.h	268;"	d
LUAI_FUNC	.\dep\Lua\src\luaconf.h	270;"	d
LUAI_FUNC	.\include\lua\luaconf.h	268;"	d
LUAI_FUNC	.\include\lua\luaconf.h	270;"	d
LUAI_GCMUL	.\dep\Lua\src\lstate.c	36;"	d	file:
LUAI_GCPAUSE	.\dep\Lua\src\lstate.c	32;"	d	file:
LUAI_HASHLIMIT	.\dep\Lua\src\lstring.c	33;"	d	file:
LUAI_INT32	.\include\sol\single\sol\sol.hpp	1858;"	d
LUAI_INT32	.\include\sol\sol\compatibility\5.1.0.h	39;"	d
LUAI_INT32	.\include\sol\sol\compatibility\5.1.0.h	42;"	d
LUAI_MAXCCALLS	.\dep\Lua\src\llimits.h	153;"	d
LUAI_MAXCCALLS	.\include\lua\llimits.h	153;"	d
LUAI_MAXSHORTLEN	.\dep\Lua\src\llimits.h	177;"	d
LUAI_MAXSHORTLEN	.\include\lua\llimits.h	177;"	d
LUAI_MAXSTACK	.\dep\Lua\src\luaconf.h	706;"	d
LUAI_MAXSTACK	.\dep\Lua\src\luaconf.h	708;"	d
LUAI_MAXSTACK	.\include\lua\luaconf.h	706;"	d
LUAI_MAXSTACK	.\include\lua\luaconf.h	708;"	d
LUAI_THROW	.\dep\Lua\src\ldo.c	58;"	d	file:
LUAI_THROW	.\dep\Lua\src\ldo.c	66;"	d	file:
LUAI_THROW	.\dep\Lua\src\ldo.c	73;"	d	file:
LUAI_TRY	.\dep\Lua\src\ldo.c	59;"	d	file:
LUAI_TRY	.\dep\Lua\src\ldo.c	67;"	d	file:
LUAI_TRY	.\dep\Lua\src\ldo.c	74;"	d	file:
LUAI_UACINT	.\dep\Lua\src\luaconf.h	516;"	d
LUAI_UACINT	.\include\lua\luaconf.h	516;"	d
LUAI_UACNUMBER	.\dep\Lua\src\luaconf.h	448;"	d
LUAI_UACNUMBER	.\dep\Lua\src\luaconf.h	464;"	d
LUAI_UACNUMBER	.\dep\Lua\src\luaconf.h	479;"	d
LUAI_UACNUMBER	.\include\lua\luaconf.h	448;"	d
LUAI_UACNUMBER	.\include\lua\luaconf.h	464;"	d
LUAI_UACNUMBER	.\include\lua\luaconf.h	479;"	d
LUAI_UINT32	.\include\sol\single\sol\sol.hpp	1859;"	d
LUAI_UINT32	.\include\sol\sol\compatibility\5.1.0.h	40;"	d
LUAI_UINT32	.\include\sol\sol\compatibility\5.1.0.h	43;"	d
LUALIB_API	.\dep\Lua\src\luaconf.h	248;"	d
LUALIB_API	.\include\lua\luaconf.h	248;"	d
LUAL_BUFFERSIZE	.\dep\Lua\src\luaconf.h	736;"	d
LUAL_BUFFERSIZE	.\dep\Lua\src\luaconf.h	738;"	d
LUAL_BUFFERSIZE	.\include\lua\luaconf.h	736;"	d
LUAL_BUFFERSIZE	.\include\lua\luaconf.h	738;"	d
LUAL_NUMSIZES	.\dep\Lua\src\lauxlib.h	29;"	d
LUAL_NUMSIZES	.\include\lua\lauxlib.h	29;"	d
LUAL_PACKPADBYTE	.\dep\Lua\src\lstrlib.c	1105;"	d	file:
LUAMOD_API	.\dep\Lua\src\luaconf.h	249;"	d
LUAMOD_API	.\include\lua\luaconf.h	249;"	d
LUA_API	.\dep\Lua\src\luaconf.h	235;"	d
LUA_API	.\dep\Lua\src\luaconf.h	237;"	d
LUA_API	.\dep\Lua\src\luaconf.h	242;"	d
LUA_API	.\include\lua\luaconf.h	235;"	d
LUA_API	.\include\lua\luaconf.h	237;"	d
LUA_API	.\include\lua\luaconf.h	242;"	d
LUA_AUTHORS	.\dep\Lua\src\lua.h	27;"	d
LUA_AUTHORS	.\include\lua\lua.h	27;"	d
LUA_BITLIBNAME	.\dep\Lua\src\lualib.h	35;"	d
LUA_BITLIBNAME	.\include\lua\lualib.h	35;"	d
LUA_C89_NUMBERS	.\dep\Lua\src\luaconf.h	81;"	d
LUA_C89_NUMBERS	.\include\lua\luaconf.h	81;"	d
LUA_CDIR	.\dep\Lua\src\luaconf.h	177;"	d
LUA_CDIR	.\dep\Lua\src\luaconf.h	193;"	d
LUA_CDIR	.\include\lua\luaconf.h	177;"	d
LUA_CDIR	.\include\lua\luaconf.h	193;"	d
LUA_COLIBNAME	.\dep\Lua\src\lualib.h	17;"	d
LUA_COLIBNAME	.\include\lua\lualib.h	17;"	d
LUA_COMPAT_APIINTCASTS	.\dep\Lua\src\luaconf.h	314;"	d
LUA_COMPAT_APIINTCASTS	.\dep\Lua\src\luaconf.h	323;"	d
LUA_COMPAT_APIINTCASTS	.\include\lua\luaconf.h	314;"	d
LUA_COMPAT_APIINTCASTS	.\include\lua\luaconf.h	323;"	d
LUA_COMPAT_BITLIB	.\dep\Lua\src\luaconf.h	302;"	d
LUA_COMPAT_BITLIB	.\include\lua\luaconf.h	302;"	d
LUA_COMPAT_IPAIRS	.\dep\Lua\src\luaconf.h	307;"	d
LUA_COMPAT_IPAIRS	.\include\lua\luaconf.h	307;"	d
LUA_COMPAT_LOADERS	.\dep\Lua\src\luaconf.h	335;"	d
LUA_COMPAT_LOADERS	.\include\lua\luaconf.h	335;"	d
LUA_COMPAT_LOADSTRING	.\dep\Lua\src\luaconf.h	357;"	d
LUA_COMPAT_LOADSTRING	.\include\lua\luaconf.h	357;"	d
LUA_COMPAT_LOG10	.\dep\Lua\src\luaconf.h	351;"	d
LUA_COMPAT_LOG10	.\include\lua\luaconf.h	351;"	d
LUA_COMPAT_MATHLIB	.\dep\Lua\src\luaconf.h	297;"	d
LUA_COMPAT_MATHLIB	.\dep\Lua\src\luaconf.h	322;"	d
LUA_COMPAT_MATHLIB	.\include\lua\luaconf.h	297;"	d
LUA_COMPAT_MATHLIB	.\include\lua\luaconf.h	322;"	d
LUA_COMPAT_MAXN	.\dep\Lua\src\luaconf.h	362;"	d
LUA_COMPAT_MAXN	.\include\lua\luaconf.h	362;"	d
LUA_COMPAT_MODULE	.\dep\Lua\src\luaconf.h	380;"	d
LUA_COMPAT_MODULE	.\include\lua\luaconf.h	380;"	d
LUA_COMPAT_UNPACK	.\dep\Lua\src\luaconf.h	329;"	d
LUA_COMPAT_UNPACK	.\include\lua\luaconf.h	329;"	d
LUA_COPYRIGHT	.\dep\Lua\src\lua.h	26;"	d
LUA_COPYRIGHT	.\include\lua\lua.h	26;"	d
LUA_CORE	.\dep\Lua\src\lapi.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lcode.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lctype.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\ldebug.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\ldo.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\ldump.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lfunc.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lgc.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\llex.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lmem.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lobject.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lopcodes.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lparser.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lstate.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lstring.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\ltable.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\ltm.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\luac.c	218;"	d	file:
LUA_CORE	.\dep\Lua\src\luac.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lundump.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lvm.c	8;"	d	file:
LUA_CORE	.\dep\Lua\src\lzio.c	8;"	d	file:
LUA_CPATHVARVERSION	.\dep\Lua\src\loadlib.c	42;"	d	file:
LUA_CPATH_DEFAULT	.\dep\Lua\src\luaconf.h	184;"	d
LUA_CPATH_DEFAULT	.\dep\Lua\src\luaconf.h	198;"	d
LUA_CPATH_DEFAULT	.\include\lua\luaconf.h	184;"	d
LUA_CPATH_DEFAULT	.\include\lua\luaconf.h	198;"	d
LUA_CPATH_VAR	.\dep\Lua\src\loadlib.c	36;"	d	file:
LUA_CSUBSEP	.\dep\Lua\src\loadlib.c	74;"	d	file:
LUA_DBLIBNAME	.\dep\Lua\src\lualib.h	41;"	d
LUA_DBLIBNAME	.\include\lua\lualib.h	41;"	d
LUA_DIRSEP	.\dep\Lua\src\luaconf.h	209;"	d
LUA_DIRSEP	.\dep\Lua\src\luaconf.h	211;"	d
LUA_DIRSEP	.\include\lua\luaconf.h	209;"	d
LUA_DIRSEP	.\include\lua\luaconf.h	211;"	d
LUA_DL_DLL	.\dep\Lua\src\luaconf.h	56;"	d
LUA_DL_DLL	.\include\lua\luaconf.h	56;"	d
LUA_ENV	.\dep\Lua\src\llex.h	18;"	d
LUA_ENV	.\include\lua\llex.h	18;"	d
LUA_ERRERR	.\dep\Lua\src\lua.h	53;"	d
LUA_ERRERR	.\include\lua\lua.h	53;"	d
LUA_ERRFILE	.\dep\Lua\src\lauxlib.h	20;"	d
LUA_ERRFILE	.\include\lua\lauxlib.h	20;"	d
LUA_ERRGCMM	.\dep\Lua\src\lua.h	52;"	d
LUA_ERRGCMM	.\include\lua\lua.h	52;"	d
LUA_ERRGCMM	.\include\sol\single\sol\sol.hpp	1870;"	d
LUA_ERRGCMM	.\include\sol\sol\compatibility\5.1.0.h	51;"	d
LUA_ERRMEM	.\dep\Lua\src\lua.h	51;"	d
LUA_ERRMEM	.\include\lua\lua.h	51;"	d
LUA_ERRRUN	.\dep\Lua\src\lua.h	49;"	d
LUA_ERRRUN	.\include\lua\lua.h	49;"	d
LUA_ERRSYNTAX	.\dep\Lua\src\lua.h	50;"	d
LUA_ERRSYNTAX	.\include\lua\lua.h	50;"	d
LUA_EXEC_DIR	.\dep\Lua\src\loadlib.c	60;"	d	file:
LUA_EXTRASPACE	.\dep\Lua\src\luaconf.h	717;"	d
LUA_EXTRASPACE	.\include\lua\luaconf.h	717;"	d
LUA_FILEHANDLE	.\dep\Lua\src\lauxlib.h	182;"	d
LUA_FILEHANDLE	.\include\lua\lauxlib.h	182;"	d
LUA_FLOAT_DOUBLE	.\dep\Lua\src\luaconf.h	115;"	d
LUA_FLOAT_DOUBLE	.\include\lua\luaconf.h	115;"	d
LUA_FLOAT_FLOAT	.\dep\Lua\src\luaconf.h	114;"	d
LUA_FLOAT_FLOAT	.\include\lua\luaconf.h	114;"	d
LUA_FLOAT_LONGDOUBLE	.\dep\Lua\src\luaconf.h	116;"	d
LUA_FLOAT_LONGDOUBLE	.\include\lua\luaconf.h	116;"	d
LUA_FLOAT_TYPE	.\dep\Lua\src\luaconf.h	127;"	d
LUA_FLOAT_TYPE	.\dep\Lua\src\luaconf.h	134;"	d
LUA_FLOAT_TYPE	.\dep\Lua\src\luaconf.h	147;"	d
LUA_FLOAT_TYPE	.\include\lua\luaconf.h	127;"	d
LUA_FLOAT_TYPE	.\include\lua\luaconf.h	134;"	d
LUA_FLOAT_TYPE	.\include\lua\luaconf.h	147;"	d
LUA_FLOORN2I	.\dep\Lua\src\lvm.h	36;"	d
LUA_FLOORN2I	.\include\lua\lvm.h	36;"	d
LUA_GCCOLLECT	.\dep\Lua\src\lua.h	304;"	d
LUA_GCCOLLECT	.\include\lua\lua.h	304;"	d
LUA_GCCOUNT	.\dep\Lua\src\lua.h	305;"	d
LUA_GCCOUNT	.\include\lua\lua.h	305;"	d
LUA_GCCOUNTB	.\dep\Lua\src\lua.h	306;"	d
LUA_GCCOUNTB	.\include\lua\lua.h	306;"	d
LUA_GCISRUNNING	.\dep\Lua\src\lua.h	310;"	d
LUA_GCISRUNNING	.\include\lua\lua.h	310;"	d
LUA_GCRESTART	.\dep\Lua\src\lua.h	303;"	d
LUA_GCRESTART	.\include\lua\lua.h	303;"	d
LUA_GCSETPAUSE	.\dep\Lua\src\lua.h	308;"	d
LUA_GCSETPAUSE	.\include\lua\lua.h	308;"	d
LUA_GCSETSTEPMUL	.\dep\Lua\src\lua.h	309;"	d
LUA_GCSETSTEPMUL	.\include\lua\lua.h	309;"	d
LUA_GCSTEP	.\dep\Lua\src\lua.h	307;"	d
LUA_GCSTEP	.\include\lua\lua.h	307;"	d
LUA_GCSTOP	.\dep\Lua\src\lua.h	302;"	d
LUA_GCSTOP	.\include\lua\lua.h	302;"	d
LUA_HOOKCALL	.\dep\Lua\src\lua.h	402;"	d
LUA_HOOKCALL	.\include\lua\lua.h	402;"	d
LUA_HOOKCOUNT	.\dep\Lua\src\lua.h	405;"	d
LUA_HOOKCOUNT	.\include\lua\lua.h	405;"	d
LUA_HOOKLINE	.\dep\Lua\src\lua.h	404;"	d
LUA_HOOKLINE	.\include\lua\lua.h	404;"	d
LUA_HOOKRET	.\dep\Lua\src\lua.h	403;"	d
LUA_HOOKRET	.\include\lua\lua.h	403;"	d
LUA_HOOKTAILCALL	.\dep\Lua\src\lua.h	406;"	d
LUA_HOOKTAILCALL	.\include\lua\lua.h	406;"	d
LUA_IDSIZE	.\dep\Lua\src\luaconf.h	725;"	d
LUA_IDSIZE	.\include\lua\luaconf.h	725;"	d
LUA_IEEE754TRICK	.\include\sol\single\sol\sol.hpp	2382;"	d
LUA_IEEE754TRICK	.\include\sol\single\sol\sol.hpp	2390;"	d
LUA_IEEE754TRICK	.\include\sol\single\sol\sol.hpp	2395;"	d
LUA_IEEE754TRICK	.\include\sol\single\sol\sol.hpp	2401;"	d
LUA_IEEEENDIAN	.\include\sol\single\sol\sol.hpp	2376;"	d
LUA_IEEEENDIAN	.\include\sol\single\sol\sol.hpp	2384;"	d
LUA_IEEEENDIAN	.\include\sol\single\sol\sol.hpp	2391;"	d
LUA_IEEEENDIAN	.\include\sol\single\sol\sol.hpp	2396;"	d
LUA_IEEEENDIANLOC	.\include\sol\single\sol\sol.hpp	2453;"	d
LUA_IEEEENDIANLOC	.\include\sol\single\sol\sol.hpp	2455;"	d
LUA_IEEELL	.\include\sol\single\sol\sol.hpp	2383;"	d
LUA_IGMARK	.\dep\Lua\src\loadlib.c	63;"	d	file:
LUA_INITVARVERSION	.\dep\Lua\src\lua.c	40;"	d	file:
LUA_INIT_VAR	.\dep\Lua\src\lua.c	37;"	d	file:
LUA_INT32	.\include\sol\single\sol\sol.hpp	/^typedef LUAI_INT32 LUA_INT32;$/;"	t
LUA_INTEGER	.\dep\Lua\src\luaconf.h	529;"	d
LUA_INTEGER	.\dep\Lua\src\luaconf.h	537;"	d
LUA_INTEGER	.\dep\Lua\src\luaconf.h	549;"	d
LUA_INTEGER	.\dep\Lua\src\luaconf.h	558;"	d
LUA_INTEGER	.\include\lua\luaconf.h	529;"	d
LUA_INTEGER	.\include\lua\luaconf.h	537;"	d
LUA_INTEGER	.\include\lua\luaconf.h	549;"	d
LUA_INTEGER	.\include\lua\luaconf.h	558;"	d
LUA_INTEGER_FMT	.\dep\Lua\src\luaconf.h	513;"	d
LUA_INTEGER_FMT	.\include\lua\luaconf.h	513;"	d
LUA_INTEGER_FRMLEN	.\dep\Lua\src\luaconf.h	530;"	d
LUA_INTEGER_FRMLEN	.\dep\Lua\src\luaconf.h	538;"	d
LUA_INTEGER_FRMLEN	.\dep\Lua\src\luaconf.h	550;"	d
LUA_INTEGER_FRMLEN	.\dep\Lua\src\luaconf.h	559;"	d
LUA_INTEGER_FRMLEN	.\include\lua\luaconf.h	530;"	d
LUA_INTEGER_FRMLEN	.\include\lua\luaconf.h	538;"	d
LUA_INTEGER_FRMLEN	.\include\lua\luaconf.h	550;"	d
LUA_INTEGER_FRMLEN	.\include\lua\luaconf.h	559;"	d
LUA_INT_INT	.\dep\Lua\src\luaconf.h	109;"	d
LUA_INT_INT	.\include\lua\luaconf.h	109;"	d
LUA_INT_LONG	.\dep\Lua\src\luaconf.h	110;"	d
LUA_INT_LONG	.\include\lua\luaconf.h	110;"	d
LUA_INT_LONGLONG	.\dep\Lua\src\luaconf.h	111;"	d
LUA_INT_LONGLONG	.\include\lua\luaconf.h	111;"	d
LUA_INT_TYPE	.\dep\Lua\src\luaconf.h	123;"	d
LUA_INT_TYPE	.\dep\Lua\src\luaconf.h	125;"	d
LUA_INT_TYPE	.\dep\Lua\src\luaconf.h	133;"	d
LUA_INT_TYPE	.\dep\Lua\src\luaconf.h	143;"	d
LUA_INT_TYPE	.\include\lua\luaconf.h	123;"	d
LUA_INT_TYPE	.\include\lua\luaconf.h	125;"	d
LUA_INT_TYPE	.\include\lua\luaconf.h	133;"	d
LUA_INT_TYPE	.\include\lua\luaconf.h	143;"	d
LUA_IOLIBNAME	.\dep\Lua\src\lualib.h	23;"	d
LUA_IOLIBNAME	.\include\lua\lualib.h	23;"	d
LUA_KCONTEXT	.\dep\Lua\src\luaconf.h	639;"	d
LUA_KCONTEXT	.\dep\Lua\src\luaconf.h	645;"	d
LUA_KCONTEXT	.\dep\Lua\src\luaconf.h	646;"	d
LUA_KCONTEXT	.\include\lua\luaconf.h	639;"	d
LUA_KCONTEXT	.\include\lua\luaconf.h	645;"	d
LUA_KCONTEXT	.\include\lua\luaconf.h	646;"	d
LUA_KCONTEXT	.\include\sol\single\sol\sol.hpp	1875;"	d
LUA_KCONTEXT	.\include\sol\sol\compatibility\5.1.0.h	56;"	d
LUA_LDIR	.\dep\Lua\src\luaconf.h	176;"	d
LUA_LDIR	.\dep\Lua\src\luaconf.h	192;"	d
LUA_LDIR	.\include\lua\luaconf.h	176;"	d
LUA_LDIR	.\include\lua\luaconf.h	192;"	d
LUA_LIB	.\dep\Lua\src\lauxlib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lbaselib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lbitlib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lcorolib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\ldblib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\linit.c	9;"	d	file:
LUA_LIB	.\dep\Lua\src\liolib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lmathlib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\loadlib.c	12;"	d	file:
LUA_LIB	.\dep\Lua\src\loslib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lstrlib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\ltablib.c	8;"	d	file:
LUA_LIB	.\dep\Lua\src\lutf8lib.c	8;"	d	file:
LUA_LLE_FLAGS	.\dep\Lua\src\loadlib.c	188;"	d	file:
LUA_LOADLIBNAME	.\dep\Lua\src\lualib.h	44;"	d
LUA_LOADLIBNAME	.\include\lua\lualib.h	44;"	d
LUA_LSUBSEP	.\dep\Lua\src\loadlib.c	78;"	d	file:
LUA_MASKCALL	.\dep\Lua\src\lua.h	412;"	d
LUA_MASKCALL	.\include\lua\lua.h	412;"	d
LUA_MASKCOUNT	.\dep\Lua\src\lua.h	415;"	d
LUA_MASKCOUNT	.\include\lua\lua.h	415;"	d
LUA_MASKLINE	.\dep\Lua\src\lua.h	414;"	d
LUA_MASKLINE	.\include\lua\lua.h	414;"	d
LUA_MASKRET	.\dep\Lua\src\lua.h	413;"	d
LUA_MASKRET	.\include\lua\lua.h	413;"	d
LUA_MATHLIBNAME	.\dep\Lua\src\lualib.h	38;"	d
LUA_MATHLIBNAME	.\include\lua\lualib.h	38;"	d
LUA_MAXCAPTURES	.\dep\Lua\src\lstrlib.c	34;"	d	file:
LUA_MAXINPUT	.\dep\Lua\src\lua.c	33;"	d	file:
LUA_MAXINTEGER	.\dep\Lua\src\luaconf.h	532;"	d
LUA_MAXINTEGER	.\dep\Lua\src\luaconf.h	540;"	d
LUA_MAXINTEGER	.\dep\Lua\src\luaconf.h	552;"	d
LUA_MAXINTEGER	.\dep\Lua\src\luaconf.h	561;"	d
LUA_MAXINTEGER	.\include\lua\luaconf.h	532;"	d
LUA_MAXINTEGER	.\include\lua\luaconf.h	540;"	d
LUA_MAXINTEGER	.\include\lua\luaconf.h	552;"	d
LUA_MAXINTEGER	.\include\lua\luaconf.h	561;"	d
LUA_MINBUFFER	.\dep\Lua\src\llimits.h	205;"	d
LUA_MINBUFFER	.\include\lua\llimits.h	205;"	d
LUA_MININTEGER	.\dep\Lua\src\luaconf.h	533;"	d
LUA_MININTEGER	.\dep\Lua\src\luaconf.h	541;"	d
LUA_MININTEGER	.\dep\Lua\src\luaconf.h	553;"	d
LUA_MININTEGER	.\dep\Lua\src\luaconf.h	562;"	d
LUA_MININTEGER	.\include\lua\luaconf.h	533;"	d
LUA_MININTEGER	.\include\lua\luaconf.h	541;"	d
LUA_MININTEGER	.\include\lua\luaconf.h	553;"	d
LUA_MININTEGER	.\include\lua\luaconf.h	562;"	d
LUA_MINSTACK	.\dep\Lua\src\lua.h	79;"	d
LUA_MINSTACK	.\include\lua\lua.h	79;"	d
LUA_MSASMTRICK	.\include\sol\single\sol\sol.hpp	2375;"	d
LUA_MULTRET	.\dep\Lua\src\lua.h	34;"	d
LUA_MULTRET	.\include\lua\lua.h	34;"	d
LUA_NANTRICK	.\include\sol\single\sol\sol.hpp	2377;"	d
LUA_NANTRICK	.\include\sol\single\sol\sol.hpp	2385;"	d
LUA_NBITS	.\dep\Lua\src\lbitlib.c	28;"	d	file:
LUA_NOREF	.\dep\Lua\src\lauxlib.h	69;"	d
LUA_NOREF	.\include\lua\lauxlib.h	69;"	d
LUA_NUMBER	.\dep\Lua\src\luaconf.h	444;"	d
LUA_NUMBER	.\dep\Lua\src\luaconf.h	460;"	d
LUA_NUMBER	.\dep\Lua\src\luaconf.h	475;"	d
LUA_NUMBER	.\include\lua\luaconf.h	444;"	d
LUA_NUMBER	.\include\lua\luaconf.h	460;"	d
LUA_NUMBER	.\include\lua\luaconf.h	475;"	d
LUA_NUMBER_FMT	.\dep\Lua\src\luaconf.h	451;"	d
LUA_NUMBER_FMT	.\dep\Lua\src\luaconf.h	467;"	d
LUA_NUMBER_FMT	.\dep\Lua\src\luaconf.h	482;"	d
LUA_NUMBER_FMT	.\include\lua\luaconf.h	451;"	d
LUA_NUMBER_FMT	.\include\lua\luaconf.h	467;"	d
LUA_NUMBER_FMT	.\include\lua\luaconf.h	482;"	d
LUA_NUMBER_FRMLEN	.\dep\Lua\src\luaconf.h	450;"	d
LUA_NUMBER_FRMLEN	.\dep\Lua\src\luaconf.h	466;"	d
LUA_NUMBER_FRMLEN	.\dep\Lua\src\luaconf.h	481;"	d
LUA_NUMBER_FRMLEN	.\include\lua\luaconf.h	450;"	d
LUA_NUMBER_FRMLEN	.\include\lua\luaconf.h	466;"	d
LUA_NUMBER_FRMLEN	.\include\lua\luaconf.h	481;"	d
LUA_NUMTAGS	.\dep\Lua\src\lua.h	74;"	d
LUA_NUMTAGS	.\include\lua\lua.h	74;"	d
LUA_OFSEP	.\dep\Lua\src\loadlib.c	86;"	d	file:
LUA_OK	.\dep\Lua\src\lua.h	47;"	d
LUA_OK	.\include\lua\lua.h	47;"	d
LUA_OK	.\include\sol\single\sol\sol.hpp	2025;"	d
LUA_OK	.\include\sol\sol\compatibility\5.x.x.h	31;"	d
LUA_OPADD	.\dep\Lua\src\lua.h	196;"	d
LUA_OPADD	.\include\lua\lua.h	196;"	d
LUA_OPADD	.\include\sol\single\sol\sol.hpp	1880;"	d
LUA_OPADD	.\include\sol\sol\compatibility\5.1.0.h	61;"	d
LUA_OPBAND	.\dep\Lua\src\lua.h	203;"	d
LUA_OPBAND	.\include\lua\lua.h	203;"	d
LUA_OPBNOT	.\dep\Lua\src\lua.h	209;"	d
LUA_OPBNOT	.\include\lua\lua.h	209;"	d
LUA_OPBOR	.\dep\Lua\src\lua.h	204;"	d
LUA_OPBOR	.\include\lua\lua.h	204;"	d
LUA_OPBXOR	.\dep\Lua\src\lua.h	205;"	d
LUA_OPBXOR	.\include\lua\lua.h	205;"	d
LUA_OPDIV	.\dep\Lua\src\lua.h	201;"	d
LUA_OPDIV	.\include\lua\lua.h	201;"	d
LUA_OPDIV	.\include\sol\single\sol\sol.hpp	1883;"	d
LUA_OPDIV	.\include\sol\sol\compatibility\5.1.0.h	64;"	d
LUA_OPEQ	.\dep\Lua\src\lua.h	213;"	d
LUA_OPEQ	.\include\lua\lua.h	213;"	d
LUA_OPEQ	.\include\sol\single\sol\sol.hpp	1887;"	d
LUA_OPEQ	.\include\sol\sol\compatibility\5.1.0.h	68;"	d
LUA_OPIDIV	.\dep\Lua\src\lua.h	202;"	d
LUA_OPIDIV	.\include\lua\lua.h	202;"	d
LUA_OPLE	.\dep\Lua\src\lua.h	215;"	d
LUA_OPLE	.\include\lua\lua.h	215;"	d
LUA_OPLE	.\include\sol\single\sol\sol.hpp	1889;"	d
LUA_OPLE	.\include\sol\sol\compatibility\5.1.0.h	70;"	d
LUA_OPLT	.\dep\Lua\src\lua.h	214;"	d
LUA_OPLT	.\include\lua\lua.h	214;"	d
LUA_OPLT	.\include\sol\single\sol\sol.hpp	1888;"	d
LUA_OPLT	.\include\sol\sol\compatibility\5.1.0.h	69;"	d
LUA_OPMOD	.\dep\Lua\src\lua.h	199;"	d
LUA_OPMOD	.\include\lua\lua.h	199;"	d
LUA_OPMOD	.\include\sol\single\sol\sol.hpp	1884;"	d
LUA_OPMOD	.\include\sol\sol\compatibility\5.1.0.h	65;"	d
LUA_OPMUL	.\dep\Lua\src\lua.h	198;"	d
LUA_OPMUL	.\include\lua\lua.h	198;"	d
LUA_OPMUL	.\include\sol\single\sol\sol.hpp	1882;"	d
LUA_OPMUL	.\include\sol\sol\compatibility\5.1.0.h	63;"	d
LUA_OPPOW	.\dep\Lua\src\lua.h	200;"	d
LUA_OPPOW	.\include\lua\lua.h	200;"	d
LUA_OPPOW	.\include\sol\single\sol\sol.hpp	1885;"	d
LUA_OPPOW	.\include\sol\sol\compatibility\5.1.0.h	66;"	d
LUA_OPSHL	.\dep\Lua\src\lua.h	206;"	d
LUA_OPSHL	.\include\lua\lua.h	206;"	d
LUA_OPSHR	.\dep\Lua\src\lua.h	207;"	d
LUA_OPSHR	.\include\lua\lua.h	207;"	d
LUA_OPSUB	.\dep\Lua\src\lua.h	197;"	d
LUA_OPSUB	.\include\lua\lua.h	197;"	d
LUA_OPSUB	.\include\sol\single\sol\sol.hpp	1881;"	d
LUA_OPSUB	.\include\sol\sol\compatibility\5.1.0.h	62;"	d
LUA_OPUNM	.\dep\Lua\src\lua.h	208;"	d
LUA_OPUNM	.\include\lua\lua.h	208;"	d
LUA_OPUNM	.\include\sol\single\sol\sol.hpp	1886;"	d
LUA_OPUNM	.\include\sol\sol\compatibility\5.1.0.h	67;"	d
LUA_OSLIBNAME	.\dep\Lua\src\lualib.h	26;"	d
LUA_OSLIBNAME	.\include\lua\lualib.h	26;"	d
LUA_PATHSUFFIX	.\dep\Lua\src\loadlib.c	39;"	d	file:
LUA_PATHVARVERSION	.\dep\Lua\src\loadlib.c	41;"	d	file:
LUA_PATH_DEFAULT	.\dep\Lua\src\luaconf.h	179;"	d
LUA_PATH_DEFAULT	.\dep\Lua\src\luaconf.h	194;"	d
LUA_PATH_DEFAULT	.\include\lua\luaconf.h	179;"	d
LUA_PATH_DEFAULT	.\include\lua\luaconf.h	194;"	d
LUA_PATH_MARK	.\dep\Lua\src\loadlib.c	57;"	d	file:
LUA_PATH_SEP	.\dep\Lua\src\loadlib.c	54;"	d	file:
LUA_PATH_VAR	.\dep\Lua\src\loadlib.c	32;"	d	file:
LUA_POF	.\dep\Lua\src\loadlib.c	83;"	d	file:
LUA_PROGNAME	.\dep\Lua\src\lua.c	29;"	d	file:
LUA_PROMPT	.\dep\Lua\src\lua.c	24;"	d	file:
LUA_PROMPT2	.\dep\Lua\src\lua.c	25;"	d	file:
LUA_QL	.\dep\Lua\src\luaconf.h	749;"	d
LUA_QL	.\include\lua\luaconf.h	749;"	d
LUA_QL	.\include\sol\single\sol\sol.hpp	1999;"	d
LUA_QL	.\include\sol\sol\compatibility\5.0.0.h	30;"	d
LUA_QS	.\dep\Lua\src\luaconf.h	750;"	d
LUA_QS	.\include\lua\luaconf.h	750;"	d
LUA_QS	.\include\sol\single\sol\sol.hpp	2000;"	d
LUA_QS	.\include\sol\sol\compatibility\5.0.0.h	31;"	d
LUA_REFNIL	.\dep\Lua\src\lauxlib.h	70;"	d
LUA_REFNIL	.\include\lua\lauxlib.h	70;"	d
LUA_REGISTRYINDEX	.\dep\Lua\src\lua.h	42;"	d
LUA_REGISTRYINDEX	.\include\lua\lua.h	42;"	d
LUA_RELEASE	.\dep\Lua\src\lua.h	25;"	d
LUA_RELEASE	.\include\lua\lua.h	25;"	d
LUA_RIDX_GLOBALS	.\dep\Lua\src\lua.h	84;"	d
LUA_RIDX_GLOBALS	.\include\lua\lua.h	84;"	d
LUA_RIDX_GLOBALS	.\include\sol\single\sol\sol.hpp	2023;"	d
LUA_RIDX_GLOBALS	.\include\sol\sol\compatibility\5.x.x.h	29;"	d
LUA_RIDX_LAST	.\dep\Lua\src\lua.h	85;"	d
LUA_RIDX_LAST	.\include\lua\lua.h	85;"	d
LUA_RIDX_MAINTHREAD	.\dep\Lua\src\lua.h	83;"	d
LUA_RIDX_MAINTHREAD	.\include\lua\lua.h	83;"	d
LUA_ROOT	.\dep\Lua\src\luaconf.h	191;"	d
LUA_ROOT	.\include\lua\luaconf.h	191;"	d
LUA_SHRDIR	.\dep\Lua\src\luaconf.h	178;"	d
LUA_SHRDIR	.\include\lua\luaconf.h	178;"	d
LUA_SIGNATURE	.\dep\Lua\src\lua.h	31;"	d
LUA_SIGNATURE	.\include\lua\lua.h	31;"	d
LUA_STRFTIMEOPTIONS	.\dep\Lua\src\loslib.c	45;"	d	file:
LUA_STRFTIMEOPTIONS	.\dep\Lua\src\loslib.c	47;"	d	file:
LUA_STRFTIMEOPTIONS	.\dep\Lua\src\loslib.c	49;"	d	file:
LUA_STRLIBNAME	.\dep\Lua\src\lualib.h	29;"	d
LUA_STRLIBNAME	.\include\lua\lualib.h	29;"	d
LUA_TABLIBNAME	.\dep\Lua\src\lualib.h	20;"	d
LUA_TABLIBNAME	.\include\lua\lualib.h	20;"	d
LUA_TBOOLEAN	.\dep\Lua\src\lua.h	65;"	d
LUA_TBOOLEAN	.\include\lua\lua.h	65;"	d
LUA_TCCL	.\dep\Lua\src\lobject.h	49;"	d
LUA_TCCL	.\include\lua\lobject.h	49;"	d
LUA_TDEADKEY	.\dep\Lua\src\lobject.h	23;"	d
LUA_TDEADKEY	.\include\lua\lobject.h	23;"	d
LUA_TFUNCTION	.\dep\Lua\src\lua.h	70;"	d
LUA_TFUNCTION	.\include\lua\lua.h	70;"	d
LUA_TLCF	.\dep\Lua\src\lobject.h	48;"	d
LUA_TLCF	.\include\lua\lobject.h	48;"	d
LUA_TLCL	.\dep\Lua\src\lobject.h	47;"	d
LUA_TLCL	.\include\lua\lobject.h	47;"	d
LUA_TLIGHTUSERDATA	.\dep\Lua\src\lua.h	66;"	d
LUA_TLIGHTUSERDATA	.\include\lua\lua.h	66;"	d
LUA_TLNGSTR	.\dep\Lua\src\lobject.h	54;"	d
LUA_TLNGSTR	.\include\lua\lobject.h	54;"	d
LUA_TMPNAMBUFSIZE	.\dep\Lua\src\loslib.c	115;"	d	file:
LUA_TMPNAMBUFSIZE	.\dep\Lua\src\loslib.c	130;"	d	file:
LUA_TMPNAMTEMPLATE	.\dep\Lua\src\loslib.c	118;"	d	file:
LUA_TNIL	.\dep\Lua\src\lua.h	64;"	d
LUA_TNIL	.\include\lua\lua.h	64;"	d
LUA_TNONE	.\dep\Lua\src\lua.h	62;"	d
LUA_TNONE	.\include\lua\lua.h	62;"	d
LUA_TNUMBER	.\dep\Lua\src\lua.h	67;"	d
LUA_TNUMBER	.\include\lua\lua.h	67;"	d
LUA_TNUMFLT	.\dep\Lua\src\lobject.h	58;"	d
LUA_TNUMFLT	.\include\lua\lobject.h	58;"	d
LUA_TNUMINT	.\dep\Lua\src\lobject.h	59;"	d
LUA_TNUMINT	.\include\lua\lobject.h	59;"	d
LUA_TOTALTAGS	.\dep\Lua\src\lobject.h	28;"	d
LUA_TOTALTAGS	.\include\lua\lobject.h	28;"	d
LUA_TPROTO	.\dep\Lua\src\lobject.h	22;"	d
LUA_TPROTO	.\include\lua\lobject.h	22;"	d
LUA_TSHRSTR	.\dep\Lua\src\lobject.h	53;"	d
LUA_TSHRSTR	.\include\lua\lobject.h	53;"	d
LUA_TSTRING	.\dep\Lua\src\lua.h	68;"	d
LUA_TSTRING	.\include\lua\lua.h	68;"	d
LUA_TTABLE	.\dep\Lua\src\lua.h	69;"	d
LUA_TTABLE	.\include\lua\lua.h	69;"	d
LUA_TTHREAD	.\dep\Lua\src\lua.h	72;"	d
LUA_TTHREAD	.\include\lua\lua.h	72;"	d
LUA_TUSERDATA	.\dep\Lua\src\lua.h	71;"	d
LUA_TUSERDATA	.\include\lua\lua.h	71;"	d
LUA_UNSIGNED	.\dep\Lua\src\luaconf.h	522;"	d
LUA_UNSIGNED	.\include\lua\luaconf.h	522;"	d
LUA_USE_C89	.\dep\Lua\src\luaconf.h	57;"	d
LUA_USE_C89	.\include\lua\luaconf.h	57;"	d
LUA_USE_CTYPE	.\dep\Lua\src\lctype.h	23;"	d
LUA_USE_CTYPE	.\dep\Lua\src\lctype.h	26;"	d
LUA_USE_CTYPE	.\include\lua\lctype.h	23;"	d
LUA_USE_CTYPE	.\include\lua\lctype.h	26;"	d
LUA_USE_DLOPEN	.\dep\Lua\src\luaconf.h	63;"	d
LUA_USE_DLOPEN	.\dep\Lua\src\luaconf.h	70;"	d
LUA_USE_DLOPEN	.\include\lua\luaconf.h	63;"	d
LUA_USE_DLOPEN	.\include\lua\luaconf.h	70;"	d
LUA_USE_POSIX	.\dep\Lua\src\luaconf.h	62;"	d
LUA_USE_POSIX	.\dep\Lua\src\luaconf.h	69;"	d
LUA_USE_POSIX	.\include\lua\luaconf.h	62;"	d
LUA_USE_POSIX	.\include\lua\luaconf.h	69;"	d
LUA_USE_READLINE	.\dep\Lua\src\luaconf.h	64;"	d
LUA_USE_READLINE	.\dep\Lua\src\luaconf.h	71;"	d
LUA_USE_READLINE	.\include\lua\luaconf.h	64;"	d
LUA_USE_READLINE	.\include\lua\luaconf.h	71;"	d
LUA_USE_WINDOWS	.\dep\Lua\src\luaconf.h	51;"	d
LUA_USE_WINDOWS	.\include\lua\luaconf.h	51;"	d
LUA_UTF8LIBNAME	.\dep\Lua\src\lualib.h	32;"	d
LUA_UTF8LIBNAME	.\include\lua\lualib.h	32;"	d
LUA_VDIR	.\dep\Lua\src\luaconf.h	170;"	d
LUA_VDIR	.\include\lua\luaconf.h	170;"	d
LUA_VERSION	.\dep\Lua\src\lua.h	24;"	d
LUA_VERSION	.\include\lua\lua.h	24;"	d
LUA_VERSION_MAJOR	.\dep\Lua\src\lua.h	19;"	d
LUA_VERSION_MAJOR	.\include\lua\lua.h	19;"	d
LUA_VERSION_MINOR	.\dep\Lua\src\lua.h	20;"	d
LUA_VERSION_MINOR	.\include\lua\lua.h	20;"	d
LUA_VERSION_NUM	.\dep\Lua\src\lua.h	21;"	d
LUA_VERSION_NUM	.\include\lua\lua.h	21;"	d
LUA_VERSION_RELEASE	.\dep\Lua\src\lua.h	22;"	d
LUA_VERSION_RELEASE	.\include\lua\lua.h	22;"	d
LUA_WIN	.\include\sol\single\sol\sol.hpp	2367;"	d
LUA_YIELD	.\dep\Lua\src\lua.h	48;"	d
LUA_YIELD	.\include\lua\lua.h	48;"	d
LX	.\dep\Lua\src\lstate.c	/^typedef struct LX {$/;"	s	file:
LX	.\dep\Lua\src\lstate.c	/^} LX;$/;"	t	typeref:struct:LX	file:
L_ESC	.\dep\Lua\src\lstrlib.c	238;"	d	file:
L_MAXDATEFIELD	.\dep\Lua\src\loslib.c	236;"	d	file:
L_MAXLENNUM	.\dep\Lua\src\liolib.c	379;"	d	file:
L_MAXLENNUM	.\dep\Lua\src\lobject.c	248;"	d	file:
L_MODEEXT	.\dep\Lua\src\liolib.c	36;"	d	file:
L_NBFD	.\dep\Lua\src\lstrlib.c	827;"	d	file:
L_RANDMAX	.\dep\Lua\src\lmathlib.c	30;"	d	file:
L_RANDMAX	.\dep\Lua\src\lmathlib.c	34;"	d	file:
L_STRFTIMEC89	.\dep\Lua\src\loslib.c	34;"	d	file:
L_STRFTIMEC99	.\dep\Lua\src\loslib.c	37;"	d	file:
L_STRFTIMEWIN	.\dep\Lua\src\loslib.c	41;"	d	file:
L_Umaxalign	.\dep\Lua\src\llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
L_Umaxalign	.\dep\Lua\src\llimits.h	/^} L_Umaxalign;$/;"	t	typeref:union:__anon6
L_Umaxalign	.\include\lua\llimits.h	/^typedef LUAI_USER_ALIGNMENT_T L_Umaxalign;$/;"	t
L_Umaxalign	.\include\lua\llimits.h	/^} L_Umaxalign;$/;"	t	typeref:union:__anon158
Labeldesc	.\dep\Lua\src\lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	.\dep\Lua\src\lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labeldesc	.\include\lua\lparser.h	/^typedef struct Labeldesc {$/;"	s
Labeldesc	.\include\lua\lparser.h	/^} Labeldesc;$/;"	t	typeref:struct:Labeldesc
Labellist	.\dep\Lua\src\lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	.\dep\Lua\src\lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
Labellist	.\include\lua\lparser.h	/^typedef struct Labellist {$/;"	s
Labellist	.\include\lua\lparser.h	/^} Labellist;$/;"	t	typeref:struct:Labellist
LazyStat	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        LazyStat() : used( false ) {}$/;"	f	struct:Catch::LazyStat
LazyStat	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct LazyStat : Option<T> {$/;"	s	namespace:Catch
Left	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
Left	.\include\SFML\Window\Keyboard.hpp	/^        Left,         \/\/\/< Left arrow$/;"	e	enum:sf::Keyboard::Key
Left	.\include\SFML\Window\Mouse.hpp	/^        Left,       \/\/\/< The left mouse button$/;"	e	enum:sf::Mouse::Button
LegacyReporterAdapter	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.h	/^    class LegacyReporterAdapter : public SharedImpl<IStreamingReporter>$/;"	c	namespace:Catch
LegacyReporterAdapter	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    LegacyReporterAdapter::LegacyReporterAdapter( Ptr<IReporter> const& legacyReporter )$/;"	f	class:Catch::LegacyReporterAdapter
LegacyReporterRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        LegacyReporterRegistrar( std::string const& name ) {$/;"	f	class:Catch::LegacyReporterRegistrar
LegacyReporterRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^    class LegacyReporterRegistrar {$/;"	c	namespace:Catch
Level	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct Verbosity { enum Level {$/;"	g	struct:Catch::Verbosity
LexSort	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    struct LexSort {$/;"	s	namespace:Catch
LexState	.\dep\Lua\src\llex.h	/^typedef struct LexState {$/;"	s
LexState	.\dep\Lua\src\llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LexState	.\include\lua\llex.h	/^typedef struct LexState {$/;"	s
LexState	.\include\lua\llex.h	/^} LexState;$/;"	t	typeref:struct:LexState
LightGrey	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            LightGrey = Bright | Grey,$/;"	e	enum:Catch::Colour::Code
Line_Gap	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Line_Gap;$/;"	m	struct:TT_HoriHeader_
Line_Gap	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Line_Gap;$/;"	m	struct:TT_VertHeader_
Lines	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    Lines,          \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
Lines	.\include\SFML\Graphics\PrimitiveType.hpp	/^    Lines,          \/\/\/< List of individual lines$/;"	e	enum:sf::PrimitiveType
LinesStrip	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    LinesStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a line$/;"	e	enum:sf::PrimitiveType
LinesStrip	.\include\SFML\Graphics\PrimitiveType.hpp	/^    LinesStrip,     \/\/\/< List of connected lines, a point uses the previous point to form a line$/;"	e	enum:sf::PrimitiveType
Listener	.\dep\SFML\include\SFML\Audio\Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
Listener	.\include\SFML\Audio\Listener.hpp	/^class SFML_AUDIO_API Listener$/;"	c	namespace:sf
ListenerFactory	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        class ListenerFactory : public SharedImpl<IReporterFactory> {$/;"	c	class:Catch::ListenerRegistrar
ListenerRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        ListenerRegistrar() {$/;"	f	class:Catch::ListenerRegistrar
ListenerRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^    class ListenerRegistrar {$/;"	c	namespace:Catch
Listeners	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        typedef std::vector<Ptr<IReporterFactory> > Listeners;$/;"	t	struct:Catch::IReporterRegistry
ListingResponse	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
ListingResponse	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::ListingResponse::ListingResponse(const Ftp::Response& response, const std::string& data) :$/;"	f	class:sf::Ftp::ListingResponse
ListingResponse	.\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API ListingResponse : public Response$/;"	c	class:sf::Ftp
Little	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^            enum Arch { Big, Little };$/;"	e	enum:Catch::Detail::__anon183::Endianness::Arch
LoadBlock	.\dep\Lua\src\lundump.c	/^static void LoadBlock (LoadState *S, void *b, size_t size) {$/;"	f	file:
LoadByte	.\dep\Lua\src\lundump.c	/^static lu_byte LoadByte (LoadState *S) {$/;"	f	file:
LoadCode	.\dep\Lua\src\lundump.c	/^static void LoadCode (LoadState *S, Proto *f) {$/;"	f	file:
LoadConstants	.\dep\Lua\src\lundump.c	/^static void LoadConstants (LoadState *S, Proto *f) {$/;"	f	file:
LoadDebug	.\dep\Lua\src\lundump.c	/^static void LoadDebug (LoadState *S, Proto *f) {$/;"	f	file:
LoadExtByName	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static void LoadExtByName(const char *extensionName)$/;"	f	file:
LoadExtByName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static void LoadExtByName(const char *extensionName)$/;"	f	file:
LoadExtByName	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static void LoadExtByName(const char *extensionName)$/;"	f	file:
LoadExtension	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^    PFN_LOADFUNCPOINTERS LoadExtension;$/;"	m	struct:sfogl_StrToExtMap_s	file:
LoadExtension	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^    PFN_LOADFUNCPOINTERS LoadExtension;$/;"	m	struct:sfglx_StrToExtMap_s	file:
LoadExtension	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^    PFN_LOADFUNCPOINTERS LoadExtension;$/;"	m	struct:sfwgl_StrToExtMap_s	file:
LoadF	.\dep\Lua\src\lauxlib.c	/^typedef struct LoadF {$/;"	s	file:
LoadF	.\dep\Lua\src\lauxlib.c	/^} LoadF;$/;"	t	typeref:struct:LoadF	file:
LoadFunction	.\dep\Lua\src\lundump.c	/^static void LoadFunction (LoadState *S, Proto *f, TString *psource) {$/;"	f	file:
LoadInt	.\dep\Lua\src\lundump.c	/^static int LoadInt (LoadState *S) {$/;"	f	file:
LoadInteger	.\dep\Lua\src\lundump.c	/^static lua_Integer LoadInteger (LoadState *S) {$/;"	f	file:
LoadNumber	.\dep\Lua\src\lundump.c	/^static lua_Number LoadNumber (LoadState *S) {$/;"	f	file:
LoadProtos	.\dep\Lua\src\lundump.c	/^static void LoadProtos (LoadState *S, Proto *f) {$/;"	f	file:
LoadS	.\dep\Lua\src\lauxlib.c	/^typedef struct LoadS {$/;"	s	file:
LoadS	.\dep\Lua\src\lauxlib.c	/^} LoadS;$/;"	t	typeref:struct:LoadS	file:
LoadState	.\dep\Lua\src\lundump.c	/^} LoadState;$/;"	t	typeref:struct:__anon22	file:
LoadString	.\dep\Lua\src\lundump.c	/^static TString *LoadString (LoadState *S) {$/;"	f	file:
LoadUpvalues	.\dep\Lua\src\lundump.c	/^static void LoadUpvalues (LoadState *S, Proto *f) {$/;"	f	file:
LoadVar	.\dep\Lua\src\lundump.c	57;"	d	file:
LoadVector	.\dep\Lua\src\lundump.c	49;"	d	file:
Load_ARB_create_context	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static int Load_ARB_create_context(void)$/;"	f	file:
Load_ARB_create_context	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static int Load_ARB_create_context(void)$/;"	f	file:
Load_ARB_multitexture	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_ARB_multitexture()$/;"	f	file:
Load_ARB_pixel_format	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static int Load_ARB_pixel_format(void)$/;"	f	file:
Load_ARB_shader_objects	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_ARB_shader_objects()$/;"	f	file:
Load_ARB_vertex_shader	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_ARB_vertex_shader()$/;"	f	file:
Load_EXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_EXT_blend_equation_separate()$/;"	f	file:
Load_EXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_EXT_blend_func_separate()$/;"	f	file:
Load_EXT_blend_minmax	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_EXT_blend_minmax()$/;"	f	file:
Load_EXT_framebuffer_object	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_EXT_framebuffer_object()$/;"	f	file:
Load_EXT_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static int Load_EXT_swap_control(void)$/;"	f	file:
Load_EXT_swap_control	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static int Load_EXT_swap_control(void)$/;"	f	file:
Load_MESA_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static int Load_MESA_swap_control(void)$/;"	f	file:
Load_SGI_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static int Load_SGI_swap_control(void)$/;"	f	file:
Load_Version_1_1	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int Load_Version_1_1()$/;"	f	file:
LocVar	.\dep\Lua\src\lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	.\dep\Lua\src\lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LocVar	.\include\lua\lobject.h	/^typedef struct LocVar {$/;"	s
LocVar	.\include\lua\lobject.h	/^} LocVar;$/;"	t	typeref:struct:LocVar
LocalContext	.\include\sol\Catch\projects\SelfTest\PartTrackerTests.cpp	/^    class LocalContext {$/;"	c	namespace:Catch	file:
LocalError	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in processing$/;"	e	enum:sf::Ftp::Response::Status
LocalError	.\include\SFML\Network\Ftp.hpp	/^            LocalError                = 451, \/\/\/< Requested action aborted, local error in processing$/;"	e	enum:sf::Ftp::Response::Status
LocalHost	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer to itself locally)$/;"	m	class:sf::IpAddress
LocalHost	.\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress LocalHost; \/\/\/< The "localhost" address (for connecting a computer to itself locally)$/;"	m	class:sf::IpAddress
Location	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    typedef long                                          Location;$/;"	t	class:sf::priv::JoystickImpl
Lock	.\dep\SFML\include\SFML\System\Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
Lock	.\dep\SFML\src\SFML\System\Lock.cpp	/^Lock::Lock(Mutex& mutex) :$/;"	f	class:sf::Lock
Lock	.\include\SFML\System\Lock.hpp	/^class SFML_SYSTEM_API Lock : NonCopyable$/;"	c	namespace:sf
LogcatStream	.\dep\SFML\src\SFML\System\Android\Activity.cpp	/^LogcatStream::LogcatStream() :$/;"	f	class:LogcatStream
LogcatStream	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^class SFML_SYSTEM_API LogcatStream : public std::streambuf$/;"	c
LoggedIn	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropriate$/;"	e	enum:sf::Ftp::Response::Status
LoggedIn	.\include\SFML\Network\Ftp.hpp	/^            LoggedIn              = 230, \/\/\/< User logged in, proceed. Logged out if appropriate$/;"	e	enum:sf::Ftp::Response::Status
Logger	.\src\include\Logger.h	/^class Logger {$/;"	c
Logger	.\src\src\Logger.cpp	/^Logger::Logger() {$/;"	f	class:Logger
LongOpt	.\include\sol\Catch\include\external\clara.h	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
LostFocus	.\dep\SFML\include\SFML\Window\Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
LostFocus	.\include\SFML\Window\Event.hpp	/^        LostFocus,              \/\/\/< The window lost the focus (no data)$/;"	e	enum:sf::Event::EventType
Lowest_Rec_PPEM	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Lowest_Rec_PPEM;$/;"	m	struct:TT_Header_
LuaScript	.\src\include\LuaScript.h	/^class LuaScript {$/;"	c
LuaScript	.\src\src\LuaScript.cpp	/^LuaScript::LuaScript(bool defineClasses) {$/;"	f	class:LuaScript
M	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
M	.\include\SFML\Window\Keyboard.hpp	/^        M,            \/\/\/< The M key$/;"	e	enum:sf::Keyboard::Key
M	.\include\sol\single\sol\sol.hpp	/^			typedef std::add_lvalue_reference_t<meta::unwrapped_t<std::remove_reference_t<decltype(detail::deref(member))>>> M;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
M	.\include\sol\sol\function_types_stateful.hpp	/^			typedef std::add_lvalue_reference_t<meta::unwrapped_t<std::remove_reference_t<decltype(detail::deref(member))>>> M;$/;"	t	struct:sol::function_detail::member_variable
MAGENTA	.\src\include\trmclr.hpp	/^        MAGENTA         =  45 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
MAGENTA	.\src\include\trmclr.hpp	/^        MAGENTA         = 35 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
MAKESTMT	.\dep\SFML\extlibs\headers\jpeg\jerror.h	248;"	d
MAPVK_VK_TO_VSC	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	55;"	d	file:
MASK	.\dep\Lua\src\lctype.h	46;"	d
MASK	.\include\lua\lctype.h	46;"	d
MASK0	.\dep\Lua\src\lopcodes.h	83;"	d
MASK0	.\include\lua\lopcodes.h	83;"	d
MASK1	.\dep\Lua\src\lopcodes.h	80;"	d
MASK1	.\include\lua\lopcodes.h	80;"	d
MAXABITS	.\dep\Lua\src\ltable.c	46;"	d	file:
MAXALIGN	.\dep\Lua\src\lstrlib.c	1134;"	d	file:
MAXARGLINE	.\dep\Lua\src\liolib.c	331;"	d	file:
MAXARG_A	.\dep\Lua\src\lopcodes.h	74;"	d
MAXARG_A	.\include\lua\lopcodes.h	74;"	d
MAXARG_Ax	.\dep\Lua\src\lopcodes.h	68;"	d
MAXARG_Ax	.\dep\Lua\src\lopcodes.h	70;"	d
MAXARG_Ax	.\include\lua\lopcodes.h	68;"	d
MAXARG_Ax	.\include\lua\lopcodes.h	70;"	d
MAXARG_B	.\dep\Lua\src\lopcodes.h	75;"	d
MAXARG_B	.\include\lua\lopcodes.h	75;"	d
MAXARG_Bx	.\dep\Lua\src\lopcodes.h	60;"	d
MAXARG_Bx	.\dep\Lua\src\lopcodes.h	63;"	d
MAXARG_Bx	.\include\lua\lopcodes.h	60;"	d
MAXARG_Bx	.\include\lua\lopcodes.h	63;"	d
MAXARG_C	.\dep\Lua\src\lopcodes.h	76;"	d
MAXARG_C	.\include\lua\lopcodes.h	76;"	d
MAXARG_sBx	.\dep\Lua\src\lopcodes.h	61;"	d
MAXARG_sBx	.\dep\Lua\src\lopcodes.h	64;"	d
MAXARG_sBx	.\include\lua\lopcodes.h	61;"	d
MAXARG_sBx	.\include\lua\lopcodes.h	64;"	d
MAXASIZE	.\dep\Lua\src\ltable.c	47;"	d	file:
MAXBY10	.\dep\Lua\src\lobject.c	296;"	d	file:
MAXCCALLS	.\dep\Lua\src\lstrlib.c	234;"	d	file:
MAXHBITS	.\dep\Lua\src\ltable.c	55;"	d	file:
MAXINDEXRK	.\dep\Lua\src\lopcodes.h	142;"	d
MAXINDEXRK	.\include\lua\lopcodes.h	142;"	d
MAXINTSIZE	.\dep\Lua\src\lstrlib.c	1109;"	d	file:
MAXJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	74;"	d
MAXJSAMPLE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	88;"	d
MAXLASTD	.\dep\Lua\src\lobject.c	297;"	d	file:
MAXNUMBER2STR	.\dep\Lua\src\lobject.c	365;"	d	file:
MAXREGS	.\dep\Lua\src\lcode.c	33;"	d	file:
MAXSIGDIG	.\dep\Lua\src\lobject.c	187;"	d	file:
MAXSIZE	.\dep\Lua\src\lstrlib.c	48;"	d	file:
MAXTAGLOOP	.\dep\Lua\src\lvm.c	35;"	d	file:
MAXUNICODE	.\dep\Lua\src\lutf8lib.c	23;"	d	file:
MAXUPVAL	.\dep\Lua\src\lfunc.h	29;"	d
MAXUPVAL	.\include\lua\lfunc.h	29;"	d
MAXVARS	.\dep\Lua\src\lparser.c	34;"	d	file:
MAX_COMPONENTS	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	36;"	d
MAX_COMPS_IN_SCAN	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	55;"	d
MAX_FORMAT	.\dep\Lua\src\lstrlib.c	904;"	d	file:
MAX_INT	.\dep\Lua\src\llimits.h	51;"	d
MAX_INT	.\include\lua\llimits.h	51;"	d
MAX_ITEM	.\dep\Lua\src\lstrlib.c	895;"	d	file:
MAX_LMEM	.\dep\Lua\src\llimits.h	48;"	d
MAX_LMEM	.\include\lua\llimits.h	48;"	d
MAX_LUMEM	.\dep\Lua\src\llimits.h	46;"	d
MAX_LUMEM	.\include\lua\llimits.h	46;"	d
MAX_SAMP_FACTOR	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	56;"	d
MAX_SIZE	.\dep\Lua\src\llimits.h	42;"	d
MAX_SIZE	.\include\lua\llimits.h	42;"	d
MAX_SIZET	.\dep\Lua\src\llimits.h	39;"	d
MAX_SIZET	.\dep\Lua\src\lstrlib.c	46;"	d	file:
MAX_SIZET	.\include\lua\llimits.h	39;"	d
MC	.\dep\Lua\src\lstrlib.c	1115;"	d	file:
MCU_blocks	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_blocks;		\/* MCU_width * MCU_height *\/$/;"	m	struct:__anon81
MCU_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_height;		\/* number of blocks per MCU, vertically *\/$/;"	m	struct:__anon81
MCU_membership	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_membership[C_MAX_BLOCKS_IN_MCU];$/;"	m	struct:jpeg_compress_struct
MCU_membership	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_membership[D_MAX_BLOCKS_IN_MCU];$/;"	m	struct:jpeg_decompress_struct
MCU_rows_in_scan	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION MCU_rows_in_scan;	\/* # of MCU rows in the image *\/$/;"	m	struct:jpeg_compress_struct
MCU_rows_in_scan	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION MCU_rows_in_scan;	\/* # of MCU rows in the image *\/$/;"	m	struct:jpeg_decompress_struct
MCU_sample_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_sample_width;	\/* MCU width in samples: MCU_width * DCT_h_scaled_size *\/$/;"	m	struct:__anon81
MCU_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int MCU_width;		\/* number of blocks per MCU, horizontally *\/$/;"	m	struct:__anon81
MCUs_per_row	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION MCUs_per_row;	\/* # of MCUs across the image *\/$/;"	m	struct:jpeg_compress_struct
MCUs_per_row	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION MCUs_per_row;	\/* # of MCUs across the image *\/$/;"	m	struct:jpeg_decompress_struct
MEMERRMSG	.\dep\Lua\src\lstring.c	25;"	d	file:
METHODDEF	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	191;"	d
METHOD_AS_TEST_CASE	.\include\sol\Catch\include\catch.hpp	170;"	d
METHOD_AS_TEST_CASE	.\include\sol\Catch\include\catch.hpp	178;"	d
MINSIZEARRAY	.\dep\Lua\src\lmem.c	45;"	d	file:
MINSTRTABSIZE	.\dep\Lua\src\llimits.h	188;"	d
MINSTRTABSIZE	.\include\lua\llimits.h	188;"	d
MULTIPLIER	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	351;"	d
MYINT	.\dep\Lua\src\lundump.h	21;"	d
MYINT	.\include\lua\lundump.h	21;"	d
MYK	.\dep\Lua\src\luac.c	286;"	d	file:
Mac_Style	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Mac_Style;$/;"	m	struct:TT_Header_
Magenta	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color
Magenta	.\include\SFML\Graphics\Color.hpp	/^    static const Color Magenta;     \/\/\/< Magenta predefined color$/;"	m	class:sf::Color
Magic_Number	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Long    Magic_Number;$/;"	m	struct:TT_Header_
Magnetometer	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Magnetometer,     \/\/\/< Measures the ambient magnetic field (micro-teslas)$/;"	e	enum:sf::Sensor::Type
Magnetometer	.\include\SFML\Window\Sensor.hpp	/^        Magnetometer,     \/\/\/< Measures the ambient magnetic field (micro-teslas)$/;"	e	enum:sf::Sensor::Type
MakeRelativePathsInFlagsAbsolute	.\.ycm_extra_conf.py	/^def MakeRelativePathsInFlagsAbsolute( flags, working_directory ):$/;"	f
Map	.\src\include\Map.h	/^class Map {$/;"	c
Map	.\src\src\Map.cpp	/^Map::Map() {$/;"	f	class:Map
MatchState	.\dep\Lua\src\lstrlib.c	/^typedef struct MatchState {$/;"	s	file:
MatchState	.\dep\Lua\src\lstrlib.c	/^} MatchState;$/;"	t	typeref:struct:MatchState	file:
Matcher	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    struct Matcher : SharedImpl<IShared>$/;"	s	namespace:Catch::Matchers::Impl
Matcher	.\include\sol\Catch\single_include\catch.hpp	/^    struct Matcher : SharedImpl<IShared>$/;"	s	namespace:Catch::Matchers::Impl
MatcherImpl	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    struct MatcherImpl : Matcher<ExpressionT> {$/;"	s	namespace:Catch::Matchers::Impl
MatcherImpl	.\include\sol\Catch\single_include\catch.hpp	/^    struct MatcherImpl : Matcher<ExpressionT> {$/;"	s	namespace:Catch::Matchers::Impl
Matchers	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^namespace Matchers {$/;"	n	namespace:Catch
Matchers	.\include\sol\Catch\include\internal\catch_objc.hpp	/^    namespace Matchers {$/;"	n	namespace:Catch
Matchers	.\include\sol\Catch\single_include\catch.hpp	/^namespace Matchers {$/;"	n	namespace:Catch
MaxDatagramSize	.\dep\SFML\include\SFML\Network\UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single UDP datagram$/;"	e	enum:sf::UdpSocket::__anon113
MaxDatagramSize	.\include\SFML\Network\UdpSocket.hpp	/^        MaxDatagramSize = 65507 \/\/\/< The maximum number of bytes that can be sent in a single UDP datagram$/;"	e	enum:sf::UdpSocket::__anon173
MayFail	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^            MayFail = 1 << 3,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
Mbuffer	.\dep\Lua\src\lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	.\dep\Lua\src\lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
Mbuffer	.\include\lua\lzio.h	/^typedef struct Mbuffer {$/;"	s
Mbuffer	.\include\lua\lzio.h	/^} Mbuffer;$/;"	t	typeref:struct:Mbuffer
MemoryInputStream	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
MemoryInputStream	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^MemoryInputStream::MemoryInputStream() :$/;"	f	class:sf::MemoryInputStream
MemoryInputStream	.\include\SFML\System\MemoryInputStream.hpp	/^class SFML_SYSTEM_API MemoryInputStream : public InputStream$/;"	c	namespace:sf
Menu	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Menu	.\include\SFML\Window\Keyboard.hpp	/^        Menu,         \/\/\/< The Menu key$/;"	e	enum:sf::Keyboard::Key
Menu	.\src\include\Menu.h	/^class Menu {$/;"	c
MessageBuilder	.\include\sol\Catch\include\internal\catch_message.h	/^        MessageBuilder( std::string const& macroName,$/;"	f	struct:Catch::MessageBuilder
MessageBuilder	.\include\sol\Catch\include\internal\catch_message.h	/^    struct MessageBuilder {$/;"	s	namespace:Catch
MessageInfo	.\include\sol\Catch\include\internal\catch_message.h	/^    struct MessageInfo {$/;"	s	namespace:Catch
MessageInfo	.\include\sol\Catch\include\internal\catch_message.hpp	/^    MessageInfo::MessageInfo(   std::string const& _macroName,$/;"	f	class:Catch::MessageInfo
Method	.\dep\SFML\include\SFML\Network\Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
Method	.\include\SFML\Network\Http.hpp	/^        enum Method$/;"	g	class:sf::Http::Request
MethodTestCase	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
MethodTestCase	.\include\sol\Catch\single_include\catch.hpp	/^    MethodTestCase( void (C::*method)() ) : m_method( method ) {}$/;"	f	class:Catch::MethodTestCase
MethodTestCase	.\include\sol\Catch\single_include\catch.hpp	/^class MethodTestCase : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
Middle	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Middle	.\include\SFML\Window\Mouse.hpp	/^        Middle,     \/\/\/< The middle (wheel) mouse button$/;"	e	enum:sf::Mouse::Button
Mode	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	g	class:Catch::TestSpecParser
Modified	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Long    Modified[2];$/;"	m	struct:TT_Header_
Mouse	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
Mouse	.\include\SFML\Window\Mouse.hpp	/^class SFML_WINDOW_API Mouse$/;"	c	namespace:sf
MouseButtonEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonEvent	.\include\SFML\Window\Event.hpp	/^    struct MouseButtonEvent$/;"	s	class:sf::Event
MouseButtonPressed	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonPressed	.\include\SFML\Window\Event.hpp	/^        MouseButtonPressed,     \/\/\/< A mouse button was pressed (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseButtonReleased	.\include\SFML\Window\Event.hpp	/^        MouseButtonReleased,    \/\/\/< A mouse button was released (data in event.mouseButton)$/;"	e	enum:sf::Event::EventType
MouseEntered	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseEntered	.\include\SFML\Window\Event.hpp	/^        MouseEntered,           \/\/\/< The mouse cursor entered the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseLeft	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseLeft	.\include\SFML\Window\Event.hpp	/^        MouseLeft,              \/\/\/< The mouse cursor left the area of the window (no data)$/;"	e	enum:sf::Event::EventType
MouseMoveEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoveEvent	.\include\SFML\Window\Event.hpp	/^    struct MouseMoveEvent$/;"	s	class:sf::Event
MouseMoved	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseMoved	.\include\SFML\Window\Event.hpp	/^        MouseMoved,             \/\/\/< The mouse cursor moved (data in event.mouseMove)$/;"	e	enum:sf::Event::EventType
MouseWheelEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelEvent	.\include\SFML\Window\Event.hpp	/^    struct MouseWheelEvent$/;"	s	class:sf::Event
MouseWheelMoved	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel) (deprecated)$/;"	e	enum:sf::Event::EventType
MouseWheelMoved	.\include\SFML\Window\Event.hpp	/^        MouseWheelMoved,        \/\/\/< The mouse wheel was scrolled (data in event.mouseWheel) (deprecated)$/;"	e	enum:sf::Event::EventType
MouseWheelScrollEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct MouseWheelScrollEvent$/;"	s	class:sf::Event
MouseWheelScrollEvent	.\include\SFML\Window\Event.hpp	/^    struct MouseWheelScrollEvent$/;"	s	class:sf::Event
MouseWheelScrolled	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseWheelScrolled,     \/\/\/< The mouse wheel was scrolled (data in event.mouseWheelScroll)$/;"	e	enum:sf::Event::EventType
MouseWheelScrolled	.\include\SFML\Window\Event.hpp	/^        MouseWheelScrolled,     \/\/\/< The mouse wheel was scrolled (data in event.mouseWheelScroll)$/;"	e	enum:sf::Event::EventType
MoveAware	.\include\sol\Optional\test_optional.cpp	/^  MoveAware(MoveAware&& rhs) : val(rhs.val), moved(rhs.moved) {$/;"	f	struct:MoveAware
MoveAware	.\include\sol\Optional\test_optional.cpp	/^  MoveAware(T val) : val(val), moved(false) {}$/;"	f	struct:MoveAware
MoveAware	.\include\sol\Optional\test_optional.cpp	/^struct MoveAware$/;"	s	file:
MovedPermanently	.\dep\SFML\include\SFML\Network\Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedPermanently	.\include\SFML\Network\Http.hpp	/^            MovedPermanently = 301, \/\/\/< The requested page has permanently moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	.\dep\SFML\include\SFML\Network\Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new location$/;"	e	enum:sf::Http::Response::Status
MovedTemporarily	.\include\SFML\Network\Http.hpp	/^            MovedTemporarily = 302, \/\/\/< The requested page has temporarily moved to a new location$/;"	e	enum:sf::Http::Response::Status
MultipleChoices	.\dep\SFML\include\SFML\Network\Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several locations$/;"	e	enum:sf::Http::Response::Status
MultipleChoices	.\include\SFML\Network\Http.hpp	/^            MultipleChoices  = 300, \/\/\/< The requested page can be accessed from several locations$/;"	e	enum:sf::Http::Response::Status
MultipleReporters	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^class MultipleReporters : public SharedImpl<IStreamingReporter> {$/;"	c	namespace:Catch
Multiply	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Multiply	.\include\SFML\Window\Keyboard.hpp	/^        Multiply,     \/\/\/< The * key$/;"	e	enum:sf::Keyboard::Key
Music	.\dep\SFML\include\SFML\Audio\Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Music	.\dep\SFML\src\SFML\Audio\Music.cpp	/^Music::Music() :$/;"	f	class:sf::Music
Music	.\include\SFML\Audio\Music.hpp	/^class SFML_AUDIO_API Music : public SoundStream$/;"	c	namespace:sf
Mutex	.\dep\SFML\include\SFML\System\Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
Mutex	.\dep\SFML\src\SFML\System\Mutex.cpp	/^Mutex::Mutex()$/;"	f	class:sf::Mutex
Mutex	.\include\SFML\System\Mutex.hpp	/^class SFML_SYSTEM_API Mutex : NonCopyable$/;"	c	namespace:sf
MutexImpl	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^MutexImpl::MutexImpl()$/;"	f	class:sf::priv::MutexImpl
MutexImpl	.\dep\SFML\src\SFML\System\Unix\MutexImpl.hpp	/^class MutexImpl : NonCopyable$/;"	c	namespace:sf::priv
MutexImpl	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^MutexImpl::MutexImpl()$/;"	f	class:sf::priv::MutexImpl
MutexImpl	.\dep\SFML\src\SFML\System\Win32\MutexImpl.hpp	/^class MutexImpl : NonCopyable$/;"	c	namespace:sf::priv
N	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
N	.\include\SFML\Window\Keyboard.hpp	/^        N,            \/\/\/< The N key$/;"	e	enum:sf::Keyboard::Key
NB	.\dep\Lua\src\lstrlib.c	1112;"	d	file:
NBITS	.\dep\Lua\src\lvm.c	588;"	d	file:
NBM	.\dep\Lua\src\lvm.c	47;"	d	file:
NEED_BSD_STRINGS	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	12;"	d
NEED_FAR_POINTERS	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	14;"	d
NEED_SHORT_EXTERNAL_NAMES	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	15;"	d
NEED_SIGNAL_CATCHER	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	41;"	d
NEED_SYS_TYPES_H	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	13;"	d
NILCONSTANT	.\dep\Lua\src\lobject.h	120;"	d
NILCONSTANT	.\include\lua\lobject.h	120;"	d
NOMINMAX	.\dep\SFML\include\SFML\Config.hpp	46;"	d
NOMINMAX	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	38;"	d
NOMINMAX	.\include\SFML\Config.hpp	46;"	d
NOMINMAX	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	45;"	d
NOMINMAX	.\include\sol\Catch\single_include\catch.hpp	6921;"	d
NONVALIDVALUE	.\dep\Lua\src\lapi.c	40;"	d	file:
NOTOPEN	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	105;"	d
NO_JUMP	.\dep\Lua\src\lcode.h	20;"	d
NO_JUMP	.\include\lua\lcode.h	20;"	d
NO_REG	.\dep\Lua\src\lopcodes.h	151;"	d
NO_REG	.\include\lua\lopcodes.h	151;"	d
NSOpenGLContextRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef NSOpenGLContext* NSOpenGLContextRef;$/;"	t
NSOpenGLContextRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef void* NSOpenGLContextRef;$/;"	t
NSOpenGLContextRef	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^typedef NSOpenGLContext* NSOpenGLContextRef;$/;"	t
NSOpenGLContextRef	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^typedef void* NSOpenGLContextRef;$/;"	t
NSOpenGLViewRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef NSOpenGLView* NSOpenGLViewRef;$/;"	t
NSOpenGLViewRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef void* NSOpenGLViewRef;$/;"	t
NSStringMatchers	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        namespace NSStringMatchers {$/;"	n	namespace:Catch::Matchers::Impl
NSWindowRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef NSWindow* NSWindowRef;$/;"	t
NSWindowRef	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^typedef void* NSWindowRef;$/;"	t
NUM_ARITH_TBLS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	54;"	d
NUM_HUFF_TBLS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	53;"	d
NUM_OPCODES	.\dep\Lua\src\lopcodes.h	235;"	d
NUM_OPCODES	.\include\lua\lopcodes.h	235;"	d
NUM_QUANT_TBLS	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	52;"	d
NUM_RESERVED	.\dep\Lua\src\llex.h	40;"	d
NUM_RESERVED	.\include\lua\llex.h	40;"	d
N_STYLE_TYPES	.\src\include\trmclr.hpp	/^    N_STYLE_TYPES$/;"	e	enum:trmclr::StyleTypes
Name	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
NameAndDesc	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NameAndDesc	.\include\sol\Catch\single_include\catch.hpp	/^    NameAndDesc( const char* _name = "", const char* _description= "" )$/;"	f	struct:Catch::NameAndDesc
NameAndDesc	.\include\sol\Catch\single_include\catch.hpp	/^struct NameAndDesc {$/;"	s	namespace:Catch
NamePattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            NamePattern( std::string const& name )$/;"	f	class:Catch::TestSpec::NamePattern
NamePattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        class NamePattern : public Pattern {$/;"	c	class:Catch::TestSpec
Nasty	.\include\sol\Optional\test_optional.cpp	/^  constexpr Nasty() : m{5}, n{6} {}$/;"	f	struct:Nasty
Nasty	.\include\sol\Optional\test_optional.cpp	/^  constexpr Nasty(int m, int n) : m{m}, n{n} {}$/;"	f	struct:Nasty
Nasty	.\include\sol\Optional\test_optional.cpp	/^struct Nasty$/;"	s	file:
NeedAccountToLogIn	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToLogIn	.\include\SFML\Network\Ftp.hpp	/^            NeedAccountToLogIn = 332, \/\/\/< Need account for login$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedAccountToStore	.\include\SFML\Network\Ftp.hpp	/^            NeedAccountToStore      = 532, \/\/\/< Need account for storing files$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedInformation	.\include\SFML\Network\Ftp.hpp	/^            NeedInformation    = 350, \/\/\/< Requested file action pending further information$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NeedPassword	.\include\SFML\Network\Ftp.hpp	/^            NeedPassword       = 331, \/\/\/< User name ok, need password$/;"	e	enum:sf::Ftp::Response::Status
NeedsAnotherRun	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            NeedsAnotherRun,$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
Never	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        Never$/;"	e	enum:Catch::ShowDurations::OrNot
No	.\include\sol\Catch\include\internal\catch_common.h	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
No	.\include\sol\Catch\single_include\catch.hpp	/^        No$/;"	e	enum:Catch::CaseSensitive::Choice
NoAssertions	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        NoAssertions = 0x01$/;"	e	enum:Catch::WarnAbout::What
NoAssertionsInSection	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void NoAssertionsInSection( std::string const& sectionName ) {}$/;"	f	class:Catch::iTchRunnerReporter
NoAssertionsInTestCase	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void NoAssertionsInTestCase( std::string const& testName ) {}$/;"	f	class:Catch::iTchRunnerReporter
NoColourImpl	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        struct NoColourImpl : IColourImpl {$/;"	s	namespace:Catch::__anon177
NoContent	.\dep\SFML\include\SFML\Network\Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NoContent	.\include\SFML\Network\Http.hpp	/^            NoContent      = 204, \/\/\/< The server didn't send any data in return$/;"	e	enum:sf::Http::Response::Status
NoOutput	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        NoOutput = 0,$/;"	e	enum:Catch::Verbosity::Level
NoWildcard	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^            NoWildcard = 0,$/;"	e	enum:Catch::WildcardPattern::WildcardPosition
Node	.\dep\Lua\src\lobject.h	/^typedef struct Node {$/;"	s
Node	.\dep\Lua\src\lobject.h	/^} Node;$/;"	t	typeref:struct:Node
Node	.\include\lua\lobject.h	/^typedef struct Node {$/;"	s
Node	.\include\lua\lobject.h	/^} Node;$/;"	t	typeref:struct:Node
Node	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            explicit Node( T const& _value ) : value( _value ) {}$/;"	f	struct:Catch::CumulativeReporterBase::Node
Node	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        struct Node : SharedImpl<> {$/;"	s	struct:Catch::CumulativeReporterBase
NonCopyable	.\dep\SFML\include\SFML\System\NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	.\dep\SFML\include\SFML\System\NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
NonCopyable	.\include\SFML\System\NonCopyable.hpp	/^    NonCopyable() {}$/;"	f	class:sf::NonCopyable
NonCopyable	.\include\SFML\System\NonCopyable.hpp	/^class SFML_SYSTEM_API NonCopyable$/;"	c	namespace:sf
NonCopyable	.\include\sol\Catch\include\internal\catch_common.h	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	.\include\sol\Catch\include\internal\catch_common.h	/^    class NonCopyable {$/;"	c	namespace:Catch
NonCopyable	.\include\sol\Catch\single_include\catch.hpp	/^        NonCopyable() {}$/;"	f	class:Catch::NonCopyable
NonCopyable	.\include\sol\Catch\single_include\catch.hpp	/^    class NonCopyable {$/;"	c	namespace:Catch
None	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress
None	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon116
None	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^const IpAddress IpAddress::None;$/;"	m	class:sf::IpAddress	file:
None	.\include\SFML\Network\IpAddress.hpp	/^    static const IpAddress None;      \/\/\/< Value representing an empty\/invalid address$/;"	m	class:sf::IpAddress
None	.\include\SFML\Window\WindowStyle.hpp	/^        None       = 0,      \/\/\/< No border \/ title bar (this flag and all others are mutually exclusive)$/;"	e	enum:sf::Style::__anon176
None	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            None = 0,$/;"	e	enum:Catch::Colour::Code
None	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^            None = 0,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
None	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
Normal	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        Normal$/;"	e	enum:Catch::Verbosity::Level
Normal	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Normal	.\include\sol\Catch\single_include\catch.hpp	/^        Normal = 0x01,$/;"	e	enum:Catch::ResultDisposition::Flags
Normalized	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
Normalized	.\include\SFML\Graphics\Texture.hpp	/^        Normalized, \/\/\/< Texture coordinates in range [0 .. 1]$/;"	e	enum:sf::Texture::CoordinateType
Not	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Not( Not const& other ) : m_matcher( other.m_matcher ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::Not
Not	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            explicit Not( Matcher<ExpressionT> const& matcher ) : m_matcher(matcher.clone()) {}$/;"	f	class:Catch::Matchers::Impl::Generic::Not
Not	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        class Not : public MatcherImpl<Not<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
Not	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::Generic::Not<ExpressionT> Not( Impl::Matcher<ExpressionT> const& m ) {$/;"	f	namespace:Catch::Matchers
Not	.\include\sol\Catch\single_include\catch.hpp	/^            Not( Not const& other ) : m_matcher( other.m_matcher ) {}$/;"	f	class:Catch::Matchers::Impl::Generic::Not
Not	.\include\sol\Catch\single_include\catch.hpp	/^            explicit Not( Matcher<ExpressionT> const& matcher ) : m_matcher(matcher.clone()) {}$/;"	f	class:Catch::Matchers::Impl::Generic::Not
Not	.\include\sol\Catch\single_include\catch.hpp	/^        class Not : public MatcherImpl<Not<ExpressionT>, ExpressionT> {$/;"	c	namespace:Catch::Matchers::Impl::Generic
Not	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::Generic::Not<ExpressionT> Not( Impl::Matcher<ExpressionT> const& m ) {$/;"	f	namespace:Catch::Matchers
NotEnoughMemory	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded storage allocation$/;"	e	enum:sf::Ftp::Response::Status
NotEnoughMemory	.\include\SFML\Network\Ftp.hpp	/^            NotEnoughMemory         = 552, \/\/\/< Requested file action aborted, exceeded storage allocation$/;"	e	enum:sf::Ftp::Response::Status
NotFound	.\dep\SFML\include\SFML\Network\Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotFound	.\include\SFML\Network\Http.hpp	/^            NotFound            = 404, \/\/\/< The requested page doesn't exist$/;"	e	enum:sf::Http::Response::Status
NotImplemented	.\dep\SFML\include\SFML\Network\Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotImplemented	.\include\SFML\Network\Http.hpp	/^            NotImplemented      = 501, \/\/\/< The server doesn't implement a requested feature$/;"	e	enum:sf::Http::Response::Status
NotImplementedException	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^        NotImplementedException( NotImplementedException const& ) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
NotImplementedException	.\include\sol\Catch\include\internal\catch_notimplemented_exception.hpp	/^    NotImplementedException::NotImplementedException( SourceLineInfo const& lineInfo )$/;"	f	class:Catch::NotImplementedException
NotImplementedException	.\include\sol\Catch\single_include\catch.hpp	/^        NotImplementedException( NotImplementedException const& ) {}$/;"	f	class:Catch::NotImplementedException
NotImplementedException	.\include\sol\Catch\single_include\catch.hpp	/^    class NotImplementedException : public std::exception$/;"	c	namespace:Catch
NotLoggedIn	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotLoggedIn	.\include\SFML\Network\Ftp.hpp	/^            NotLoggedIn             = 530, \/\/\/< Not logged in$/;"	e	enum:sf::Ftp::Response::Status
NotModified	.\dep\SFML\include\SFML\Network\Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page hasn't changed and doesn't need to be refreshed$/;"	e	enum:sf::Http::Response::Status
NotModified	.\include\SFML\Network\Http.hpp	/^            NotModified      = 304, \/\/\/< For conditional requests, means the requested page hasn't changed and doesn't need to be refreshed$/;"	e	enum:sf::Http::Response::Status
NotReady	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
NotReady	.\include\SFML\Network\Socket.hpp	/^        NotReady,     \/\/\/< The socket is not ready to send \/ receive data yet$/;"	e	enum:sf::Socket::Status
NotStarted	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            NotStarted,$/;"	e	enum:Catch::TestCaseTracking::TrackerBase::CycleState
NotStarted	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            NotStarted,$/;"	e	enum:Catch::TestCaseTracking::TrackerContext::RunState
Nothing	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        Nothing = 0x00,$/;"	e	enum:Catch::WarnAbout::What
NothrowAssign	.\include\sol\Optional\test_optional.cpp	/^struct NothrowAssign {$/;"	s	file:
NothrowBoth	.\include\sol\Optional\test_optional.cpp	/^struct NothrowBoth {$/;"	s	file:
NothrowCtor	.\include\sol\Optional\test_optional.cpp	/^struct NothrowCtor {$/;"	s	file:
NothrowNone	.\include\sol\Optional\test_optional.cpp	/^struct NothrowNone {$/;"	s	file:
NullBinder	.\include\sol\Catch\include\external\clara.h	/^        struct NullBinder : IArgFunction<C>{$/;"	s	namespace:Clara::Detail
Num0	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num0	.\include\SFML\Window\Keyboard.hpp	/^        Num0,         \/\/\/< The 0 key$/;"	e	enum:sf::Keyboard::Key
Num1	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num1	.\include\SFML\Window\Keyboard.hpp	/^        Num1,         \/\/\/< The 1 key$/;"	e	enum:sf::Keyboard::Key
Num2	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num2	.\include\SFML\Window\Keyboard.hpp	/^        Num2,         \/\/\/< The 2 key$/;"	e	enum:sf::Keyboard::Key
Num3	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num3	.\include\SFML\Window\Keyboard.hpp	/^        Num3,         \/\/\/< The 3 key$/;"	e	enum:sf::Keyboard::Key
Num4	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num4	.\include\SFML\Window\Keyboard.hpp	/^        Num4,         \/\/\/< The 4 key$/;"	e	enum:sf::Keyboard::Key
Num5	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num5	.\include\SFML\Window\Keyboard.hpp	/^        Num5,         \/\/\/< The 5 key$/;"	e	enum:sf::Keyboard::Key
Num6	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num6	.\include\SFML\Window\Keyboard.hpp	/^        Num6,         \/\/\/< The 6 key$/;"	e	enum:sf::Keyboard::Key
Num7	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num7	.\include\SFML\Window\Keyboard.hpp	/^        Num7,         \/\/\/< The 7 key$/;"	e	enum:sf::Keyboard::Key
Num8	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num8	.\include\SFML\Window\Keyboard.hpp	/^        Num8,         \/\/\/< The 8 key$/;"	e	enum:sf::Keyboard::Key
Num9	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Num9	.\include\SFML\Window\Keyboard.hpp	/^        Num9,         \/\/\/< The 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad0	.\include\SFML\Window\Keyboard.hpp	/^        Numpad0,      \/\/\/< The numpad 0 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad1	.\include\SFML\Window\Keyboard.hpp	/^        Numpad1,      \/\/\/< The numpad 1 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad2	.\include\SFML\Window\Keyboard.hpp	/^        Numpad2,      \/\/\/< The numpad 2 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad3	.\include\SFML\Window\Keyboard.hpp	/^        Numpad3,      \/\/\/< The numpad 3 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad4	.\include\SFML\Window\Keyboard.hpp	/^        Numpad4,      \/\/\/< The numpad 4 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad5	.\include\SFML\Window\Keyboard.hpp	/^        Numpad5,      \/\/\/< The numpad 5 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad6	.\include\SFML\Window\Keyboard.hpp	/^        Numpad6,      \/\/\/< The numpad 6 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad7	.\include\SFML\Window\Keyboard.hpp	/^        Numpad7,      \/\/\/< The numpad 7 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad8	.\include\SFML\Window\Keyboard.hpp	/^        Numpad8,      \/\/\/< The numpad 8 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
Numpad9	.\include\SFML\Window\Keyboard.hpp	/^        Numpad9,      \/\/\/< The numpad 9 key$/;"	e	enum:sf::Keyboard::Key
O	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
O	.\include\SFML\Window\Keyboard.hpp	/^        O,            \/\/\/< The O key$/;"	e	enum:sf::Keyboard::Key
OC_TEST_CASE	.\include\sol\Catch\include\internal\catch_objc.hpp	192;"	d
OC_TEST_CASE	.\include\sol\Catch\single_include\catch.hpp	3018;"	d
OPENAL	.\dep\SFML\extlibs\headers\AL\al.h	26;"	d
OPENED	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	107;"	d
OPR_ADD	.\dep\Lua\src\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_ADD	.\include\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_AND	.\dep\Lua\src\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_AND	.\include\lua\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_BAND	.\dep\Lua\src\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BAND	.\include\lua\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BNOT	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BNOT	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_BOR	.\dep\Lua\src\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BOR	.\include\lua\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	.\dep\Lua\src\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_BXOR	.\include\lua\lcode.h	/^  OPR_BAND, OPR_BOR, OPR_BXOR,$/;"	e	enum:BinOpr
OPR_CONCAT	.\dep\Lua\src\lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_CONCAT	.\include\lua\lcode.h	/^  OPR_CONCAT,$/;"	e	enum:BinOpr
OPR_DIV	.\dep\Lua\src\lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_DIV	.\include\lua\lcode.h	/^  OPR_DIV,$/;"	e	enum:BinOpr
OPR_EQ	.\dep\Lua\src\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_EQ	.\include\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_GE	.\dep\Lua\src\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GE	.\include\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	.\dep\Lua\src\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_GT	.\include\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_IDIV	.\dep\Lua\src\lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_IDIV	.\include\lua\lcode.h	/^  OPR_IDIV,$/;"	e	enum:BinOpr
OPR_LE	.\dep\Lua\src\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LE	.\include\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LEN	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LEN	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_LT	.\dep\Lua\src\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_LT	.\include\lua\lcode.h	/^  OPR_EQ, OPR_LT, OPR_LE,$/;"	e	enum:BinOpr
OPR_MINUS	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MINUS	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_MOD	.\dep\Lua\src\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MOD	.\include\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	.\dep\Lua\src\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_MUL	.\include\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_NE	.\dep\Lua\src\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NE	.\include\lua\lcode.h	/^  OPR_NE, OPR_GT, OPR_GE,$/;"	e	enum:BinOpr
OPR_NOBINOPR	.\dep\Lua\src\lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOBINOPR	.\include\lua\lcode.h	/^  OPR_NOBINOPR$/;"	e	enum:BinOpr
OPR_NOT	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOT	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_NOUNOPR	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	e	enum:UnOpr
OPR_OR	.\dep\Lua\src\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_OR	.\include\lua\lcode.h	/^  OPR_AND, OPR_OR,$/;"	e	enum:BinOpr
OPR_POW	.\dep\Lua\src\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_POW	.\include\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SHL	.\dep\Lua\src\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHL	.\include\lua\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	.\dep\Lua\src\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SHR	.\include\lua\lcode.h	/^  OPR_SHL, OPR_SHR,$/;"	e	enum:BinOpr
OPR_SUB	.\dep\Lua\src\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPR_SUB	.\include\lua\lcode.h	/^  OPR_ADD, OPR_SUB, OPR_MUL, OPR_MOD, OPR_POW,$/;"	e	enum:BinOpr
OPTIONAL_CONSTEXPR_INIT_LIST	.\include\sol\Optional\optional.hpp	81;"	d
OPTIONAL_CONSTEXPR_INIT_LIST	.\include\sol\Optional\optional.hpp	84;"	d
OPTIONAL_HAS_CONSTEXPR_INIT_LIST	.\include\sol\Optional\optional.hpp	80;"	d
OPTIONAL_HAS_CONSTEXPR_INIT_LIST	.\include\sol\Optional\optional.hpp	83;"	d
OPTIONAL_HAS_MOVE_ACCESSORS	.\include\sol\Optional\optional.hpp	88;"	d
OPTIONAL_HAS_MOVE_ACCESSORS	.\include\sol\Optional\optional.hpp	90;"	d
OPTIONAL_HAS_THIS_RVALUE_REFS	.\include\sol\Optional\optional.hpp	66;"	d
OPTIONAL_HAS_THIS_RVALUE_REFS	.\include\sol\Optional\optional.hpp	68;"	d
OPTIONAL_HAS_THIS_RVALUE_REFS	.\include\sol\Optional\optional.hpp	71;"	d
OPTIONAL_HAS_THIS_RVALUE_REFS	.\include\sol\Optional\optional.hpp	73;"	d
OPTIONAL_HAS_THIS_RVALUE_REFS	.\include\sol\Optional\optional.hpp	75;"	d
OPTIONAL_MUTABLE_CONSTEXPR	.\include\sol\Optional\optional.hpp	95;"	d
OPTIONAL_MUTABLE_CONSTEXPR	.\include\sol\Optional\optional.hpp	97;"	d
OP_ADD	.\dep\Lua\src\lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon9
OP_ADD	.\include\lua\lopcodes.h	/^OP_ADD,\/*	A B C	R(A) := RK(B) + RK(C)				*\/$/;"	e	enum:__anon161
OP_BAND	.\dep\Lua\src\lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon9
OP_BAND	.\include\lua\lopcodes.h	/^OP_BAND,\/*	A B C	R(A) := RK(B) & RK(C)				*\/$/;"	e	enum:__anon161
OP_BNOT	.\dep\Lua\src\lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon9
OP_BNOT	.\include\lua\lopcodes.h	/^OP_BNOT,\/*	A B	R(A) := ~R(B)					*\/$/;"	e	enum:__anon161
OP_BOR	.\dep\Lua\src\lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon9
OP_BOR	.\include\lua\lopcodes.h	/^OP_BOR,\/*	A B C	R(A) := RK(B) | RK(C)				*\/$/;"	e	enum:__anon161
OP_BXOR	.\dep\Lua\src\lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon9
OP_BXOR	.\include\lua\lopcodes.h	/^OP_BXOR,\/*	A B C	R(A) := RK(B) ~ RK(C)				*\/$/;"	e	enum:__anon161
OP_CALL	.\dep\Lua\src\lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon9
OP_CALL	.\include\lua\lopcodes.h	/^OP_CALL,\/*	A B C	R(A), ... ,R(A+C-2) := R(A)(R(A+1), ... ,R(A+B-1)) *\/$/;"	e	enum:__anon161
OP_CLOSURE	.\dep\Lua\src\lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon9
OP_CLOSURE	.\include\lua\lopcodes.h	/^OP_CLOSURE,\/*	A Bx	R(A) := closure(KPROTO[Bx])			*\/$/;"	e	enum:__anon161
OP_CONCAT	.\dep\Lua\src\lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon9
OP_CONCAT	.\include\lua\lopcodes.h	/^OP_CONCAT,\/*	A B C	R(A) := R(B).. ... ..R(C)			*\/$/;"	e	enum:__anon161
OP_DIV	.\dep\Lua\src\lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon9
OP_DIV	.\include\lua\lopcodes.h	/^OP_DIV,\/*	A B C	R(A) := RK(B) \/ RK(C)				*\/$/;"	e	enum:__anon161
OP_EQ	.\dep\Lua\src\lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon9
OP_EQ	.\include\lua\lopcodes.h	/^OP_EQ,\/*	A B C	if ((RK(B) == RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon161
OP_EXTRAARG	.\dep\Lua\src\lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon9
OP_EXTRAARG	.\include\lua\lopcodes.h	/^OP_EXTRAARG\/*	Ax	extra (larger) argument for previous opcode	*\/$/;"	e	enum:__anon161
OP_FORLOOP	.\dep\Lua\src\lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon9
OP_FORLOOP	.\include\lua\lopcodes.h	/^OP_FORLOOP,\/*	A sBx	R(A)+=R(A+2);$/;"	e	enum:__anon161
OP_FORPREP	.\dep\Lua\src\lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon9
OP_FORPREP	.\include\lua\lopcodes.h	/^OP_FORPREP,\/*	A sBx	R(A)-=R(A+2); pc+=sBx				*\/$/;"	e	enum:__anon161
OP_GETTABLE	.\dep\Lua\src\lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon9
OP_GETTABLE	.\include\lua\lopcodes.h	/^OP_GETTABLE,\/*	A B C	R(A) := R(B)[RK(C)]				*\/$/;"	e	enum:__anon161
OP_GETTABUP	.\dep\Lua\src\lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon9
OP_GETTABUP	.\include\lua\lopcodes.h	/^OP_GETTABUP,\/*	A B C	R(A) := UpValue[B][RK(C)]			*\/$/;"	e	enum:__anon161
OP_GETUPVAL	.\dep\Lua\src\lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon9
OP_GETUPVAL	.\include\lua\lopcodes.h	/^OP_GETUPVAL,\/*	A B	R(A) := UpValue[B]				*\/$/;"	e	enum:__anon161
OP_IDIV	.\dep\Lua\src\lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon9
OP_IDIV	.\include\lua\lopcodes.h	/^OP_IDIV,\/*	A B C	R(A) := RK(B) \/\/ RK(C)				*\/$/;"	e	enum:__anon161
OP_JMP	.\dep\Lua\src\lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon9
OP_JMP	.\include\lua\lopcodes.h	/^OP_JMP,\/*	A sBx	pc+=sBx; if (A) close all upvalues >= R(A - 1)	*\/$/;"	e	enum:__anon161
OP_LE	.\dep\Lua\src\lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon9
OP_LE	.\include\lua\lopcodes.h	/^OP_LE,\/*	A B C	if ((RK(B) <= RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon161
OP_LEN	.\dep\Lua\src\lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon9
OP_LEN	.\include\lua\lopcodes.h	/^OP_LEN,\/*	A B	R(A) := length of R(B)				*\/$/;"	e	enum:__anon161
OP_LOADBOOL	.\dep\Lua\src\lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon9
OP_LOADBOOL	.\include\lua\lopcodes.h	/^OP_LOADBOOL,\/*	A B C	R(A) := (Bool)B; if (C) pc++			*\/$/;"	e	enum:__anon161
OP_LOADK	.\dep\Lua\src\lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon9
OP_LOADK	.\include\lua\lopcodes.h	/^OP_LOADK,\/*	A Bx	R(A) := Kst(Bx)					*\/$/;"	e	enum:__anon161
OP_LOADKX	.\dep\Lua\src\lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon9
OP_LOADKX	.\include\lua\lopcodes.h	/^OP_LOADKX,\/*	A 	R(A) := Kst(extra arg)				*\/$/;"	e	enum:__anon161
OP_LOADNIL	.\dep\Lua\src\lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon9
OP_LOADNIL	.\include\lua\lopcodes.h	/^OP_LOADNIL,\/*	A B	R(A), R(A+1), ..., R(A+B) := nil		*\/$/;"	e	enum:__anon161
OP_LT	.\dep\Lua\src\lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon9
OP_LT	.\include\lua\lopcodes.h	/^OP_LT,\/*	A B C	if ((RK(B) <  RK(C)) ~= A) then pc++		*\/$/;"	e	enum:__anon161
OP_MOD	.\dep\Lua\src\lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon9
OP_MOD	.\include\lua\lopcodes.h	/^OP_MOD,\/*	A B C	R(A) := RK(B) % RK(C)				*\/$/;"	e	enum:__anon161
OP_MOVE	.\dep\Lua\src\lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon9
OP_MOVE	.\include\lua\lopcodes.h	/^OP_MOVE,\/*	A B	R(A) := R(B)					*\/$/;"	e	enum:__anon161
OP_MUL	.\dep\Lua\src\lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon9
OP_MUL	.\include\lua\lopcodes.h	/^OP_MUL,\/*	A B C	R(A) := RK(B) * RK(C)				*\/$/;"	e	enum:__anon161
OP_NEWTABLE	.\dep\Lua\src\lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon9
OP_NEWTABLE	.\include\lua\lopcodes.h	/^OP_NEWTABLE,\/*	A B C	R(A) := {} (size = B,C)				*\/$/;"	e	enum:__anon161
OP_NOT	.\dep\Lua\src\lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon9
OP_NOT	.\include\lua\lopcodes.h	/^OP_NOT,\/*	A B	R(A) := not R(B)				*\/$/;"	e	enum:__anon161
OP_POW	.\dep\Lua\src\lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon9
OP_POW	.\include\lua\lopcodes.h	/^OP_POW,\/*	A B C	R(A) := RK(B) ^ RK(C)				*\/$/;"	e	enum:__anon161
OP_RETURN	.\dep\Lua\src\lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon9
OP_RETURN	.\include\lua\lopcodes.h	/^OP_RETURN,\/*	A B	return R(A), ... ,R(A+B-2)	(see note)	*\/$/;"	e	enum:__anon161
OP_SELF	.\dep\Lua\src\lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon9
OP_SELF	.\include\lua\lopcodes.h	/^OP_SELF,\/*	A B C	R(A+1) := R(B); R(A) := R(B)[RK(C)]		*\/$/;"	e	enum:__anon161
OP_SETLIST	.\dep\Lua\src\lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon9
OP_SETLIST	.\include\lua\lopcodes.h	/^OP_SETLIST,\/*	A B C	R(A)[(C-1)*FPF+i] := R(A+i), 1 <= i <= B	*\/$/;"	e	enum:__anon161
OP_SETTABLE	.\dep\Lua\src\lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon9
OP_SETTABLE	.\include\lua\lopcodes.h	/^OP_SETTABLE,\/*	A B C	R(A)[RK(B)] := RK(C)				*\/$/;"	e	enum:__anon161
OP_SETTABUP	.\dep\Lua\src\lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon9
OP_SETTABUP	.\include\lua\lopcodes.h	/^OP_SETTABUP,\/*	A B C	UpValue[A][RK(B)] := RK(C)			*\/$/;"	e	enum:__anon161
OP_SETUPVAL	.\dep\Lua\src\lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon9
OP_SETUPVAL	.\include\lua\lopcodes.h	/^OP_SETUPVAL,\/*	A B	UpValue[B] := R(A)				*\/$/;"	e	enum:__anon161
OP_SHL	.\dep\Lua\src\lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon9
OP_SHL	.\include\lua\lopcodes.h	/^OP_SHL,\/*	A B C	R(A) := RK(B) << RK(C)				*\/$/;"	e	enum:__anon161
OP_SHR	.\dep\Lua\src\lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon9
OP_SHR	.\include\lua\lopcodes.h	/^OP_SHR,\/*	A B C	R(A) := RK(B) >> RK(C)				*\/$/;"	e	enum:__anon161
OP_SUB	.\dep\Lua\src\lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon9
OP_SUB	.\include\lua\lopcodes.h	/^OP_SUB,\/*	A B C	R(A) := RK(B) - RK(C)				*\/$/;"	e	enum:__anon161
OP_TAILCALL	.\dep\Lua\src\lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon9
OP_TAILCALL	.\include\lua\lopcodes.h	/^OP_TAILCALL,\/*	A B C	return R(A)(R(A+1), ... ,R(A+B-1))		*\/$/;"	e	enum:__anon161
OP_TEST	.\dep\Lua\src\lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon9
OP_TEST	.\include\lua\lopcodes.h	/^OP_TEST,\/*	A C	if not (R(A) <=> C) then pc++			*\/$/;"	e	enum:__anon161
OP_TESTSET	.\dep\Lua\src\lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon9
OP_TESTSET	.\include\lua\lopcodes.h	/^OP_TESTSET,\/*	A B C	if (R(B) <=> C) then R(A) := R(B) else pc++	*\/$/;"	e	enum:__anon161
OP_TFORCALL	.\dep\Lua\src\lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon9
OP_TFORCALL	.\include\lua\lopcodes.h	/^OP_TFORCALL,\/*	A C	R(A+3), ... ,R(A+2+C) := R(A)(R(A+1), R(A+2));	*\/$/;"	e	enum:__anon161
OP_TFORLOOP	.\dep\Lua\src\lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon9
OP_TFORLOOP	.\include\lua\lopcodes.h	/^OP_TFORLOOP,\/*	A sBx	if R(A+1) ~= nil then { R(A)=R(A+1); pc += sBx }*\/$/;"	e	enum:__anon161
OP_UNM	.\dep\Lua\src\lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon9
OP_UNM	.\include\lua\lopcodes.h	/^OP_UNM,\/*	A B	R(A) := -R(B)					*\/$/;"	e	enum:__anon161
OP_VARARG	.\dep\Lua\src\lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon9
OP_VARARG	.\include\lua\lopcodes.h	/^OP_VARARG,\/*	A B	R(A), R(A+1), ..., R(A+B-2) = vararg		*\/$/;"	e	enum:__anon161
OUTPUT	.\dep\Lua\src\luac.c	29;"	d	file:
OV_CALLBACKS_DEFAULT	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^static ov_callbacks OV_CALLBACKS_DEFAULT = {$/;"	v
OV_CALLBACKS_NOCLOSE	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^static ov_callbacks OV_CALLBACKS_NOCLOSE = {$/;"	v
OV_CALLBACKS_STREAMONLY	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^static ov_callbacks OV_CALLBACKS_STREAMONLY = {$/;"	v
OV_CALLBACKS_STREAMONLY_NOCLOSE	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^static ov_callbacks OV_CALLBACKS_STREAMONLY_NOCLOSE = {$/;"	v
OV_EBADHEADER	.\dep\SFML\extlibs\headers\vorbis\codec.h	231;"	d
OV_EBADLINK	.\dep\SFML\extlibs\headers\vorbis\codec.h	235;"	d
OV_EBADPACKET	.\dep\SFML\extlibs\headers\vorbis\codec.h	234;"	d
OV_ECTL_COUPLING_GET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	367;"	d
OV_ECTL_COUPLING_SET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	379;"	d
OV_ECTL_IBLOCK_GET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	348;"	d
OV_ECTL_IBLOCK_SET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	359;"	d
OV_ECTL_LOWPASS_GET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	332;"	d
OV_ECTL_LOWPASS_SET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	340;"	d
OV_ECTL_RATEMANAGE2_GET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	313;"	d
OV_ECTL_RATEMANAGE2_SET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	324;"	d
OV_ECTL_RATEMANAGE_AVG	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	415;"	d
OV_ECTL_RATEMANAGE_GET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	393;"	d
OV_ECTL_RATEMANAGE_HARD	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	426;"	d
OV_ECTL_RATEMANAGE_SET	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	404;"	d
OV_EFAULT	.\dep\SFML\extlibs\headers\vorbis\codec.h	227;"	d
OV_EIMPL	.\dep\SFML\extlibs\headers\vorbis\codec.h	228;"	d
OV_EINVAL	.\dep\SFML\extlibs\headers\vorbis\codec.h	229;"	d
OV_ENOSEEK	.\dep\SFML\extlibs\headers\vorbis\codec.h	236;"	d
OV_ENOTAUDIO	.\dep\SFML\extlibs\headers\vorbis\codec.h	233;"	d
OV_ENOTVORBIS	.\dep\SFML\extlibs\headers\vorbis\codec.h	230;"	d
OV_EOF	.\dep\SFML\extlibs\headers\vorbis\codec.h	223;"	d
OV_EREAD	.\dep\SFML\extlibs\headers\vorbis\codec.h	226;"	d
OV_EVERSION	.\dep\SFML\extlibs\headers\vorbis\codec.h	232;"	d
OV_FALSE	.\dep\SFML\extlibs\headers\vorbis\codec.h	222;"	d
OV_HOLE	.\dep\SFML\extlibs\headers\vorbis\codec.h	224;"	d
Obj	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    Obj():prop(&p){}$/;"	f	struct:Obj
Obj	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct Obj$/;"	s	file:
Object	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    struct Object$/;"	s	namespace:ObjectWithConversions	file:
Object	.\src\include\Object.h	/^class Object : public Target, public sf::Drawable, public sf::Transformable {$/;"	c
Object	.\src\src\Object.cpp	/^Object::Object() :$/;"	f	class:Object
Object	.\src\src\Object.cpp	/^Object::Object(Map* map, float x, float y, int collRadius, Stats s) :$/;"	f	class:Object
ObjectWithConversions	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace ObjectWithConversions$/;"	n	file:
ObjectWithNonConstEqualityOperator	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^namespace ObjectWithNonConstEqualityOperator$/;"	n	file:
OcMethod	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        OcMethod( Class cls, SEL sel ) : m_cls( cls ), m_sel( sel ) {}$/;"	f	class:Catch::OcMethod
OcMethod	.\include\sol\Catch\include\internal\catch_objc.hpp	/^    class OcMethod : public SharedImpl<ITestCase> {$/;"	c	namespace:Catch
OfType	.\include\sol\Catch\include\internal\catch_result_type.h	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
OfType	.\include\sol\Catch\single_include\catch.hpp	/^    struct ResultWas { enum OfType {$/;"	g	struct:Catch::ResultWas
OggVorbis_File	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^typedef struct OggVorbis_File {$/;"	s
OggVorbis_File	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^} OggVorbis_File;$/;"	t	typeref:struct:OggVorbis_File
Ok	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successful$/;"	e	enum:sf::Http::Response::Status
Ok	.\include\SFML\Network\Ftp.hpp	/^            Ok                    = 200, \/\/\/< Command ok$/;"	e	enum:sf::Ftp::Response::Status
Ok	.\include\SFML\Network\Http.hpp	/^            Ok             = 200, \/\/\/< Most common code returned when operation was successful$/;"	e	enum:sf::Http::Response::Status
Ok	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
Ok	.\include\sol\Catch\single_include\catch.hpp	/^        Ok = 0,$/;"	e	enum:Catch::ResultWas::OfType
OnUnusedOptions	.\include\sol\Catch\include\catch_session.hpp	/^        struct OnUnusedOptions { enum DoWhat { Ignore, Fail }; };$/;"	s	class:Catch::Session
One	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        One,              \/\/\/< (1, 1, 1, 1)$/;"	e	enum:sf::BlendMode::Factor
One	.\include\SFML\Graphics\BlendMode.hpp	/^        One,              \/\/\/< (1, 1, 1, 1)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstAlpha	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusDstAlpha  \/\/\/< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstAlpha	.\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusDstAlpha  \/\/\/< (1, 1, 1, 1) - (dst.a, dst.a, dst.a, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstColor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusDstColor, \/\/\/< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusDstColor	.\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusDstColor, \/\/\/< (1, 1, 1, 1) - (dst.r, dst.g, dst.b, dst.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcAlpha	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusSrcAlpha, \/\/\/< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcAlpha	.\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusSrcAlpha, \/\/\/< (1, 1, 1, 1) - (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcColor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusSrcColor, \/\/\/< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
OneMinusSrcColor	.\include\SFML\Graphics\BlendMode.hpp	/^        OneMinusSrcColor, \/\/\/< (1, 1, 1, 1) - (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
OpArgK	.\dep\Lua\src\lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgK	.\include\lua\lopcodes.h	/^  OpArgK   \/* argument is a constant or register\/constant *\/$/;"	e	enum:OpArgMask
OpArgMask	.\dep\Lua\src\lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgMask	.\include\lua\lopcodes.h	/^enum OpArgMask {$/;"	g
OpArgN	.\dep\Lua\src\lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgN	.\include\lua\lopcodes.h	/^  OpArgN,  \/* argument is not used *\/$/;"	e	enum:OpArgMask
OpArgR	.\dep\Lua\src\lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgR	.\include\lua\lopcodes.h	/^  OpArgR,  \/* argument is a register or a jump offset *\/$/;"	e	enum:OpArgMask
OpArgU	.\dep\Lua\src\lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpArgU	.\include\lua\lopcodes.h	/^  OpArgU,  \/* argument is used *\/$/;"	e	enum:OpArgMask
OpCode	.\dep\Lua\src\lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon9
OpCode	.\include\lua\lopcodes.h	/^} OpCode;$/;"	t	typeref:enum:__anon161
OpMode	.\dep\Lua\src\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
OpMode	.\include\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	g
Opaque	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct Opaque$/;"	s	file:
OpenConnection	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^xcb_connection_t* OpenConnection()$/;"	f	namespace:sf::priv
OpenDisplay	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^Display* OpenDisplay()$/;"	f	namespace:sf::priv
OpeningDataConnection	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connection$/;"	e	enum:sf::Ftp::Response::Status
OpeningDataConnection	.\include\SFML\Network\Ftp.hpp	/^            OpeningDataConnection       = 150, \/\/\/< File status ok, about to open data connection$/;"	e	enum:sf::Ftp::Response::Status
Operator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
Operator	.\include\sol\Catch\single_include\catch.hpp	/^    enum Operator {$/;"	g	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	s	namespace:Catch::Internal
OperatorTraits	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	s	namespace:Catch::Internal
OptBuilder	.\include\sol\Catch\include\external\clara.h	/^            OptBuilder( Arg* arg ) : ArgBuilder( arg ) {}$/;"	f	class:Clara::CommandLine::OptBuilder
OptBuilder	.\include\sol\Catch\include\external\clara.h	/^            OptBuilder( OptBuilder& other ) : ArgBuilder( other ) {}$/;"	f	class:Clara::CommandLine::OptBuilder
OptBuilder	.\include\sol\Catch\include\external\clara.h	/^        class OptBuilder : public ArgBuilder {$/;"	c	class:Clara::CommandLine
Option	.\include\sol\Catch\include\internal\catch_option.hpp	/^        Option( Option const& _other )$/;"	f	class:Catch::Option
Option	.\include\sol\Catch\include\internal\catch_option.hpp	/^        Option( T const& _value )$/;"	f	class:Catch::Option
Option	.\include\sol\Catch\include\internal\catch_option.hpp	/^        Option() : nullableValue( CATCH_NULL ) {}$/;"	f	class:Catch::Option
Option	.\include\sol\Catch\include\internal\catch_option.hpp	/^    class Option {$/;"	c	namespace:Catch
OptionArgProperties	.\include\sol\Catch\include\external\clara.h	/^    struct OptionArgProperties {$/;"	s	namespace:Clara
OptionalBase	.\include\sol\Optional\optional.hpp	/^  constexpr optional() noexcept : OptionalBase<T>()  {};$/;"	f	class:sol::optional
OptionalBase	.\include\sol\Optional\optional.hpp	/^  constexpr optional(nullopt_t) noexcept : OptionalBase<T>() {};$/;"	f	class:sol::optional
OrNot	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct ShowDurations { enum OrNot {$/;"	g	struct:Catch::ShowDurations
Oracle	.\include\sol\Optional\test_optional.cpp	/^    Oracle() : s(sDefaultConstructed) {}$/;"	f	struct:Oracle
Oracle	.\include\sol\Optional\test_optional.cpp	/^    Oracle(Oracle&& o) : s(sMoveConstructed), val(std::move(o.val)) {o.s = sMovedFrom;}$/;"	f	struct:Oracle
Oracle	.\include\sol\Optional\test_optional.cpp	/^    Oracle(OracleVal&& v) : s(sValueMoveConstructed), val(std::move(v)) {v.s = sMovedFrom;}$/;"	f	struct:Oracle
Oracle	.\include\sol\Optional\test_optional.cpp	/^    Oracle(const Oracle& o) : s(sCopyConstructed), val(o.val) {}$/;"	f	struct:Oracle
Oracle	.\include\sol\Optional\test_optional.cpp	/^    Oracle(const OracleVal& v) : s(sValueCopyConstructed), val(v) {}$/;"	f	struct:Oracle
Oracle	.\include\sol\Optional\test_optional.cpp	/^struct Oracle$/;"	s	file:
OracleVal	.\include\sol\Optional\test_optional.cpp	/^    OracleVal(int i = 0) : s(sValueConstructed), i(i) {}$/;"	f	struct:OracleVal
OracleVal	.\include\sol\Optional\test_optional.cpp	/^struct OracleVal$/;"	s	file:
Orientation	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        Orientation,      \/\/\/< Measures the absolute 3D orientation (degrees)$/;"	e	enum:sf::Sensor::Type
Orientation	.\include\SFML\Window\Sensor.hpp	/^        Orientation,      \/\/\/< Measures the absolute 3D orientation (degrees)$/;"	e	enum:sf::Sensor::Type
OriginalExpression	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            OriginalExpression = Cyan,$/;"	e	enum:Catch::Colour::Code
Output	.\dep\Lua\src\luac.c	/^static char Output[]={ OUTPUT };	\/* default output file name *\/$/;"	v	file:
OutputDebugWriter	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    struct OutputDebugWriter {$/;"	s	namespace:Catch
OutputSoundFile	.\dep\SFML\include\SFML\Audio\OutputSoundFile.hpp	/^class SFML_AUDIO_API OutputSoundFile : NonCopyable$/;"	c	namespace:sf
OutputSoundFile	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^OutputSoundFile::OutputSoundFile() :$/;"	f	class:sf::OutputSoundFile
OutputSoundFile	.\include\SFML\Audio\OutputSoundFile.hpp	/^class SFML_AUDIO_API OutputSoundFile : NonCopyable$/;"	c	namespace:sf
P	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
P	.\include\SFML\Window\Keyboard.hpp	/^        P,            \/\/\/< The P key$/;"	e	enum:sf::Keyboard::Key
P	.\include\sol\single\sol\sol.hpp	/^			typedef typename unique_usertype_traits<T>::type P;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::getter
P	.\include\sol\single\sol\sol.hpp	/^			typedef typename unique_usertype_traits<T>::type P;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
P	.\include\sol\sol\stack_get.hpp	/^			typedef typename unique_usertype_traits<T>::type P;$/;"	t	struct:sol::stack::getter
P	.\include\sol\sol\stack_push.hpp	/^			typedef typename unique_usertype_traits<T>::type P;$/;"	t	struct:sol::stack::pusher
PACKAGE_KEY	.\include\sol\single\sol\sol.hpp	2063;"	d
PAPER	.\include\sol\docs\make.bat	/^	echo.  latex      to make LaTeX files, you can set PAPER=a4 or PAPER=letter$/;"	v
PARTOPEN	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	106;"	d
PATH_WIDTH	.\src\include\Common.h	4;"	d
PAUSEADJ	.\dep\Lua\src\lgc.c	59;"	d	file:
PERK_BOX_WIDTH	.\src\include\Common.h	9;"	d
PFNALBUFFERDATASTATICPROC	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALvoid (AL_APIENTRY*PFNALBUFFERDATASTATICPROC)(const ALint,ALenum,ALvoid*,ALsizei,ALsizei);$/;"	t
PFNALBUFFERSUBDATASOFTPROC	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALvoid (AL_APIENTRY*PFNALBUFFERSUBDATASOFTPROC)(ALuint,ALenum,const ALvoid*,ALsizei,ALsizei);$/;"	t
PFNALCGETTHREADCONTEXTPROC	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALCcontext* (ALC_APIENTRY*PFNALCGETTHREADCONTEXTPROC)(void);$/;"	t
PFNALCSETTHREADCONTEXTPROC	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef ALCboolean  (ALC_APIENTRY*PFNALCSETTHREADCONTEXTPROC)(ALCcontext *context);$/;"	t
PFN_LOADFUNCPOINTERS	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^typedef int (*PFN_LOADFUNCPOINTERS)();$/;"	t	file:
PFN_LOADFUNCPOINTERS	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^typedef int (*PFN_LOADFUNCPOINTERS)(void);$/;"	t	file:
PFN_LOADFUNCPOINTERS	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^typedef int (*PFN_LOADFUNCPOINTERS)(void);$/;"	t	file:
PGPU_DEVICE	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^typedef struct _GPU_DEVICE *PGPU_DEVICE;$/;"	t	typeref:struct:_GPU_DEVICE
PI	.\dep\Lua\src\lmathlib.c	22;"	d	file:
PI	.\dep\Lua\src\lmathlib.c	23;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	233;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	236;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	239;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	242;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	245;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	248;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	251;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	254;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	257;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	260;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	263;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	266;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	269;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	272;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	275;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	278;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	281;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	284;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	287;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	290;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	293;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	296;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	299;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	302;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	305;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	308;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	240;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	243;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	246;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	249;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	252;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	255;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	258;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	261;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	264;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	267;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	270;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	273;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	276;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	279;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	282;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	285;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	288;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	291;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	294;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	297;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	300;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	303;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	306;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	309;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	312;"	d	file:
PLATFORM_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	315;"	d	file:
POS	.\dep\Lua\src\lobject.c	482;"	d	file:
POS_A	.\dep\Lua\src\lopcodes.h	47;"	d
POS_A	.\include\lua\lopcodes.h	47;"	d
POS_Ax	.\dep\Lua\src\lopcodes.h	51;"	d
POS_Ax	.\include\lua\lopcodes.h	51;"	d
POS_B	.\dep\Lua\src\lopcodes.h	49;"	d
POS_B	.\include\lua\lopcodes.h	49;"	d
POS_Bx	.\dep\Lua\src\lopcodes.h	50;"	d
POS_Bx	.\include\lua\lopcodes.h	50;"	d
POS_C	.\dep\Lua\src\lopcodes.h	48;"	d
POS_C	.\include\lua\lopcodes.h	48;"	d
POS_OP	.\dep\Lua\src\lopcodes.h	46;"	d
POS_OP	.\include\lua\lopcodes.h	46;"	d
PPM_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	35;"	d
PRE	.\dep\Lua\src\lobject.c	481;"	d	file:
PRINTBIT	.\dep\Lua\src\lctype.h	41;"	d
PRINTBIT	.\include\lua\lctype.h	41;"	d
PROGNAME	.\dep\Lua\src\luac.c	28;"	d	file:
PROGRESS_REPORT	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	43;"	d
PROJECTILE_WIDTH	.\src\include\Common.h	7;"	d
PS_Blend	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_BlendRec, *PS_Blend;$/;"	t	typeref:struct:PS_BlendRec_
PS_BlendRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_BlendRec, *PS_Blend;$/;"	t	typeref:struct:PS_BlendRec_
PS_BlendRec_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  PS_BlendRec_$/;"	s
PS_DICT_BLUE_FUZZ	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_BLUE_FUZZ,              \/* FT_Int     *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_BLUE_SCALE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_BLUE_SCALE,             \/* FT_Fixed   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_BLUE_SHIFT	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_BLUE_SHIFT,             \/* FT_Int     *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_BLUE_VALUE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_BLUE_VALUE,             \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_CHAR_STRING	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_CHAR_STRING,            \/* FT_String*      *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_CHAR_STRING_KEY	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_CHAR_STRING_KEY,        \/* FT_String*      *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_ENCODING_ENTRY	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_ENCODING_ENTRY,         \/* FT_String*      *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_ENCODING_TYPE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_ENCODING_TYPE,          \/* T1_EncodingType *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FAMILY_BLUE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FAMILY_BLUE,            \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FAMILY_NAME	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FAMILY_NAME,            \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FAMILY_OTHER_BLUE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FAMILY_OTHER_BLUE,      \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FONT_BBOX	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FONT_BBOX,              \/* FT_Fixed        *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FONT_MATRIX	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FONT_MATRIX,            \/* FT_Fixed        *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FONT_NAME	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FONT_NAME,              \/* FT_String*      *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FONT_TYPE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FONT_TYPE,              \/* FT_Byte         *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FORCE_BOLD	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FORCE_BOLD,             \/* FT_Bool    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FS_TYPE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FS_TYPE,                \/* FT_UShort  *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_FULL_NAME	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_FULL_NAME,              \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_IS_FIXED_PITCH	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_IS_FIXED_PITCH,         \/* FT_Bool    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_ITALIC_ANGLE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_ITALIC_ANGLE,           \/* FT_Long    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_LANGUAGE_GROUP	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_LANGUAGE_GROUP,         \/* FT_Long    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_LEN_IV	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_LEN_IV,                 \/* FT_Int     *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_MAX	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_MAX = PS_DICT_ITALIC_ANGLE$/;"	e	enum:PS_Dict_Keys_
PS_DICT_MIN_FEATURE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_MIN_FEATURE,            \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NOTICE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NOTICE,                 \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_BLUE_VALUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_BLUE_VALUES,        \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_CHAR_STRINGS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_CHAR_STRINGS,       \/* FT_Int          *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_FAMILY_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_FAMILY_BLUES,       \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_FAMILY_OTHER_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_FAMILY_OTHER_BLUES, \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_OTHER_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_OTHER_BLUES,        \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_STEM_SNAP_H	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_STEM_SNAP_H,        \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_STEM_SNAP_V	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_STEM_SNAP_V,        \/* FT_Byte    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_NUM_SUBRS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_NUM_SUBRS,              \/* FT_Int     *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_OTHER_BLUE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_OTHER_BLUE,             \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_PAINT_TYPE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_PAINT_TYPE,             \/* FT_Byte         *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_PASSWORD	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_PASSWORD,               \/* FT_Long    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_RND_STEM_UP	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_RND_STEM_UP,            \/* FT_Bool    *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_STD_HW	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_STD_HW,                 \/* FT_UShort  *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_STD_VW	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_STD_VW,                 \/* FT_UShort  *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_STEM_SNAP_H	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_STEM_SNAP_H,            \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_STEM_SNAP_V	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_STEM_SNAP_V,            \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_SUBR	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_SUBR,                   \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_UNDERLINE_POSITION	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_UNDERLINE_POSITION,     \/* FT_Short   *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_UNDERLINE_THICKNESS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_UNDERLINE_THICKNESS,    \/* FT_UShort  *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_UNIQUE_ID	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_UNIQUE_ID,              \/* FT_Int          *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_VERSION	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_VERSION,                \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DICT_WEIGHT	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DICT_WEIGHT,                 \/* FT_String* *\/$/;"	e	enum:PS_Dict_Keys_
PS_DesignMap	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_DesignMapRec, *PS_DesignMap;$/;"	t	typeref:struct:PS_DesignMap_
PS_DesignMapRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_DesignMapRec, *PS_DesignMap;$/;"	t	typeref:struct:PS_DesignMap_
PS_DesignMap_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  PS_DesignMap_$/;"	s
PS_Dict_Keys	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_Dict_Keys;$/;"	t	typeref:enum:PS_Dict_Keys_
PS_Dict_Keys_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef enum  PS_Dict_Keys_$/;"	g
PS_FontInfo	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct PS_FontInfoRec_*  PS_FontInfo;$/;"	t	typeref:struct:PS_FontInfoRec_
PS_FontInfoRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_FontInfoRec;$/;"	t	typeref:struct:PS_FontInfoRec_
PS_FontInfoRec_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  PS_FontInfoRec_$/;"	s
PS_Private	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct PS_PrivateRec_*  PS_Private;$/;"	t	typeref:struct:PS_PrivateRec_
PS_PrivateRec	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } PS_PrivateRec;$/;"	t	typeref:struct:PS_PrivateRec_
PS_PrivateRec_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef struct  PS_PrivateRec_$/;"	s
Packet	.\dep\SFML\include\SFML\Network\Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Packet	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet::Packet() :$/;"	f	class:sf::Packet
Packet	.\include\SFML\Network\Packet.hpp	/^class SFML_NETWORK_API Packet$/;"	c	namespace:sf
Page	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    struct Page$/;"	s	class:sf::Font
Page	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Font::Page::Page() :$/;"	f	class:sf::Font::Page
Page	.\include\SFML\Graphics\Font.hpp	/^    struct Page$/;"	s	class:sf::Font
PageDown	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageDown	.\include\SFML\Window\Keyboard.hpp	/^        PageDown,     \/\/\/< The Page down key$/;"	e	enum:sf::Keyboard::Key
PageTable	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to its page (texture)$/;"	t	class:sf::Font
PageTable	.\include\SFML\Graphics\Font.hpp	/^    typedef std::map<unsigned int, Page> PageTable; \/\/\/< Table mapping a character size to its page (texture)$/;"	t	class:sf::Font
PageTypeUnknown	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageTypeUnknown	.\include\SFML\Network\Ftp.hpp	/^            PageTypeUnknown         = 551, \/\/\/< Requested action aborted, page type unknown$/;"	e	enum:sf::Ftp::Response::Status
PageUp	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
PageUp	.\include\SFML\Window\Keyboard.hpp	/^        PageUp,       \/\/\/< The Page up key$/;"	e	enum:sf::Keyboard::Key
ParamTable	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    typedef std::map<std::string, int> ParamTable;$/;"	t	class:sf::Shader
ParamTable	.\include\SFML\Graphics\Shader.hpp	/^    typedef std::map<std::string, int> ParamTable;$/;"	t	class:sf::Shader
ParameterNotImplemented	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParameterNotImplemented	.\include\SFML\Network\Ftp.hpp	/^            ParameterNotImplemented = 504, \/\/\/< Command not implemented for that parameter$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
ParametersUnknown	.\include\SFML\Network\Ftp.hpp	/^            ParametersUnknown       = 501, \/\/\/< Syntax error in parameters or arguments$/;"	e	enum:sf::Ftp::Response::Status
ParseVersionFromString	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static void ParseVersionFromString(int *pOutMajor, int *pOutMinor, const char *strVersion)$/;"	f	file:
Parser	.\include\sol\Catch\include\external\clara.h	/^        Parser() : separators( " \\t=:" ) {}$/;"	f	struct:Clara::Parser
Parser	.\include\sol\Catch\include\external\clara.h	/^    struct Parser {$/;"	s	namespace:Clara
Partial	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
Partial	.\include\SFML\Network\Socket.hpp	/^        Partial,      \/\/\/< The socket sent a part of the data$/;"	e	enum:sf::Socket::Status
PartialContent	.\dep\SFML\include\SFML\Network\Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a response to a partial GET request$/;"	e	enum:sf::Http::Response::Status
PartialContent	.\include\SFML\Network\Http.hpp	/^            PartialContent = 206, \/\/\/< The server has sent a part of the resource, as a response to a partial GET request$/;"	e	enum:sf::Http::Response::Status
Particle	.\src\include\Particle.h	/^	struct Particle {$/;"	s	class:ParticleEmitter
ParticleEmit	.\src\include\ParticleEmitter.h	/^namespace ParticleEmit {$/;"	n
ParticleEmit	.\src\src\ParticleEmitter.cpp	/^namespace ParticleEmit {$/;"	n	file:
ParticleEmitter	.\src\include\Particle.h	/^class ParticleEmitter : public sf::Drawable, public sf::Transformable {$/;"	c
ParticleEmitter	.\src\src\Particle.cpp	/^ParticleEmitter::ParticleEmitter(sf::Vector2f pos, int count, sf::Color c) :$/;"	f	class:ParticleEmitter
Path	.\src\include\Path.h	/^class Path {$/;"	c
Path	.\src\src\Path.cpp	/^Path::Path() { $/;"	f	class:Path
Pattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        struct Pattern : SharedImpl<> {$/;"	s	class:Catch::TestSpec
Pause	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
Pause	.\include\SFML\Window\Keyboard.hpp	/^        Pause,        \/\/\/< The Pause key$/;"	e	enum:sf::Keyboard::Key
PauseWindow	.\src\include\PauseWindow.h	/^class PauseWindow : public Window {$/;"	c
PauseWindow	.\src\src\PauseWindow.cpp	/^PauseWindow::PauseWindow(Vector2 size) {$/;"	f	class:PauseWindow
Paused	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
Paused	.\include\SFML\Audio\SoundSource.hpp	/^        Paused,  \/\/\/< Sound is paused$/;"	e	enum:sf::SoundSource::Status
Paused	.\src\include\Game.h	/^	enum GameState {Uninitalized, Paused, Playing, Ending};$/;"	e	enum:Game::GameState
Paused	.\src\include\Window.h	/^	enum WindowState {Running, Paused, Uninitalized};$/;"	e	enum:Window::WindowState
PendingPacket	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
PendingPacket	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^TcpSocket::PendingPacket::PendingPacket() :$/;"	f	class:sf::TcpSocket::PendingPacket
PendingPacket	.\include\SFML\Network\TcpSocket.hpp	/^    struct PendingPacket$/;"	s	class:sf::TcpSocket
Period	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Period	.\include\SFML\Window\Keyboard.hpp	/^        Period,       \/\/\/< The . key$/;"	e	enum:sf::Keyboard::Key
Perk	.\src\include\Perk.h	/^class Perk {$/;"	c
Perk	.\src\src\Perk.cpp	/^Perk::Perk(std::string name, Stats s, float dur, bool lua, int maxStacks) :$/;"	f	class:Perk
Pfunc	.\dep\Lua\src\ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
Pfunc	.\include\lua\ldo.h	/^typedef void (*Pfunc) (lua_State *L, void *ud);$/;"	t
Pitch	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Pitch;$/;"	m	struct:TT_PCLT_
Pixels	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Pixels	.\include\SFML\Graphics\Texture.hpp	/^        Pixels      \/\/\/< Texture coordinates in range [0 .. size]$/;"	e	enum:sf::Texture::CoordinateType
Playing	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
Playing	.\include\SFML\Audio\SoundSource.hpp	/^        Playing  \/\/\/< Sound is playing$/;"	e	enum:sf::SoundSource::Status
Playing	.\src\include\Game.h	/^	enum GameState {Uninitalized, Paused, Playing, Ending};$/;"	e	enum:Game::GameState
PointlessCommand	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
PointlessCommand	.\include\SFML\Network\Ftp.hpp	/^            PointlessCommand      = 202, \/\/\/< Command not implemented$/;"	e	enum:sf::Ftp::Response::Status
Points	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    Points,         \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Points	.\include\SFML\Graphics\PrimitiveType.hpp	/^    Points,         \/\/\/< List of individual points$/;"	e	enum:sf::PrimitiveType
Positional	.\include\sol\Catch\include\external\clara.h	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
PositionalArgProperties	.\include\sol\Catch\include\external\clara.h	/^        PositionalArgProperties() : position( -1 ) {}$/;"	f	struct:Clara::PositionalArgProperties
PositionalArgProperties	.\include\sol\Catch\include\external\clara.h	/^    struct PositionalArgProperties {$/;"	s	namespace:Clara
Post	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
Post	.\include\SFML\Network\Http.hpp	/^            Post,  \/\/\/< Request in post mode, usually to send data to a page$/;"	e	enum:sf::Http::Request::Method
PovX	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovX	.\include\SFML\Window\Joystick.hpp	/^        PovX, \/\/\/< The X axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PovY	.\include\SFML\Window\Joystick.hpp	/^        PovY  \/\/\/< The Y axis of the point-of-view hat$/;"	e	enum:sf::Joystick::Axis
PrimitiveType	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
PrimitiveType	.\include\SFML\Graphics\PrimitiveType.hpp	/^enum PrimitiveType$/;"	g	namespace:sf
PrintCode	.\dep\Lua\src\luac.c	/^static void PrintCode(const Proto* f)$/;"	f	file:
PrintConstant	.\dep\Lua\src\luac.c	/^static void PrintConstant(const Proto* f, int i)$/;"	f	file:
PrintDebug	.\dep\Lua\src\luac.c	/^static void PrintDebug(const Proto* f)$/;"	f	file:
PrintFunction	.\dep\Lua\src\luac.c	/^static void PrintFunction(const Proto* f, int full)$/;"	f	file:
PrintHeader	.\dep\Lua\src\luac.c	/^static void PrintHeader(const Proto* f)$/;"	f	file:
PrintString	.\dep\Lua\src\luac.c	/^static void PrintString(const TString* ts)$/;"	f	file:
ProcExtsFromExtString	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static void ProcExtsFromExtString(const char *strExtList)$/;"	f	file:
ProcExtsFromExtString	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static void ProcExtsFromExtString(const char *strExtList)$/;"	f	file:
ProcExtsFromExtString	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static void ProcExtsFromExtString(const char *strExtList)$/;"	f	file:
Projectile	.\src\include\Projectile.h	/^class Projectile : public Object {$/;"	c
Projectile	.\src\src\Projectile.cpp	/^Projectile::Projectile(Map* map, Enemy* e, Tower* t, Color c) :$/;"	f	class:Projectile
Protect	.\dep\Lua\src\lvm.c	747;"	d	file:
Proto	.\dep\Lua\src\lobject.h	/^typedef struct Proto {$/;"	s
Proto	.\dep\Lua\src\lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
Proto	.\include\lua\lobject.h	/^typedef struct Proto {$/;"	s
Proto	.\include\lua\lobject.h	/^} Proto;$/;"	t	typeref:struct:Proto
Ptr	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        Ptr() : m_p( CATCH_NULL ){}$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Ptr	.\include\sol\Catch\single_include\catch.hpp	/^        Ptr( Ptr const& other ) : m_p( other.m_p ){$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\single_include\catch.hpp	/^        Ptr( T* p ) : m_p( p ){$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\single_include\catch.hpp	/^        Ptr() : m_p( CATCH_NULL ){}$/;"	f	class:Catch::Ptr
Ptr	.\include\sol\Catch\single_include\catch.hpp	/^    class Ptr {$/;"	c	namespace:Catch
Put	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Put	.\include\SFML\Network\Http.hpp	/^            Put,   \/\/\/< Request in put mode, useful for a REST API$/;"	e	enum:sf::Http::Request::Method
Q	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
Q	.\include\SFML\Window\Keyboard.hpp	/^        Q,            \/\/\/< The Q key$/;"	e	enum:sf::Keyboard::Key
QUANT_1PASS_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	301;"	d
QUANT_2PASS_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	302;"	d
Quads	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    Quads           \/\/\/< List of individual quads (deprecated, don't work with OpenGL ES)$/;"	e	enum:sf::PrimitiveType
Quads	.\include\SFML\Graphics\PrimitiveType.hpp	/^    Quads           \/\/\/< List of individual quads (deprecated, don't work with OpenGL ES)$/;"	e	enum:sf::PrimitiveType
Quiet	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^        Quiet,$/;"	e	enum:Catch::Verbosity::Level
Quote	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
Quote	.\include\SFML\Window\Keyboard.hpp	/^        Quote,        \/\/\/< The ' key$/;"	e	enum:sf::Keyboard::Key
QuotedName	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
R	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
R	.\include\SFML\Window\Joystick.hpp	/^        R,    \/\/\/< The R axis$/;"	e	enum:sf::Joystick::Axis
R	.\include\SFML\Window\Keyboard.hpp	/^        R,            \/\/\/< The R key$/;"	e	enum:sf::Keyboard::Key
R	.\include\sol\single\sol\sol.hpp	/^			typedef decltype(stack_detail::unchecked_get<T>(nullptr, 0, std::declval<record&>())) R;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::check_getter
R	.\include\sol\single\sol\sol.hpp	/^		inline auto resolve_i(types<R(Args...)>, F&&)->R(meta::unqualified_t<F>::*)(Args...) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail
R	.\include\sol\single\sol\sol.hpp	/^	inline auto resolve(R fun_ptr(Args...))->R(*)(Args...) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
R	.\include\sol\single\sol\sol.hpp	/^	inline auto resolve(R(C::*mem_ptr)(Args...))->R(C::*)(Args...) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
R	.\include\sol\sol\resolve.hpp	/^		inline auto resolve_i(types<R(Args...)>, F&&)->R(meta::unqualified_t<F>::*)(Args...) {$/;"	f	namespace:sol::detail
R	.\include\sol\sol\resolve.hpp	/^	inline auto resolve(R fun_ptr(Args...))->R(*)(Args...) {$/;"	f	namespace:sol
R	.\include\sol\sol\resolve.hpp	/^	inline auto resolve(R(C::*mem_ptr)(Args...))->R(C::*)(Args...) {$/;"	f	namespace:sol
R	.\include\sol\sol\stack_check_get.hpp	/^			typedef decltype(stack_detail::unchecked_get<T>(nullptr, 0, std::declval<record&>())) R;$/;"	t	struct:sol::stack::check_getter
RA	.\dep\Lua\src\lvm.c	728;"	d	file:
RANLIMIT	.\dep\Lua\src\ltablib.c	274;"	d	file:
RAlt	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RAlt	.\include\SFML\Window\Keyboard.hpp	/^        RAlt,         \/\/\/< The right Alt key$/;"	e	enum:sf::Keyboard::Key
RB	.\dep\Lua\src\lvm.c	729;"	d	file:
RBracket	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RBracket	.\include\SFML\Window\Keyboard.hpp	/^        RBracket,     \/\/\/< The ] key$/;"	e	enum:sf::Keyboard::Key
RC	.\dep\Lua\src\lvm.c	730;"	d	file:
RControl	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RControl	.\include\SFML\Window\Keyboard.hpp	/^        RControl,     \/\/\/< The right Control key$/;"	e	enum:sf::Keyboard::Key
RED	.\src\include\trmclr.hpp	/^        RED             =  41 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
RED	.\src\include\trmclr.hpp	/^        RED             = 31 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
REFRESH_RATE	.\src\include\Game.h	13;"	d
REGISTER_LEGACY_REPORTER	.\include\sol\Catch\include\catch.hpp	187;"	d
REGISTER_REPORTER	.\include\sol\Catch\include\catch.hpp	186;"	d
REGISTER_TEST_CASE	.\include\sol\Catch\include\catch.hpp	171;"	d
REGISTER_TEST_CASE	.\include\sol\Catch\include\catch.hpp	179;"	d
REQUIRE	.\include\sol\Catch\include\catch.hpp	139;"	d
REQUIRE_FALSE	.\include\sol\Catch\include\catch.hpp	140;"	d
REQUIRE_NOTHROW	.\include\sol\Catch\include\catch.hpp	145;"	d
REQUIRE_THAT	.\include\sol\Catch\include\catch.hpp	159;"	d
REQUIRE_THROWS	.\include\sol\Catch\include\catch.hpp	142;"	d
REQUIRE_THROWS_AS	.\include\sol\Catch\include\catch.hpp	143;"	d
REQUIRE_THROWS_WITH	.\include\sol\Catch\include\catch.hpp	144;"	d
RESERVED	.\dep\Lua\src\llex.h	/^enum RESERVED {$/;"	g
RESERVED	.\include\lua\llex.h	/^enum RESERVED {$/;"	g
RESERVEDSLOT	.\dep\Lua\src\lbaselib.c	308;"	d	file:
RETS	.\dep\Lua\src\lobject.c	480;"	d	file:
REVERSE	.\src\include\trmclr.hpp	/^        REVERSE     = 0b10000000    << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
RGB_BLUE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	324;"	d
RGB_GREEN	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	323;"	d
RGB_PIXELSIZE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	325;"	d
RGB_RED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	322;"	d
RIGHT_SHIFT_IS_UNSIGNED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	27;"	d
RKASK	.\dep\Lua\src\lopcodes.h	145;"	d
RKASK	.\include\lua\lopcodes.h	145;"	d
RKB	.\dep\Lua\src\lvm.c	731;"	d	file:
RKC	.\dep\Lua\src\lvm.c	733;"	d	file:
RLE_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	36;"	d
RN	.\dep\Lua\src\liolib.c	/^} RN;$/;"	t	typeref:struct:__anon4	file:
RShift	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RShift	.\include\SFML\Window\Keyboard.hpp	/^        RShift,       \/\/\/< The right Shift key$/;"	e	enum:sf::Keyboard::Key
RSystem	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
RSystem	.\include\SFML\Window\Keyboard.hpp	/^        RSystem,      \/\/\/< The right OS specific key: window (Windows and Linux), apple (MacOS X), ...$/;"	e	enum:sf::Keyboard::Key
Random	.\src\include\Random.h	/^namespace Random {$/;"	n
Random	.\src\src\Random.cpp	/^namespace Random {$/;"	n	file:
RandomNumberGenerator	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    struct RandomNumberGenerator {$/;"	s	namespace:Catch
RangeNotSatisfiable	.\dep\SFML\include\SFML\Network\Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request (with a "Range" header field)$/;"	e	enum:sf::Http::Response::Status
RangeNotSatisfiable	.\include\SFML\Network\Http.hpp	/^            RangeNotSatisfiable = 407, \/\/\/< The server can't satisfy the partial GET request (with a "Range" header field)$/;"	e	enum:sf::Http::Response::Status
RawTuple	.\include\sol\single\sol\sol.hpp	/^		typedef std::tuple<Tn...> RawTuple;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
RawTuple	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::tuple<Tn...> RawTuple;$/;"	t	struct:sol::usertype_metatable
Read	.\include\sol\single\sol\sol.hpp	/^		typedef std::conditional_t<can_read::value, R, no_prop> Read;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
Read	.\include\sol\sol\property.hpp	/^		typedef std::conditional_t<can_read::value, R, no_prop> Read;$/;"	t	struct:sol::property_wrapper
ReaderFactory	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    struct ReaderFactory$/;"	s	class:sf::SoundFileFactory
ReaderFactory	.\include\SFML\Audio\SoundFileFactory.hpp	/^    struct ReaderFactory$/;"	s	class:sf::SoundFileFactory
ReaderFactoryArray	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    typedef std::vector<ReaderFactory> ReaderFactoryArray;$/;"	t	class:sf::SoundFileFactory
ReaderFactoryArray	.\include\SFML\Audio\SoundFileFactory.hpp	/^    typedef std::vector<ReaderFactory> ReaderFactoryArray;$/;"	t	class:sf::SoundFileFactory
Real	.\include\sol\single\sol\sol.hpp	/^			typedef typename unique_usertype_traits<T>::actual_type Real;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::getter
Real	.\include\sol\single\sol\sol.hpp	/^			typedef typename unique_usertype_traits<T>::actual_type Real;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
Real	.\include\sol\sol\stack_get.hpp	/^			typedef typename unique_usertype_traits<T>::actual_type Real;$/;"	t	struct:sol::stack::getter
Real	.\include\sol\sol\stack_push.hpp	/^			typedef typename unique_usertype_traits<T>::actual_type Real;$/;"	t	struct:sol::stack::pusher
ReconstructedExpression	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            ReconstructedExpression = Yellow,$/;"	e	enum:Catch::Colour::Code
Rect	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^class Rect$/;"	c	namespace:sf
Rect	.\include\SFML\Graphics\Rect.hpp	/^class Rect$/;"	c	namespace:sf
RectangleShape	.\dep\SFML\include\SFML\Graphics\RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
RectangleShape	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^RectangleShape::RectangleShape(const Vector2f& size)$/;"	f	class:sf::RectangleShape
RectangleShape	.\include\SFML\Graphics\RectangleShape.hpp	/^class SFML_GRAPHICS_API RectangleShape : public Shape$/;"	c	namespace:sf
Red	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color
Red	.\include\SFML\Graphics\Color.hpp	/^    static const Color Red;         \/\/\/< Red predefined color$/;"	m	class:sf::Color
Red	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Red,$/;"	e	enum:Catch::Colour::Code
RegistrarForTagAliases	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^    struct RegistrarForTagAliases {$/;"	s	namespace:Catch
RegistrarForTagAliases	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    RegistrarForTagAliases::RegistrarForTagAliases( char const* alias, char const* tag, SourceLineInfo const& lineInfo ) {$/;"	f	class:Catch::RegistrarForTagAliases
RegistryHub	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^            RegistryHub() {$/;"	f	class:Catch::__anon180::RegistryHub
RegistryHub	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^        class RegistryHub : public IRegistryHub, public IMutableRegistryHub {$/;"	c	namespace:Catch::__anon180
Regular	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^        Regular       = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
Regular	.\include\SFML\Graphics\Text.hpp	/^        Regular       = 0,      \/\/\/< Regular characters, no style$/;"	e	enum:sf::Text::Style
RemoveConstRef	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T const&>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T const>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T&>{ typedef T type; };$/;"	s	namespace:Clara::Detail
RemoveConstRef	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef{ typedef T type; };$/;"	s	namespace:Clara::Detail
RenderStates	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates() :$/;"	f	class:sf::RenderStates
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates(const BlendMode& theBlendMode) :$/;"	f	class:sf::RenderStates
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates(const BlendMode& theBlendMode, const Transform& theTransform,$/;"	f	class:sf::RenderStates
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates(const Shader* theShader) :$/;"	f	class:sf::RenderStates
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates(const Texture* theTexture) :$/;"	f	class:sf::RenderStates
RenderStates	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^RenderStates::RenderStates(const Transform& theTransform) :$/;"	f	class:sf::RenderStates
RenderStates	.\include\SFML\Graphics\RenderStates.hpp	/^class SFML_GRAPHICS_API RenderStates$/;"	c	namespace:sf
RenderTarget	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTarget	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^RenderTarget::RenderTarget() :$/;"	f	class:sf::RenderTarget
RenderTarget	.\include\SFML\Graphics\RenderTarget.hpp	/^class SFML_GRAPHICS_API RenderTarget : NonCopyable$/;"	c	namespace:sf
RenderTexture	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderTexture	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^RenderTexture::RenderTexture() :$/;"	f	class:sf::RenderTexture
RenderTexture	.\include\SFML\Graphics\RenderTexture.hpp	/^class SFML_GRAPHICS_API RenderTexture : public RenderTarget$/;"	c	namespace:sf
RenderTextureImpl	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.hpp	/^class RenderTextureImpl : NonCopyable$/;"	c	namespace:sf::priv
RenderTextureImplDefault	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^RenderTextureImplDefault::RenderTextureImplDefault() :$/;"	f	class:sf::priv::RenderTextureImplDefault
RenderTextureImplDefault	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^class RenderTextureImplDefault : public RenderTextureImpl, GlResource$/;"	c	namespace:sf::priv
RenderTextureImplFBO	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^RenderTextureImplFBO::RenderTextureImplFBO() :$/;"	f	class:sf::priv::RenderTextureImplFBO
RenderTextureImplFBO	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^class RenderTextureImplFBO : public RenderTextureImpl, GlResource$/;"	c	namespace:sf::priv
RenderWindow	.\dep\SFML\include\SFML\Graphics\RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
RenderWindow	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^RenderWindow::RenderWindow()$/;"	f	class:sf::RenderWindow
RenderWindow	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^RenderWindow::RenderWindow(VideoMode mode, const String& title, Uint32 style, const ContextSettings& settings)$/;"	f	class:sf::RenderWindow
RenderWindow	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^RenderWindow::RenderWindow(WindowHandle handle, const ContextSettings& settings)$/;"	f	class:sf::RenderWindow
RenderWindow	.\include\SFML\Graphics\RenderWindow.hpp	/^class SFML_GRAPHICS_API RenderWindow : public Window, public RenderTarget$/;"	c	namespace:sf
ReporterConfig	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        ReporterConfig( Ptr<IConfig const> const& _fullConfig, std::ostream& _stream )$/;"	f	struct:Catch::ReporterConfig
ReporterConfig	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        explicit ReporterConfig( Ptr<IConfig const> const& _fullConfig )$/;"	f	struct:Catch::ReporterConfig
ReporterConfig	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct ReporterConfig {$/;"	s	namespace:Catch
ReporterFactory	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        class ReporterFactory : public IReporterFactory {$/;"	c	class:Catch::LegacyReporterRegistrar
ReporterFactory	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        class ReporterFactory : public SharedImpl<IReporterFactory> {$/;"	c	class:Catch::ReporterRegistrar
ReporterPreferences	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        ReporterPreferences()$/;"	f	struct:Catch::ReporterPreferences
ReporterPreferences	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct ReporterPreferences {$/;"	s	namespace:Catch
ReporterRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^        ReporterRegistrar( std::string const& name ) {$/;"	f	class:Catch::ReporterRegistrar
ReporterRegistrar	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^    class ReporterRegistrar {$/;"	c	namespace:Catch
ReporterRegistry	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^    class ReporterRegistry : public IReporterRegistry {$/;"	c	namespace:Catch
Reporters	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^    typedef std::vector<Ptr<IStreamingReporter> > Reporters;$/;"	t	class:Catch::MultipleReporters
Request	.\dep\SFML\include\SFML\Network\Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
Request	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Request::Request(const std::string& uri, Method method, const std::string& body)$/;"	f	class:sf::Http::Request
Request	.\include\SFML\Network\Http.hpp	/^    class SFML_NETWORK_API Request$/;"	c	class:sf::Http
Reserved	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Byte    Reserved;$/;"	m	struct:TT_PCLT_
Reserved	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Reserved[4];$/;"	m	struct:TT_HoriHeader_
Reserved	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   Reserved[4];$/;"	m	struct:TT_VertHeader_
ResetContent	.\dep\SFML\include\SFML\Network\Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the view (form) that caused the request to be sent$/;"	e	enum:sf::Http::Response::Status
ResetContent	.\include\SFML\Network\Http.hpp	/^            ResetContent   = 205, \/\/\/< The server informs the client that it should clear the view (form) that caused the request to be sent$/;"	e	enum:sf::Http::Response::Status
Resize	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Title bar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon116
Resize	.\include\SFML\Window\WindowStyle.hpp	/^        Resize     = 1 << 1, \/\/\/< Title bar + resizable border + maximize button$/;"	e	enum:sf::Style::__anon176
Resized	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
Resized	.\include\SFML\Window\Event.hpp	/^        Resized,                \/\/\/< The window was resized (data in event.size)$/;"	e	enum:sf::Event::EventType
ResourceStream	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	m	namespace:sf::priv	typeref:class:sf::priv::SFML_SYSTEM_API
ResourceStream	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^ResourceStream::ResourceStream(const std::string& filename) :$/;"	f	class:sf::priv::ResourceStream
ResourceStream	.\dep\SFML\src\SFML\System\Android\ResourceStream.hpp	/^class SFML_SYSTEM_API ResourceStream : public InputStream$/;"	c	namespace:sf::priv
ResourceStream	.\include\SFML\System\FileInputStream.hpp	/^class SFML_SYSTEM_API ResourceStream;$/;"	m	namespace:sf::priv	typeref:class:sf::priv::SFML_SYSTEM_API
Response	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	.\dep\SFML\include\SFML\Network\Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
Response	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response::Response(Status code, const std::string& message) :$/;"	f	class:sf::Ftp::Response
Response	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Response::Response() :$/;"	f	class:sf::Http::Response
Response	.\include\SFML\Network\Ftp.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Ftp
Response	.\include\SFML\Network\Http.hpp	/^    class SFML_NETWORK_API Response$/;"	c	class:sf::Http
RestartMarkerReply	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
RestartMarkerReply	.\include\SFML\Network\Ftp.hpp	/^            RestartMarkerReply          = 110, \/\/\/< Restart marker reply$/;"	e	enum:sf::Ftp::Response::Status
Result	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void Result$/;"	f	class:Catch::iTchRunnerReporter
ResultBuilder	.\include\sol\Catch\include\internal\catch_result_builder.h	/^    class ResultBuilder {$/;"	c	namespace:Catch
ResultBuilder	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder::ResultBuilder(   char const* macroName,$/;"	f	class:Catch::ResultBuilder
ResultBuilder	.\include\sol\Catch\single_include\catch.hpp	/^    class ResultBuilder {$/;"	c	namespace:Catch
ResultDisposition	.\include\sol\Catch\include\internal\catch_result_type.h	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultDisposition	.\include\sol\Catch\single_include\catch.hpp	/^    struct ResultDisposition { enum Flags {$/;"	s	namespace:Catch
ResultError	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            ResultError = BrightRed,$/;"	e	enum:Catch::Colour::Code
ResultExpectedFailure	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            ResultExpectedFailure = Warning,$/;"	e	enum:Catch::Colour::Code
ResultSuccess	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            ResultSuccess = BrightGreen,$/;"	e	enum:Catch::Colour::Code
ResultWas	.\include\sol\Catch\include\internal\catch_result_type.h	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
ResultWas	.\include\sol\Catch\single_include\catch.hpp	/^    struct ResultWas { enum OfType {$/;"	s	namespace:Catch
Return	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Return,       \/\/\/< The Return key$/;"	e	enum:sf::Keyboard::Key
Return	.\include\SFML\Window\Keyboard.hpp	/^        Return,       \/\/\/< The Return key$/;"	e	enum:sf::Keyboard::Key
Right	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Right	.\include\SFML\Window\Keyboard.hpp	/^        Right,        \/\/\/< Right arrow$/;"	e	enum:sf::Keyboard::Key
Right	.\include\SFML\Window\Mouse.hpp	/^        Right,      \/\/\/< The right mouse button$/;"	e	enum:sf::Mouse::Button
Root	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^            Root,$/;"	e	enum:Catch::RunningSection::State
Row	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}$/;"	f	struct:sf::Font::Row
Row	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    struct Row$/;"	s	class:sf::Font
Row	.\include\SFML\Graphics\Font.hpp	/^        Row(unsigned int rowTop, unsigned int rowHeight) : width(0), top(rowTop), height(rowHeight) {}$/;"	f	struct:sf::Font::Row
Row	.\include\SFML\Graphics\Font.hpp	/^    struct Row$/;"	s	class:sf::Font
RunContext	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        explicit RunContext( Ptr<IConfig const> const& _config, Ptr<IStreamingReporter> const& reporter )$/;"	f	class:Catch::RunContext
RunContext	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^    class RunContext : public IResultCapture, public IRunner {$/;"	c	namespace:Catch
RunLoopMode	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^    const CFStringRef RunLoopMode = CFSTR("SFML_RUN_LOOP_MODE");$/;"	m	namespace:__anon142	file:
RunState	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        enum RunState {$/;"	g	class:Catch::TestCaseTracking::TrackerContext
RunTests	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct RunTests { enum InWhatOrder {$/;"	s	namespace:Catch
Running	.\src\include\Window.h	/^	enum WindowState {Running, Paused, Uninitalized};$/;"	e	enum:Window::WindowState
RunningSection	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        RunningSection( RunningSection* parent, std::string const& name )$/;"	f	class:Catch::RunningSection
RunningSection	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        RunningSection( std::string const& name )$/;"	f	class:Catch::RunningSection
RunningSection	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^    class RunningSection {$/;"	c	namespace:Catch
S	.\dep\Lua\src\luac.c	393;"	d	file:
S	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
S	.\include\SFML\Window\Keyboard.hpp	/^        S,            \/\/\/< The S key$/;"	e	enum:sf::Keyboard::Key
S	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct S$/;"	s	file:
SAVE_MARKERS_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	297;"	d
SCENARIO	.\include\sol\Catch\include\catch.hpp	197;"	d
SCENARIO	.\include\sol\Catch\include\catch.hpp	200;"	d
SCENARIO	.\include\sol\Catch\single_include\catch.hpp	10344;"	d
SCENARIO_METHOD	.\include\sol\Catch\include\catch.hpp	198;"	d
SCENARIO_METHOD	.\include\sol\Catch\include\catch.hpp	201;"	d
SCENARIO_METHOD	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^SCENARIO_METHOD(Fixture,$/;"	f
SCENARIO_METHOD	.\include\sol\Catch\single_include\catch.hpp	10345;"	d
SCOPED_CAPTURE	.\include\sol\Catch\include\catch.hpp	165;"	d
SCOPED_INFO	.\include\sol\Catch\include\catch.hpp	163;"	d
SECTION	.\include\sol\Catch\include\catch.hpp	172;"	d
SECTION	.\include\sol\Catch\include\catch.hpp	180;"	d
SETARG_A	.\dep\Lua\src\lopcodes.h	98;"	d
SETARG_A	.\include\lua\lopcodes.h	98;"	d
SETARG_Ax	.\dep\Lua\src\lopcodes.h	110;"	d
SETARG_Ax	.\include\lua\lopcodes.h	110;"	d
SETARG_B	.\dep\Lua\src\lopcodes.h	101;"	d
SETARG_B	.\include\lua\lopcodes.h	101;"	d
SETARG_Bx	.\dep\Lua\src\lopcodes.h	107;"	d
SETARG_Bx	.\include\lua\lopcodes.h	107;"	d
SETARG_C	.\dep\Lua\src\lopcodes.h	104;"	d
SETARG_C	.\include\lua\lopcodes.h	104;"	d
SETARG_sBx	.\dep\Lua\src\lopcodes.h	113;"	d
SETARG_sBx	.\include\lua\lopcodes.h	113;"	d
SET_OPCODE	.\dep\Lua\src\lopcodes.h	90;"	d
SET_OPCODE	.\include\lua\lopcodes.h	90;"	d
SFContext	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^class SFContext : public GlContext$/;"	c	namespace:sf::priv
SFML_ACTIVITY_HPP	.\dep\SFML\src\SFML\System\Android\Activity.hpp	26;"	d
SFML_ALCHECK_HPP	.\dep\SFML\src\SFML\Audio\ALCheck.hpp	26;"	d
SFML_ALRESOURCE_HPP	.\dep\SFML\include\SFML\Audio\AlResource.hpp	26;"	d
SFML_ALRESOURCE_HPP	.\include\SFML\Audio\AlResource.hpp	26;"	d
SFML_API_EXPORT	.\dep\SFML\include\SFML\Config.hpp	122;"	d
SFML_API_EXPORT	.\dep\SFML\include\SFML\Config.hpp	138;"	d
SFML_API_EXPORT	.\dep\SFML\include\SFML\Config.hpp	144;"	d
SFML_API_EXPORT	.\dep\SFML\include\SFML\Config.hpp	154;"	d
SFML_API_EXPORT	.\include\SFML\Config.hpp	122;"	d
SFML_API_EXPORT	.\include\SFML\Config.hpp	138;"	d
SFML_API_EXPORT	.\include\SFML\Config.hpp	144;"	d
SFML_API_EXPORT	.\include\SFML\Config.hpp	154;"	d
SFML_API_IMPORT	.\dep\SFML\include\SFML\Config.hpp	123;"	d
SFML_API_IMPORT	.\dep\SFML\include\SFML\Config.hpp	139;"	d
SFML_API_IMPORT	.\dep\SFML\include\SFML\Config.hpp	145;"	d
SFML_API_IMPORT	.\dep\SFML\include\SFML\Config.hpp	155;"	d
SFML_API_IMPORT	.\include\SFML\Config.hpp	123;"	d
SFML_API_IMPORT	.\include\SFML\Config.hpp	139;"	d
SFML_API_IMPORT	.\include\SFML\Config.hpp	145;"	d
SFML_API_IMPORT	.\include\SFML\Config.hpp	155;"	d
SFML_AUDIODEVICE_HPP	.\dep\SFML\src\SFML\Audio\AudioDevice.hpp	26;"	d
SFML_AUDIO_API	.\dep\SFML\include\SFML\Audio\Export.hpp	39;"	d
SFML_AUDIO_API	.\dep\SFML\include\SFML\Audio\Export.hpp	43;"	d
SFML_AUDIO_API	.\include\SFML\Audio\Export.hpp	39;"	d
SFML_AUDIO_API	.\include\SFML\Audio\Export.hpp	43;"	d
SFML_AUDIO_EXPORT_HPP	.\dep\SFML\include\SFML\Audio\Export.hpp	26;"	d
SFML_AUDIO_EXPORT_HPP	.\include\SFML\Audio\Export.hpp	26;"	d
SFML_AUDIO_HPP	.\dep\SFML\include\SFML\Audio.hpp	26;"	d
SFML_AUDIO_HPP	.\include\SFML\Audio.hpp	26;"	d
SFML_BLENDMODE_HPP	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	26;"	d
SFML_BLENDMODE_HPP	.\include\SFML\Graphics\BlendMode.hpp	26;"	d
SFML_CG_SF_CONVERSION_HPP	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.hpp	27;"	d
SFML_CIRCLESHAPE_HPP	.\dep\SFML\include\SFML\Graphics\CircleShape.hpp	26;"	d
SFML_CIRCLESHAPE_HPP	.\include\SFML\Graphics\CircleShape.hpp	26;"	d
SFML_CLOCKIMPLUNIX_HPP	.\dep\SFML\src\SFML\System\Unix\ClockImpl.hpp	26;"	d
SFML_CLOCKIMPLWIN32_HPP	.\dep\SFML\src\SFML\System\Win32\ClockImpl.hpp	26;"	d
SFML_CLOCK_HPP	.\dep\SFML\include\SFML\System\Clock.hpp	26;"	d
SFML_CLOCK_HPP	.\include\SFML\System\Clock.hpp	26;"	d
SFML_COLOR_HPP	.\dep\SFML\include\SFML\Graphics\Color.hpp	26;"	d
SFML_COLOR_HPP	.\include\SFML\Graphics\Color.hpp	26;"	d
SFML_CONFIG_HPP	.\dep\SFML\include\SFML\Config.hpp	26;"	d
SFML_CONFIG_HPP	.\include\SFML\Config.hpp	26;"	d
SFML_CONTEXTSETTINGS_HPP	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	26;"	d
SFML_CONTEXTSETTINGS_HPP	.\include\SFML\Window\ContextSettings.hpp	26;"	d
SFML_CONTEXT_HPP	.\dep\SFML\include\SFML\Window\Context.hpp	26;"	d
SFML_CONTEXT_HPP	.\include\SFML\Window\Context.hpp	26;"	d
SFML_CONVEXSHAPE_HPP	.\dep\SFML\include\SFML\Graphics\ConvexShape.hpp	26;"	d
SFML_CONVEXSHAPE_HPP	.\include\SFML\Graphics\ConvexShape.hpp	26;"	d
SFML_DEBUG	.\dep\SFML\include\SFML\Config.hpp	109;"	d
SFML_DEBUG	.\include\SFML\Config.hpp	109;"	d
SFML_DECLARE_OBJC_CLASS	.\dep\SFML\src\SFML\Window\iOS\ObjCType.hpp	31;"	d
SFML_DECLARE_OBJC_CLASS	.\dep\SFML\src\SFML\Window\iOS\ObjCType.hpp	33;"	d
SFML_DRAWABLE_HPP	.\dep\SFML\include\SFML\Graphics\Drawable.hpp	26;"	d
SFML_DRAWABLE_HPP	.\include\SFML\Graphics\Drawable.hpp	26;"	d
SFML_EAGLCONTEXT_HPP	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	26;"	d
SFML_EGLCHECK_HPP	.\dep\SFML\src\SFML\Window\EGLCheck.hpp	26;"	d
SFML_EGLCONTEXT_HPP	.\dep\SFML\src\SFML\Window\EglContext.hpp	26;"	d
SFML_ERR_HPP	.\dep\SFML\include\SFML\System\Err.hpp	26;"	d
SFML_ERR_HPP	.\include\SFML\System\Err.hpp	26;"	d
SFML_EVENT_HPP	.\dep\SFML\include\SFML\Window\Event.hpp	26;"	d
SFML_EVENT_HPP	.\include\SFML\Window\Event.hpp	26;"	d
SFML_FILEINPUTSTREAM_HPP	.\dep\SFML\include\SFML\System\FileInputStream.hpp	26;"	d
SFML_FILEINPUTSTREAM_HPP	.\include\SFML\System\FileInputStream.hpp	26;"	d
SFML_FONT_HPP	.\dep\SFML\include\SFML\Graphics\Font.hpp	26;"	d
SFML_FONT_HPP	.\include\SFML\Graphics\Font.hpp	26;"	d
SFML_FTP_HPP	.\dep\SFML\include\SFML\Network\Ftp.hpp	26;"	d
SFML_FTP_HPP	.\include\SFML\Network\Ftp.hpp	26;"	d
SFML_GLCHECK_HPP	.\dep\SFML\src\SFML\Graphics\GLCheck.hpp	26;"	d
SFML_GLCONTEXT_HPP	.\dep\SFML\src\SFML\Window\GlContext.hpp	26;"	d
SFML_GLEXTENSIONS_HPP	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	26;"	d
SFML_GLRESOURCE_HPP	.\dep\SFML\include\SFML\Window\GlResource.hpp	26;"	d
SFML_GLRESOURCE_HPP	.\include\SFML\Window\GlResource.hpp	26;"	d
SFML_GLXCONTEXT_HPP	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	26;"	d
SFML_GLYPH_HPP	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	26;"	d
SFML_GLYPH_HPP	.\include\SFML\Graphics\Glyph.hpp	26;"	d
SFML_GRAPHICS_API	.\dep\SFML\include\SFML\Graphics\Export.hpp	39;"	d
SFML_GRAPHICS_API	.\dep\SFML\include\SFML\Graphics\Export.hpp	43;"	d
SFML_GRAPHICS_API	.\include\SFML\Graphics\Export.hpp	39;"	d
SFML_GRAPHICS_API	.\include\SFML\Graphics\Export.hpp	43;"	d
SFML_GRAPHICS_EXPORT_HPP	.\dep\SFML\include\SFML\Graphics\Export.hpp	26;"	d
SFML_GRAPHICS_EXPORT_HPP	.\include\SFML\Graphics\Export.hpp	26;"	d
SFML_GRAPHICS_HPP	.\dep\SFML\include\SFML\Graphics.hpp	26;"	d
SFML_GRAPHICS_HPP	.\include\SFML\Graphics.hpp	26;"	d
SFML_HIDINPUTMANAGER_HPP	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	27;"	d
SFML_HIDJOYSTICKMANAGER_HPP	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	27;"	d
SFML_HTTP_HPP	.\dep\SFML\include\SFML\Network\Http.hpp	26;"	d
SFML_HTTP_HPP	.\include\SFML\Network\Http.hpp	26;"	d
SFML_IMAGELOADER_HPP	.\dep\SFML\src\SFML\Graphics\ImageLoader.hpp	26;"	d
SFML_IMAGE_HPP	.\dep\SFML\include\SFML\Graphics\Image.hpp	26;"	d
SFML_IMAGE_HPP	.\include\SFML\Graphics\Image.hpp	26;"	d
SFML_INPUTIMPLANDROID_HPP	.\dep\SFML\src\SFML\Window\Android\InputImpl.hpp	26;"	d
SFML_INPUTIMPLIOS_HPP	.\dep\SFML\src\SFML\Window\iOS\InputImpl.hpp	26;"	d
SFML_INPUTIMPLOSX_HPP	.\dep\SFML\src\SFML\Window\OSX\InputImpl.hpp	27;"	d
SFML_INPUTIMPLWIN32_HPP	.\dep\SFML\src\SFML\Window\Win32\InputImpl.hpp	26;"	d
SFML_INPUTIMPLX11_HPP	.\dep\SFML\src\SFML\Window\Unix\InputImpl.hpp	26;"	d
SFML_INPUTIMPL_HPP	.\dep\SFML\src\SFML\Window\InputImpl.hpp	26;"	d
SFML_INPUTSOUNDFILE_HPP	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	26;"	d
SFML_INPUTSOUNDFILE_HPP	.\include\SFML\Audio\InputSoundFile.hpp	26;"	d
SFML_INPUTSTREAM_HPP	.\dep\SFML\include\SFML\System\InputStream.hpp	26;"	d
SFML_INPUTSTREAM_HPP	.\include\SFML\System\InputStream.hpp	26;"	d
SFML_IPADDRESS_HPP	.\dep\SFML\include\SFML\Network\IpAddress.hpp	26;"	d
SFML_IPADDRESS_HPP	.\include\SFML\Network\IpAddress.hpp	26;"	d
SFML_JOYSTICKIMPLANDROID_HPP	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKIMPLFREEBSD_HPP	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKIMPLIOS_HPP	.\dep\SFML\src\SFML\Window\iOS\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKIMPLLINUX_HPP	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKIMPLOSX_HPP	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	27;"	d
SFML_JOYSTICKIMPLWIN32_HPP	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKIMPL_HPP	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	26;"	d
SFML_JOYSTICKMANAGER_HPP	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	26;"	d
SFML_JOYSTICK_HPP	.\dep\SFML\include\SFML\Window\Joystick.hpp	26;"	d
SFML_JOYSTICK_HPP	.\include\SFML\Window\Joystick.hpp	26;"	d
SFML_KEYBOARD_HPP	.\dep\SFML\include\SFML\Window\Keyboard.hpp	26;"	d
SFML_KEYBOARD_HPP	.\include\SFML\Window\Keyboard.hpp	26;"	d
SFML_LISTENER_HPP	.\dep\SFML\include\SFML\Audio\Listener.hpp	26;"	d
SFML_LISTENER_HPP	.\include\SFML\Audio\Listener.hpp	26;"	d
SFML_LOCK_HPP	.\dep\SFML\include\SFML\System\Lock.hpp	26;"	d
SFML_LOCK_HPP	.\include\SFML\System\Lock.hpp	26;"	d
SFML_MAIN_HPP	.\dep\SFML\include\SFML\Main.hpp	26;"	d
SFML_MAIN_HPP	.\include\SFML\Main.hpp	26;"	d
SFML_MEMORYINPUTSTREAM_HPP	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	26;"	d
SFML_MEMORYINPUTSTREAM_HPP	.\include\SFML\System\MemoryInputStream.hpp	26;"	d
SFML_MOUSE_HPP	.\dep\SFML\include\SFML\Window\Mouse.hpp	26;"	d
SFML_MOUSE_HPP	.\include\SFML\Window\Mouse.hpp	26;"	d
SFML_MUSIC_HPP	.\dep\SFML\include\SFML\Audio\Music.hpp	26;"	d
SFML_MUSIC_HPP	.\include\SFML\Audio\Music.hpp	26;"	d
SFML_MUTEXIMPL_HPP	.\dep\SFML\src\SFML\System\Unix\MutexImpl.hpp	26;"	d
SFML_MUTEXIMPL_HPP	.\dep\SFML\src\SFML\System\Win32\MutexImpl.hpp	26;"	d
SFML_MUTEX_HPP	.\dep\SFML\include\SFML\System\Mutex.hpp	26;"	d
SFML_MUTEX_HPP	.\include\SFML\System\Mutex.hpp	26;"	d
SFML_NETWORK_API	.\dep\SFML\include\SFML\Network\Export.hpp	39;"	d
SFML_NETWORK_API	.\dep\SFML\include\SFML\Network\Export.hpp	43;"	d
SFML_NETWORK_API	.\include\SFML\Network\Export.hpp	39;"	d
SFML_NETWORK_API	.\include\SFML\Network\Export.hpp	43;"	d
SFML_NETWORK_EXPORT_HPP	.\dep\SFML\include\SFML\Network\Export.hpp	26;"	d
SFML_NETWORK_EXPORT_HPP	.\include\SFML\Network\Export.hpp	26;"	d
SFML_NETWORK_HPP	.\dep\SFML\include\SFML\Network.hpp	26;"	d
SFML_NETWORK_HPP	.\include\SFML\Network.hpp	26;"	d
SFML_NONCOPYABLE_HPP	.\dep\SFML\include\SFML\System\NonCopyable.hpp	26;"	d
SFML_NONCOPYABLE_HPP	.\include\SFML\System\NonCopyable.hpp	26;"	d
SFML_OBJCTYPE_HPP	.\dep\SFML\src\SFML\Window\iOS\ObjCType.hpp	26;"	d
SFML_OPENGL_HPP	.\dep\SFML\include\SFML\OpenGL.hpp	26;"	d
SFML_OPENGL_HPP	.\include\SFML\OpenGL.hpp	26;"	d
SFML_OUTPUTSOUNDFILE_HPP	.\dep\SFML\include\SFML\Audio\OutputSoundFile.hpp	26;"	d
SFML_OUTPUTSOUNDFILE_HPP	.\include\SFML\Audio\OutputSoundFile.hpp	26;"	d
SFML_PACKET_HPP	.\dep\SFML\include\SFML\Network\Packet.hpp	26;"	d
SFML_PACKET_HPP	.\include\SFML\Network\Packet.hpp	26;"	d
SFML_PRIMITIVETYPE_HPP	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	26;"	d
SFML_PRIMITIVETYPE_HPP	.\include\SFML\Graphics\PrimitiveType.hpp	26;"	d
SFML_RECTANGLESHAPE_HPP	.\dep\SFML\include\SFML\Graphics\RectangleShape.hpp	26;"	d
SFML_RECTANGLESHAPE_HPP	.\include\SFML\Graphics\RectangleShape.hpp	26;"	d
SFML_RECT_HPP	.\dep\SFML\include\SFML\Graphics\Rect.hpp	26;"	d
SFML_RECT_HPP	.\include\SFML\Graphics\Rect.hpp	26;"	d
SFML_RENDERSTATES_HPP	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	26;"	d
SFML_RENDERSTATES_HPP	.\include\SFML\Graphics\RenderStates.hpp	26;"	d
SFML_RENDERTARGET_HPP	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	26;"	d
SFML_RENDERTARGET_HPP	.\include\SFML\Graphics\RenderTarget.hpp	26;"	d
SFML_RENDERTEXTUREIMPLDEFAULT_HPP	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	26;"	d
SFML_RENDERTEXTUREIMPLFBO_HPP	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	26;"	d
SFML_RENDERTEXTUREIMPL_HPP	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.hpp	26;"	d
SFML_RENDERTEXTURE_HPP	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	26;"	d
SFML_RENDERTEXTURE_HPP	.\include\SFML\Graphics\RenderTexture.hpp	26;"	d
SFML_RENDERWINDOW_HPP	.\dep\SFML\include\SFML\Graphics\RenderWindow.hpp	26;"	d
SFML_RENDERWINDOW_HPP	.\include\SFML\Graphics\RenderWindow.hpp	26;"	d
SFML_RESOURCESTREAM_HPP	.\dep\SFML\src\SFML\System\Android\ResourceStream.hpp	26;"	d
SFML_SCOPEDXCBPTR_HPP	.\dep\SFML\src\SFML\Window\Unix\ScopedXcbPtr.hpp	26;"	d
SFML_SENSORIMPLANDROID_HPP	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	26;"	d
SFML_SENSORIMPLIOS_HPP	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	26;"	d
SFML_SENSORIMPLOSX_HPP	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.hpp	26;"	d
SFML_SENSORIMPLUNIX_HPP	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.hpp	26;"	d
SFML_SENSORIMPLWIN32_HPP	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.hpp	26;"	d
SFML_SENSORIMPL_HPP	.\dep\SFML\src\SFML\Window\SensorImpl.hpp	26;"	d
SFML_SENSORMANAGER_HPP	.\dep\SFML\src\SFML\Window\SensorManager.hpp	26;"	d
SFML_SENSOR_HPP	.\dep\SFML\include\SFML\Window\Sensor.hpp	26;"	d
SFML_SENSOR_HPP	.\include\SFML\Window\Sensor.hpp	26;"	d
SFML_SFAPPDELEGATE_HPP	.\dep\SFML\src\SFML\Window\iOS\SFAppDelegate.hpp	26;"	d
SFML_SFCONTEXT_HPP	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	27;"	d
SFML_SFMAIN_HPP	.\dep\SFML\src\SFML\Window\iOS\SFMain.hpp	26;"	d
SFML_SFML_WINDOW_HPP	.\dep\SFML\include\SFML\Window.hpp	26;"	d
SFML_SFML_WINDOW_HPP	.\include\SFML\Window.hpp	26;"	d
SFML_SFVIEWCONTROLLER_HPP	.\dep\SFML\src\SFML\Window\iOS\SFViewController.hpp	26;"	d
SFML_SFVIEW_HPP	.\dep\SFML\src\SFML\Window\iOS\SFView.hpp	26;"	d
SFML_SHADER_HPP	.\dep\SFML\include\SFML\Graphics\Shader.hpp	26;"	d
SFML_SHADER_HPP	.\include\SFML\Graphics\Shader.hpp	26;"	d
SFML_SHAPE_HPP	.\dep\SFML\include\SFML\Graphics\Shape.hpp	26;"	d
SFML_SHAPE_HPP	.\include\SFML\Graphics\Shape.hpp	26;"	d
SFML_SHAREDDISPLAY_HPP	.\dep\SFML\src\SFML\Window\Unix\Display.hpp	26;"	d
SFML_SLEEPIMPLUNIX_HPP	.\dep\SFML\src\SFML\System\Unix\SleepImpl.hpp	26;"	d
SFML_SLEEPIMPLWIN32_HPP	.\dep\SFML\src\SFML\System\Win32\SleepImpl.hpp	26;"	d
SFML_SLEEP_HPP	.\dep\SFML\include\SFML\System\Sleep.hpp	26;"	d
SFML_SLEEP_HPP	.\include\SFML\System\Sleep.hpp	26;"	d
SFML_SOCKETHANDLE_HPP	.\dep\SFML\include\SFML\Network\SocketHandle.hpp	26;"	d
SFML_SOCKETHANDLE_HPP	.\include\SFML\Network\SocketHandle.hpp	26;"	d
SFML_SOCKETIMPL_HPP	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.hpp	26;"	d
SFML_SOCKETIMPL_HPP	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	26;"	d
SFML_SOCKETSELECTOR_HPP	.\dep\SFML\include\SFML\Network\SocketSelector.hpp	26;"	d
SFML_SOCKETSELECTOR_HPP	.\include\SFML\Network\SocketSelector.hpp	26;"	d
SFML_SOCKET_HPP	.\dep\SFML\include\SFML\Network\Socket.hpp	26;"	d
SFML_SOCKET_HPP	.\include\SFML\Network\Socket.hpp	26;"	d
SFML_SOUNDBUFFERRECORDER_HPP	.\dep\SFML\include\SFML\Audio\SoundBufferRecorder.hpp	26;"	d
SFML_SOUNDBUFFERRECORDER_HPP	.\include\SFML\Audio\SoundBufferRecorder.hpp	26;"	d
SFML_SOUNDBUFFER_HPP	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	26;"	d
SFML_SOUNDBUFFER_HPP	.\include\SFML\Audio\SoundBuffer.hpp	26;"	d
SFML_SOUNDFILEFACTORY_HPP	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	26;"	d
SFML_SOUNDFILEFACTORY_HPP	.\include\SFML\Audio\SoundFileFactory.hpp	26;"	d
SFML_SOUNDFILEREADERFLAC_HPP	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	26;"	d
SFML_SOUNDFILEREADEROGG_HPP	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	26;"	d
SFML_SOUNDFILEREADERWAV_HPP	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	26;"	d
SFML_SOUNDFILEREADER_HPP	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	26;"	d
SFML_SOUNDFILEREADER_HPP	.\include\SFML\Audio\SoundFileReader.hpp	26;"	d
SFML_SOUNDFILEWRITERFLAC_HPP	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	26;"	d
SFML_SOUNDFILEWRITEROGG_HPP	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	26;"	d
SFML_SOUNDFILEWRITERWAV_HPP	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	26;"	d
SFML_SOUNDFILEWRITER_HPP	.\dep\SFML\include\SFML\Audio\SoundFileWriter.hpp	26;"	d
SFML_SOUNDFILEWRITER_HPP	.\include\SFML\Audio\SoundFileWriter.hpp	26;"	d
SFML_SOUNDRECORDER_HPP	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	26;"	d
SFML_SOUNDRECORDER_HPP	.\include\SFML\Audio\SoundRecorder.hpp	26;"	d
SFML_SOUNDSOURCE_HPP	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	26;"	d
SFML_SOUNDSOURCE_HPP	.\include\SFML\Audio\SoundSource.hpp	26;"	d
SFML_SOUNDSTREAM_HPP	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	26;"	d
SFML_SOUNDSTREAM_HPP	.\include\SFML\Audio\SoundStream.hpp	26;"	d
SFML_SOUND_HPP	.\dep\SFML\include\SFML\Audio\Sound.hpp	26;"	d
SFML_SOUND_HPP	.\include\SFML\Audio\Sound.hpp	26;"	d
SFML_SPRITE_HPP	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	26;"	d
SFML_SPRITE_HPP	.\include\SFML\Graphics\Sprite.hpp	26;"	d
SFML_STRING_HPP	.\dep\SFML\include\SFML\System\String.hpp	26;"	d
SFML_STRING_HPP	.\include\SFML\System\String.hpp	26;"	d
SFML_SYSTEM_ANDROID	.\dep\SFML\include\SFML\Config.hpp	77;"	d
SFML_SYSTEM_ANDROID	.\include\SFML\Config.hpp	77;"	d
SFML_SYSTEM_API	.\dep\SFML\include\SFML\System\Export.hpp	39;"	d
SFML_SYSTEM_API	.\dep\SFML\include\SFML\System\Export.hpp	43;"	d
SFML_SYSTEM_API	.\include\SFML\System\Export.hpp	39;"	d
SFML_SYSTEM_API	.\include\SFML\System\Export.hpp	43;"	d
SFML_SYSTEM_EXPORT_HPP	.\dep\SFML\include\SFML\System\Export.hpp	26;"	d
SFML_SYSTEM_EXPORT_HPP	.\include\SFML\System\Export.hpp	26;"	d
SFML_SYSTEM_FREEBSD	.\dep\SFML\include\SFML\Config.hpp	87;"	d
SFML_SYSTEM_FREEBSD	.\include\SFML\Config.hpp	87;"	d
SFML_SYSTEM_HPP	.\dep\SFML\include\SFML\System.hpp	26;"	d
SFML_SYSTEM_HPP	.\include\SFML\System.hpp	26;"	d
SFML_SYSTEM_IOS	.\dep\SFML\include\SFML\Config.hpp	57;"	d
SFML_SYSTEM_IOS	.\include\SFML\Config.hpp	57;"	d
SFML_SYSTEM_LINUX	.\dep\SFML\include\SFML\Config.hpp	82;"	d
SFML_SYSTEM_LINUX	.\include\SFML\Config.hpp	82;"	d
SFML_SYSTEM_MACOS	.\dep\SFML\include\SFML\Config.hpp	62;"	d
SFML_SYSTEM_MACOS	.\include\SFML\Config.hpp	62;"	d
SFML_SYSTEM_WINDOWS	.\dep\SFML\include\SFML\Config.hpp	44;"	d
SFML_SYSTEM_WINDOWS	.\include\SFML\Config.hpp	44;"	d
SFML_TCPLISTENER_HPP	.\dep\SFML\include\SFML\Network\TcpListener.hpp	26;"	d
SFML_TCPLISTENER_HPP	.\include\SFML\Network\TcpListener.hpp	26;"	d
SFML_TCPSOCKET_HPP	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	26;"	d
SFML_TCPSOCKET_HPP	.\include\SFML\Network\TcpSocket.hpp	26;"	d
SFML_TEXTURESAVER_HPP	.\dep\SFML\src\SFML\Graphics\TextureSaver.hpp	26;"	d
SFML_TEXTURE_HPP	.\dep\SFML\include\SFML\Graphics\Texture.hpp	26;"	d
SFML_TEXTURE_HPP	.\include\SFML\Graphics\Texture.hpp	26;"	d
SFML_TEXT_HPP	.\dep\SFML\include\SFML\Graphics\Text.hpp	26;"	d
SFML_TEXT_HPP	.\include\SFML\Graphics\Text.hpp	26;"	d
SFML_THREADIMPL_HPP	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	26;"	d
SFML_THREADIMPL_HPP	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	26;"	d
SFML_THREADLOCALIMPL_HPP	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.hpp	26;"	d
SFML_THREADLOCALIMPL_HPP	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.hpp	26;"	d
SFML_THREADLOCALPTR_HPP	.\dep\SFML\include\SFML\System\ThreadLocalPtr.hpp	26;"	d
SFML_THREADLOCALPTR_HPP	.\include\SFML\System\ThreadLocalPtr.hpp	26;"	d
SFML_THREADLOCAL_HPP	.\dep\SFML\include\SFML\System\ThreadLocal.hpp	26;"	d
SFML_THREADLOCAL_HPP	.\include\SFML\System\ThreadLocal.hpp	26;"	d
SFML_THREAD_HPP	.\dep\SFML\include\SFML\System\Thread.hpp	26;"	d
SFML_THREAD_HPP	.\include\SFML\System\Thread.hpp	26;"	d
SFML_TIME_HPP	.\dep\SFML\include\SFML\System\Time.hpp	26;"	d
SFML_TIME_HPP	.\include\SFML\System\Time.hpp	26;"	d
SFML_TOUCH_HPP	.\dep\SFML\include\SFML\Window\Touch.hpp	26;"	d
SFML_TOUCH_HPP	.\include\SFML\Window\Touch.hpp	26;"	d
SFML_TRANSFORMABLE_HPP	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	26;"	d
SFML_TRANSFORMABLE_HPP	.\include\SFML\Graphics\Transformable.hpp	26;"	d
SFML_TRANSFORM_HPP	.\dep\SFML\include\SFML\Graphics\Transform.hpp	26;"	d
SFML_TRANSFORM_HPP	.\include\SFML\Graphics\Transform.hpp	26;"	d
SFML_UDPSOCKET_HPP	.\dep\SFML\include\SFML\Network\UdpSocket.hpp	26;"	d
SFML_UDPSOCKET_HPP	.\include\SFML\Network\UdpSocket.hpp	26;"	d
SFML_UTF_HPP	.\dep\SFML\include\SFML\System\Utf.hpp	26;"	d
SFML_UTF_HPP	.\include\SFML\System\Utf.hpp	26;"	d
SFML_VECTOR2_HPP	.\dep\SFML\include\SFML\System\Vector2.hpp	26;"	d
SFML_VECTOR2_HPP	.\include\SFML\System\Vector2.hpp	26;"	d
SFML_VECTOR3_HPP	.\dep\SFML\include\SFML\System\Vector3.hpp	26;"	d
SFML_VECTOR3_HPP	.\include\SFML\System\Vector3.hpp	26;"	d
SFML_VERSION_MAJOR	.\dep\SFML\include\SFML\Config.hpp	32;"	d
SFML_VERSION_MAJOR	.\include\SFML\Config.hpp	32;"	d
SFML_VERSION_MINOR	.\dep\SFML\include\SFML\Config.hpp	33;"	d
SFML_VERSION_MINOR	.\include\SFML\Config.hpp	33;"	d
SFML_VERSION_PATCH	.\dep\SFML\include\SFML\Config.hpp	34;"	d
SFML_VERSION_PATCH	.\include\SFML\Config.hpp	34;"	d
SFML_VERTEXARRAY_HPP	.\dep\SFML\include\SFML\Graphics\VertexArray.hpp	26;"	d
SFML_VERTEXARRAY_HPP	.\include\SFML\Graphics\VertexArray.hpp	26;"	d
SFML_VERTEX_HPP	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	26;"	d
SFML_VERTEX_HPP	.\include\SFML\Graphics\Vertex.hpp	26;"	d
SFML_VIDEOMODEIMPL_HPP	.\dep\SFML\src\SFML\Window\VideoModeImpl.hpp	26;"	d
SFML_VIDEOMODE_HPP	.\dep\SFML\include\SFML\Window\VideoMode.hpp	26;"	d
SFML_VIDEOMODE_HPP	.\include\SFML\Window\VideoMode.hpp	26;"	d
SFML_VIEW_HPP	.\dep\SFML\include\SFML\Graphics\View.hpp	26;"	d
SFML_VIEW_HPP	.\include\SFML\Graphics\View.hpp	26;"	d
SFML_WGLCONTEXT_HPP	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	26;"	d
SFML_WINDOWHANDLE_HPP	.\dep\SFML\include\SFML\Window\WindowHandle.hpp	26;"	d
SFML_WINDOWHANDLE_HPP	.\include\SFML\Window\WindowHandle.hpp	26;"	d
SFML_WINDOWIMPLANDROID_HPP	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	26;"	d
SFML_WINDOWIMPLCOCOA_HPP	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	27;"	d
SFML_WINDOWIMPLUIKIT_HPP	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	26;"	d
SFML_WINDOWIMPLWIN32_HPP	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	26;"	d
SFML_WINDOWIMPLX11_HPP	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	26;"	d
SFML_WINDOWIMPL_HPP	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	26;"	d
SFML_WINDOWSTYLE_HPP	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	26;"	d
SFML_WINDOWSTYLE_HPP	.\include\SFML\Window\WindowStyle.hpp	26;"	d
SFML_WINDOW_API	.\dep\SFML\include\SFML\Window\Export.hpp	39;"	d
SFML_WINDOW_API	.\dep\SFML\include\SFML\Window\Export.hpp	43;"	d
SFML_WINDOW_API	.\include\SFML\Window\Export.hpp	39;"	d
SFML_WINDOW_API	.\include\SFML\Window\Export.hpp	43;"	d
SFML_WINDOW_EXPORT_HPP	.\dep\SFML\include\SFML\Window\Export.hpp	26;"	d
SFML_WINDOW_EXPORT_HPP	.\include\SFML\Window\Export.hpp	26;"	d
SFML_WINDOW_HPP	.\dep\SFML\include\SFML\Window\Window.hpp	26;"	d
SFML_WINDOW_HPP	.\include\SFML\Window\Window.hpp	26;"	d
SFView	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^SFML_DECLARE_OBJC_CLASS(SFView);$/;"	v
SFView	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^SFML_DECLARE_OBJC_CLASS(SFView);$/;"	v
SFViewController	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^SFML_DECLARE_OBJC_CLASS(SFViewController);$/;"	v
SF_POINTER_C_GENERATED_HEADER_GLXWIN_HPP	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	26;"	d
SF_POINTER_C_GENERATED_HEADER_OPENGL_HPP	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	26;"	d
SF_POINTER_C_GENERATED_HEADER_WINDOWSGL_HPP	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	26;"	d
SHIFT	.\src\include\trmclr.hpp	/^    static const uint32_t SHIFT = STYLE_SHIFT * ATTRIBUTE;$/;"	m	struct:trmclr::Attribute
SHIFT	.\src\include\trmclr.hpp	/^    static const uint32_t SHIFT = STYLE_SHIFT * BACKGROUND;$/;"	m	struct:trmclr::Background
SHIFT	.\src\include\trmclr.hpp	/^    static const uint32_t SHIFT = STYLE_SHIFT * FOREGROUND;$/;"	m	struct:trmclr::Foreground
SIMULATE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	32;"	d	file:
SIMULATE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	57;"	d	file:
SIMULATE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	27;"	d	file:
SIMULATE_ID	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	52;"	d	file:
SIMULATE_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	34;"	d	file:
SIMULATE_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	59;"	d	file:
SIMULATE_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	29;"	d	file:
SIMULATE_VERSION_MAJOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	54;"	d	file:
SIMULATE_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	35;"	d	file:
SIMULATE_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	60;"	d	file:
SIMULATE_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	30;"	d	file:
SIMULATE_VERSION_MINOR	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	55;"	d	file:
SIZE	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	17;"	d	file:
SIZELENMOD	.\dep\Lua\src\lstrlib.c	818;"	d	file:
SIZETIMEFMT	.\dep\Lua\src\loslib.c	279;"	d	file:
SIZE_A	.\dep\Lua\src\lopcodes.h	41;"	d
SIZE_A	.\include\lua\lopcodes.h	41;"	d
SIZE_Ax	.\dep\Lua\src\lopcodes.h	42;"	d
SIZE_Ax	.\include\lua\lopcodes.h	42;"	d
SIZE_B	.\dep\Lua\src\lopcodes.h	39;"	d
SIZE_B	.\include\lua\lopcodes.h	39;"	d
SIZE_Bx	.\dep\Lua\src\lopcodes.h	40;"	d
SIZE_Bx	.\include\lua\lopcodes.h	40;"	d
SIZE_C	.\dep\Lua\src\lopcodes.h	38;"	d
SIZE_C	.\include\lua\lopcodes.h	38;"	d
SIZE_OP	.\dep\Lua\src\lopcodes.h	44;"	d
SIZE_OP	.\include\lua\lopcodes.h	44;"	d
SKILL_TREE_NODE_HEIGHT	.\src\include\Common.h	12;"	d
SKILL_TREE_NODE_WIDTH	.\src\include\Common.h	11;"	d
SOL_5_0_0_H	.\include\sol\single\sol\sol.hpp	1994;"	d
SOL_5_0_0_H	.\include\sol\sol\compatibility\5.0.0.h	23;"	d
SOL_5_1_0_H	.\include\sol\single\sol\sol.hpp	1845;"	d
SOL_5_1_0_H	.\include\sol\sol\compatibility\5.1.0.h	23;"	d
SOL_5_X_X_H	.\include\sol\single\sol\sol.hpp	2019;"	d
SOL_5_X_X_H	.\include\sol\sol\compatibility\5.x.x.h	23;"	d
SOL_5_X_X_INL	.\include\sol\single\sol\sol.hpp	2057;"	d
SOL_BIND_TRAITS_HPP	.\include\sol\sol\bind_traits.hpp	23;"	d
SOL_CALL_HPP	.\include\sol\sol\call.hpp	23;"	d
SOL_CHECK_ARGUMENTS	.\include\sol\test_coroutines.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_customizations.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_functions.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_overflow.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_simple_usertypes.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_strings.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_tables.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\test_usertypes.cpp	1;"	d	file:
SOL_CHECK_ARGUMENTS	.\include\sol\tests.cpp	2;"	d	file:
SOL_COMPATIBILITY_HPP	.\include\sol\sol\compatibility.hpp	23;"	d
SOL_COROUTINE_HPP	.\include\sol\sol\coroutine.hpp	23;"	d
SOL_DEBUG_HPP	.\include\sol\sol\debug.hpp	23;"	d
SOL_DEMANGLE_HPP	.\include\sol\sol\demangle.hpp	23;"	d
SOL_DEPRECATED	.\include\sol\single\sol\sol.hpp	8825;"	d
SOL_DEPRECATED	.\include\sol\sol\deprecate.hpp	27;"	d
SOL_DEPRECATED	.\include\sol\sol\deprecate.hpp	29;"	d
SOL_DEPRECATED	.\include\sol\sol\deprecate.hpp	31;"	d
SOL_DEPRECATE_HPP	.\include\sol\sol\deprecate.hpp	23;"	d
SOL_ERROR_HPP	.\include\sol\sol\error.hpp	23;"	d
SOL_FUNCTION_HPP	.\include\sol\sol\function.hpp	23;"	d
SOL_FUNCTION_RESULT_HPP	.\include\sol\sol\function_result.hpp	23;"	d
SOL_FUNCTION_TYPES_CORE_HPP	.\include\sol\sol\function_types_core.hpp	23;"	d
SOL_FUNCTION_TYPES_HPP	.\include\sol\sol\function_types.hpp	23;"	d
SOL_FUNCTION_TYPES_OVERLOAD_HPP	.\include\sol\sol\function_types_overloaded.hpp	23;"	d
SOL_FUNCTION_TYPES_STATEFUL_HPP	.\include\sol\sol\function_types_stateful.hpp	23;"	d
SOL_FUNCTION_TYPES_STATELESS_HPP	.\include\sol\sol\function_types_stateless.hpp	23;"	d
SOL_FUNCTION_TYPES_TEMPLATED_HPP	.\include\sol\sol\function_types_templated.hpp	23;"	d
SOL_HPP	.\include\sol\sol.hpp	23;"	d
SOL_INHERITANCE_HPP	.\include\sol\sol\inheritance.hpp	23;"	d
SOL_LOAD_RESULT_HPP	.\include\sol\sol\load_result.hpp	23;"	d
SOL_LUAJIT	.\include\sol\single\sol\sol.hpp	1766;"	d
SOL_LUAJIT	.\include\sol\sol\compatibility\version.hpp	29;"	d
SOL_LUA_VERSION	.\include\sol\single\sol\sol.hpp	1771;"	d
SOL_LUA_VERSION	.\include\sol\sol\compatibility\version.hpp	34;"	d
SOL_LUA_VERSION	.\include\sol\sol\compatibility\version.hpp	36;"	d
SOL_LUA_VERSION	.\include\sol\sol\compatibility\version.hpp	39;"	d
SOL_LUA_VERSION	.\include\sol\sol\compatibility\version.hpp	42;"	d
SOL_NO_EXCEPTIONS	.\include\sol\single\sol\sol.hpp	1793;"	d
SOL_NO_EXCEPTIONS	.\include\sol\sol\compatibility\version.hpp	60;"	d
SOL_NO_EXCEPTIONS	.\include\sol\sol\compatibility\version.hpp	87;"	d
SOL_NO_RTTI	.\include\sol\single\sol\sol.hpp	1799;"	d
SOL_NO_RTTI	.\include\sol\sol\compatibility\version.hpp	66;"	d
SOL_NO_RTTI	.\include\sol\sol\compatibility\version.hpp	93;"	d
SOL_OBJECT_HPP	.\include\sol\sol\object.hpp	23;"	d
SOL_OPTIONAL_HPP	.\include\sol\sol\optional.hpp	23;"	d
SOL_OVERLOAD_HPP	.\include\sol\sol\overload.hpp	23;"	d
SOL_PROPERTY_HPP	.\include\sol\sol\property.hpp	23;"	d
SOL_PROTECTED_FUNCTION_HPP	.\include\sol\sol\protected_function.hpp	23;"	d
SOL_PROTECTED_FUNCTION_RESULT_HPP	.\include\sol\sol\protected_function_result.hpp	23;"	d
SOL_PROTECT_HPP	.\include\sol\sol\protect.hpp	23;"	d
SOL_PROXY_BASE_HPP	.\include\sol\sol\proxy_base.hpp	23;"	d
SOL_PROXY_HPP	.\include\sol\sol\proxy.hpp	23;"	d
SOL_RAII_HPP	.\include\sol\sol\raii.hpp	23;"	d
SOL_REFERENCE_HPP	.\include\sol\sol\reference.hpp	23;"	d
SOL_RESOLVE_HPP	.\include\sol\sol\resolve.hpp	23;"	d
SOL_SAFE_USERTYPE	.\include\sol\single\sol\sol.hpp	1786;"	d
SOL_SAFE_USERTYPE	.\include\sol\single\sol\sol.hpp	1831;"	d
SOL_SAFE_USERTYPE	.\include\sol\sol\compatibility\version.hpp	101;"	d
SOL_SAFE_USERTYPE	.\include\sol\sol\compatibility\version.hpp	53;"	d
SOL_SAFE_USERTYPE	.\include\sol\sol\compatibility\version.hpp	80;"	d
SOL_SIMPLE_USERTYPE_METATABLE_HPP	.\include\sol\sol\simple_usertype_metatable.hpp	23;"	d
SOL_SINGLE_INCLUDE_HPP	.\include\sol\single\sol\sol.hpp	28;"	d
SOL_STACK_CHECK_GET_HPP	.\include\sol\sol\stack_check_get.hpp	23;"	d
SOL_STACK_CHECK_HPP	.\include\sol\sol\stack_check.hpp	23;"	d
SOL_STACK_CORE_HPP	.\include\sol\sol\stack_core.hpp	23;"	d
SOL_STACK_FIELD_HPP	.\include\sol\sol\stack_field.hpp	23;"	d
SOL_STACK_GET_HPP	.\include\sol\sol\stack_get.hpp	23;"	d
SOL_STACK_GUARD_HPP	.\include\sol\sol\stack_guard.hpp	23;"	d
SOL_STACK_HPP	.\include\sol\sol\stack.hpp	23;"	d
SOL_STACK_POP_HPP	.\include\sol\sol\stack_pop.hpp	23;"	d
SOL_STACK_PROBE_HPP	.\include\sol\sol\stack_probe.hpp	23;"	d
SOL_STACK_PROXY_HPP	.\include\sol\sol\stack_proxy.hpp	23;"	d
SOL_STACK_PUSH_HPP	.\include\sol\sol\stack_push.hpp	23;"	d
SOL_STACK_REFERENCE_HPP	.\include\sol\sol\stack_reference.hpp	23;"	d
SOL_STATE_HPP	.\include\sol\sol\state.hpp	23;"	d
SOL_STATE_VIEW_HPP	.\include\sol\sol\state_view.hpp	23;"	d
SOL_TABLE_CORE_HPP	.\include\sol\sol\table_core.hpp	23;"	d
SOL_TABLE_HPP	.\include\sol\sol\table.hpp	23;"	d
SOL_TABLE_ITERATOR_HPP	.\include\sol\sol\table_iterator.hpp	23;"	d
SOL_THREAD_HPP	.\include\sol\sol\thread.hpp	23;"	d
SOL_TIE_HPP	.\include\sol\sol\tie.hpp	23;"	d
SOL_TRAITS_HPP	.\include\sol\sol\traits.hpp	23;"	d
SOL_TUPLE_HPP	.\include\sol\sol\tuple.hpp	23;"	d
SOL_TYPES_HPP	.\include\sol\sol\types.hpp	23;"	d
SOL_USERDATA_HPP	.\include\sol\sol\userdata.hpp	23;"	d
SOL_USERTYPE_HPP	.\include\sol\sol\usertype.hpp	23;"	d
SOL_USERTYPE_METATABLE_HPP	.\include\sol\sol\usertype_metatable.hpp	23;"	d
SOL_USERTYPE_TRAITS_HPP	.\include\sol\sol\usertype_traits.hpp	23;"	d
SOL_VARIADIC_ARGS_HPP	.\include\sol\sol\variadic_args.hpp	23;"	d
SOL_VERSION_HPP	.\include\sol\sol\compatibility\version.hpp	23;"	d
SOL_WRAPPER_HPP	.\include\sol\sol\wrapper.hpp	23;"	d
SOURCE_EXTENSIONS	.\.ycm_extra_conf.py	/^SOURCE_EXTENSIONS = [ '.cpp', '.cxx', '.cc', '.c', '.m', '.mm' ]$/;"	v
SPACEBIT	.\dep\Lua\src\lctype.h	42;"	d
SPACEBIT	.\include\lua\lctype.h	42;"	d
SPACECHARS	.\dep\Lua\src\lbaselib.c	46;"	d	file:
SPECIALS	.\dep\Lua\src\lstrlib.c	239;"	d	file:
SPHINXBUILD	.\include\sol\docs\make.bat	/^	set SPHINXBUILD=sphinx-build$/;"	v
SPHINXBUILD	.\include\sol\docs\make.bat	/^set SPHINXBUILD=python -m sphinx.__init__$/;"	v
SParser	.\dep\Lua\src\ldo.c	/^struct SParser {  \/* data to 'f_parser' *\/$/;"	s	file:
SS	.\dep\Lua\src\luac.c	392;"	d	file:
STBIDEF	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	403;"	d
STBIDEF	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	405;"	d
STBI_ASSERT	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	566;"	d
STBI_FREE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	624;"	d
STBI_HAS_LROTL	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	604;"	d
STBI_INCLUDE_STB_IMAGE_H	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	208;"	d
STBI_MALLOC	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	622;"	d
STBI_NEON	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	688;"	d
STBI_NOTUSED	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	598;"	d
STBI_NOTUSED	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	600;"	d
STBI_NO_BMP	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	524;"	d
STBI_NO_GIF	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	533;"	d
STBI_NO_HDR	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	536;"	d
STBI_NO_JPEG	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	518;"	d
STBI_NO_PIC	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	539;"	d
STBI_NO_PNG	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	521;"	d
STBI_NO_PNM	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	542;"	d
STBI_NO_PSD	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	527;"	d
STBI_NO_SIMD	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	632;"	d
STBI_NO_TGA	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	530;"	d
STBI_NO_ZLIB	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	547;"	d
STBI_REALLOC	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	623;"	d
STBI_SIMD_ALIGN	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	662;"	d
STBI_SIMD_ALIGN	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	670;"	d
STBI_SIMD_ALIGN	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	694;"	d
STBI_SIMD_ALIGN	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	698;"	d
STBI_SSE2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	636;"	d
STBI_VERSION	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	384;"	d
STBI__BYTECAST	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1206;"	d
STBI__F_avg	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_avg=3,$/;"	e	enum:__anon105
STBI__F_avg_first	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_avg_first,$/;"	e	enum:__anon105
STBI__F_none	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_none=0,$/;"	e	enum:__anon105
STBI__F_paeth	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_paeth=4,$/;"	e	enum:__anon105
STBI__F_paeth_first	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_paeth_first$/;"	e	enum:__anon105
STBI__F_sub	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_sub=1,$/;"	e	enum:__anon105
STBI__F_up	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__F_up=2,$/;"	e	enum:__anon105
STBI__HDR_BUFLEN	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	5691;"	d
STBI__IDCT_1D	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1814;"	d
STBI__MARKER_none	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2299;"	d
STBI__PNG_TYPE	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	4195;"	d
STBI__RESTART	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2316;"	d
STBI__SCAN_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__SCAN_header$/;"	e	enum:__anon96
STBI__SCAN_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__SCAN_load=0,$/;"	e	enum:__anon96
STBI__SCAN_type	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI__SCAN_type,$/;"	e	enum:__anon96
STBI__ZFAST_BITS	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3338;"	d
STBI__ZFAST_MASK	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	3339;"	d
STBI_default	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI_default = 0, \/\/ only used for req_comp$/;"	e	enum:__anon93
STBI_grey	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI_grey       = 1,$/;"	e	enum:__anon93
STBI_grey_alpha	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI_grey_alpha = 2,$/;"	e	enum:__anon93
STBI_rgb	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI_rgb        = 3,$/;"	e	enum:__anon93
STBI_rgb_alpha	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   STBI_rgb_alpha  = 4$/;"	e	enum:__anon93
STB_IMAGE_IMPLEMENTATION	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	31;"	d	file:
STB_IMAGE_WRITE_IMPLEMENTATION	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	33;"	d	file:
STEPMULADJ	.\dep\Lua\src\lgc.c	52;"	d	file:
STITCH_CLARA_CLOSE_NAMESPACE	.\include\sol\Catch\include\external\clara.h	1025;"	d
STITCH_CLARA_CLOSE_NAMESPACE	.\include\sol\Catch\include\external\clara.h	17;"	d
STITCH_CLARA_CLOSE_NAMESPACE	.\include\sol\Catch\include\external\clara.h	19;"	d
STITCH_CLARA_CLOSE_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	3583;"	d
STITCH_CLARA_CLOSE_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	4566;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\include\external\clara.h	1024;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\include\external\clara.h	16;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\include\internal\catch_clara.h	21;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\include\internal\catch_clara.h	23;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	3572;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	3582;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	4565;"	d
STITCH_CLARA_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	4569;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	.\include\sol\Catch\include\external\clara.h	180;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	.\include\sol\Catch\include\external\clara.h	23;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	3588;"	d
STITCH_TBC_TEXT_FORMAT_OPEN_NAMESPACE	.\include\sol\Catch\single_include\catch.hpp	3738;"	d
STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE	.\include\sol\Catch\include\external\clara.h	/^namespace STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE {$/;"	n
STRCACHE_M	.\dep\Lua\src\llimits.h	199;"	d
STRCACHE_M	.\include\lua\llimits.h	199;"	d
STRCACHE_N	.\dep\Lua\src\llimits.h	198;"	d
STRCACHE_N	.\include\lua\llimits.h	198;"	d
STREAMSET	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	108;"	d
STYLE_SHIFT	.\src\include\trmclr.hpp	/^static const uint32_t STYLE_SHIFT =  std::numeric_limits<uint32_t>::digits \/ N_STYLE_TYPES;$/;"	m	namespace:trmclr
SUCCEED	.\include\sol\Catch\include\catch.hpp	174;"	d
SUCCEED	.\include\sol\Catch\include\catch.hpp	182;"	d
SUPUNSIGNED	.\include\sol\single\sol\sol.hpp	2474;"	d
SZINT	.\dep\Lua\src\lstrlib.c	1118;"	d	file:
Safe	.\include\sol\Optional\test_type_traits.cpp	/^  Safe( Safe const & ){}$/;"	f	struct:std::experimental::Safe
Safe	.\include\sol\Optional\test_type_traits.cpp	/^  Safe(){}$/;"	f	struct:std::experimental::Safe
Safe	.\include\sol\Optional\test_type_traits.cpp	/^struct Safe$/;"	s	namespace:std::experimental	file:
SafeBool	.\include\sol\Catch\include\internal\catch_common.h	/^    class SafeBool {$/;"	c	namespace:Catch
SafeBool	.\include\sol\Catch\single_include\catch.hpp	/^    class SafeBool {$/;"	c	namespace:Catch
ScopedElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            ScopedElement( ScopedElement const& other )$/;"	f	class:Catch::XmlWriter::ScopedElement
ScopedElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            ScopedElement( XmlWriter* writer )$/;"	f	class:Catch::XmlWriter::ScopedElement
ScopedElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        class ScopedElement {$/;"	c	class:Catch::XmlWriter
ScopedMessage	.\include\sol\Catch\include\internal\catch_message.h	/^    class ScopedMessage {$/;"	c	namespace:Catch
ScopedMessage	.\include\sol\Catch\include\internal\catch_message.hpp	/^    ScopedMessage::ScopedMessage( MessageBuilder const& builder )$/;"	f	class:Catch::ScopedMessage
ScopedMessage	.\include\sol\Catch\include\internal\catch_message.hpp	/^    ScopedMessage::ScopedMessage( ScopedMessage const& other )$/;"	f	class:Catch::ScopedMessage
ScopedXcbPtr	.\dep\SFML\src\SFML\Window\Unix\ScopedXcbPtr.hpp	/^class ScopedXcbPtr$/;"	c	namespace:sf::priv
Se	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_compress_struct
Se	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_decompress_struct
Se	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se;			\/* progressive JPEG spectral selection parms *\/$/;"	m	struct:__anon82
SecondaryText	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            SecondaryText = LightGrey,$/;"	e	enum:Catch::Colour::Code
Section	.\include\sol\Catch\include\internal\catch_section.h	/^    class Section : NonCopyable {$/;"	c	namespace:Catch
Section	.\include\sol\Catch\include\internal\catch_section.hpp	/^    Section::Section( SectionInfo const& info )$/;"	f	class:Catch::Section
SectionEndInfo	.\include\sol\Catch\include\internal\catch_section_info.h	/^        SectionEndInfo( SectionInfo const& _sectionInfo, Counts const& _prevAssertions, double _durationInSeconds )$/;"	f	struct:Catch::SectionEndInfo
SectionEndInfo	.\include\sol\Catch\include\internal\catch_section_info.h	/^    struct SectionEndInfo {$/;"	s	namespace:Catch
SectionInfo	.\include\sol\Catch\include\internal\catch_section.hpp	/^    SectionInfo::SectionInfo$/;"	f	class:Catch::SectionInfo
SectionInfo	.\include\sol\Catch\include\internal\catch_section_info.h	/^    struct SectionInfo {$/;"	s	namespace:Catch
SectionNode	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            explicit SectionNode( SectionStats const& _stats ) : stats( _stats ) {}$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode
SectionNode	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        struct SectionNode : SharedImpl<> {$/;"	s	struct:Catch::CumulativeReporterBase
SectionStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        SectionStats(   SectionInfo const& _sectionInfo,$/;"	f	struct:Catch::SectionStats
SectionStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct SectionStats {$/;"	s	namespace:Catch
SectionTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        SectionTracker( std::string const& name, TrackerContext& ctx, ITracker* parent )$/;"	f	class:Catch::TestCaseTracking::SectionTracker
SectionTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    class SectionTracker : public TrackerBase {$/;"	c	namespace:Catch::TestCaseTracking
SemInfo	.\dep\Lua\src\llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon5
SemInfo	.\include\lua\llex.h	/^} SemInfo;  \/* semantics information *\/$/;"	t	typeref:union:__anon157
SemiColon	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        SemiColon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
SemiColon	.\include\SFML\Window\Keyboard.hpp	/^        SemiColon,    \/\/\/< The ; key$/;"	e	enum:sf::Keyboard::Key
Sensor	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^class SFML_WINDOW_API Sensor$/;"	c	namespace:sf
Sensor	.\include\SFML\Window\Sensor.hpp	/^class SFML_WINDOW_API Sensor$/;"	c	namespace:sf
SensorChanged	.\dep\SFML\include\SFML\Window\Event.hpp	/^        SensorChanged,          \/\/\/< A sensor value changed (data in event.sensor)$/;"	e	enum:sf::Event::EventType
SensorChanged	.\include\SFML\Window\Event.hpp	/^        SensorChanged,          \/\/\/< A sensor value changed (data in event.sensor)$/;"	e	enum:sf::Event::EventType
SensorEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct SensorEvent$/;"	s	class:sf::Event
SensorEvent	.\include\SFML\Window\Event.hpp	/^    struct SensorEvent$/;"	s	class:sf::Event
SensorImpl	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	/^class SensorImpl$/;"	c	namespace:sf::priv
SensorImpl	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.hpp	/^class SensorImpl$/;"	c	namespace:sf::priv
SensorImpl	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.hpp	/^class SensorImpl$/;"	c	namespace:sf::priv
SensorImpl	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.hpp	/^class SensorImpl$/;"	c	namespace:sf::priv
SensorImpl	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	/^class SensorImpl$/;"	c	namespace:sf::priv
SensorManager	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^SensorManager::SensorManager()$/;"	f	class:sf::priv::SensorManager
SensorManager	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^class SensorManager : NonCopyable$/;"	c	namespace:sf::priv
SerifStyle	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Byte    SerifStyle;$/;"	m	struct:TT_PCLT_
ServiceNotAvailable	.\dep\SFML\include\SFML\Network\Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded, in maintenance, ...)$/;"	e	enum:sf::Http::Response::Status
ServiceNotAvailable	.\include\SFML\Network\Http.hpp	/^            ServiceNotAvailable = 503, \/\/\/< The server is temporarily unavailable (overloaded, in maintenance, ...)$/;"	e	enum:sf::Http::Response::Status
ServiceReady	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReady	.\include\SFML\Network\Ftp.hpp	/^            ServiceReady          = 220, \/\/\/< Service ready for new user$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceReadySoon	.\include\SFML\Network\Ftp.hpp	/^            ServiceReadySoon            = 120, \/\/\/< Service ready in N minutes$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control connection$/;"	e	enum:sf::Ftp::Response::Status
ServiceUnavailable	.\include\SFML\Network\Ftp.hpp	/^            ServiceUnavailable        = 421, \/\/\/< Service not available, closing control connection$/;"	e	enum:sf::Ftp::Response::Status
Session	.\include\sol\Catch\include\catch_session.hpp	/^        Session()$/;"	f	class:Catch::Session
Session	.\include\sol\Catch\include\catch_session.hpp	/^    class Session : NonCopyable {$/;"	c	namespace:Catch
Shader	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shader	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^Shader::Shader() :$/;"	f	class:sf::Shader
Shader	.\include\SFML\Graphics\Shader.hpp	/^class SFML_GRAPHICS_API Shader : GlResource, NonCopyable$/;"	c	namespace:sf
Shape	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
Shape	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^Shape::Shape() :$/;"	f	class:sf::Shape
Shape	.\include\SFML\Graphics\Shape.hpp	/^class SFML_GRAPHICS_API Shape : public Drawable, public Transformable$/;"	c	namespace:sf
SharedImpl	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
SharedImpl	.\include\sol\Catch\single_include\catch.hpp	/^        SharedImpl() : m_rc( 0 ){}$/;"	f	struct:Catch::SharedImpl
SharedImpl	.\include\sol\Catch\single_include\catch.hpp	/^    struct SharedImpl : T {$/;"	s	namespace:Catch
Ship	.\src\include\Ship.h	/^class Ship : public Unit {$/;"	c
Ship	.\src\src\Ship.cpp	/^Ship::Ship() {$/;"	f	class:Ship
Ship	.\src\src\Ship.cpp	/^Ship::Ship(Map* map, float x, float y, int collRadius, Stats s)$/;"	f	class:Ship
ShortOpt	.\include\sol\Catch\include\external\clara.h	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	e	enum:Clara::Parser::Token::Type
ShouldFail	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^            ShouldFail = 1 << 2,$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
ShowDurations	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct ShowDurations { enum OrNot {$/;"	s	namespace:Catch
Size	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket
Size	.\include\SFML\Network\TcpSocket.hpp	/^        Uint32            Size;         \/\/\/< Data of packet size$/;"	m	struct:sf::TcpSocket::PendingPacket
SizeEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeEvent	.\include\SFML\Window\Event.hpp	/^    struct SizeEvent$/;"	s	class:sf::Event
SizeReceived	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket
SizeReceived	.\include\SFML\Network\TcpSocket.hpp	/^        std::size_t       SizeReceived; \/\/\/< Number of size bytes received so far$/;"	m	struct:sf::TcpSocket::PendingPacket
SkillNode	.\src\include\SkillTree.h	/^class SkillNode {$/;"	c
SkillNode	.\src\src\SkillTree.cpp	/^SkillNode::SkillNode() {$/;"	f	class:SkillNode
SkillNode	.\src\src\SkillTree.cpp	/^SkillNode::SkillNode(SkillNode* parent, Perk* perk) : $/;"	f	class:SkillNode
SkillTree	.\src\include\SkillTree.h	/^class SkillTree : public sf::Drawable {$/;"	c
SkillTree	.\src\src\SkillTree.cpp	/^SkillTree::SkillTree(Vector2 size) {$/;"	f	class:SkillTree
SkillTreeWindow	.\src\include\SkillTreeWindow.h	/^class SkillTreeWindow : public Window {$/;"	c
SkillTreeWindow	.\src\src\SkillTreeWindow.cpp	/^SkillTreeWindow::SkillTreeWindow(SkillTree* tree, Vector2 size) {$/;"	f	class:SkillTreeWindow
SkillTrees	.\src\include\SkillTree.h	/^namespace SkillTrees {$/;"	n
SkillTrees	.\src\src\SkillTree.cpp	/^namespace SkillTrees {$/;"	n	file:
Slash	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Slash	.\include\SFML\Window\Keyboard.hpp	/^        Slash,        \/\/\/< The \/ key$/;"	e	enum:sf::Keyboard::Key
Socket	.\dep\SFML\include\SFML\Network\Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
Socket	.\dep\SFML\src\SFML\Network\Socket.cpp	/^Socket::Socket(Type type) :$/;"	f	class:sf::Socket
Socket	.\include\SFML\Network\Socket.hpp	/^class SFML_NETWORK_API Socket : NonCopyable$/;"	c	namespace:sf
SocketHandle	.\dep\SFML\include\SFML\Network\SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf
SocketHandle	.\include\SFML\Network\SocketHandle.hpp	/^    typedef UINT_PTR SocketHandle;$/;"	t	namespace:sf
SocketImpl	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.hpp	/^class SocketImpl$/;"	c	namespace:sf::priv
SocketImpl	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	/^class SocketImpl$/;"	c	namespace:sf::priv
SocketInitializer	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^    SocketInitializer()$/;"	f	struct:sf::priv::SocketInitializer
SocketInitializer	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^struct SocketInitializer$/;"	s	namespace:sf::priv	file:
SocketSelector	.\dep\SFML\include\SFML\Network\SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
SocketSelector	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^SocketSelector::SocketSelector() :$/;"	f	class:sf::SocketSelector
SocketSelector	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^SocketSelector::SocketSelector(const SocketSelector& copy) :$/;"	f	class:sf::SocketSelector
SocketSelector	.\include\SFML\Network\SocketSelector.hpp	/^class SFML_NETWORK_API SocketSelector$/;"	c	namespace:sf
SocketSelectorImpl	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^struct SocketSelector::SocketSelectorImpl$/;"	s	class:sf::SocketSelector	file:
Sound	.\dep\SFML\include\SFML\Audio\Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
Sound	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound::Sound() :$/;"	f	class:sf::Sound
Sound	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound::Sound(const Sound& copy) :$/;"	f	class:sf::Sound
Sound	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound::Sound(const SoundBuffer& buffer) :$/;"	f	class:sf::Sound
Sound	.\include\SFML\Audio\Sound.hpp	/^class SFML_AUDIO_API Sound : public SoundSource$/;"	c	namespace:sf
SoundBuffer	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer : AlResource$/;"	c	namespace:sf
SoundBuffer	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^SoundBuffer::SoundBuffer() :$/;"	f	class:sf::SoundBuffer
SoundBuffer	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^SoundBuffer::SoundBuffer(const SoundBuffer& copy) :$/;"	f	class:sf::SoundBuffer
SoundBuffer	.\include\SFML\Audio\SoundBuffer.hpp	/^class SFML_AUDIO_API SoundBuffer : AlResource$/;"	c	namespace:sf
SoundBufferRecorder	.\dep\SFML\include\SFML\Audio\SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundBufferRecorder	.\include\SFML\Audio\SoundBufferRecorder.hpp	/^class SFML_AUDIO_API SoundBufferRecorder : public SoundRecorder$/;"	c	namespace:sf
SoundFileFactory	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^class SFML_AUDIO_API SoundFileFactory$/;"	c	namespace:sf
SoundFileFactory	.\include\SFML\Audio\SoundFileFactory.hpp	/^class SFML_AUDIO_API SoundFileFactory$/;"	c	namespace:sf
SoundFileReader	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^class SFML_AUDIO_API SoundFileReader$/;"	c	namespace:sf
SoundFileReader	.\include\SFML\Audio\SoundFileReader.hpp	/^class SFML_AUDIO_API SoundFileReader$/;"	c	namespace:sf
SoundFileReaderFlac	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^SoundFileReaderFlac::SoundFileReaderFlac() :$/;"	f	class:sf::priv::SoundFileReaderFlac
SoundFileReaderFlac	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^class SoundFileReaderFlac : public SoundFileReader$/;"	c	namespace:sf::priv
SoundFileReaderOgg	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^SoundFileReaderOgg::SoundFileReaderOgg() :$/;"	f	class:sf::priv::SoundFileReaderOgg
SoundFileReaderOgg	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	/^class SoundFileReaderOgg : public SoundFileReader$/;"	c	namespace:sf::priv
SoundFileReaderWav	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^SoundFileReaderWav::SoundFileReaderWav() :$/;"	f	class:sf::priv::SoundFileReaderWav
SoundFileReaderWav	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^class SoundFileReaderWav : public SoundFileReader$/;"	c	namespace:sf::priv
SoundFileWriter	.\dep\SFML\include\SFML\Audio\SoundFileWriter.hpp	/^class SFML_AUDIO_API SoundFileWriter$/;"	c	namespace:sf
SoundFileWriter	.\include\SFML\Audio\SoundFileWriter.hpp	/^class SFML_AUDIO_API SoundFileWriter$/;"	c	namespace:sf
SoundFileWriterFlac	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^SoundFileWriterFlac::SoundFileWriterFlac() :$/;"	f	class:sf::priv::SoundFileWriterFlac
SoundFileWriterFlac	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^class SoundFileWriterFlac : public SoundFileWriter$/;"	c	namespace:sf::priv
SoundFileWriterOgg	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^SoundFileWriterOgg::SoundFileWriterOgg() :$/;"	f	class:sf::priv::SoundFileWriterOgg
SoundFileWriterOgg	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^class SoundFileWriterOgg : public SoundFileWriter$/;"	c	namespace:sf::priv
SoundFileWriterWav	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^SoundFileWriterWav::SoundFileWriterWav() :$/;"	f	class:sf::priv::SoundFileWriterWav
SoundFileWriterWav	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^class SoundFileWriterWav : public SoundFileWriter$/;"	c	namespace:sf::priv
SoundList	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer
SoundList	.\include\SFML\Audio\SoundBuffer.hpp	/^    typedef std::set<Sound*> SoundList; \/\/\/< Set of unique sound instances$/;"	t	class:sf::SoundBuffer
SoundRecorder	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder : AlResource$/;"	c	namespace:sf
SoundRecorder	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^SoundRecorder::SoundRecorder() :$/;"	f	class:sf::SoundRecorder
SoundRecorder	.\include\SFML\Audio\SoundRecorder.hpp	/^class SFML_AUDIO_API SoundRecorder : AlResource$/;"	c	namespace:sf
SoundSource	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^class SFML_AUDIO_API SoundSource : AlResource$/;"	c	namespace:sf
SoundSource	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^SoundSource::SoundSource()$/;"	f	class:sf::SoundSource
SoundSource	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^SoundSource::SoundSource(const SoundSource& copy)$/;"	f	class:sf::SoundSource
SoundSource	.\include\SFML\Audio\SoundSource.hpp	/^class SFML_AUDIO_API SoundSource : AlResource$/;"	c	namespace:sf
SoundStream	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
SoundStream	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^SoundStream::SoundStream() :$/;"	f	class:sf::SoundStream
SoundStream	.\include\SFML\Audio\SoundStream.hpp	/^class SFML_AUDIO_API SoundStream : public SoundSource$/;"	c	namespace:sf
SourceLineInfo	.\include\sol\Catch\include\internal\catch_common.h	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
SourceLineInfo	.\include\sol\Catch\include\internal\catch_common.hpp	/^    SourceLineInfo::SourceLineInfo( SourceLineInfo const& other )$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	.\include\sol\Catch\include\internal\catch_common.hpp	/^    SourceLineInfo::SourceLineInfo( char const* _file, std::size_t _line )$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	.\include\sol\Catch\include\internal\catch_common.hpp	/^    SourceLineInfo::SourceLineInfo() : line( 0 ){}$/;"	f	class:Catch::SourceLineInfo
SourceLineInfo	.\include\sol\Catch\single_include\catch.hpp	/^    struct SourceLineInfo {$/;"	s	namespace:Catch
Space	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
Space	.\include\SFML\Window\Keyboard.hpp	/^        Space,        \/\/\/< The Space key$/;"	e	enum:sf::Keyboard::Key
SpecialProperties	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        enum SpecialProperties{$/;"	g	struct:Catch::TestCaseInfo
Sprite	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
Sprite	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^Sprite::Sprite() :$/;"	f	class:sf::Sprite
Sprite	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^Sprite::Sprite(const Texture& texture) :$/;"	f	class:sf::Sprite
Sprite	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^Sprite::Sprite(const Texture& texture, const IntRect& rectangle) :$/;"	f	class:sf::Sprite
Sprite	.\include\SFML\Graphics\Sprite.hpp	/^class SFML_GRAPHICS_API Sprite : public Drawable, public Transformable$/;"	c	namespace:sf
SrcAlpha	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        SrcAlpha,         \/\/\/< (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcAlpha	.\include\SFML\Graphics\BlendMode.hpp	/^        SrcAlpha,         \/\/\/< (src.a, src.a, src.a, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcColor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        SrcColor,         \/\/\/< (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
SrcColor	.\include\SFML\Graphics\BlendMode.hpp	/^        SrcColor,         \/\/\/< (src.r, src.g, src.b, src.a)$/;"	e	enum:sf::BlendMode::Factor
Ss	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_compress_struct
Ss	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se, Ah, Al;		\/* progressive JPEG parameters for scan *\/$/;"	m	struct:jpeg_decompress_struct
Ss	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int Ss, Se;			\/* progressive JPEG spectral selection parms *\/$/;"	m	struct:__anon82
StartGroup	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void StartGroup( const std::string& ){}$/;"	f	class:Catch::iTchRunnerReporter
StartSection	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void StartSection( const std::string& sectionName, const std::string& description ) {}$/;"	f	class:Catch::iTchRunnerReporter
StartTestCase	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void StartTestCase( const TestCaseInfo& ){}$/;"	f	class:Catch::iTchRunnerReporter
StartTesting	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual void StartTesting$/;"	f	class:Catch::iTchRunnerReporter
StartsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            StartsWith( StartsWith const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            StartsWith( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        struct StartsWith : MatcherImpl<StartsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
StartsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers
StartsWith	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers
StartsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                StartsWith( NSString* substr ) : StringHolder( substr ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith
StartsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            StartsWith( NSString* substr ){ return Impl::NSStringMatchers::StartsWith( substr ); }$/;"	f	namespace:Catch::Matchers
StartsWith	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            struct StartsWith : StringHolder<StartsWith> {$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
StartsWith	.\include\sol\Catch\single_include\catch.hpp	/^            StartsWith( StartsWith const& other ) : m_data( other.m_data ){}$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	.\include\sol\Catch\single_include\catch.hpp	/^            StartsWith( std::string const& substr, CaseSensitive::Choice caseSensitivity = CaseSensitive::Yes )$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
StartsWith	.\include\sol\Catch\single_include\catch.hpp	/^        struct StartsWith : MatcherImpl<StartsWith, std::string> {$/;"	s	namespace:Catch::Matchers::Impl::StdString
StartsWith	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( const char* substr ) {$/;"	f	namespace:Catch::Matchers
StartsWith	.\include\sol\Catch\single_include\catch.hpp	/^    inline Impl::StdString::StartsWith  StartsWith( std::string const& substr ) {$/;"	f	namespace:Catch::Matchers
State	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        enum State {$/;"	g	class:Catch::RunningSection
State	.\include\sol\Optional\test_optional.cpp	/^enum  State $/;"	g	file:
StateManager	.\src\include\StateManager.h	/^class StateManager {$/;"	c
StateManager	.\src\src\StateManager.cpp	/^StateManager::StateManager() {$/;"	f	class:StateManager
StatesCache	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
StatesCache	.\include\SFML\Graphics\RenderTarget.hpp	/^    struct StatesCache$/;"	s	class:sf::RenderTarget
Stats	.\src\include\Stats.h	/^class Stats {$/;"	c
Stats	.\src\src\Stats.cpp	/^Stats::Stats(bool perc) : percent(perc)  {$/;"	f	class:Stats
Status	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	.\dep\SFML\include\SFML\Network\Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	.\dep\SFML\include\SFML\Network\Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
Status	.\include\SFML\Audio\SoundSource.hpp	/^    enum Status$/;"	g	class:sf::SoundSource
Status	.\include\SFML\Network\Ftp.hpp	/^        enum Status$/;"	g	class:sf::Ftp::Response
Status	.\include\SFML\Network\Http.hpp	/^        enum Status$/;"	g	class:sf::Http::Response
Status	.\include\SFML\Network\Socket.hpp	/^    enum Status$/;"	g	class:sf::Socket
StdString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    namespace StdString {$/;"	n	namespace:Catch::Matchers::Impl
StdString	.\include\sol\Catch\single_include\catch.hpp	/^    namespace StdString {$/;"	n	namespace:Catch::Matchers::Impl
StkId	.\dep\Lua\src\lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
StkId	.\include\lua\lobject.h	/^typedef TValue *StkId;  \/* index to stack elements *\/$/;"	t
Stopped	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
Stopped	.\include\SFML\Audio\SoundSource.hpp	/^        Stopped, \/\/\/< Sound is not playing$/;"	e	enum:sf::SoundSource::Status
StreamBufBase	.\include\sol\Catch\include\internal\catch_streambuf.h	/^    class StreamBufBase : public std::streambuf {$/;"	c	namespace:Catch
StreamBufImpl	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        StreamBufImpl() {$/;"	f	class:Catch::StreamBufImpl
StreamBufImpl	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    class StreamBufImpl : public StreamBufBase {$/;"	c	namespace:Catch
StreamEndStop	.\include\sol\Catch\include\internal\catch_common.h	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamEndStop	.\include\sol\Catch\single_include\catch.hpp	/^    struct StreamEndStop {$/;"	s	namespace:Catch
StreamRedirect	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        StreamRedirect( std::ostream& stream, std::string& targetString )$/;"	f	class:Catch::StreamRedirect
StreamRedirect	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^    class StreamRedirect {$/;"	c	namespace:Catch
StreamingReporterBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        StreamingReporterBase( ReporterConfig const& _config )$/;"	f	struct:Catch::StreamingReporterBase
StreamingReporterBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^    struct StreamingReporterBase : SharedImpl<IStreamingReporter> {$/;"	s	namespace:Catch
StrikeThrough	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^        StrikeThrough = 1 << 3  \/\/\/< Strike through characters$/;"	e	enum:sf::Text::Style
StrikeThrough	.\include\SFML\Graphics\Text.hpp	/^        StrikeThrough = 1 << 3  \/\/\/< Strike through characters$/;"	e	enum:sf::Text::Style
String	.\dep\SFML\include\SFML\System\String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String()$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(Uint32 utf32Char)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(char ansiChar, const std::locale& locale)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const String& copy) :$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const Uint32* utf32String)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const char* ansiString, const std::locale& locale)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const std::basic_string<Uint32>& utf32String) :$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const std::string& ansiString, const std::locale& locale)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const std::wstring& wideString)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(const wchar_t* wideString)$/;"	f	class:sf::String
String	.\dep\SFML\src\SFML\System\String.cpp	/^String::String(wchar_t wideChar)$/;"	f	class:sf::String
String	.\include\SFML\System\String.hpp	/^class SFML_SYSTEM_API String$/;"	c	namespace:sf
StringHolder	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                StringHolder( NSString* substr ) : m_substr( [substr copy] ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                StringHolder( StringHolder const& other ) : m_substr( [other.m_substr copy] ){}$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                StringHolder() {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
StringHolder	.\include\sol\Catch\include\internal\catch_objc.hpp	/^            struct StringHolder : MatcherImpl<MatcherT, NSString*>{$/;"	s	namespace:Catch::Matchers::Impl::NSStringMatchers
StringIO	.\include\sol\single.py	/^    from io import StringIO$/;"	i
StringMaker	.\include\sol\Catch\include\internal\catch_tostring.h	/^struct StringMaker :$/;"	s	namespace:Catch
StringMaker	.\include\sol\Catch\include\internal\catch_tostring.h	/^struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	.\include\sol\Catch\include\internal\catch_tostring.h	/^struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMaker	.\include\sol\Catch\projects\SelfTest\ToStringPair.cpp	/^    struct StringMaker<std::pair<T1,T2> > {$/;"	s	namespace:Catch	file:
StringMaker	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^    struct StringMaker<has_maker> {$/;"	s	namespace:Catch	file:
StringMaker	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^    struct StringMaker<has_maker_and_toString> {$/;"	s	namespace:Catch	file:
StringMaker	.\include\sol\Catch\single_include\catch.hpp	/^struct StringMaker :$/;"	s	namespace:Catch
StringMaker	.\include\sol\Catch\single_include\catch.hpp	/^struct StringMaker<R C::*> {$/;"	s	namespace:Catch
StringMaker	.\include\sol\Catch\single_include\catch.hpp	/^struct StringMaker<T*> {$/;"	s	namespace:Catch
StringMakerBase	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StringMakerBase	.\include\sol\Catch\single_include\catch.hpp	/^    struct StringMakerBase {$/;"	s	namespace:Catch::Detail
StringMakerBase	.\include\sol\Catch\single_include\catch.hpp	/^    struct StringMakerBase<true> {$/;"	s	namespace:Catch::Detail
StrokeWeight	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    StrokeWeight;$/;"	m	struct:TT_PCLT_
Style	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Style;$/;"	m	struct:TT_PCLT_
Style	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Style	.\include\SFML\Graphics\Text.hpp	/^    enum Style$/;"	g	class:sf::Text
Style	.\include\SFML\Window\WindowStyle.hpp	/^namespace Style$/;"	n	namespace:sf
Style	.\src\include\trmclr.hpp	/^    Style(uint32_t value) : _value(value) {}$/;"	f	struct:trmclr::Style
Style	.\src\include\trmclr.hpp	/^struct Style$/;"	s	namespace:trmclr
StyleTypes	.\src\include\trmclr.hpp	/^enum StyleTypes$/;"	g	namespace:trmclr
SubSections	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        typedef std::vector<RunningSection*> SubSections;$/;"	t	class:Catch::RunningSection
Subtract	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        Subtract \/\/\/< Pixel = Src * SrcFactor - Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Subtract	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Subtract,     \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Subtract	.\include\SFML\Graphics\BlendMode.hpp	/^        Subtract \/\/\/< Pixel = Src * SrcFactor - Dst * DstFactor$/;"	e	enum:sf::BlendMode::Equation
Subtract	.\include\SFML\Window\Keyboard.hpp	/^        Subtract,     \/\/\/< The - key$/;"	e	enum:sf::Keyboard::Key
Success	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Success = Green,$/;"	e	enum:Catch::Colour::Code
SummaryColumn	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            SummaryColumn( std::string const& _label, Colour::Code _colour )$/;"	f	struct:Catch::ConsoleReporter::SummaryColumn
SummaryColumn	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        struct SummaryColumn {$/;"	s	struct:Catch::ConsoleReporter
SuppressFail	.\include\sol\Catch\include\internal\catch_result_type.h	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SuppressFail	.\include\sol\Catch\single_include\catch.hpp	/^        SuppressFail = 0x08         \/\/ Failures are reported but do not fail the test$/;"	e	enum:Catch::ResultDisposition::Flags
SymbolSet	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  SymbolSet;$/;"	m	struct:TT_PCLT_
SystemStatus	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemStatus	.\include\SFML\Network\Ftp.hpp	/^            SystemStatus          = 211, \/\/\/< System status, or system help reply$/;"	e	enum:sf::Ftp::Response::Status
SystemType	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document$/;"	e	enum:sf::Ftp::Response::Status
SystemType	.\include\SFML\Network\Ftp.hpp	/^            SystemType            = 215, \/\/\/< NAME system type, where NAME is an official system name from the list in the Assigned Numbers document$/;"	e	enum:sf::Ftp::Response::Status
T	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
T	.\include\SFML\Window\Keyboard.hpp	/^        T,            \/\/\/< The T key$/;"	e	enum:sf::Keyboard::Key
T1_BLEND_BLUE_SCALE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_BLUE_SCALE,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_BLUE_SHIFT	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_BLUE_SHIFT,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_BLUE_VALUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_BLUE_VALUES,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_FAMILY_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_FAMILY_BLUES,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_FAMILY_OTHER_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_FAMILY_OTHER_BLUES,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_FORCE_BOLD	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_FORCE_BOLD,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_ITALIC_ANGLE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_ITALIC_ANGLE,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_MAX	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_MAX    \/* do not remove *\/$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_OTHER_BLUES	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_OTHER_BLUES,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_STANDARD_HEIGHT	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_STANDARD_HEIGHT,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_STANDARD_WIDTH	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_STANDARD_WIDTH,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_STEM_SNAP_HEIGHTS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_STEM_SNAP_HEIGHTS,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_STEM_SNAP_WIDTHS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_STEM_SNAP_WIDTHS,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_UNDERLINE_POSITION	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_UNDERLINE_POSITION = 0,$/;"	e	enum:T1_Blend_Flags_
T1_BLEND_UNDERLINE_THICKNESS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_BLEND_UNDERLINE_THICKNESS,$/;"	e	enum:T1_Blend_Flags_
T1_Blend	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef PS_BlendRec  T1_Blend;$/;"	t
T1_Blend_Flags	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } T1_Blend_Flags;$/;"	t	typeref:enum:T1_Blend_Flags_
T1_Blend_Flags_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef enum  T1_Blend_Flags_$/;"	g
T1_CONFIG_OPTION_NO_AFM	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	753;"	d
T1_CONFIG_OPTION_NO_MM_SUPPORT	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	762;"	d
T1_DesignMap	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef PS_DesignMapRec  T1_DesignMap;$/;"	t
T1_ENCODING_TYPE_ARRAY	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_ENCODING_TYPE_ARRAY,$/;"	e	enum:T1_EncodingType_
T1_ENCODING_TYPE_EXPERT	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_ENCODING_TYPE_EXPERT$/;"	e	enum:T1_EncodingType_
T1_ENCODING_TYPE_ISOLATIN1	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_ENCODING_TYPE_ISOLATIN1,$/;"	e	enum:T1_EncodingType_
T1_ENCODING_TYPE_NONE	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_ENCODING_TYPE_NONE = 0,$/;"	e	enum:T1_EncodingType_
T1_ENCODING_TYPE_STANDARD	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    T1_ENCODING_TYPE_STANDARD,$/;"	e	enum:T1_EncodingType_
T1_EncodingType	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  } T1_EncodingType;$/;"	t	typeref:enum:T1_EncodingType_
T1_EncodingType_	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef enum  T1_EncodingType_$/;"	g
T1_FontInfo	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef PS_FontInfoRec  T1_FontInfo;$/;"	t
T1_MAX_CHARSTRINGS_OPERANDS	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	743;"	d
T1_MAX_DICT_DEPTH	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	725;"	d
T1_MAX_MM_AXIS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	279;"	d
T1_MAX_MM_DESIGNS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	276;"	d
T1_MAX_MM_MAP_POINTS	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	282;"	d
T1_MAX_SUBRS_CALLS	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	733;"	d
T1_Private	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  typedef PS_PrivateRec  T1_Private;$/;"	t
TAB_L	.\dep\Lua\src\ltablib.c	29;"	d	file:
TAB_R	.\dep\Lua\src\ltablib.c	27;"	d	file:
TAB_RW	.\dep\Lua\src\ltablib.c	30;"	d	file:
TAB_W	.\dep\Lua\src\ltablib.c	28;"	d	file:
TARGA_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	37;"	d
TBC_TEXT_FORMAT_CONSOLE_WIDTH	.\include\sol\Catch\include\internal\catch_text.h	13;"	d
TBC_TEXT_FORMAT_CONSOLE_WIDTH	.\include\sol\Catch\single_include\catch.hpp	4755;"	d
TBC_TEXT_FORMAT_H_INCLUDED	.\include\sol\Catch\include\external\clara.h	37;"	d
TBC_TEXT_FORMAT_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3595;"	d
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(arrow_operator)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(arrow_wit_optional_ref)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(assignment)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(bad_comparison)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(bad_relops)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(const_propagation)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(copy_move_ctor_optional_int)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(disengaged_ctor)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example1)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_conceptual_model)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_converting_ctor)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_date)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_guard) $/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_guard)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_optional_arg)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_rationale)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(example_ref)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(exception_safety)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(mixed_equality)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(mixed_order)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(moved_from_state)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(moved_on_value_or)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(no_dangling_reference_in_value)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_hashing)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_initialization)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_optional)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref_assign)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref_const_propagation)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref_emulation)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref_hashing)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(optional_ref_swap)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(safe_value)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(value_ctor)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	/^TEST(value_or)$/;"	f
TEST	.\include\sol\Optional\test_optional.cpp	23;"	d	file:
TEST_CASE	.\include\sol\Catch\include\catch.hpp	168;"	d
TEST_CASE	.\include\sol\Catch\include\catch.hpp	176;"	d
TEST_CASE	.\include\sol\Catch\projects\SelfTest\VariadicMacrosTests.cpp	/^TEST_CASE()$/;"	f
TEST_CASE_METHOD	.\include\sol\Catch\include\catch.hpp	169;"	d
TEST_CASE_METHOD	.\include\sol\Catch\include\catch.hpp	177;"	d
TEST_CASE_METHOD	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^    TEST_CASE_METHOD( Fixture, "A TEST_CASE_METHOD based test run that fails", "[.][class][failing]" )$/;"	f	namespace:Inner
TEST_CASE_METHOD	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^TEST_CASE_METHOD( Fixture, "A TEST_CASE_METHOD based test run that succeeds", "[class]" )$/;"	f
THEN	.\include\sol\Catch\include\catch.hpp	206;"	d
THEN	.\include\sol\Catch\single_include\catch.hpp	10353;"	d
TK_AND	.\dep\Lua\src\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_AND	.\include\lua\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	.\dep\Lua\src\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_BREAK	.\include\lua\llex.h	/^  TK_AND = FIRST_RESERVED, TK_BREAK,$/;"	e	enum:RESERVED
TK_CONCAT	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_CONCAT	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DBCOLON	.\dep\Lua\src\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DBCOLON	.\include\lua\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_DO	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DO	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_DOTS	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_DOTS	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_ELSE	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSE	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_ELSEIF	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_END	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_EOS	.\dep\Lua\src\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EOS	.\include\lua\llex.h	/^  TK_DBCOLON, TK_EOS,$/;"	e	enum:RESERVED
TK_EQ	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_EQ	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_FALSE	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FALSE	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FLT	.\dep\Lua\src\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FLT	.\include\lua\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_FOR	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FOR	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	.\dep\Lua\src\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_FUNCTION	.\include\lua\llex.h	/^  TK_DO, TK_ELSE, TK_ELSEIF, TK_END, TK_FALSE, TK_FOR, TK_FUNCTION,$/;"	e	enum:RESERVED
TK_GE	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GE	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_GOTO	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_GOTO	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IDIV	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IDIV	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_IF	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IF	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_IN	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_INT	.\dep\Lua\src\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_INT	.\include\lua\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_LE	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LE	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_LOCAL	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_LOCAL	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NAME	.\dep\Lua\src\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NAME	.\include\lua\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_NE	.\dep\Lua\src\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NE	.\include\lua\llex.h	/^  TK_IDIV, TK_CONCAT, TK_DOTS, TK_EQ, TK_GE, TK_LE, TK_NE,$/;"	e	enum:RESERVED
TK_NIL	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NIL	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_NOT	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_OR	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	.\dep\Lua\src\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_REPEAT	.\include\lua\llex.h	/^  TK_GOTO, TK_IF, TK_IN, TK_LOCAL, TK_NIL, TK_NOT, TK_OR, TK_REPEAT,$/;"	e	enum:RESERVED
TK_RETURN	.\dep\Lua\src\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_RETURN	.\include\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_SHL	.\dep\Lua\src\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHL	.\include\lua\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	.\dep\Lua\src\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_SHR	.\include\lua\llex.h	/^  TK_SHL, TK_SHR,$/;"	e	enum:RESERVED
TK_STRING	.\dep\Lua\src\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_STRING	.\include\lua\llex.h	/^  TK_FLT, TK_INT, TK_NAME, TK_STRING$/;"	e	enum:RESERVED
TK_THEN	.\dep\Lua\src\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_THEN	.\include\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	.\dep\Lua\src\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_TRUE	.\include\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	.\dep\Lua\src\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_UNTIL	.\include\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	.\dep\Lua\src\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TK_WHILE	.\include\lua\llex.h	/^  TK_RETURN, TK_THEN, TK_TRUE, TK_UNTIL, TK_WHILE,$/;"	e	enum:RESERVED
TKey	.\dep\Lua\src\lobject.h	/^typedef union TKey {$/;"	u
TKey	.\dep\Lua\src\lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TKey	.\include\lua\lobject.h	/^typedef union TKey {$/;"	u
TKey	.\include\lua\lobject.h	/^} TKey;$/;"	t	typeref:union:TKey
TMS	.\dep\Lua\src\ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon21
TMS	.\include\lua\ltm.h	/^} TMS;$/;"	t	typeref:enum:__anon169
TM_ADD	.\dep\Lua\src\ltm.h	/^  TM_ADD,$/;"	e	enum:__anon21
TM_ADD	.\include\lua\ltm.h	/^  TM_ADD,$/;"	e	enum:__anon169
TM_BAND	.\dep\Lua\src\ltm.h	/^  TM_BAND,$/;"	e	enum:__anon21
TM_BAND	.\include\lua\ltm.h	/^  TM_BAND,$/;"	e	enum:__anon169
TM_BNOT	.\dep\Lua\src\ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon21
TM_BNOT	.\include\lua\ltm.h	/^  TM_BNOT,$/;"	e	enum:__anon169
TM_BOR	.\dep\Lua\src\ltm.h	/^  TM_BOR,$/;"	e	enum:__anon21
TM_BOR	.\include\lua\ltm.h	/^  TM_BOR,$/;"	e	enum:__anon169
TM_BXOR	.\dep\Lua\src\ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon21
TM_BXOR	.\include\lua\ltm.h	/^  TM_BXOR,$/;"	e	enum:__anon169
TM_CALL	.\dep\Lua\src\ltm.h	/^  TM_CALL,$/;"	e	enum:__anon21
TM_CALL	.\include\lua\ltm.h	/^  TM_CALL,$/;"	e	enum:__anon169
TM_CONCAT	.\dep\Lua\src\ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon21
TM_CONCAT	.\include\lua\ltm.h	/^  TM_CONCAT,$/;"	e	enum:__anon169
TM_DIV	.\dep\Lua\src\ltm.h	/^  TM_DIV,$/;"	e	enum:__anon21
TM_DIV	.\include\lua\ltm.h	/^  TM_DIV,$/;"	e	enum:__anon169
TM_EQ	.\dep\Lua\src\ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon21
TM_EQ	.\include\lua\ltm.h	/^  TM_EQ,  \/* last tag method with fast access *\/$/;"	e	enum:__anon169
TM_GC	.\dep\Lua\src\ltm.h	/^  TM_GC,$/;"	e	enum:__anon21
TM_GC	.\include\lua\ltm.h	/^  TM_GC,$/;"	e	enum:__anon169
TM_IDIV	.\dep\Lua\src\ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon21
TM_IDIV	.\include\lua\ltm.h	/^  TM_IDIV,$/;"	e	enum:__anon169
TM_INDEX	.\dep\Lua\src\ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon21
TM_INDEX	.\include\lua\ltm.h	/^  TM_INDEX,$/;"	e	enum:__anon169
TM_LE	.\dep\Lua\src\ltm.h	/^  TM_LE,$/;"	e	enum:__anon21
TM_LE	.\include\lua\ltm.h	/^  TM_LE,$/;"	e	enum:__anon169
TM_LEN	.\dep\Lua\src\ltm.h	/^  TM_LEN,$/;"	e	enum:__anon21
TM_LEN	.\include\lua\ltm.h	/^  TM_LEN,$/;"	e	enum:__anon169
TM_LT	.\dep\Lua\src\ltm.h	/^  TM_LT,$/;"	e	enum:__anon21
TM_LT	.\include\lua\ltm.h	/^  TM_LT,$/;"	e	enum:__anon169
TM_MOD	.\dep\Lua\src\ltm.h	/^  TM_MOD,$/;"	e	enum:__anon21
TM_MOD	.\include\lua\ltm.h	/^  TM_MOD,$/;"	e	enum:__anon169
TM_MODE	.\dep\Lua\src\ltm.h	/^  TM_MODE,$/;"	e	enum:__anon21
TM_MODE	.\include\lua\ltm.h	/^  TM_MODE,$/;"	e	enum:__anon169
TM_MUL	.\dep\Lua\src\ltm.h	/^  TM_MUL,$/;"	e	enum:__anon21
TM_MUL	.\include\lua\ltm.h	/^  TM_MUL,$/;"	e	enum:__anon169
TM_N	.\dep\Lua\src\ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon21
TM_N	.\include\lua\ltm.h	/^  TM_N		\/* number of elements in the enum *\/$/;"	e	enum:__anon169
TM_NEWINDEX	.\dep\Lua\src\ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon21
TM_NEWINDEX	.\include\lua\ltm.h	/^  TM_NEWINDEX,$/;"	e	enum:__anon169
TM_POW	.\dep\Lua\src\ltm.h	/^  TM_POW,$/;"	e	enum:__anon21
TM_POW	.\include\lua\ltm.h	/^  TM_POW,$/;"	e	enum:__anon169
TM_SHL	.\dep\Lua\src\ltm.h	/^  TM_SHL,$/;"	e	enum:__anon21
TM_SHL	.\include\lua\ltm.h	/^  TM_SHL,$/;"	e	enum:__anon169
TM_SHR	.\dep\Lua\src\ltm.h	/^  TM_SHR,$/;"	e	enum:__anon21
TM_SHR	.\include\lua\ltm.h	/^  TM_SHR,$/;"	e	enum:__anon169
TM_SUB	.\dep\Lua\src\ltm.h	/^  TM_SUB,$/;"	e	enum:__anon21
TM_SUB	.\include\lua\ltm.h	/^  TM_SUB,$/;"	e	enum:__anon169
TM_UNM	.\dep\Lua\src\ltm.h	/^  TM_UNM,$/;"	e	enum:__anon21
TM_UNM	.\include\lua\ltm.h	/^  TM_UNM,$/;"	e	enum:__anon169
TOWER_WIDTH	.\src\include\Common.h	6;"	d
TR2_OPTIONAL_ASSERTED_EXPRESSION	.\include\sol\Optional\optional.hpp	1046;"	d
TR2_OPTIONAL_ASSERTED_EXPRESSION	.\include\sol\Optional\optional.hpp	198;"	d
TR2_OPTIONAL_ASSERTED_EXPRESSION	.\include\sol\Optional\optional.hpp	200;"	d
TR2_OPTIONAL_CLANG_3_4_2_AND_HIGHER_	.\include\sol\Optional\optional.hpp	52;"	d
TR2_OPTIONAL_CLANG_3_4_2_AND_HIGHER_	.\include\sol\Optional\optional.hpp	54;"	d
TR2_OPTIONAL_CLANG_3_5_AND_HIGHTER_	.\include\sol\Optional\optional.hpp	47;"	d
TR2_OPTIONAL_CLANG_3_5_AND_HIGHTER_	.\include\sol\Optional\optional.hpp	49;"	d
TR2_OPTIONAL_GCC_4_7_AND_HIGHER___	.\include\sol\Optional\optional.hpp	31;"	d
TR2_OPTIONAL_GCC_4_7_AND_HIGHER___	.\include\sol\Optional\optional.hpp	33;"	d
TR2_OPTIONAL_GCC_4_8_1_AND_HIGHER___	.\include\sol\Optional\optional.hpp	37;"	d
TR2_OPTIONAL_GCC_4_8_1_AND_HIGHER___	.\include\sol\Optional\optional.hpp	39;"	d
TR2_OPTIONAL_GCC_4_8_1_AND_HIGHER___	.\include\sol\Optional\optional.hpp	41;"	d
TR2_OPTIONAL_GCC_4_8_AND_HIGHER___	.\include\sol\Optional\optional.hpp	25;"	d
TR2_OPTIONAL_GCC_4_8_AND_HIGHER___	.\include\sol\Optional\optional.hpp	27;"	d
TR2_OPTIONAL_MSVC_2015_AND_HIGHER___	.\include\sol\Optional\optional.hpp	60;"	d
TR2_OPTIONAL_REQUIRES	.\include\sol\Optional\optional.hpp	1045;"	d
TR2_OPTIONAL_REQUIRES	.\include\sol\Optional\optional.hpp	21;"	d
TRACEMS	.\dep\SFML\extlibs\headers\jpeg\jerror.h	265;"	d
TRACEMS1	.\dep\SFML\extlibs\headers\jpeg\jerror.h	268;"	d
TRACEMS2	.\dep\SFML\extlibs\headers\jpeg\jerror.h	272;"	d
TRACEMS3	.\dep\SFML\extlibs\headers\jpeg\jerror.h	277;"	d
TRACEMS4	.\dep\SFML\extlibs\headers\jpeg\jerror.h	282;"	d
TRACEMS5	.\dep\SFML\extlibs\headers\jpeg\jerror.h	287;"	d
TRACEMS8	.\dep\SFML\extlibs\headers\jpeg\jerror.h	293;"	d
TRACEMSS	.\dep\SFML\extlibs\headers\jpeg\jerror.h	299;"	d
TRUE	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	242;"	d
TString	.\dep\Lua\src\lobject.h	/^typedef struct TString {$/;"	s
TString	.\dep\Lua\src\lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TString	.\include\lua\lobject.h	/^typedef struct TString {$/;"	s
TString	.\include\lua\lobject.h	/^} TString;$/;"	t	typeref:struct:TString
TTAG_BASE	.\dep\SFML\extlibs\headers\freetype2\tttags.h	37;"	d
TTAG_BDF	.\dep\SFML\extlibs\headers\freetype2\tttags.h	39;"	d
TTAG_CBDT	.\dep\SFML\extlibs\headers\freetype2\tttags.h	43;"	d
TTAG_CBLC	.\dep\SFML\extlibs\headers\freetype2\tttags.h	44;"	d
TTAG_CFF	.\dep\SFML\extlibs\headers\freetype2\tttags.h	45;"	d
TTAG_CID	.\dep\SFML\extlibs\headers\freetype2\tttags.h	46;"	d
TTAG_DSIG	.\dep\SFML\extlibs\headers\freetype2\tttags.h	50;"	d
TTAG_EBDT	.\dep\SFML\extlibs\headers\freetype2\tttags.h	51;"	d
TTAG_EBLC	.\dep\SFML\extlibs\headers\freetype2\tttags.h	52;"	d
TTAG_EBSC	.\dep\SFML\extlibs\headers\freetype2\tttags.h	53;"	d
TTAG_FOND	.\dep\SFML\extlibs\headers\freetype2\tttags.h	55;"	d
TTAG_GDEF	.\dep\SFML\extlibs\headers\freetype2\tttags.h	59;"	d
TTAG_GPOS	.\dep\SFML\extlibs\headers\freetype2\tttags.h	61;"	d
TTAG_GSUB	.\dep\SFML\extlibs\headers\freetype2\tttags.h	62;"	d
TTAG_JSTF	.\dep\SFML\extlibs\headers\freetype2\tttags.h	68;"	d
TTAG_LTSH	.\dep\SFML\extlibs\headers\freetype2\tttags.h	73;"	d
TTAG_LWFN	.\dep\SFML\extlibs\headers\freetype2\tttags.h	74;"	d
TTAG_MATH	.\dep\SFML\extlibs\headers\freetype2\tttags.h	75;"	d
TTAG_META	.\dep\SFML\extlibs\headers\freetype2\tttags.h	77;"	d
TTAG_MMFX	.\dep\SFML\extlibs\headers\freetype2\tttags.h	78;"	d
TTAG_MMSD	.\dep\SFML\extlibs\headers\freetype2\tttags.h	79;"	d
TTAG_OS2	.\dep\SFML\extlibs\headers\freetype2\tttags.h	84;"	d
TTAG_OTTO	.\dep\SFML\extlibs\headers\freetype2\tttags.h	85;"	d
TTAG_PCLT	.\dep\SFML\extlibs\headers\freetype2\tttags.h	86;"	d
TTAG_POST	.\dep\SFML\extlibs\headers\freetype2\tttags.h	87;"	d
TTAG_SING	.\dep\SFML\extlibs\headers\freetype2\tttags.h	93;"	d
TTAG_TYP1	.\dep\SFML\extlibs\headers\freetype2\tttags.h	98;"	d
TTAG_VDMX	.\dep\SFML\extlibs\headers\freetype2\tttags.h	100;"	d
TTAG_avar	.\dep\SFML\extlibs\headers\freetype2\tttags.h	36;"	d
TTAG_bdat	.\dep\SFML\extlibs\headers\freetype2\tttags.h	38;"	d
TTAG_bhed	.\dep\SFML\extlibs\headers\freetype2\tttags.h	40;"	d
TTAG_bloc	.\dep\SFML\extlibs\headers\freetype2\tttags.h	41;"	d
TTAG_bsln	.\dep\SFML\extlibs\headers\freetype2\tttags.h	42;"	d
TTAG_cmap	.\dep\SFML\extlibs\headers\freetype2\tttags.h	47;"	d
TTAG_cvar	.\dep\SFML\extlibs\headers\freetype2\tttags.h	48;"	d
TTAG_cvt	.\dep\SFML\extlibs\headers\freetype2\tttags.h	49;"	d
TTAG_feat	.\dep\SFML\extlibs\headers\freetype2\tttags.h	54;"	d
TTAG_fpgm	.\dep\SFML\extlibs\headers\freetype2\tttags.h	56;"	d
TTAG_fvar	.\dep\SFML\extlibs\headers\freetype2\tttags.h	57;"	d
TTAG_gasp	.\dep\SFML\extlibs\headers\freetype2\tttags.h	58;"	d
TTAG_glyf	.\dep\SFML\extlibs\headers\freetype2\tttags.h	60;"	d
TTAG_gvar	.\dep\SFML\extlibs\headers\freetype2\tttags.h	63;"	d
TTAG_hdmx	.\dep\SFML\extlibs\headers\freetype2\tttags.h	64;"	d
TTAG_head	.\dep\SFML\extlibs\headers\freetype2\tttags.h	65;"	d
TTAG_hhea	.\dep\SFML\extlibs\headers\freetype2\tttags.h	66;"	d
TTAG_hmtx	.\dep\SFML\extlibs\headers\freetype2\tttags.h	67;"	d
TTAG_just	.\dep\SFML\extlibs\headers\freetype2\tttags.h	69;"	d
TTAG_kern	.\dep\SFML\extlibs\headers\freetype2\tttags.h	70;"	d
TTAG_lcar	.\dep\SFML\extlibs\headers\freetype2\tttags.h	71;"	d
TTAG_loca	.\dep\SFML\extlibs\headers\freetype2\tttags.h	72;"	d
TTAG_maxp	.\dep\SFML\extlibs\headers\freetype2\tttags.h	76;"	d
TTAG_mort	.\dep\SFML\extlibs\headers\freetype2\tttags.h	80;"	d
TTAG_morx	.\dep\SFML\extlibs\headers\freetype2\tttags.h	81;"	d
TTAG_name	.\dep\SFML\extlibs\headers\freetype2\tttags.h	82;"	d
TTAG_opbd	.\dep\SFML\extlibs\headers\freetype2\tttags.h	83;"	d
TTAG_post	.\dep\SFML\extlibs\headers\freetype2\tttags.h	88;"	d
TTAG_prep	.\dep\SFML\extlibs\headers\freetype2\tttags.h	89;"	d
TTAG_prop	.\dep\SFML\extlibs\headers\freetype2\tttags.h	90;"	d
TTAG_sbix	.\dep\SFML\extlibs\headers\freetype2\tttags.h	91;"	d
TTAG_sfnt	.\dep\SFML\extlibs\headers\freetype2\tttags.h	92;"	d
TTAG_trak	.\dep\SFML\extlibs\headers\freetype2\tttags.h	94;"	d
TTAG_true	.\dep\SFML\extlibs\headers\freetype2\tttags.h	95;"	d
TTAG_ttc	.\dep\SFML\extlibs\headers\freetype2\tttags.h	96;"	d
TTAG_ttcf	.\dep\SFML\extlibs\headers\freetype2\tttags.h	97;"	d
TTAG_typ1	.\dep\SFML\extlibs\headers\freetype2\tttags.h	99;"	d
TTAG_vhea	.\dep\SFML\extlibs\headers\freetype2\tttags.h	101;"	d
TTAG_vmtx	.\dep\SFML\extlibs\headers\freetype2\tttags.h	102;"	d
TTAG_wOFF	.\dep\SFML\extlibs\headers\freetype2\tttags.h	103;"	d
TT_ADOBE_ID_CUSTOM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	311;"	d
TT_ADOBE_ID_EXPERT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	310;"	d
TT_ADOBE_ID_LATIN_1	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	312;"	d
TT_ADOBE_ID_STANDARD	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	309;"	d
TT_APPLE_ID_DEFAULT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	124;"	d
TT_APPLE_ID_ISO_10646	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	126;"	d
TT_APPLE_ID_UNICODE_1_1	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	125;"	d
TT_APPLE_ID_UNICODE_2_0	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	127;"	d
TT_APPLE_ID_UNICODE_32	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	128;"	d
TT_APPLE_ID_VARIANT_SELECTOR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	129;"	d
TT_CONFIG_CMAP_FORMAT_0	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	555;"	d
TT_CONFIG_CMAP_FORMAT_10	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	560;"	d
TT_CONFIG_CMAP_FORMAT_12	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	561;"	d
TT_CONFIG_CMAP_FORMAT_13	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	562;"	d
TT_CONFIG_CMAP_FORMAT_14	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	563;"	d
TT_CONFIG_CMAP_FORMAT_2	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	556;"	d
TT_CONFIG_CMAP_FORMAT_4	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	557;"	d
TT_CONFIG_CMAP_FORMAT_6	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	558;"	d
TT_CONFIG_CMAP_FORMAT_8	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	559;"	d
TT_CONFIG_OPTION_BDF	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	707;"	d
TT_CONFIG_OPTION_BYTECODE_INTERPRETER	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	585;"	d
TT_CONFIG_OPTION_COMPONENT_OFFSET_SCALED	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	689;"	d
TT_CONFIG_OPTION_EMBEDDED_BITMAPS	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	517;"	d
TT_CONFIG_OPTION_GX_VAR_SUPPORT	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	699;"	d
TT_CONFIG_OPTION_INTERPRETER_SWITCH	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	670;"	d
TT_CONFIG_OPTION_POSTSCRIPT_NAMES	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	532;"	d
TT_CONFIG_OPTION_SFNT_NAMES	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	546;"	d
TT_CONFIG_OPTION_UNPATENTED_HINTING	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	859;"	d
TT_Header	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_Header;$/;"	t	typeref:struct:TT_Header_
TT_Header_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_Header_$/;"	s
TT_HoriHeader	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_HoriHeader;$/;"	t	typeref:struct:TT_HoriHeader_
TT_HoriHeader_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_HoriHeader_$/;"	s
TT_INTERPRETER_VERSION_35	.\dep\SFML\extlibs\headers\freetype2\ftttdrv.h	158;"	d
TT_INTERPRETER_VERSION_38	.\dep\SFML\extlibs\headers\freetype2\ftttdrv.h	159;"	d
TT_ISO_ID_10646	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	235;"	d
TT_ISO_ID_7BIT_ASCII	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	234;"	d
TT_ISO_ID_8859_1	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	236;"	d
TT_MAC_ID_ARABIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	182;"	d
TT_MAC_ID_ARMENIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	202;"	d
TT_MAC_ID_BENGALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	191;"	d
TT_MAC_ID_BURMESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	197;"	d
TT_MAC_ID_DEVANAGARI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	187;"	d
TT_MAC_ID_GEEZ	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	207;"	d
TT_MAC_ID_GEORGIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	201;"	d
TT_MAC_ID_GREEK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	184;"	d
TT_MAC_ID_GUJARATI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	189;"	d
TT_MAC_ID_GURMUKHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	188;"	d
TT_MAC_ID_HEBREW	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	183;"	d
TT_MAC_ID_JAPANESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	179;"	d
TT_MAC_ID_KANNADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	194;"	d
TT_MAC_ID_KHMER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	198;"	d
TT_MAC_ID_KOREAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	181;"	d
TT_MAC_ID_LAOTIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	200;"	d
TT_MAC_ID_MALAYALAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	195;"	d
TT_MAC_ID_MALDIVIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	203;"	d
TT_MAC_ID_MONGOLIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	206;"	d
TT_MAC_ID_ORIYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	190;"	d
TT_MAC_ID_ROMAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	178;"	d
TT_MAC_ID_RSYMBOL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	186;"	d
TT_MAC_ID_RUSSIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	185;"	d
TT_MAC_ID_SIMPLIFIED_CHINESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	204;"	d
TT_MAC_ID_SINDHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	210;"	d
TT_MAC_ID_SINHALESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	196;"	d
TT_MAC_ID_SLAVIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	208;"	d
TT_MAC_ID_TAMIL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	192;"	d
TT_MAC_ID_TELUGU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	193;"	d
TT_MAC_ID_THAI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	199;"	d
TT_MAC_ID_TIBETAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	205;"	d
TT_MAC_ID_TRADITIONAL_CHINESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	180;"	d
TT_MAC_ID_UNINTERP	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	211;"	d
TT_MAC_ID_VIETNAMESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	209;"	d
TT_MAC_LANGID_AFRIKAANS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	447;"	d
TT_MAC_LANGID_ALBANIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	362;"	d
TT_MAC_LANGID_AMHARIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	413;"	d
TT_MAC_LANGID_ARABIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	338;"	d
TT_MAC_LANGID_ARMENIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	378;"	d
TT_MAC_LANGID_ASSAMESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	396;"	d
TT_MAC_LANGID_AYMARA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	429;"	d
TT_MAC_LANGID_AZERBAIJANI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	375;"	d
TT_MAC_LANGID_AZERBAIJANI_ARABIC_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	377;"	d
TT_MAC_LANGID_AZERBAIJANI_CYRILLIC_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	376;"	d
TT_MAC_LANGID_AZERBAIJANI_ROMAN_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	456;"	d
TT_MAC_LANGID_BASQUE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	424;"	d
TT_MAC_LANGID_BENGALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	395;"	d
TT_MAC_LANGID_BRETON	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	448;"	d
TT_MAC_LANGID_BULGARIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	370;"	d
TT_MAC_LANGID_BURMESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	405;"	d
TT_MAC_LANGID_BYELORUSSIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	372;"	d
TT_MAC_LANGID_CATALAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	425;"	d
TT_MAC_LANGID_CHEWA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	420;"	d
TT_MAC_LANGID_CHINESE_SIMPLIFIED	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	359;"	d
TT_MAC_LANGID_CHINESE_TRADITIONAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	345;"	d
TT_MAC_LANGID_CROATIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	344;"	d
TT_MAC_LANGID_CZECH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	364;"	d
TT_MAC_LANGID_DANISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	333;"	d
TT_MAC_LANGID_DUTCH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	330;"	d
TT_MAC_LANGID_DZONGKHA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	432;"	d
TT_MAC_LANGID_ENGLISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	326;"	d
TT_MAC_LANGID_ESPERANTO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	422;"	d
TT_MAC_LANGID_ESTONIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	353;"	d
TT_MAC_LANGID_FAEROESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	356;"	d
TT_MAC_LANGID_FARSI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	357;"	d
TT_MAC_LANGID_FINNISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	339;"	d
TT_MAC_LANGID_FLEMISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	360;"	d
TT_MAC_LANGID_FRENCH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	327;"	d
TT_MAC_LANGID_GALICIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	446;"	d
TT_MAC_LANGID_GALLA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	415;"	d
TT_MAC_LANGID_GEORGIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	379;"	d
TT_MAC_LANGID_GERMAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	328;"	d
TT_MAC_LANGID_GREEK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	340;"	d
TT_MAC_LANGID_GREEK_POLYTONIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	454;"	d
TT_MAC_LANGID_GREELANDIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	455;"	d
TT_MAC_LANGID_GUARANI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	428;"	d
TT_MAC_LANGID_GUJARATI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	397;"	d
TT_MAC_LANGID_HEBREW	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	336;"	d
TT_MAC_LANGID_HINDI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	347;"	d
TT_MAC_LANGID_HUNGARIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	352;"	d
TT_MAC_LANGID_ICELANDIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	341;"	d
TT_MAC_LANGID_INDONESIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	409;"	d
TT_MAC_LANGID_INUKTITUT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	449;"	d
TT_MAC_LANGID_IRISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	361;"	d
TT_MAC_LANGID_IRISH_GAELIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	452;"	d
TT_MAC_LANGID_ITALIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	329;"	d
TT_MAC_LANGID_JAPANESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	337;"	d
TT_MAC_LANGID_JAVANESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	433;"	d
TT_MAC_LANGID_KANNADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	401;"	d
TT_MAC_LANGID_KASHMIRI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	389;"	d
TT_MAC_LANGID_KAZAKH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	374;"	d
TT_MAC_LANGID_KHMER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	406;"	d
TT_MAC_LANGID_KIRGHIZ	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	381;"	d
TT_MAC_LANGID_KOREAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	349;"	d
TT_MAC_LANGID_KURDISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	388;"	d
TT_MAC_LANGID_LAO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	407;"	d
TT_MAC_LANGID_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	426;"	d
TT_MAC_LANGID_LETTISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	354;"	d
TT_MAC_LANGID_LITHUANIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	350;"	d
TT_MAC_LANGID_MACEDONIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	369;"	d
TT_MAC_LANGID_MALAGASY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	421;"	d
TT_MAC_LANGID_MALAYALAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	400;"	d
TT_MAC_LANGID_MALAY_ARABIC_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	412;"	d
TT_MAC_LANGID_MALAY_ROMAN_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	411;"	d
TT_MAC_LANGID_MALTESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	342;"	d
TT_MAC_LANGID_MANX_GAELIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	451;"	d
TT_MAC_LANGID_MARATHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	394;"	d
TT_MAC_LANGID_MOLDAVIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	380;"	d
TT_MAC_LANGID_MONGOLIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	384;"	d
TT_MAC_LANGID_MONGOLIAN_CYRILLIC_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	386;"	d
TT_MAC_LANGID_MONGOLIAN_MONGOLIAN_SCRIPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	385;"	d
TT_MAC_LANGID_NEPALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	392;"	d
TT_MAC_LANGID_NORWEGIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	335;"	d
TT_MAC_LANGID_ORIYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	399;"	d
TT_MAC_LANGID_PASHTO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	387;"	d
TT_MAC_LANGID_POLISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	351;"	d
TT_MAC_LANGID_PORTUGUESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	334;"	d
TT_MAC_LANGID_PUNJABI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	398;"	d
TT_MAC_LANGID_QUECHUA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	427;"	d
TT_MAC_LANGID_ROMANIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	363;"	d
TT_MAC_LANGID_RUANDA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	418;"	d
TT_MAC_LANGID_RUNDI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	419;"	d
TT_MAC_LANGID_RUSSIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	358;"	d
TT_MAC_LANGID_SAAMISK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	355;"	d
TT_MAC_LANGID_SANSKRIT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	393;"	d
TT_MAC_LANGID_SCOTTISH_GAELIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	450;"	d
TT_MAC_LANGID_SERBIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	368;"	d
TT_MAC_LANGID_SINDHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	390;"	d
TT_MAC_LANGID_SINHALESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	404;"	d
TT_MAC_LANGID_SLOVAK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	365;"	d
TT_MAC_LANGID_SLOVENIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	366;"	d
TT_MAC_LANGID_SOMALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	416;"	d
TT_MAC_LANGID_SPANISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	332;"	d
TT_MAC_LANGID_SUNDANESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	434;"	d
TT_MAC_LANGID_SWAHILI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	417;"	d
TT_MAC_LANGID_SWEDISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	331;"	d
TT_MAC_LANGID_TAGALOG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	410;"	d
TT_MAC_LANGID_TAJIKI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	382;"	d
TT_MAC_LANGID_TAMIL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	402;"	d
TT_MAC_LANGID_TATAR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	430;"	d
TT_MAC_LANGID_TELUGU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	403;"	d
TT_MAC_LANGID_THAI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	348;"	d
TT_MAC_LANGID_TIBETAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	391;"	d
TT_MAC_LANGID_TIGRINYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	414;"	d
TT_MAC_LANGID_TONGAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	453;"	d
TT_MAC_LANGID_TURKISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	343;"	d
TT_MAC_LANGID_TURKMEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	383;"	d
TT_MAC_LANGID_UIGHUR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	431;"	d
TT_MAC_LANGID_UKRAINIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	371;"	d
TT_MAC_LANGID_URDU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	346;"	d
TT_MAC_LANGID_UZBEK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	373;"	d
TT_MAC_LANGID_VIETNAMESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	408;"	d
TT_MAC_LANGID_WELSH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	423;"	d
TT_MAC_LANGID_YIDDISH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	367;"	d
TT_MS_ID_BIG_5	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	283;"	d
TT_MS_ID_GB2312	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	282;"	d
TT_MS_ID_JOHAB	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	285;"	d
TT_MS_ID_SJIS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	281;"	d
TT_MS_ID_SYMBOL_CS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	279;"	d
TT_MS_ID_UCS_4	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	286;"	d
TT_MS_ID_UNICODE_CS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	280;"	d
TT_MS_ID_WANSUNG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	284;"	d
TT_MS_LANGID_AFRIKAANS_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	649;"	d
TT_MS_LANGID_ALBANIAN_ALBANIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	619;"	d
TT_MS_LANGID_AMHARIC_ETHIOPIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	739;"	d
TT_MS_LANGID_ARABIC_ALGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	475;"	d
TT_MS_LANGID_ARABIC_BAHRAIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	485;"	d
TT_MS_LANGID_ARABIC_EGYPT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	473;"	d
TT_MS_LANGID_ARABIC_GENERAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	470;"	d
TT_MS_LANGID_ARABIC_IRAQ	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	472;"	d
TT_MS_LANGID_ARABIC_JORDAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	481;"	d
TT_MS_LANGID_ARABIC_KUWAIT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	483;"	d
TT_MS_LANGID_ARABIC_LEBANON	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	482;"	d
TT_MS_LANGID_ARABIC_LIBYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	474;"	d
TT_MS_LANGID_ARABIC_MOROCCO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	476;"	d
TT_MS_LANGID_ARABIC_OMAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	478;"	d
TT_MS_LANGID_ARABIC_QATAR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	486;"	d
TT_MS_LANGID_ARABIC_SAUDI_ARABIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	471;"	d
TT_MS_LANGID_ARABIC_SYRIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	480;"	d
TT_MS_LANGID_ARABIC_TUNISIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	477;"	d
TT_MS_LANGID_ARABIC_UAE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	484;"	d
TT_MS_LANGID_ARABIC_YEMEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	479;"	d
TT_MS_LANGID_ARMENIAN_ARMENIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	637;"	d
TT_MS_LANGID_ASSAMESE_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	699;"	d
TT_MS_LANGID_AZERI_AZERBAIJAN_CYRILLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	639;"	d
TT_MS_LANGID_AZERI_AZERBAIJAN_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	638;"	d
TT_MS_LANGID_BASQUE_SPAIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	640;"	d
TT_MS_LANGID_BELARUSIAN_BELARUS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	628;"	d
TT_MS_LANGID_BENGALI_BANGLADESH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	690;"	d
TT_MS_LANGID_BENGALI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	689;"	d
TT_MS_LANGID_BOSNIAN_BOSNIA_HERZEGOVINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	611;"	d
TT_MS_LANGID_BULGARIAN_BULGARIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	487;"	d
TT_MS_LANGID_BURMESE_MYANMAR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	728;"	d
TT_MS_LANGID_CATALAN_SPAIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	488;"	d
TT_MS_LANGID_CHEROKEE_UNITED_STATES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	737;"	d
TT_MS_LANGID_CHINESE_GENERAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	489;"	d
TT_MS_LANGID_CHINESE_HONG_KONG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	492;"	d
TT_MS_LANGID_CHINESE_MACAU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	496;"	d
TT_MS_LANGID_CHINESE_PRC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	491;"	d
TT_MS_LANGID_CHINESE_SINGAPORE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	493;"	d
TT_MS_LANGID_CHINESE_TAIWAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	490;"	d
TT_MS_LANGID_CLASSIC_LITHUANIAN_LITHUANIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	633;"	d
TT_MS_LANGID_CROATIAN_BOSNIA_HERZEGOVINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	610;"	d
TT_MS_LANGID_CROATIAN_CROATIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	603;"	d
TT_MS_LANGID_CZECH_CZECH_REPUBLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	506;"	d
TT_MS_LANGID_DANISH_DENMARK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	507;"	d
TT_MS_LANGID_DHIVEHI_MALDIVES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	754;"	d
TT_MS_LANGID_DIVEHI_MALDIVES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	756;"	d
TT_MS_LANGID_DUTCH_BELGIUM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	592;"	d
TT_MS_LANGID_DUTCH_NETHERLANDS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	591;"	d
TT_MS_LANGID_DZONGHKA_BHUTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	714;"	d
TT_MS_LANGID_EDO_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	757;"	d
TT_MS_LANGID_ENGLISH_AUSTRALIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	523;"	d
TT_MS_LANGID_ENGLISH_BELIZE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	530;"	d
TT_MS_LANGID_ENGLISH_CANADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	524;"	d
TT_MS_LANGID_ENGLISH_CARIBBEAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	529;"	d
TT_MS_LANGID_ENGLISH_GENERAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	520;"	d
TT_MS_LANGID_ENGLISH_HONG_KONG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	535;"	d
TT_MS_LANGID_ENGLISH_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	536;"	d
TT_MS_LANGID_ENGLISH_INDONESIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	534;"	d
TT_MS_LANGID_ENGLISH_IRELAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	526;"	d
TT_MS_LANGID_ENGLISH_JAMAICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	528;"	d
TT_MS_LANGID_ENGLISH_MALAYSIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	537;"	d
TT_MS_LANGID_ENGLISH_NEW_ZEALAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	525;"	d
TT_MS_LANGID_ENGLISH_PHILIPPINES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	533;"	d
TT_MS_LANGID_ENGLISH_SINGAPORE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	538;"	d
TT_MS_LANGID_ENGLISH_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	527;"	d
TT_MS_LANGID_ENGLISH_TRINIDAD	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	531;"	d
TT_MS_LANGID_ENGLISH_UNITED_KINGDOM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	522;"	d
TT_MS_LANGID_ENGLISH_UNITED_STATES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	521;"	d
TT_MS_LANGID_ENGLISH_ZIMBABWE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	532;"	d
TT_MS_LANGID_ESTONIAN_ESTONIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	630;"	d
TT_MS_LANGID_FAEROESE_FAEROE_ISLANDS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	651;"	d
TT_MS_LANGID_FARSI_IRAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	635;"	d
TT_MS_LANGID_FILIPINO_PHILIPPINES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	753;"	d
TT_MS_LANGID_FINNISH_FINLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	563;"	d
TT_MS_LANGID_FRENCH_BELGIUM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	565;"	d
TT_MS_LANGID_FRENCH_CAMEROON	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	576;"	d
TT_MS_LANGID_FRENCH_CANADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	566;"	d
TT_MS_LANGID_FRENCH_CONGO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	572;"	d
TT_MS_LANGID_FRENCH_COTE_D_IVOIRE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	577;"	d
TT_MS_LANGID_FRENCH_FRANCE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	564;"	d
TT_MS_LANGID_FRENCH_HAITI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	580;"	d
TT_MS_LANGID_FRENCH_LUXEMBOURG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	568;"	d
TT_MS_LANGID_FRENCH_MALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	578;"	d
TT_MS_LANGID_FRENCH_MONACO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	569;"	d
TT_MS_LANGID_FRENCH_MOROCCO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	579;"	d
TT_MS_LANGID_FRENCH_NORTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	582;"	d
TT_MS_LANGID_FRENCH_REUNION	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	571;"	d
TT_MS_LANGID_FRENCH_SENEGAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	575;"	d
TT_MS_LANGID_FRENCH_SWITZERLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	567;"	d
TT_MS_LANGID_FRENCH_WEST_INDIES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	570;"	d
TT_MS_LANGID_FRENCH_ZAIRE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	574;"	d
TT_MS_LANGID_FRISIAN_NETHERLANDS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	751;"	d
TT_MS_LANGID_FULFULDE_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	758;"	d
TT_MS_LANGID_GALICIAN_SPAIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	729;"	d
TT_MS_LANGID_GEORGIAN_GEORGIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	650;"	d
TT_MS_LANGID_GERMAN_AUSTRIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	510;"	d
TT_MS_LANGID_GERMAN_GERMANY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	508;"	d
TT_MS_LANGID_GERMAN_LIECHTENSTEI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	512;"	d
TT_MS_LANGID_GERMAN_LUXEMBOURG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	511;"	d
TT_MS_LANGID_GERMAN_SWITZERLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	509;"	d
TT_MS_LANGID_GREEK_GREECE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	513;"	d
TT_MS_LANGID_GUARANI_PARAGUAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	777;"	d
TT_MS_LANGID_GUJARATI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	693;"	d
TT_MS_LANGID_HAUSA_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	759;"	d
TT_MS_LANGID_HAWAIIAN_UNITED_STATES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	778;"	d
TT_MS_LANGID_HEBREW_ISRAEL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	583;"	d
TT_MS_LANGID_HINDI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	652;"	d
TT_MS_LANGID_HUNGARIAN_HUNGARY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	584;"	d
TT_MS_LANGID_IBIBIO_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	760;"	d
TT_MS_LANGID_ICELANDIC_ICELAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	585;"	d
TT_MS_LANGID_IGBO_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	770;"	d
TT_MS_LANGID_INDONESIAN_INDONESIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	626;"	d
TT_MS_LANGID_INUKTITUT_CANADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	738;"	d
TT_MS_LANGID_IRISH_GAELIC_IRELAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	672;"	d
TT_MS_LANGID_ITALIAN_ITALY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	586;"	d
TT_MS_LANGID_ITALIAN_SWITZERLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	587;"	d
TT_MS_LANGID_JAPANESE_JAPAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	588;"	d
TT_MS_LANGID_KANNADA_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	697;"	d
TT_MS_LANGID_KANURI_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	771;"	d
TT_MS_LANGID_KASHMIRI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	748;"	d
TT_MS_LANGID_KASHMIRI_PAKISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	743;"	d
TT_MS_LANGID_KASHMIRI_SASIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	746;"	d
TT_MS_LANGID_KAZAK_KAZAKSTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	678;"	d
TT_MS_LANGID_KHMER_CAMBODIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	726;"	d
TT_MS_LANGID_KIRGHIZ_KIRGHIZSTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	679;"	d
TT_MS_LANGID_KIRGHIZ_KIRGHIZ_REPUBLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	681;"	d
TT_MS_LANGID_KONKANI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	730;"	d
TT_MS_LANGID_KOREAN_EXTENDED_WANSUNG_KOREA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	589;"	d
TT_MS_LANGID_KOREAN_JOHAB_KOREA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	590;"	d
TT_MS_LANGID_LAO_LAOS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	727;"	d
TT_MS_LANGID_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	779;"	d
TT_MS_LANGID_LATVIAN_LATVIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	631;"	d
TT_MS_LANGID_LITHUANIAN_LITHUANIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	632;"	d
TT_MS_LANGID_MACEDONIAN_MACEDONIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	642;"	d
TT_MS_LANGID_MALAYALAM_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	698;"	d
TT_MS_LANGID_MALAY_BRUNEI_DARUSSALAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	677;"	d
TT_MS_LANGID_MALAY_MALAYSIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	676;"	d
TT_MS_LANGID_MALTESE_MALTA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	653;"	d
TT_MS_LANGID_MANIPURI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	731;"	d
TT_MS_LANGID_MAORI_NEW_ZEALAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	788;"	d
TT_MS_LANGID_MARATHI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	700;"	d
TT_MS_LANGID_MOLDAVIAN_MOLDAVIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	600;"	d
TT_MS_LANGID_MONGOLIAN_MONGOLIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	702;"	d
TT_MS_LANGID_MONGOLIAN_MONGOLIA_MONGOLIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	703;"	d
TT_MS_LANGID_NEPALI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	750;"	d
TT_MS_LANGID_NEPALI_NEPAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	749;"	d
TT_MS_LANGID_NORWEGIAN_NORWAY_BOKMAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	593;"	d
TT_MS_LANGID_NORWEGIAN_NORWAY_NYNORSK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	594;"	d
TT_MS_LANGID_ORIYA_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	694;"	d
TT_MS_LANGID_OROMO_ETHIOPIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	772;"	d
TT_MS_LANGID_PAPIAMENTU_NETHERLANDS_ANTILLES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	785;"	d
TT_MS_LANGID_PASHTO_AFGHANISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	752;"	d
TT_MS_LANGID_POLISH_POLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	595;"	d
TT_MS_LANGID_PORTUGUESE_BRAZIL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	596;"	d
TT_MS_LANGID_PORTUGUESE_PORTUGAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	597;"	d
TT_MS_LANGID_PUNJABI_ARABIC_PAKISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	692;"	d
TT_MS_LANGID_PUNJABI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	691;"	d
TT_MS_LANGID_QUECHUA_BOLIVIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	762;"	d
TT_MS_LANGID_QUECHUA_ECUADOR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	763;"	d
TT_MS_LANGID_QUECHUA_PERU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	764;"	d
TT_MS_LANGID_RHAETO_ROMANIC_SWITZERLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	598;"	d
TT_MS_LANGID_ROMANIAN_ROMANIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	599;"	d
TT_MS_LANGID_RUSSIAN_MOLDAVIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	602;"	d
TT_MS_LANGID_RUSSIAN_RUSSIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	601;"	d
TT_MS_LANGID_SAAMI_LAPONIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	665;"	d
TT_MS_LANGID_SAMI_INARI_FINLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	663;"	d
TT_MS_LANGID_SAMI_LULE_NORWAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	658;"	d
TT_MS_LANGID_SAMI_LULE_SWEDEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	659;"	d
TT_MS_LANGID_SAMI_NORTHERN_FINLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	657;"	d
TT_MS_LANGID_SAMI_NORTHERN_NORWAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	655;"	d
TT_MS_LANGID_SAMI_NORTHERN_SWEDEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	656;"	d
TT_MS_LANGID_SAMI_SKOLT_FINLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	662;"	d
TT_MS_LANGID_SAMI_SOUTHERN_NORWAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	660;"	d
TT_MS_LANGID_SAMI_SOUTHERN_SWEDEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	661;"	d
TT_MS_LANGID_SANSKRIT_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	701;"	d
TT_MS_LANGID_SCOTTISH_GAELIC_UNITED_KINGDOM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	671;"	d
TT_MS_LANGID_SEPEDI_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	765;"	d
TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_CYRILLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	615;"	d
TT_MS_LANGID_SERBIAN_BOSNIA_HERZ_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	614;"	d
TT_MS_LANGID_SERBIAN_SERBIA_CYRILLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	605;"	d
TT_MS_LANGID_SERBIAN_SERBIA_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	604;"	d
TT_MS_LANGID_SINDHI_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	732;"	d
TT_MS_LANGID_SINDHI_PAKISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	733;"	d
TT_MS_LANGID_SINHALESE_SRI_LANKA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	736;"	d
TT_MS_LANGID_SLOVAK_SLOVAKIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	618;"	d
TT_MS_LANGID_SLOVENE_SLOVENIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	629;"	d
TT_MS_LANGID_SOMALI_SOMALIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	780;"	d
TT_MS_LANGID_SORBIAN_GERMANY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	641;"	d
TT_MS_LANGID_SOTHO_SOUTHERN_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	767;"	d
TT_MS_LANGID_SPANISH_ARGENTINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	549;"	d
TT_MS_LANGID_SPANISH_BOLIVIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	554;"	d
TT_MS_LANGID_SPANISH_CHILE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	551;"	d
TT_MS_LANGID_SPANISH_COLOMBIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	547;"	d
TT_MS_LANGID_SPANISH_COSTA_RICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	543;"	d
TT_MS_LANGID_SPANISH_DOMINICAN_REPUBLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	545;"	d
TT_MS_LANGID_SPANISH_ECUADOR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	550;"	d
TT_MS_LANGID_SPANISH_EL_SALVADOR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	555;"	d
TT_MS_LANGID_SPANISH_GUATEMALA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	542;"	d
TT_MS_LANGID_SPANISH_HONDURAS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	556;"	d
TT_MS_LANGID_SPANISH_LATIN_AMERICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	562;"	d
TT_MS_LANGID_SPANISH_MEXICO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	540;"	d
TT_MS_LANGID_SPANISH_NICARAGUA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	557;"	d
TT_MS_LANGID_SPANISH_PANAMA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	544;"	d
TT_MS_LANGID_SPANISH_PARAGUAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	553;"	d
TT_MS_LANGID_SPANISH_PERU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	548;"	d
TT_MS_LANGID_SPANISH_PUERTO_RICO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	558;"	d
TT_MS_LANGID_SPANISH_SPAIN_INTERNATIONAL_SORT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	541;"	d
TT_MS_LANGID_SPANISH_SPAIN_TRADITIONAL_SORT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	539;"	d
TT_MS_LANGID_SPANISH_UNITED_STATES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	559;"	d
TT_MS_LANGID_SPANISH_URUGUAY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	552;"	d
TT_MS_LANGID_SPANISH_VENEZUELA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	546;"	d
TT_MS_LANGID_SUTU_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	643;"	d
TT_MS_LANGID_SWAHILI_KENYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	684;"	d
TT_MS_LANGID_SWEDISH_FINLAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	621;"	d
TT_MS_LANGID_SWEDISH_SWEDEN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	620;"	d
TT_MS_LANGID_SYRIAC_SYRIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	735;"	d
TT_MS_LANGID_TAJIK_TAJIKISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	634;"	d
TT_MS_LANGID_TAMAZIGHT_MOROCCO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	740;"	d
TT_MS_LANGID_TAMAZIGHT_MOROCCO_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	741;"	d
TT_MS_LANGID_TAMIL_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	695;"	d
TT_MS_LANGID_TATAR_TATARSTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	688;"	d
TT_MS_LANGID_TELUGU_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	696;"	d
TT_MS_LANGID_THAI_THAILAND	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	622;"	d
TT_MS_LANGID_TIBETAN_BHUTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	722;"	d
TT_MS_LANGID_TIBETAN_CHINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	704;"	d
TT_MS_LANGID_TIGRIGNA_ERYTHREA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	774;"	d
TT_MS_LANGID_TIGRIGNA_ERYTREA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	776;"	d
TT_MS_LANGID_TIGRIGNA_ETHIOPIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	773;"	d
TT_MS_LANGID_TSONGA_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	644;"	d
TT_MS_LANGID_TSWANA_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	645;"	d
TT_MS_LANGID_TURKISH_TURKEY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	623;"	d
TT_MS_LANGID_TURKMEN_TURKMENISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	685;"	d
TT_MS_LANGID_UIGHUR_CHINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	787;"	d
TT_MS_LANGID_UKRAINIAN_UKRAINE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	627;"	d
TT_MS_LANGID_URDU_INDIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	625;"	d
TT_MS_LANGID_URDU_PAKISTAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	624;"	d
TT_MS_LANGID_UZBEK_UZBEKISTAN_CYRILLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	687;"	d
TT_MS_LANGID_UZBEK_UZBEKISTAN_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	686;"	d
TT_MS_LANGID_VENDA_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	646;"	d
TT_MS_LANGID_VIETNAMESE_VIET_NAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	636;"	d
TT_MS_LANGID_WELSH_WALES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	725;"	d
TT_MS_LANGID_XHOSA_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	647;"	d
TT_MS_LANGID_YIDDISH_GERMANY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	675;"	d
TT_MS_LANGID_YI_CHINA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	784;"	d
TT_MS_LANGID_YORUBA_NIGERIA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	761;"	d
TT_MS_LANGID_ZULU_SOUTH_AFRICA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	648;"	d
TT_MaxProfile	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_MaxProfile;$/;"	t	typeref:struct:TT_MaxProfile_
TT_MaxProfile_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_MaxProfile_$/;"	s
TT_NAME_ID_CID_FINDFONT_NAME	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	826;"	d
TT_NAME_ID_COPYRIGHT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	800;"	d
TT_NAME_ID_DESCRIPTION	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	812;"	d
TT_NAME_ID_DESIGNER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	811;"	d
TT_NAME_ID_DESIGNER_URL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	814;"	d
TT_NAME_ID_FONT_FAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	801;"	d
TT_NAME_ID_FONT_SUBFAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	802;"	d
TT_NAME_ID_FULL_NAME	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	804;"	d
TT_NAME_ID_LICENSE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	815;"	d
TT_NAME_ID_LICENSE_URL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	816;"	d
TT_NAME_ID_MAC_FULL_NAME	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	820;"	d
TT_NAME_ID_MANUFACTURER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	810;"	d
TT_NAME_ID_PREFERRED_FAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	818;"	d
TT_NAME_ID_PREFERRED_SUBFAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	819;"	d
TT_NAME_ID_PS_NAME	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	806;"	d
TT_NAME_ID_SAMPLE_TEXT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	823;"	d
TT_NAME_ID_TRADEMARK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	807;"	d
TT_NAME_ID_UNIQUE_ID	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	803;"	d
TT_NAME_ID_VENDOR_URL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	813;"	d
TT_NAME_ID_VERSION_STRING	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	805;"	d
TT_NAME_ID_WWS_FAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	829;"	d
TT_NAME_ID_WWS_SUBFAMILY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	830;"	d
TT_OS2	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_OS2;$/;"	t	typeref:struct:TT_OS2_
TT_OS2_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_OS2_$/;"	s
TT_PCLT	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_PCLT;$/;"	t	typeref:struct:TT_PCLT_
TT_PCLT_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_PCLT_$/;"	s
TT_PLATFORM_ADOBE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	91;"	d
TT_PLATFORM_APPLE_UNICODE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	86;"	d
TT_PLATFORM_CUSTOM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	90;"	d
TT_PLATFORM_ISO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	88;"	d
TT_PLATFORM_MACINTOSH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	87;"	d
TT_PLATFORM_MICROSOFT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	89;"	d
TT_Postscript	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_Postscript;$/;"	t	typeref:struct:TT_Postscript_
TT_Postscript_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_Postscript_$/;"	s
TT_UCR_ALPHABETIC_PRESENTATION_FORMS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1035;"	d
TT_UCR_ANCIENT_GREEK_NUMBERS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1143;"	d
TT_UCR_ANCIENT_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1179;"	d
TT_UCR_ARABIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	882;"	d
TT_UCR_ARABIC_PRESENTATIONS_A	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1037;"	d
TT_UCR_ARABIC_PRESENTATIONS_B	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1047;"	d
TT_UCR_ARABIC_PRESENTATION_FORMS_A	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1218;"	d
TT_UCR_ARABIC_PRESENTATION_FORMS_B	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1220;"	d
TT_UCR_ARMENIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	875;"	d
TT_UCR_ARROWS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	942;"	d
TT_UCR_BALINESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	913;"	d
TT_UCR_BASIC_LATIN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	841;"	d
TT_UCR_BENGALI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	889;"	d
TT_UCR_BLOCK_ELEMENTS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	965;"	d
TT_UCR_BOPOMOFO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	982;"	d
TT_UCR_BOX_DRAWING	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	963;"	d
TT_UCR_BRAILLE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1083;"	d
TT_UCR_BUGINESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1127;"	d
TT_UCR_CANADIAN_ABORIGINAL_SYLLABICS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1071;"	d
TT_UCR_CHAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1177;"	d
TT_UCR_CHEROKEE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1069;"	d
TT_UCR_CJK_COMPATIBILITY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	993;"	d
TT_UCR_CJK_COMPATIBILITY_FORMS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1042;"	d
TT_UCR_CJK_COMPATIBILITY_IDEOGRAPHS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1031;"	d
TT_UCR_CJK_MISC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	987;"	d
TT_UCR_CJK_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	973;"	d
TT_UCR_CJK_UNIFIED_IDEOGRAPHS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1019;"	d
TT_UCR_COMBINING_DIACRITICAL_MARKS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1223;"	d
TT_UCR_COMBINING_DIACRITICAL_MARKS_SYMB	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1225;"	d
TT_UCR_COMBINING_DIACRITICS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	860;"	d
TT_UCR_COMBINING_DIACRITICS_SYMB	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	933;"	d
TT_UCR_COMBINING_HALF_MARKS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1039;"	d
TT_UCR_CONTROL_PICTURES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	957;"	d
TT_UCR_COPTIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	865;"	d
TT_UCR_COUNTING_ROD_NUMERALS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1163;"	d
TT_UCR_CUNEIFORM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1160;"	d
TT_UCR_CURRENCY_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	931;"	d
TT_UCR_CYPRIOT_SYLLABARY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1153;"	d
TT_UCR_CYRILLIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	870;"	d
TT_UCR_DESERET	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1101;"	d
TT_UCR_DEVANAGARI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	887;"	d
TT_UCR_DINGBATS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	971;"	d
TT_UCR_ENCLOSED_ALPHANUMERICS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	961;"	d
TT_UCR_ENCLOSED_CJK_LETTERS_MONTHS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	991;"	d
TT_UCR_ETHIOPIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1065;"	d
TT_UCR_GAME_TILES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1190;"	d
TT_UCR_GENERAL_PUNCTUATION	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	926;"	d
TT_UCR_GEOMETRIC_SHAPES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	967;"	d
TT_UCR_GEORGIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	910;"	d
TT_UCR_GLAGOLITIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1129;"	d
TT_UCR_GOTHIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1099;"	d
TT_UCR_GREEK	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	863;"	d
TT_UCR_GREEK_EXTENDED	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	923;"	d
TT_UCR_GUJARATI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	893;"	d
TT_UCR_GURMUKHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	891;"	d
TT_UCR_HALFWIDTH_FULLWIDTH_FORMS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1049;"	d
TT_UCR_HANGUL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	995;"	d
TT_UCR_HANGUL_COMPATIBILITY_JAMO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	985;"	d
TT_UCR_HANGUL_JAMO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	915;"	d
TT_UCR_HEBREW	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	877;"	d
TT_UCR_HIRAGANA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	975;"	d
TT_UCR_IPA_EXTENSIONS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	851;"	d
TT_UCR_KANBUN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	988;"	d
TT_UCR_KANNADA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	901;"	d
TT_UCR_KATAKANA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	978;"	d
TT_UCR_KAYAH_LI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1173;"	d
TT_UCR_KHAROSHTHI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1155;"	d
TT_UCR_KHMER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1078;"	d
TT_UCR_LAO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	907;"	d
TT_UCR_LATIN1_SUPPLEMENT	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	843;"	d
TT_UCR_LATIN_EXTENDED_A	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	845;"	d
TT_UCR_LATIN_EXTENDED_ADDITIONAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	919;"	d
TT_UCR_LATIN_EXTENDED_B	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	847;"	d
TT_UCR_LEPCHA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1167;"	d
TT_UCR_LETTERLIKE_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	935;"	d
TT_UCR_LIMBU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1121;"	d
TT_UCR_LINEAR_B	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1139;"	d
TT_UCR_MALAYALAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	903;"	d
TT_UCR_MATHEMATICAL_OPERATORS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	950;"	d
TT_UCR_MATH_ALPHANUMERIC_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1109;"	d
TT_UCR_MISCELLANEOUS_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	969;"	d
TT_UCR_MISCELLANEOUS_TECHNICAL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	955;"	d
TT_UCR_MONGOLIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1081;"	d
TT_UCR_MUSICAL_SYMBOLS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1105;"	d
TT_UCR_MYANMAR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1061;"	d
TT_UCR_NEW_TAI_LUE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1125;"	d
TT_UCR_NKO	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	885;"	d
TT_UCR_NON_PLANE_0	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1009;"	d
TT_UCR_NUMBER_FORMS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	937;"	d
TT_UCR_OCR	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	959;"	d
TT_UCR_OGHAM	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1073;"	d
TT_UCR_OLD_ANATOLIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1185;"	d
TT_UCR_OLD_ITALIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1097;"	d
TT_UCR_OLD_PERSIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1147;"	d
TT_UCR_OL_CHIKI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1169;"	d
TT_UCR_ORIYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	895;"	d
TT_UCR_OSMANYA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1151;"	d
TT_UCR_PHAGSPA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	989;"	d
TT_UCR_PHAISTOS_DISC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1181;"	d
TT_UCR_PHILIPPINE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1092;"	d
TT_UCR_PHOENICIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1011;"	d
TT_UCR_PRIVATE_USE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1027;"	d
TT_UCR_PRIVATE_USE_SUPPLEMENTARY	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1112;"	d
TT_UCR_REJANG	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1175;"	d
TT_UCR_RUNIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1075;"	d
TT_UCR_SAURASHTRA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1171;"	d
TT_UCR_SHAVIAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1149;"	d
TT_UCR_SINHALA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1059;"	d
TT_UCR_SMALL_FORM_VARIANTS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1045;"	d
TT_UCR_SPACING_MODIFIER	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	856;"	d
TT_UCR_SPECIALS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1051;"	d
TT_UCR_SUNDANESE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1165;"	d
TT_UCR_SUPERSCRIPTS_SUBSCRIPTS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	929;"	d
TT_UCR_SURROGATES	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1006;"	d
TT_UCR_SYLOTI_NAGRI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1135;"	d
TT_UCR_SYRIAC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1055;"	d
TT_UCR_TAGS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1119;"	d
TT_UCR_TAI_LE	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1123;"	d
TT_UCR_TAI_XUAN_JING	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1157;"	d
TT_UCR_TAMIL	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	897;"	d
TT_UCR_TELUGU	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	899;"	d
TT_UCR_THAANA	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1057;"	d
TT_UCR_THAI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	905;"	d
TT_UCR_TIBETAN	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1053;"	d
TT_UCR_TIFINAGH	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1131;"	d
TT_UCR_UGARITIC	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1145;"	d
TT_UCR_VAI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	879;"	d
TT_UCR_VARIATION_SELECTORS	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1116;"	d
TT_UCR_YI	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1086;"	d
TT_UCR_YIJING	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	1133;"	d
TT_USE_BYTECODE_INTERPRETER	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	858;"	d
TT_VertHeader	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  } TT_VertHeader;$/;"	t	typeref:struct:TT_VertHeader_
TT_VertHeader_	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  typedef struct  TT_VertHeader_$/;"	s
TValue	.\dep\Lua\src\lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValue	.\include\lua\lobject.h	/^} TValue;$/;"	t	typeref:struct:lua_TValue
TValuefields	.\dep\Lua\src\lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon8
TValuefields	.\dep\Lua\src\lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	.\dep\Lua\src\lobject.h	110;"	d
TValuefields	.\include\lua\lobject.h	/^    TValuefields;$/;"	m	struct:TKey::__anon160
TValuefields	.\include\lua\lobject.h	/^  TValuefields;$/;"	m	struct:lua_TValue
TValuefields	.\include\lua\lobject.h	110;"	d
TWOBLUECUBES_CATCHOCTESTCASE_H_INCLUDED	.\include\sol\Catch\projects\XCode\OCTest\OCTest\CatchOCTestCase.h	11;"	d
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_approx.hpp	9;"	d
TWOBLUECUBES_CATCH_APPROX_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2572;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	9;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7133;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	.\include\sol\Catch\include\internal\catch_assertionresult.h	9;"	d
TWOBLUECUBES_CATCH_ASSERTIONRESULT_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	783;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_capture.hpp	9;"	d
TWOBLUECUBES_CATCH_CAPTURE_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	725;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	.\include\sol\Catch\include\internal\catch_clara.h	10;"	d
TWOBLUECUBES_CATCH_CLARA_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3562;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_commandline.hpp	9;"	d
TWOBLUECUBES_CATCH_COMMANDLINE_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3047;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_common.hpp	9;"	d
TWOBLUECUBES_CATCH_COMMON_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7647;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	.\include\sol\Catch\include\internal\catch_common.h	9;"	d
TWOBLUECUBES_CATCH_COMMON_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	61;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_compiler_capabilities.h	9;"	d
TWOBLUECUBES_CATCH_COMPILER_CAPABILITIES_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	75;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_config.hpp	9;"	d
TWOBLUECUBES_CATCH_CONFIG_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3050;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_console_colour.hpp	9;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	4913;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	9;"	d
TWOBLUECUBES_CATCH_CONSOLE_COLOUR_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6888;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	.\include\sol\Catch\include\internal\catch_context.h	9;"	d
TWOBLUECUBES_CATCH_CONTEXT_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	421;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_context_impl.hpp	9;"	d
TWOBLUECUBES_CATCH_CONTEXT_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6701;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_debugger.hpp	10;"	d
TWOBLUECUBES_CATCH_DEBUGGER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7785;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_debugger.h	10;"	d
TWOBLUECUBES_CATCH_DEBUGGER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1949;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_default_main.hpp	9;"	d
TWOBLUECUBES_CATCH_DEFAULT_MAIN_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	10177;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_evaluate.hpp	9;"	d
TWOBLUECUBES_CATCH_EVALUATE_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1245;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	9;"	d
TWOBLUECUBES_CATCH_EXCEPTION_TRANSLATOR_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6550;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	9;"	d
TWOBLUECUBES_CATCH_EXPRESSION_LHS_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1242;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	.\include\sol\Catch\include\internal\catch_fatal_condition.hpp	10;"	d
TWOBLUECUBES_CATCH_FATAL_CONDITION_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	5688;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_generators.hpp	9;"	d
TWOBLUECUBES_CATCH_GENERATORS_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2291;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	9;"	d
TWOBLUECUBES_CATCH_GENERATORS_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7059;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	.\include\sol\Catch\include\catch.hpp	10;"	d
TWOBLUECUBES_CATCH_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	14;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_impl.hpp	9;"	d
TWOBLUECUBES_CATCH_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3033;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_capture.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_CAPTURE_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1912;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_config.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_CONFIG_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3305;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_EXCEPTION_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2471;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_generators.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_GENERATORS_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	424;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_registry_hub.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_REGISTRY_HUB_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2477;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_REPORTER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	4970;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_runner.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_RUNNER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1998;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_tag_alias_registry.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_TAG_ALIAS_REGISTRY_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2653;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	.\include\sol\Catch\include\internal\catch_interfaces_testcase.h	9;"	d
TWOBLUECUBES_CATCH_INTERFACES_TESTCASE_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	573;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	9;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7469;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.h	9;"	d
TWOBLUECUBES_CATCH_LEGACY_REPORTER_ADAPTER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7472;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_list.hpp	9;"	d
TWOBLUECUBES_CATCH_LIST_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	4750;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_matchers.hpp	9;"	d
TWOBLUECUBES_CATCH_MATCHERS_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	845;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_message.hpp	9;"	d
TWOBLUECUBES_CATCH_MESSAGE_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7434;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	.\include\sol\Catch\include\internal\catch_message.h	9;"	d
TWOBLUECUBES_CATCH_MESSAGE_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1856;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_notimplemented_exception.hpp	9;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6680;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	9;"	d
TWOBLUECUBES_CATCH_NOTIMPLEMENTED_EXCEPTION_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	58;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	9;"	d
TWOBLUECUBES_CATCH_OBJC_ARC_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1464;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_objc.hpp	9;"	d
TWOBLUECUBES_CATCH_OBJC_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2839;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_option.hpp	9;"	d
TWOBLUECUBES_CATCH_OPTION_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2677;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	.\include\sol\Catch\include\internal\catch_platform.h	10;"	d
TWOBLUECUBES_CATCH_PLATFORM_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1952;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_ptr.hpp	9;"	d
TWOBLUECUBES_CATCH_PTR_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	448;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	.\include\sol\Catch\include\internal\catch_reenable_warnings.h	9;"	d
TWOBLUECUBES_CATCH_REENABLE_WARNINGS_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8983;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	9;"	d
TWOBLUECUBES_CATCH_REGISTRY_HUB_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6328;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_BASES_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8437;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_COMPACT_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	9819;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_CONSOLE_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	9387;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_JUNIT_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	9178;"	d
TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_MULTI_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8303;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRARS_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8672;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6510;"	d
TWOBLUECUBES_CATCH_REPORTER_TEAMCITY_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	9;"	d
TWOBLUECUBES_CATCH_REPORTER_XML_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8434;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_result_builder.hpp	9;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8066;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_result_builder.h	9;"	d
TWOBLUECUBES_CATCH_RESULT_BUILDER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	728;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	.\include\sol\Catch\include\internal\catch_result_type.h	9;"	d
TWOBLUECUBES_CATCH_RESULT_TYPE_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	731;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	.\include\sol\Catch\include\catch_session.hpp	9;"	d
TWOBLUECUBES_CATCH_RUNNER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3044;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_run_context.hpp	9;"	d
TWOBLUECUBES_CATCH_RUNNER_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	5382;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_section.hpp	9;"	d
TWOBLUECUBES_CATCH_SECTION_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7747;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	.\include\sol\Catch\include\internal\catch_section.h	9;"	d
TWOBLUECUBES_CATCH_SECTION_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2134;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_section_info.hpp	9;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	.\include\sol\Catch\include\internal\catch_section_info.h	9;"	d
TWOBLUECUBES_CATCH_SECTION_INFO_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2137;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	.\include\sol\Catch\include\internal\catch_streambuf.h	9;"	d
TWOBLUECUBES_CATCH_STREAMBUF_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3361;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_stream.hpp	10;"	d
TWOBLUECUBES_CATCH_STREAM_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6704;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	.\include\sol\Catch\include\internal\catch_stream.h	10;"	d
TWOBLUECUBES_CATCH_STREAM_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3358;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	.\include\sol\Catch\include\internal\catch_tag_alias.h	9;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2656;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	9;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8211;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	.\include\sol\Catch\include\internal\catch_tag_alias_registry.h	9;"	d
TWOBLUECUBES_CATCH_TAG_ALIAS_REGISTRY_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8214;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7213;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	.\include\sol\Catch\include\internal\catch_test_case_info.h	9;"	d
TWOBLUECUBES_CATCH_TEST_CASE_INFO_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2756;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_CASE_REGISTRY_IMPL_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6331;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_CASE_TRACKER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	5385;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_registry.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_REGISTRY_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	570;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_spec.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3061;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	9;"	d
TWOBLUECUBES_CATCH_TEST_SPEC_PARSER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3053;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	.\include\sol\Catch\include\internal\catch_text.h	9;"	d
TWOBLUECUBES_CATCH_TEXT_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	4753;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	.\include\sol\Catch\include\internal\catch_timer.h	9;"	d
TWOBLUECUBES_CATCH_TIMER_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2235;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_tostring.hpp	9;"	d
TWOBLUECUBES_CATCH_TOSTRING_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7874;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	.\include\sol\Catch\include\internal\catch_tostring.h	9;"	d
TWOBLUECUBES_CATCH_TOSTRING_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	1454;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_totals.hpp	9;"	d
TWOBLUECUBES_CATCH_TOTALS_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	2140;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_version.hpp	9;"	d
TWOBLUECUBES_CATCH_VERSION_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	7400;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	.\include\sol\Catch\include\internal\catch_version.h	9;"	d
TWOBLUECUBES_CATCH_VERSION_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	6095;"	d
TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	9;"	d
TWOBLUECUBES_CATCH_WILDCARD_PATTERN_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3069;"	d
TWOBLUECUBES_CATCH_WITH_MAIN_HPP_INCLUDED	.\include\sol\Catch\include\catch_with_main.hpp	9;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	9;"	d
TWOBLUECUBES_CATCH_XMLWRITER_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	8759;"	d
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED	.\include\sol\Catch\include\external\clara.h	193;"	d
TWOBLUECUBES_CLARA_COMPILERS_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3743;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	.\include\sol\Catch\include\external\clara.h	15;"	d
TWOBLUECUBES_CLARA_H_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	3581;"	d
TWOBLUECUBES_ITCHRUNNERAPPDELEGATE_H_INCLUDED	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerAppDelegate.h	10;"	d
TWOBLUECUBES_ITCHRUNNERMAINVIEW_H_INCLUDED	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerMainView.h	10;"	d
TWOBLUECUBES_ITCHRUNNERREPORTER_H_INCLUDED	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	10;"	d
TWOBLUECUBES_SINGLE_INCLUDE_CATCH_HPP_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	12;"	d
TWOBLUECUBES_TESTOBJ_H_INCLUDED	.\include\sol\Catch\projects\XCode\OCTest\OCTest\TestObj.h	11;"	d
TWOBLUECUBES_TESTOBJ_H_INCLUDED	.\include\sol\Catch\projects\XCode\iOSTest\iOSTest\TestObj.h	11;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	.\include\sol\Catch\include\external\tbc_text_format.h	12;"	d
TWOBLUECUBES_TEXT_FORMAT_H_ALREADY_INCLUDED	.\include\sol\Catch\single_include\catch.hpp	4763;"	d
TWOBLUECUBES_TEXT_FORMAT_H_INCLUDED	.\include\sol\Catch\include\external\tbc_text_format.h	15;"	d
TWO_FILE_COMMANDLINE	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	39;"	d
Tab	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Tab	.\include\SFML\Window\Keyboard.hpp	/^        Tab,          \/\/\/< The Tabulation key$/;"	e	enum:sf::Keyboard::Key
Table	.\dep\Lua\src\lobject.h	/^typedef struct Table {$/;"	s
Table	.\dep\Lua\src\lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Table	.\include\lua\lobject.h	/^typedef struct Table {$/;"	s
Table	.\include\lua\lobject.h	/^} Table;$/;"	t	typeref:struct:Table
Table_Version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   Table_Version;$/;"	m	struct:TT_Header_
Tag	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        enum Mode{ None, Name, QuotedName, Tag };$/;"	e	enum:Catch::TestSpecParser::Mode
TagAlias	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^        TagAlias( std::string _tag, SourceLineInfo _lineInfo ) : tag( _tag ), lineInfo( _lineInfo ) {}$/;"	f	struct:Catch::TagAlias
TagAlias	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^    struct TagAlias {$/;"	s	namespace:Catch
TagAliasRegistry	.\include\sol\Catch\include\internal\catch_tag_alias_registry.h	/^    class TagAliasRegistry : public ITagAliasRegistry {$/;"	c	namespace:Catch
TagInfo	.\include\sol\Catch\include\internal\catch_list.hpp	/^        TagInfo() : count ( 0 ) {}$/;"	f	struct:Catch::TagInfo
TagInfo	.\include\sol\Catch\include\internal\catch_list.hpp	/^    struct TagInfo {$/;"	s	namespace:Catch
TagPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            TagPattern( std::string const& tag ) : m_tag( toLower( tag ) ) {}$/;"	f	class:Catch::TestSpec::TagPattern
TagPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        class TagPattern : public Pattern {$/;"	c	class:Catch::TestSpec
Target	.\src\include\Target.h	/^	Target(Vector2 v) : x(v.X), y(v.Y) {}$/;"	f	class:Target
Target	.\src\include\Target.h	/^	Target(Vector2* v) : x(v->X), y(v->Y) {}$/;"	f	class:Target
Target	.\src\include\Target.h	/^	Target(float x, float y) : x(x), y(y) {}$/;"	f	class:Target
Target	.\src\include\Target.h	/^class Target {$/;"	c
Tbc	.\include\sol\Catch\include\external\clara.h	/^namespace Tbc {$/;"	n	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE
Tbc	.\include\sol\Catch\include\external\tbc_text_format.h	/^namespace Tbc {$/;"	n	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE
Tcp	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
Tcp	.\include\SFML\Network\Socket.hpp	/^        Tcp, \/\/\/< TCP protocol$/;"	e	enum:sf::Socket::Type
TcpListener	.\dep\SFML\include\SFML\Network\TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpListener	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^TcpListener::TcpListener() :$/;"	f	class:sf::TcpListener
TcpListener	.\include\SFML\Network\TcpListener.hpp	/^class SFML_NETWORK_API TcpListener : public Socket$/;"	c	namespace:sf
TcpSocket	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
TcpSocket	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^TcpSocket::TcpSocket() :$/;"	f	class:sf::TcpSocket
TcpSocket	.\include\SFML\Network\TcpSocket.hpp	/^class SFML_NETWORK_API TcpSocket : public Socket$/;"	c	namespace:sf
TeamCityReporter	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        TeamCityReporter( ReporterConfig const& _config )$/;"	f	struct:Catch::TeamCityReporter
TeamCityReporter	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^    struct TeamCityReporter : StreamingReporterBase {$/;"	s	namespace:Catch
Test	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        Test( unsigned int v )$/;"	f	struct:ObjectWithNonConstEqualityOperator::Test
Test	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    struct Test$/;"	s	namespace:ObjectWithNonConstEqualityOperator	file:
TestCase	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^    class TestCase : public TestCaseInfo {$/;"	c	namespace:Catch
TestCase	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCase::TestCase( ITestCase* testCase, TestCaseInfo const& info ) : TestCaseInfo( info ), test( testCase ) {}$/;"	f	class:Catch::TestCase
TestCase	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCase::TestCase( TestCase const& other )$/;"	f	class:Catch::TestCase
TestCaseInfo	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^    struct TestCaseInfo {$/;"	s	namespace:Catch
TestCaseInfo	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCaseInfo::TestCaseInfo( TestCaseInfo const& other )$/;"	f	class:Catch::TestCaseInfo
TestCaseInfo	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCaseInfo::TestCaseInfo( std::string const& _name,$/;"	f	class:Catch::TestCaseInfo
TestCaseNode	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        typedef Node<TestCaseStats, SectionNode> TestCaseNode;$/;"	t	struct:Catch::CumulativeReporterBase
TestCaseStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestCaseStats(  TestCaseInfo const& _testInfo,$/;"	f	struct:Catch::TestCaseStats
TestCaseStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct TestCaseStats {$/;"	s	namespace:Catch
TestCaseTracking	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    namespace TestCaseTracking {$/;"	n	namespace:Catch
TestCaseTracking	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^namespace TestCaseTracking {$/;"	n	namespace:Catch
TestClass	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^        TestClass()$/;"	f	class:__anon185::TestClass
TestClass	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^    class TestClass$/;"	c	namespace:__anon185	file:
TestData	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    TestData()$/;"	f	struct:TestData
TestData	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^struct TestData {$/;"	s	file:
TestDef	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^struct TestDef {$/;"	s	file:
TestEventListenerBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        TestEventListenerBase( ReporterConfig const& _config )$/;"	f	struct:Catch::TestEventListenerBase
TestEventListenerBase	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^    struct TestEventListenerBase : StreamingReporterBase {$/;"	s	namespace:Catch
TestFailureException	.\include\sol\Catch\include\internal\catch_result_builder.h	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFailureException	.\include\sol\Catch\single_include\catch.hpp	/^    struct TestFailureException{};$/;"	s	namespace:Catch
TestFunction	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestFunction	.\include\sol\Catch\single_include\catch.hpp	/^typedef void(*TestFunction)();$/;"	t	namespace:Catch
TestGroupNode	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        typedef Node<TestGroupStats, TestCaseNode> TestGroupNode;$/;"	t	struct:Catch::CumulativeReporterBase
TestGroupStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestGroupStats( GroupInfo const& _groupInfo )$/;"	f	struct:Catch::TestGroupStats
TestGroupStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestGroupStats( GroupInfo const& _groupInfo,$/;"	f	struct:Catch::TestGroupStats
TestGroupStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct TestGroupStats {$/;"	s	namespace:Catch
TestRegistry	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        TestRegistry()$/;"	f	class:Catch::TestRegistry
TestRegistry	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    class TestRegistry : public ITestCaseRegistry {$/;"	c	namespace:Catch
TestRunInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestRunInfo( std::string const& _name ) : name( _name ) {}$/;"	f	struct:Catch::TestRunInfo
TestRunInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct TestRunInfo {$/;"	s	namespace:Catch
TestRunNode	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        typedef Node<TestRunStats, TestGroupNode> TestRunNode;$/;"	t	struct:Catch::CumulativeReporterBase
TestRunStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestRunStats(   TestRunInfo const& _runInfo,$/;"	f	struct:Catch::TestRunStats
TestRunStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestRunStats( TestRunStats const& _other )$/;"	f	struct:Catch::TestRunStats
TestRunStats	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^    struct TestRunStats {$/;"	s	namespace:Catch
TestSpec	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^    class TestSpec {$/;"	c	namespace:Catch
TestSpecParser	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        TestSpecParser( ITagAliasRegistry const& tagAliases ) : m_tagAliases( &tagAliases ) {}$/;"	f	class:Catch::TestSpecParser
TestSpecParser	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^    class TestSpecParser {$/;"	c	namespace:Catch
TestedBranch	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^            TestedBranch,$/;"	e	enum:Catch::RunningSection::State
TestedLeaf	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^            TestedLeaf$/;"	e	enum:Catch::RunningSection::State
Text	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Text	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^Text::Text() :$/;"	f	class:sf::Text
Text	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^Text::Text(const String& string, const Font& font, unsigned int characterSize) :$/;"	f	class:sf::Text
Text	.\include\SFML\Graphics\Text.hpp	/^class SFML_GRAPHICS_API Text : public Drawable, public Transformable$/;"	c	namespace:sf
Text	.\include\sol\Catch\include\external\clara.h	/^        Text( std::string const& _str, TextAttributes const& _attr = TextAttributes() )$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
Text	.\include\sol\Catch\include\external\clara.h	/^    class Text {$/;"	c	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
Text	.\include\sol\Catch\include\external\tbc_text_format.h	/^        Text( std::string const& _str, TextAttributes const& _attr = TextAttributes() )$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
Text	.\include\sol\Catch\include\external\tbc_text_format.h	/^    class Text {$/;"	c	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextAttributes	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes()$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
TextAttributes	.\include\sol\Catch\include\external\clara.h	/^    struct TextAttributes {$/;"	s	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextAttributes	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes()$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
TextAttributes	.\include\sol\Catch\include\external\tbc_text_format.h	/^    struct TextAttributes {$/;"	s	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
TextEntered	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEntered	.\include\SFML\Window\Event.hpp	/^        TextEntered,            \/\/\/< A character was entered (data in event.text)$/;"	e	enum:sf::Event::EventType
TextEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
TextEvent	.\include\SFML\Window\Event.hpp	/^    struct TextEvent$/;"	s	class:sf::Event
Texture	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
Texture	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Texture::Texture() :$/;"	f	class:sf::Texture
Texture	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Texture::Texture(const Texture& copy) :$/;"	f	class:sf::Texture
Texture	.\include\SFML\Graphics\Texture.hpp	/^class SFML_GRAPHICS_API Texture : GlResource$/;"	c	namespace:sf
TextureSaver	.\dep\SFML\src\SFML\Graphics\TextureSaver.cpp	/^TextureSaver::TextureSaver()$/;"	f	class:sf::priv::TextureSaver
TextureSaver	.\dep\SFML\src\SFML\Graphics\TextureSaver.hpp	/^class TextureSaver$/;"	c	namespace:sf::priv
TextureTable	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader
TextureTable	.\include\SFML\Graphics\Shader.hpp	/^    typedef std::map<int, const Texture*> TextureTable;$/;"	t	class:sf::Shader
Thread	.\dep\SFML\include\SFML\System\Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
Thread	.\include\SFML\System\Thread.hpp	/^class SFML_SYSTEM_API Thread : NonCopyable$/;"	c	namespace:sf
ThreadImpl	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^ThreadImpl::ThreadImpl(Thread* owner) :$/;"	f	class:sf::priv::ThreadImpl
ThreadImpl	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	/^class ThreadImpl : NonCopyable$/;"	c	namespace:sf::priv
ThreadImpl	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^ThreadImpl::ThreadImpl(Thread* owner)$/;"	f	class:sf::priv::ThreadImpl
ThreadImpl	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	/^class ThreadImpl : NonCopyable$/;"	c	namespace:sf::priv
ThreadLocal	.\dep\SFML\include\SFML\System\ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocal	.\dep\SFML\src\SFML\System\ThreadLocal.cpp	/^ThreadLocal::ThreadLocal(void* value)$/;"	f	class:sf::ThreadLocal
ThreadLocal	.\include\SFML\System\ThreadLocal.hpp	/^class SFML_SYSTEM_API ThreadLocal : NonCopyable$/;"	c	namespace:sf
ThreadLocalImpl	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^ThreadLocalImpl::ThreadLocalImpl()$/;"	f	class:sf::priv::ThreadLocalImpl
ThreadLocalImpl	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.hpp	/^class ThreadLocalImpl : NonCopyable$/;"	c	namespace:sf::priv
ThreadLocalImpl	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^ThreadLocalImpl::ThreadLocalImpl()$/;"	f	class:sf::priv::ThreadLocalImpl
ThreadLocalImpl	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.hpp	/^class ThreadLocalImpl : NonCopyable$/;"	c	namespace:sf::priv
ThreadLocalPtr	.\dep\SFML\include\SFML\System\ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThreadLocalPtr	.\include\SFML\System\ThreadLocalPtr.hpp	/^class ThreadLocalPtr : private ThreadLocal$/;"	c	namespace:sf
ThrewException	.\include\sol\Catch\include\internal\catch_result_type.h	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
ThrewException	.\include\sol\Catch\single_include\catch.hpp	/^        ThrewException = Exception | 1,$/;"	e	enum:Catch::ResultWas::OfType
Throws	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^            Throws = 1 << 4$/;"	e	enum:Catch::TestCaseInfo::SpecialProperties
Tilde	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Tilde	.\include\SFML\Window\Keyboard.hpp	/^        Tilde,        \/\/\/< The ~ key$/;"	e	enum:sf::Keyboard::Key
Time	.\dep\SFML\include\SFML\System\Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Time	.\dep\SFML\src\SFML\System\Time.cpp	/^Time::Time() :$/;"	f	class:sf::Time
Time	.\dep\SFML\src\SFML\System\Time.cpp	/^Time::Time(Int64 microseconds) :$/;"	f	class:sf::Time
Time	.\include\SFML\System\Time.hpp	/^class SFML_SYSTEM_API Time$/;"	c	namespace:sf
Timer	.\include\sol\Catch\include\internal\catch_timer.h	/^        Timer() : m_ticks( 0 ) {}$/;"	f	class:Catch::Timer
Timer	.\include\sol\Catch\include\internal\catch_timer.h	/^    class Timer {$/;"	c	namespace:Catch
Titlebar	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon116
Titlebar	.\include\SFML\Window\WindowStyle.hpp	/^        Titlebar   = 1 << 0, \/\/\/< Title bar + fixed border$/;"	e	enum:sf::Style::__anon176
Token	.\dep\Lua\src\llex.h	/^typedef struct Token {$/;"	s
Token	.\dep\Lua\src\llex.h	/^} Token;$/;"	t	typeref:struct:Token
Token	.\include\lua\llex.h	/^typedef struct Token {$/;"	s
Token	.\include\lua\llex.h	/^} Token;$/;"	t	typeref:struct:Token
Token	.\include\sol\Catch\include\external\clara.h	/^            Token( Type _type, std::string const& _data ) : type( _type ), data( _data ) {}$/;"	f	struct:Clara::Parser::Token
Token	.\include\sol\Catch\include\external\clara.h	/^        struct Token {$/;"	s	struct:Clara::Parser
Totals	.\include\sol\Catch\include\internal\catch_totals.hpp	/^    struct Totals {$/;"	s	namespace:Catch
Touch	.\dep\SFML\include\SFML\Window\Touch.hpp	/^class SFML_WINDOW_API Touch$/;"	c	namespace:sf
Touch	.\include\SFML\Window\Touch.hpp	/^class SFML_WINDOW_API Touch$/;"	c	namespace:sf
TouchBegan	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TouchBegan,             \/\/\/< A touch event began (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchBegan	.\include\SFML\Window\Event.hpp	/^        TouchBegan,             \/\/\/< A touch event began (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEnded	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TouchEnded,             \/\/\/< A touch event ended (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEnded	.\include\SFML\Window\Event.hpp	/^        TouchEnded,             \/\/\/< A touch event ended (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchEvent	.\dep\SFML\include\SFML\Window\Event.hpp	/^    struct TouchEvent$/;"	s	class:sf::Event
TouchEvent	.\include\SFML\Window\Event.hpp	/^    struct TouchEvent$/;"	s	class:sf::Event
TouchMoved	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TouchMoved,             \/\/\/< A touch moved (data in event.touch)$/;"	e	enum:sf::Event::EventType
TouchMoved	.\include\SFML\Window\Event.hpp	/^        TouchMoved,             \/\/\/< A touch moved (data in event.touch)$/;"	e	enum:sf::Event::EventType
Tower	.\src\include\Tower.h	/^class Tower : public Object {$/;"	c
Tower	.\src\src\Tower.cpp	/^Tower::Tower(Map* map, float x, float y, Stats s) : Object(map, x, y, 20, s),$/;"	f	class:Tower
TrackerBase	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        TrackerBase( std::string const& name, TrackerContext& ctx, ITracker* parent )$/;"	f	class:Catch::TestCaseTracking::TrackerBase
TrackerBase	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    class TrackerBase : public ITracker {$/;"	c	namespace:Catch::TestCaseTracking
TrackerContext	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        TrackerContext()$/;"	f	class:Catch::TestCaseTracking::TrackerContext
TrackerContext	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    class TrackerContext {$/;"	c	namespace:Catch::TestCaseTracking
TrackerHasName	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            TrackerHasName( std::string const& name ) : m_name( name ) {}$/;"	f	class:Catch::TestCaseTracking::TrackerBase::TrackerHasName
TrackerHasName	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        class TrackerHasName {$/;"	c	class:Catch::TestCaseTracking::TrackerBase
Trait	.\src\include\Trait.h	/^class Trait {$/;"	c
Trait	.\src\src\Trait.cpp	/^Trait::Trait() {$/;"	f	class:Trait
TransferAborted	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferAborted	.\include\SFML\Network\Ftp.hpp	/^            TransferAborted           = 426, \/\/\/< Connection closed, transfer aborted$/;"	e	enum:sf::Ftp::Response::Status
TransferMode	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
TransferMode	.\include\SFML\Network\Ftp.hpp	/^    enum TransferMode$/;"	g	class:sf::Ftp
Transform	.\dep\SFML\include\SFML\Graphics\Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transform	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform::Transform()$/;"	f	class:sf::Transform
Transform	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform::Transform(float a00, float a01, float a02,$/;"	f	class:sf::Transform
Transform	.\include\SFML\Graphics\Transform.hpp	/^class SFML_GRAPHICS_API Transform$/;"	c	namespace:sf
Transformable	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
Transformable	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^Transformable::Transformable() :$/;"	f	class:sf::Transformable
Transformable	.\include\SFML\Graphics\Transformable.hpp	/^class SFML_GRAPHICS_API Transformable$/;"	c	namespace:sf
Transparent	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color
Transparent	.\include\SFML\Graphics\Color.hpp	/^    static const Color Transparent; \/\/\/< Transparent (black) predefined color$/;"	m	class:sf::Color
Triangles	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    Triangles,      \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
Triangles	.\include\SFML\Graphics\PrimitiveType.hpp	/^    Triangles,      \/\/\/< List of individual triangles$/;"	e	enum:sf::PrimitiveType
TrianglesFan	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    TrianglesFan,   \/\/\/< List of connected triangles, a point uses the common center and the previous point to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesFan	.\include\SFML\Graphics\PrimitiveType.hpp	/^    TrianglesFan,   \/\/\/< List of connected triangles, a point uses the common center and the previous point to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^    TrianglesStrip, \/\/\/< List of connected triangles, a point uses the two previous points to form a triangle$/;"	e	enum:sf::PrimitiveType
TrianglesStrip	.\include\SFML\Graphics\PrimitiveType.hpp	/^    TrianglesStrip, \/\/\/< List of connected triangles, a point uses the two previous points to form a triangle$/;"	e	enum:sf::PrimitiveType
TrueType	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct TrueType { char sizer[1]; };$/;"	s	namespace:Catch::Detail
TrueType	.\include\sol\Catch\single_include\catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	s	namespace:Catch::Detail
Tuple	.\include\sol\single\sol\sol.hpp	/^		typedef std::tuple<clean_type_t<Tn> ...> Tuple;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
Tuple	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::tuple<clean_type_t<Tn> ...> Tuple;$/;"	t	struct:sol::usertype_metatable
TupleDetail	.\include\sol\Catch\include\internal\catch_tostring.h	/^namespace TupleDetail {$/;"	n	namespace:Catch
TupleDetail	.\include\sol\Catch\single_include\catch.hpp	/^namespace TupleDetail {$/;"	n	namespace:Catch
Type	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	.\dep\SFML\include\SFML\Network\Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^    enum Type$/;"	g	class:sf::Sensor
Type	.\include\SFML\Graphics\Shader.hpp	/^    enum Type$/;"	g	class:sf::Shader
Type	.\include\SFML\Network\Socket.hpp	/^    enum Type$/;"	g	class:sf::Socket
Type	.\include\SFML\Window\Sensor.hpp	/^    enum Type$/;"	g	class:sf::Sensor
Type	.\include\sol\Catch\include\external\clara.h	/^            enum Type { Positional, ShortOpt, LongOpt };$/;"	g	struct:Clara::Parser::Token
TypeFace	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    TypeFace[16];$/;"	m	struct:TT_PCLT_
TypeFamily	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  TypeFamily;$/;"	m	struct:TT_PCLT_
U	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
U	.\include\SFML\Window\Joystick.hpp	/^        U,    \/\/\/< The U axis$/;"	e	enum:sf::Joystick::Axis
U	.\include\SFML\Window\Keyboard.hpp	/^        U,            \/\/\/< The U key$/;"	e	enum:sf::Keyboard::Key
UBox	.\dep\Lua\src\lauxlib.c	/^typedef struct UBox {$/;"	s	file:
UBox	.\dep\Lua\src\lauxlib.c	/^} UBox;$/;"	t	typeref:struct:UBox	file:
UINT16	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned int UINT16;$/;"	t
UINT16	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned short UINT16;$/;"	t
UINT8	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef char UINT8;$/;"	t
UINT8	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef short UINT8;$/;"	t
UINT8	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef unsigned char UINT8;$/;"	t
UIWindow	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^SFML_DECLARE_OBJC_CLASS(UIWindow);$/;"	v
UNARY_PRIORITY	.\dep\Lua\src\lparser.c	1040;"	d	file:
UNDERLINED	.\src\include\trmclr.hpp	/^        UNDERLINED  = 0b10000       << SHIFT,$/;"	e	enum:trmclr::Attribute::__anon191
UNUSED	.\dep\Lua\src\llimits.h	106;"	d
UNUSED	.\include\lua\llimits.h	106;"	d
UPSAMPLE_MERGING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	300;"	d
UPSAMPLE_SCALING_SUPPORTED	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	299;"	d
UPVALNAME	.\dep\Lua\src\luac.c	285;"	d	file:
USE_SETMODE	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	40;"	d
UTF8BUFFSZ	.\dep\Lua\src\lobject.h	531;"	d
UTF8BUFFSZ	.\include\lua\lobject.h	531;"	d
UTF8PATT	.\dep\Lua\src\lutf8lib.c	235;"	d	file:
UTIL_CONVERT_H	.\src\include\Convert.h	2;"	d
UTString	.\dep\Lua\src\lobject.h	/^typedef union UTString {$/;"	u
UTString	.\dep\Lua\src\lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UTString	.\include\lua\lobject.h	/^typedef union UTString {$/;"	u
UTString	.\include\lua\lobject.h	/^} UTString;$/;"	t	typeref:union:UTString
UUdata	.\dep\Lua\src\lobject.h	/^typedef union UUdata {$/;"	u
UUdata	.\dep\Lua\src\lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
UUdata	.\include\lua\lobject.h	/^typedef union UUdata {$/;"	u
UUdata	.\include\lua\lobject.h	/^} UUdata;$/;"	t	typeref:union:UUdata
Udata	.\dep\Lua\src\lobject.h	/^typedef struct Udata {$/;"	s
Udata	.\dep\Lua\src\lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
Udata	.\include\lua\lobject.h	/^typedef struct Udata {$/;"	s
Udata	.\include\lua\lobject.h	/^} Udata;$/;"	t	typeref:struct:Udata
Udp	.\dep\SFML\include\SFML\Network\Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
Udp	.\include\SFML\Network\Socket.hpp	/^        Udp  \/\/\/< UDP protocol$/;"	e	enum:sf::Socket::Type
UdpSocket	.\dep\SFML\include\SFML\Network\UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
UdpSocket	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^UdpSocket::UdpSocket() :$/;"	f	class:sf::UdpSocket
UdpSocket	.\include\SFML\Network\UdpSocket.hpp	/^class SFML_NETWORK_API UdpSocket : public Socket$/;"	c	namespace:sf
Uint16	.\dep\SFML\include\SFML\Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf
Uint16	.\include\SFML\Config.hpp	/^    typedef unsigned short Uint16;$/;"	t	namespace:sf
Uint32	.\dep\SFML\include\SFML\Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf
Uint32	.\include\SFML\Config.hpp	/^    typedef unsigned int Uint32;$/;"	t	namespace:sf
Uint64	.\dep\SFML\include\SFML\Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf
Uint64	.\dep\SFML\include\SFML\Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf
Uint64	.\include\SFML\Config.hpp	/^        typedef unsigned __int64 Uint64;$/;"	t	namespace:sf
Uint64	.\include\SFML\Config.hpp	/^        typedef unsigned long long Uint64;$/;"	t	namespace:sf
Uint8	.\dep\SFML\include\SFML\Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf
Uint8	.\include\SFML\Config.hpp	/^    typedef unsigned char Uint8;$/;"	t	namespace:sf
UnOpr	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	.\dep\Lua\src\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
UnOpr	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	g
UnOpr	.\include\lua\lcode.h	/^typedef enum UnOpr { OPR_MINUS, OPR_BNOT, OPR_NOT, OPR_LEN, OPR_NOUNOPR } UnOpr;$/;"	t	typeref:enum:UnOpr
Unauthorized	.\dep\SFML\include\SFML\Network\Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be accessed$/;"	e	enum:sf::Http::Response::Status
Unauthorized	.\include\SFML\Network\Http.hpp	/^            Unauthorized        = 401, \/\/\/< The requested page needs an authentication to be accessed$/;"	e	enum:sf::Http::Response::Status
Underlined	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^        Underlined    = 1 << 2, \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
Underlined	.\include\SFML\Graphics\Text.hpp	/^        Underlined    = 1 << 2, \/\/\/< Underlined characters$/;"	e	enum:sf::Text::Style
Uninitalized	.\src\include\Game.h	/^	enum GameState {Uninitalized, Paused, Playing, Ending};$/;"	e	enum:Game::GameState
Uninitalized	.\src\include\Window.h	/^	enum WindowState {Running, Paused, Uninitalized};$/;"	e	enum:Window::WindowState
Unit	.\src\include\Unit.h	/^class Unit : public Object {$/;"	c
Unit	.\src\src\Unit.cpp	/^Unit::Unit() {$/;"	f	class:Unit
Unit	.\src\src\Unit.cpp	/^Unit::Unit(Map* map, float x, float y, int collRadius, Stats s)$/;"	f	class:Unit
Units_Per_EM	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  Units_Per_EM;$/;"	m	struct:TT_Header_
Unknown	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Unknown	.\include\SFML\Window\Keyboard.hpp	/^        Unknown = -1, \/\/\/< Unhandled key$/;"	e	enum:sf::Keyboard::Key
Unknown	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
Unknown	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^            Unknown,$/;"	e	enum:Catch::RunningSection::State
Unknown	.\include\sol\Catch\single_include\catch.hpp	/^        Unknown = -1,$/;"	e	enum:Catch::ResultWas::OfType
UnpositionalTag	.\include\sol\Catch\include\external\clara.h	/^    struct UnpositionalTag {};$/;"	s	namespace:Clara
Unsafe	.\include\sol\Optional\test_type_traits.cpp	/^  Unsafe( Unsafe && ){}$/;"	f	struct:std::experimental::Unsafe
Unsafe	.\include\sol\Optional\test_type_traits.cpp	/^  Unsafe( Unsafe const & ){}$/;"	f	struct:std::experimental::Unsafe
Unsafe	.\include\sol\Optional\test_type_traits.cpp	/^  Unsafe(){}$/;"	f	struct:std::experimental::Unsafe
Unsafe	.\include\sol\Optional\test_type_traits.cpp	/^struct Unsafe$/;"	s	namespace:std::experimental	file:
Up	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
Up	.\include\SFML\Window\Keyboard.hpp	/^        Up,           \/\/\/< Up arrow$/;"	e	enum:sf::Keyboard::Key
UpVal	.\dep\Lua\src\lfunc.h	/^struct UpVal {$/;"	s
UpVal	.\dep\Lua\src\lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
UpVal	.\include\lua\lfunc.h	/^struct UpVal {$/;"	s
UpVal	.\include\lua\lobject.h	/^typedef struct UpVal UpVal;$/;"	t	typeref:struct:UpVal
Upvaldesc	.\dep\Lua\src\lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	.\dep\Lua\src\lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
Upvaldesc	.\include\lua\lobject.h	/^typedef struct Upvaldesc {$/;"	s
Upvaldesc	.\include\lua\lobject.h	/^} Upvaldesc;$/;"	t	typeref:struct:Upvaldesc
UserAcceleration	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^        UserAcceleration, \/\/\/< Measures the direction and intensity of device acceleration, independent of the gravity (m\/s^2)$/;"	e	enum:sf::Sensor::Type
UserAcceleration	.\include\SFML\Window\Sensor.hpp	/^        UserAcceleration, \/\/\/< Measures the direction and intensity of device acceleration, independent of the gravity (m\/s^2)$/;"	e	enum:sf::Sensor::Type
Utf	.\dep\SFML\include\SFML\System\Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	.\dep\SFML\include\SFML\System\Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	.\dep\SFML\include\SFML\System\Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf	.\include\SFML\System\Utf.hpp	/^class Utf<16>$/;"	c	namespace:sf
Utf	.\include\SFML\System\Utf.hpp	/^class Utf<32>$/;"	c	namespace:sf
Utf	.\include\SFML\System\Utf.hpp	/^class Utf<8>$/;"	c	namespace:sf
Utf16	.\dep\SFML\include\SFML\System\Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf
Utf16	.\include\SFML\System\Utf.hpp	/^typedef Utf<16> Utf16;$/;"	t	namespace:sf
Utf32	.\dep\SFML\include\SFML\System\Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf
Utf32	.\include\SFML\System\Utf.hpp	/^typedef Utf<32> Utf32;$/;"	t	namespace:sf
Utf8	.\dep\SFML\include\SFML\System\Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf
Utf8	.\include\SFML\System\Utf.hpp	/^typedef Utf<8>  Utf8;$/;"	t	namespace:sf
V	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
V	.\include\SFML\Window\Joystick.hpp	/^        V,    \/\/\/< The V axis$/;"	e	enum:sf::Joystick::Axis
V	.\include\SFML\Window\Keyboard.hpp	/^        V,            \/\/\/< The V key$/;"	e	enum:sf::Keyboard::Key
VCALL	.\dep\Lua\src\lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anon11
VCALL	.\include\lua\lparser.h	/^  VCALL,  \/* expression is a function call; info = instruction pc *\/$/;"	e	enum:__anon162
VECTOR2_H	.\src\include\Vector2.h	2;"	d
VFALSE	.\dep\Lua\src\lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anon11
VFALSE	.\include\lua\lparser.h	/^  VFALSE,  \/* constant false *\/$/;"	e	enum:__anon162
VINDEXED	.\dep\Lua\src\lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anon11
VINDEXED	.\include\lua\lparser.h	/^  VINDEXED,  \/* indexed variable;$/;"	e	enum:__anon162
VJMP	.\dep\Lua\src\lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anon11
VJMP	.\include\lua\lparser.h	/^  VJMP,  \/* expression is a test\/comparison;$/;"	e	enum:__anon162
VK	.\dep\Lua\src\lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anon11
VK	.\include\lua\lparser.h	/^  VK,  \/* constant in 'k'; info = index of constant in 'k' *\/$/;"	e	enum:__anon162
VKFLT	.\dep\Lua\src\lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anon11
VKFLT	.\include\lua\lparser.h	/^  VKFLT,  \/* floating constant; nval = numerical float value *\/$/;"	e	enum:__anon162
VKINT	.\dep\Lua\src\lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anon11
VKINT	.\include\lua\lparser.h	/^  VKINT,  \/* integer constant; nval = numerical integer value *\/$/;"	e	enum:__anon162
VLOCAL	.\dep\Lua\src\lparser.h	/^  VLOCAL,  \/* local variable; info = local register *\/$/;"	e	enum:__anon11
VLOCAL	.\include\lua\lparser.h	/^  VLOCAL,  \/* local variable; info = local register *\/$/;"	e	enum:__anon162
VNIL	.\dep\Lua\src\lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anon11
VNIL	.\include\lua\lparser.h	/^  VNIL,  \/* constant nil *\/$/;"	e	enum:__anon162
VNONRELOC	.\dep\Lua\src\lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anon11
VNONRELOC	.\include\lua\lparser.h	/^  VNONRELOC,  \/* expression has its value in a fixed register;$/;"	e	enum:__anon162
VOID	.\dep\Lua\src\luac.c	224;"	d	file:
VRELOCABLE	.\dep\Lua\src\lparser.h	/^  VRELOCABLE,  \/* expression can put result in any register;$/;"	e	enum:__anon11
VRELOCABLE	.\include\lua\lparser.h	/^  VRELOCABLE,  \/* expression can put result in any register;$/;"	e	enum:__anon162
VTRUE	.\dep\Lua\src\lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anon11
VTRUE	.\include\lua\lparser.h	/^  VTRUE,  \/* constant true *\/$/;"	e	enum:__anon162
VUPVAL	.\dep\Lua\src\lparser.h	/^  VUPVAL,  \/* upvalue variable; info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon11
VUPVAL	.\include\lua\lparser.h	/^  VUPVAL,  \/* upvalue variable; info = index of upvalue in 'upvalues' *\/$/;"	e	enum:__anon162
VVARARG	.\dep\Lua\src\lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anon11
VVARARG	.\include\lua\lparser.h	/^  VVARARG  \/* vararg expression; info = instruction pc *\/$/;"	e	enum:__anon162
VVOID	.\dep\Lua\src\lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anon11
VVOID	.\include\lua\lparser.h	/^  VVOID,  \/* when 'expdesc' describes the last expression a list,$/;"	e	enum:__anon162
Val	.\include\sol\Optional\test_type_traits.cpp	/^  Val( Val const & ){}$/;"	f	struct:std::experimental::Val
Val	.\include\sol\Optional\test_type_traits.cpp	/^  Val(){}$/;"	f	struct:std::experimental::Val
Val	.\include\sol\Optional\test_type_traits.cpp	/^struct Val$/;"	s	namespace:std::experimental	file:
Value	.\dep\Lua\src\lobject.h	/^typedef union Value {$/;"	u
Value	.\dep\Lua\src\lobject.h	/^} Value;$/;"	t	typeref:union:Value
Value	.\include\lua\lobject.h	/^typedef union Value {$/;"	u
Value	.\include\lua\lobject.h	/^} Value;$/;"	t	typeref:union:Value
ValuesGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    ValuesGenerator(){}$/;"	f	class:Catch::ValuesGenerator
ValuesGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^class ValuesGenerator : public IGenerator<T> {$/;"	c	namespace:Catch
Vardesc	.\dep\Lua\src\lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	.\dep\Lua\src\lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
Vardesc	.\include\lua\lparser.h	/^typedef struct Vardesc {$/;"	s
Vardesc	.\include\lua\lparser.h	/^} Vardesc;$/;"	t	typeref:struct:Vardesc
Vec	.\include\sol\test_usertypes.cpp	/^	Vec(float x, float y, float z) : x{ x }, y{ y }, z{ z } {}$/;"	f	struct:Vec
Vec	.\include\sol\test_usertypes.cpp	/^struct Vec {$/;"	s	file:
Vector2	.\dep\SFML\include\SFML\System\Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	.\include\SFML\System\Vector2.hpp	/^class Vector2$/;"	c	namespace:sf
Vector2	.\src\include\Vector2.h	/^	Vector2() : Vector2(0, 0) {}$/;"	f	class:Vector2
Vector2	.\src\include\Vector2.h	/^	Vector2(const Vector2& v) : X(v.X), Y(v.Y) {}$/;"	f	class:Vector2
Vector2	.\src\include\Vector2.h	/^	Vector2(float X, float Y) : X(X), Y(Y) {}$/;"	f	class:Vector2
Vector2	.\src\include\Vector2.h	/^class Vector2 {$/;"	c
Vector2f	.\dep\SFML\include\SFML\System\Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf
Vector2f	.\include\SFML\System\Vector2.hpp	/^typedef Vector2<float>        Vector2f;$/;"	t	namespace:sf
Vector2i	.\dep\SFML\include\SFML\System\Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf
Vector2i	.\include\SFML\System\Vector2.hpp	/^typedef Vector2<int>          Vector2i;$/;"	t	namespace:sf
Vector2u	.\dep\SFML\include\SFML\System\Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf
Vector2u	.\include\SFML\System\Vector2.hpp	/^typedef Vector2<unsigned int> Vector2u;$/;"	t	namespace:sf
Vector3	.\dep\SFML\include\SFML\System\Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3	.\include\SFML\System\Vector3.hpp	/^class Vector3$/;"	c	namespace:sf
Vector3f	.\dep\SFML\include\SFML\System\Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf
Vector3f	.\include\SFML\System\Vector3.hpp	/^typedef Vector3<float> Vector3f;$/;"	t	namespace:sf
Vector3i	.\dep\SFML\include\SFML\System\Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf
Vector3i	.\include\SFML\System\Vector3.hpp	/^typedef Vector3<int>   Vector3i;$/;"	t	namespace:sf
Verbosity	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct Verbosity { enum Level {$/;"	s	namespace:Catch
Version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   Version;$/;"	m	struct:TT_HoriHeader_
Version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   Version;$/;"	m	struct:TT_PCLT_
Version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   Version;$/;"	m	struct:TT_VertHeader_
Version	.\include\sol\Catch\include\internal\catch_version.h	/^    struct Version {$/;"	s	namespace:Catch
Version	.\include\sol\Catch\include\internal\catch_version.hpp	/^    Version::Version$/;"	f	class:Catch::Version
Version	.\include\sol\Catch\scripts\developBuild.py	/^from releaseCommon import Version$/;"	i
Version	.\include\sol\Catch\scripts\generateSingleHeader.py	/^from releaseCommon import Version$/;"	i
Version	.\include\sol\Catch\scripts\majorRelease.py	/^from releaseCommon import Version$/;"	i
Version	.\include\sol\Catch\scripts\minorRelease.py	/^from releaseCommon import Version$/;"	i
Version	.\include\sol\Catch\scripts\patchRelease.py	/^from releaseCommon import Version$/;"	i
Version	.\include\sol\Catch\scripts\releaseCommon.py	/^class Version:$/;"	c
VersionNotSupported	.\dep\SFML\include\SFML\Network\Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP version$/;"	e	enum:sf::Http::Response::Status
VersionNotSupported	.\include\SFML\Network\Http.hpp	/^            VersionNotSupported = 505, \/\/\/< The server doesn't support the requested HTTP version$/;"	e	enum:sf::Http::Response::Status
Vertex	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^        Vertex,  \/\/\/< Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
Vertex	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^Vertex::Vertex() :$/;"	f	class:sf::Vertex
Vertex	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^Vertex::Vertex(const Vector2f& thePosition) :$/;"	f	class:sf::Vertex
Vertex	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^Vertex::Vertex(const Vector2f& thePosition, const Color& theColor) :$/;"	f	class:sf::Vertex
Vertex	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^Vertex::Vertex(const Vector2f& thePosition, const Color& theColor, const Vector2f& theTexCoords) :$/;"	f	class:sf::Vertex
Vertex	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^Vertex::Vertex(const Vector2f& thePosition, const Vector2f& theTexCoords) :$/;"	f	class:sf::Vertex
Vertex	.\include\SFML\Graphics\Shader.hpp	/^        Vertex,  \/\/\/< Vertex shader$/;"	e	enum:sf::Shader::Type
Vertex	.\include\SFML\Graphics\Vertex.hpp	/^class SFML_GRAPHICS_API Vertex$/;"	c	namespace:sf
VertexArray	.\dep\SFML\include\SFML\Graphics\VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexArray	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^VertexArray::VertexArray() :$/;"	f	class:sf::VertexArray
VertexArray	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^VertexArray::VertexArray(PrimitiveType type, std::size_t vertexCount) :$/;"	f	class:sf::VertexArray
VertexArray	.\include\SFML\Graphics\VertexArray.hpp	/^class SFML_GRAPHICS_API VertexArray : public Drawable$/;"	c	namespace:sf
VertexCacheSize	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon111
VertexCacheSize	.\include\SFML\Graphics\RenderTarget.hpp	/^        enum {VertexCacheSize = 4};$/;"	e	enum:sf::RenderTarget::StatesCache::__anon171
VerticalWheel	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        VerticalWheel,  \/\/\/< The vertical mouse wheel$/;"	e	enum:sf::Mouse::Wheel
VerticalWheel	.\include\SFML\Window\Mouse.hpp	/^        VerticalWheel,  \/\/\/< The vertical mouse wheel$/;"	e	enum:sf::Mouse::Wheel
VideoMode	.\dep\SFML\include\SFML\Window\VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
VideoMode	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^VideoMode::VideoMode() :$/;"	f	class:sf::VideoMode
VideoMode	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^VideoMode::VideoMode(unsigned int modeWidth, unsigned int modeHeight, unsigned int modeBitsPerPixel) :$/;"	f	class:sf::VideoMode
VideoMode	.\include\SFML\Window\VideoMode.hpp	/^class SFML_WINDOW_API VideoMode$/;"	c	namespace:sf
VideoModeImpl	.\dep\SFML\src\SFML\Window\VideoModeImpl.hpp	/^class VideoModeImpl$/;"	c	namespace:sf::priv
View	.\dep\SFML\include\SFML\Graphics\View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
View	.\dep\SFML\src\SFML\Graphics\View.cpp	/^View::View() :$/;"	f	class:sf::View
View	.\dep\SFML\src\SFML\Graphics\View.cpp	/^View::View(const FloatRect& rectangle) :$/;"	f	class:sf::View
View	.\dep\SFML\src\SFML\Graphics\View.cpp	/^View::View(const Vector2f& center, const Vector2f& size) :$/;"	f	class:sf::View
View	.\include\SFML\Graphics\View.hpp	/^class SFML_GRAPHICS_API View$/;"	c	namespace:sf
VoidNothrowBoth	.\include\sol\Optional\test_type_traits.cpp	/^struct VoidNothrowBoth$/;"	s	namespace:std::experimental	file:
W	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long  W;$/;"	m	struct:vorbis_block
W	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long W;$/;"	m	struct:vorbis_dsp_state
W	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
W	.\include\SFML\Window\Keyboard.hpp	/^        W,            \/\/\/< The W key$/;"	e	enum:sf::Keyboard::Key
WARN	.\include\sol\Catch\include\catch.hpp	162;"	d
WARNMS	.\dep\SFML\extlibs\headers\jpeg\jerror.h	251;"	d
WARNMS1	.\dep\SFML\extlibs\headers\jpeg\jerror.h	254;"	d
WARNMS2	.\dep\SFML\extlibs\headers\jpeg\jerror.h	258;"	d
WGL_ACCELERATION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	104;"	d
WGL_ACCUM_ALPHA_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	105;"	d
WGL_ACCUM_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	106;"	d
WGL_ACCUM_BLUE_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	107;"	d
WGL_ACCUM_GREEN_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	108;"	d
WGL_ACCUM_RED_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	109;"	d
WGL_ALPHA_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	110;"	d
WGL_ALPHA_SHIFT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	111;"	d
WGL_ARB_create_context	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	187;"	d
WGL_ARB_pixel_format	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	177;"	d
WGL_AUX_BUFFERS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	112;"	d
WGL_BLUE_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	113;"	d
WGL_BLUE_SHIFT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	114;"	d
WGL_COLOR_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	115;"	d
WGL_CONTEXT_COMPATIBILITY_PROFILE_BIT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	162;"	d
WGL_CONTEXT_CORE_PROFILE_BIT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	163;"	d
WGL_CONTEXT_DEBUG_BIT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	154;"	d
WGL_CONTEXT_FLAGS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	155;"	d
WGL_CONTEXT_FORWARD_COMPATIBLE_BIT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	156;"	d
WGL_CONTEXT_LAYER_PLANE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	157;"	d
WGL_CONTEXT_MAJOR_VERSION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	158;"	d
WGL_CONTEXT_MINOR_VERSION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	159;"	d
WGL_CONTEXT_PROFILE_MASK_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	164;"	d
WGL_DEPTH_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	116;"	d
WGL_DOUBLE_BUFFER_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	117;"	d
WGL_DRAW_TO_BITMAP_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	118;"	d
WGL_DRAW_TO_WINDOW_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	119;"	d
WGL_ERROR_INVALID_PROFILE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	165;"	d
WGL_ERROR_INVALID_VERSION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	160;"	d
WGL_EXT_swap_control	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	168;"	d
WGL_FULL_ACCELERATION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	120;"	d
WGL_GENERIC_ACCELERATION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	121;"	d
WGL_GREEN_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	122;"	d
WGL_GREEN_SHIFT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	123;"	d
WGL_NEED_PALETTE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	124;"	d
WGL_NEED_SYSTEM_PALETTE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	125;"	d
WGL_NO_ACCELERATION_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	126;"	d
WGL_NUMBER_OVERLAYS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	127;"	d
WGL_NUMBER_PIXEL_FORMATS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	128;"	d
WGL_NUMBER_UNDERLAYS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	129;"	d
WGL_PIXEL_TYPE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	130;"	d
WGL_RED_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	131;"	d
WGL_RED_SHIFT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	132;"	d
WGL_SAMPLES_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	101;"	d
WGL_SAMPLE_BUFFERS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	102;"	d
WGL_SHARE_ACCUM_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	133;"	d
WGL_SHARE_DEPTH_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	134;"	d
WGL_SHARE_STENCIL_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	135;"	d
WGL_STENCIL_BITS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	136;"	d
WGL_STEREO_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	137;"	d
WGL_SUPPORT_GDI_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	138;"	d
WGL_SUPPORT_OPENGL_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	139;"	d
WGL_SWAP_COPY_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	140;"	d
WGL_SWAP_EXCHANGE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	141;"	d
WGL_SWAP_LAYER_BUFFERS_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	142;"	d
WGL_SWAP_METHOD_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	143;"	d
WGL_SWAP_UNDEFINED_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	144;"	d
WGL_TRANSPARENT_ALPHA_VALUE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	145;"	d
WGL_TRANSPARENT_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	146;"	d
WGL_TRANSPARENT_BLUE_VALUE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	147;"	d
WGL_TRANSPARENT_GREEN_VALUE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	148;"	d
WGL_TRANSPARENT_INDEX_VALUE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	149;"	d
WGL_TRANSPARENT_RED_VALUE_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	150;"	d
WGL_TYPE_COLORINDEX_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	151;"	d
WGL_TYPE_RGBA_ARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	152;"	d
WHEN	.\include\sol\Catch\include\catch.hpp	204;"	d
WHEN	.\include\sol\Catch\single_include\catch.hpp	10351;"	d
WHITE	.\src\include\trmclr.hpp	/^        WHITE           = 107 << SHIFT$/;"	e	enum:trmclr::Background::__anon190
WHITE	.\src\include\trmclr.hpp	/^        WHITE           = 97 << SHIFT$/;"	e	enum:trmclr::Foreground::__anon189
WHITE0BIT	.\dep\Lua\src\lgc.h	78;"	d
WHITE0BIT	.\include\lua\lgc.h	78;"	d
WHITE1BIT	.\dep\Lua\src\lgc.h	79;"	d
WHITE1BIT	.\include\lua\lgc.h	79;"	d
WHITEBITS	.\dep\Lua\src\lgc.h	84;"	d
WHITEBITS	.\include\lua\lgc.h	84;"	d
WIN32_LEAN_AND_MEAN	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	35;"	d
WINVER	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	36;"	d	file:
WMHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    struct WMHints$/;"	s	class:sf::priv::WindowImplX11
WMSizeHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    struct WMSizeHints$/;"	s	class:sf::priv::WindowImplX11
WM_MOUSEHWHEEL	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	52;"	d	file:
WarnAbout	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct WarnAbout { enum What {$/;"	s	namespace:Catch
Warning	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Warning = Yellow,$/;"	e	enum:Catch::Colour::Code
Warning	.\include\sol\Catch\include\internal\catch_result_type.h	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
Warning	.\include\sol\Catch\single_include\catch.hpp	/^        Warning = 2,$/;"	e	enum:Catch::ResultWas::OfType
WglContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^WglContext::WglContext(WglContext* shared) :$/;"	f	class:sf::priv::WglContext
WglContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^WglContext::WglContext(WglContext* shared, const ContextSettings& settings, const WindowImpl* owner, unsigned int bitsPerPixel) :$/;"	f	class:sf::priv::WglContext
WglContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^WglContext::WglContext(WglContext* shared, const ContextSettings& settings, unsigned int width, unsigned int height) :$/;"	f	class:sf::priv::WglContext
WglContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^class WglContext : public GlContext$/;"	c	namespace:sf::priv
What	.\include\sol\Catch\include\internal\catch_interfaces_config.h	/^    struct WarnAbout { enum What {$/;"	g	struct:Catch::WarnAbout
Wheel	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^    enum Wheel$/;"	g	class:sf::Mouse
Wheel	.\include\SFML\Window\Mouse.hpp	/^    enum Wheel$/;"	g	class:sf::Mouse
White	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color
White	.\include\SFML\Graphics\Color.hpp	/^    static const Color White;       \/\/\/< White predefined color$/;"	m	class:sf::Color
White	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            White,$/;"	e	enum:Catch::Colour::Code
WidthType	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    WidthType;$/;"	m	struct:TT_PCLT_
WildcardAtBothEnds	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^            WildcardAtBothEnds = WildcardAtStart | WildcardAtEnd$/;"	e	enum:Catch::WildcardPattern::WildcardPosition
WildcardAtEnd	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^            WildcardAtEnd = 2,$/;"	e	enum:Catch::WildcardPattern::WildcardPosition
WildcardAtStart	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^            WildcardAtStart = 1,$/;"	e	enum:Catch::WildcardPattern::WildcardPosition
WildcardPattern	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        WildcardPattern( std::string const& pattern, CaseSensitive::Choice caseSensitivity )$/;"	f	class:Catch::WildcardPattern
WildcardPattern	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^    class WildcardPattern {$/;"	c	namespace:Catch
WildcardPosition	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        enum WildcardPosition {$/;"	g	class:Catch::WildcardPattern
Win32ColourImpl	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        Win32ColourImpl() : stdoutHandle( GetStdHandle(STD_OUTPUT_HANDLE) )$/;"	f	class:Catch::__anon178::Win32ColourImpl
Win32ColourImpl	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    class Win32ColourImpl : public IColourImpl {$/;"	c	namespace:Catch::__anon178
WinMain	.\dep\SFML\src\SFML\Main\MainWin32.cpp	/^int WINAPI WinMain(HINSTANCE, HINSTANCE, LPSTR, INT)$/;"	f
Window	.\dep\SFML\include\SFML\Window\Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
Window	.\dep\SFML\src\SFML\Window\Window.cpp	/^Window::Window() :$/;"	f	class:sf::Window
Window	.\dep\SFML\src\SFML\Window\Window.cpp	/^Window::Window(VideoMode mode, const String& title, Uint32 style, const ContextSettings& settings) :$/;"	f	class:sf::Window
Window	.\dep\SFML\src\SFML\Window\Window.cpp	/^Window::Window(WindowHandle handle, const ContextSettings& settings) :$/;"	f	class:sf::Window
Window	.\include\SFML\Window\Window.hpp	/^class SFML_WINDOW_API Window : GlResource, NonCopyable$/;"	c	namespace:sf
Window	.\src\include\Window.h	/^class Window {$/;"	c
Window	.\src\src\Window.cpp	/^Window::Window() {$/;"	f	class:Window
Window	.\src\src\Window.cpp	/^Window::Window(const std::string& name, Vector2 size) {$/;"	f	class:Window
WindowHandle	.\dep\SFML\include\SFML\Window\WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf
WindowHandle	.\include\SFML\Window\WindowHandle.hpp	/^    typedef HWND__* WindowHandle;$/;"	t	namespace:sf
WindowImpl	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^WindowImpl::WindowImpl() :$/;"	f	class:sf::priv::WindowImpl
WindowImpl	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^class WindowImpl : NonCopyable$/;"	c	namespace:sf::priv
WindowImplAndroid	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^WindowImplAndroid::WindowImplAndroid(VideoMode mode, const String& title, unsigned long style, const ContextSettings& settings)$/;"	f	class:sf::priv::WindowImplAndroid
WindowImplAndroid	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^WindowImplAndroid::WindowImplAndroid(WindowHandle handle)$/;"	f	class:sf::priv::WindowImplAndroid
WindowImplAndroid	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^class WindowImplAndroid : public WindowImpl$/;"	c	namespace:sf::priv
WindowImplCocoa	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^class WindowImplCocoa : public WindowImpl$/;"	c	namespace:sf::priv
WindowImplDelegateRef	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^typedef id<WindowImplDelegateProtocol,NSObject> WindowImplDelegateRef;$/;"	t
WindowImplDelegateRef	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^typedef void* WindowImplDelegateRef;$/;"	t
WindowImplType	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^    typedef sf::priv::WindowImplAndroid WindowImplType;$/;"	t	file:
WindowImplType	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^    typedef sf::priv::WindowImplCocoa WindowImplType;$/;"	t	file:
WindowImplType	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^    typedef sf::priv::WindowImplUIKit WindowImplType;$/;"	t	file:
WindowImplType	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^    typedef sf::priv::WindowImplWin32 WindowImplType;$/;"	t	file:
WindowImplType	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^    typedef sf::priv::WindowImplX11 WindowImplType;$/;"	t	file:
WindowImplUIKit	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^class WindowImplUIKit : public WindowImpl$/;"	c	namespace:sf::priv
WindowImplWin32	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^WindowImplWin32::WindowImplWin32(VideoMode mode, const String& title, Uint32 style, const ContextSettings& \/*settings*\/) :$/;"	f	class:sf::priv::WindowImplWin32
WindowImplWin32	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^WindowImplWin32::WindowImplWin32(WindowHandle handle) :$/;"	f	class:sf::priv::WindowImplWin32
WindowImplWin32	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^class WindowImplWin32 : public WindowImpl$/;"	c	namespace:sf::priv
WindowImplX11	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^WindowImplX11::WindowImplX11(VideoMode mode, const String& title, unsigned long style, const ContextSettings& settings) :$/;"	f	class:sf::priv::WindowImplX11
WindowImplX11	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^WindowImplX11::WindowImplX11(WindowHandle handle) :$/;"	f	class:sf::priv::WindowImplX11
WindowImplX11	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^class WindowImplX11 : public WindowImpl$/;"	c	namespace:sf::priv
WindowManager	.\src\include\Game.h	/^	static StateManager WindowManager;$/;"	m	class:Game
WindowManager	.\src\src\Game.cpp	/^StateManager Game::WindowManager;$/;"	m	class:Game	file:
WindowState	.\src\include\Window.h	/^	enum WindowState {Running, Paused, Uninitalized};$/;"	g	class:Window
Write	.\include\sol\single\sol\sol.hpp	/^		typedef std::conditional_t<can_write::value, W, no_prop> Write;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
Write	.\include\sol\sol\property.hpp	/^		typedef std::conditional_t<can_write::value, W, no_prop> Write;$/;"	t	struct:sol::property_wrapper
Writer	.\include\sol\ninja_syntax.py	/^class Writer(object):$/;"	c
WriterFactory	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    struct WriterFactory$/;"	s	class:sf::SoundFileFactory
WriterFactory	.\include\SFML\Audio\SoundFileFactory.hpp	/^    struct WriterFactory$/;"	s	class:sf::SoundFileFactory
WriterFactoryArray	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    typedef std::vector<WriterFactory> WriterFactoryArray;$/;"	t	class:sf::SoundFileFactory
WriterFactoryArray	.\include\SFML\Audio\SoundFileFactory.hpp	/^    typedef std::vector<WriterFactory> WriterFactoryArray;$/;"	t	class:sf::SoundFileFactory
X	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
X	.\include\SFML\Window\Joystick.hpp	/^        X,    \/\/\/< The X axis$/;"	e	enum:sf::Joystick::Axis
X	.\include\SFML\Window\Keyboard.hpp	/^        X,            \/\/\/< The X key$/;"	e	enum:sf::Keyboard::Key
X	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        X() : a(4), b(2), c(7) {}$/;"	f	struct:A::X
X	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        X(int v) : a(v), b(2), c(7) {}$/;"	f	struct:A::X
X	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    struct X$/;"	s	namespace:A	file:
X	.\src\include\Vector2.h	/^	float X, Y;$/;"	m	class:Vector2
XBUTTON1	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	46;"	d	file:
XBUTTON2	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	49;"	d	file:
XButton1	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton1	.\include\SFML\Window\Mouse.hpp	/^        XButton1,   \/\/\/< The first extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
XButton2	.\include\SFML\Window\Mouse.hpp	/^        XButton2,   \/\/\/< The second extra mouse button$/;"	e	enum:sf::Mouse::Button
XCBDefaultRootWindow	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^xcb_window_t XCBDefaultRootWindow(xcb_connection_t* connection)$/;"	f	namespace:sf::priv
XCBDefaultScreen	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^xcb_screen_t* XCBDefaultScreen(xcb_connection_t* connection)$/;"	f	namespace:sf::priv
XCBScreenOfDisplay	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^xcb_screen_t* XCBScreenOfDisplay(xcb_connection_t* connection, int screen_nbr)$/;"	f	namespace:sf::priv
XDIGITBIT	.\dep\Lua\src\lctype.h	43;"	d
XDIGITBIT	.\include\lua\lctype.h	43;"	d
XOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int XOrigin, YOrigin, maxHeight, maxWidth;$/;"	m	struct:__anon149
X_density	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT16 X_density;		\/* Horizontal pixel density *\/$/;"	m	struct:jpeg_compress_struct
X_density	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT16 X_density;		\/* Horizontal pixel density *\/$/;"	m	struct:jpeg_decompress_struct
XmlEncode	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlEncode( std::string const& str, ForWhat forWhat = ForTextNodes )$/;"	f	class:Catch::XmlEncode
XmlEncode	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^    class XmlEncode {$/;"	c	namespace:Catch
XmlReporter	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        XmlReporter( ReporterConfig const& _config )$/;"	f	class:Catch::XmlReporter
XmlReporter	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^    class XmlReporter : public StreamingReporterBase {$/;"	c	namespace:Catch
XmlWriter	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter( std::ostream& os )$/;"	f	class:Catch::XmlWriter
XmlWriter	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter()$/;"	f	class:Catch::XmlWriter
XmlWriter	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^    class XmlWriter {$/;"	c	namespace:Catch
Y	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Y	.\include\SFML\Window\Joystick.hpp	/^        Y,    \/\/\/< The Y axis$/;"	e	enum:sf::Joystick::Axis
Y	.\include\SFML\Window\Keyboard.hpp	/^        Y,            \/\/\/< The Y key$/;"	e	enum:sf::Keyboard::Key
Y	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        Y() : a(4), b(2), c(7) {}$/;"	f	struct:B::Y
Y	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        Y(int v) : a(v), b(2), c(7) {}$/;"	f	struct:B::Y
Y	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    struct Y$/;"	s	namespace:B	file:
Y	.\src\include\Vector2.h	/^	float X, Y;$/;"	m	class:Vector2
YCbCr_to_RGB_kernel	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   void (*YCbCr_to_RGB_kernel)(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step);$/;"	m	struct:__anon98
YELLOW	.\src\include\trmclr.hpp	/^        YELLOW          =  43 << SHIFT,$/;"	e	enum:trmclr::Background::__anon190
YELLOW	.\src\include\trmclr.hpp	/^        YELLOW          = 33 << SHIFT,$/;"	e	enum:trmclr::Foreground::__anon189
YOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int XOrigin, YOrigin, maxHeight, maxWidth;$/;"	m	struct:__anon149
Y_density	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT16 Y_density;		\/* Vertical pixel density *\/$/;"	m	struct:jpeg_compress_struct
Y_density	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT16 Y_density;		\/* Vertical pixel density *\/$/;"	m	struct:jpeg_decompress_struct
Yellow	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color
Yellow	.\include\SFML\Graphics\Color.hpp	/^    static const Color Yellow;      \/\/\/< Yellow predefined color$/;"	m	class:sf::Color
Yellow	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^            Yellow,$/;"	e	enum:Catch::Colour::Code
Yes	.\include\sol\Catch\include\internal\catch_common.h	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Yes	.\include\sol\Catch\single_include\catch.hpp	/^        Yes,$/;"	e	enum:Catch::CaseSensitive::Choice
Z	.\dep\Lua\src\lundump.c	/^  ZIO *Z;$/;"	m	struct:__anon22	file:
Z	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
Z	.\include\SFML\Window\Joystick.hpp	/^        Z,    \/\/\/< The Z axis$/;"	e	enum:sf::Joystick::Axis
Z	.\include\SFML\Window\Keyboard.hpp	/^        Z,            \/\/\/< The Z key$/;"	e	enum:sf::Keyboard::Key
ZIO	.\dep\Lua\src\lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
ZIO	.\include\lua\lzio.h	/^typedef struct Zio ZIO;$/;"	t	typeref:struct:Zio
Zero	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^        Zero,             \/\/\/< (0, 0, 0, 0)$/;"	e	enum:sf::BlendMode::Factor
Zero	.\dep\SFML\include\SFML\System\Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time
Zero	.\dep\SFML\src\SFML\System\Time.cpp	/^const Time Time::Zero;$/;"	m	class:sf::Time	file:
Zero	.\include\SFML\Graphics\BlendMode.hpp	/^        Zero,             \/\/\/< (0, 0, 0, 0)$/;"	e	enum:sf::BlendMode::Factor
Zero	.\include\SFML\System\Time.hpp	/^    static const Time Zero; \/\/\/< Predefined "zero" time value$/;"	m	class:sf::Time
Zio	.\dep\Lua\src\lzio.h	/^struct Zio {$/;"	s
Zio	.\include\lua\lzio.h	/^struct Zio {$/;"	s
_	.\include\sol\Catch\include\external\clara.h	/^    UnpositionalTag _;$/;"	m	namespace:Clara
_COLOR_H	.\src\include\Color.h	2;"	d
_COMMON_H	.\src\include\Common.h	2;"	d
_CRT_SECURE_NO_WARNINGS	.\dep\Lua\src\lprefix.h	39;"	d
_CRT_SECURE_NO_WARNINGS	.\include\lua\lprefix.h	39;"	d
_ENEMY_H	.\src\include\Enemy.h	2;"	d
_FILE_OFFSET_BITS	.\dep\Lua\src\lprefix.h	27;"	d
_FILE_OFFSET_BITS	.\include\lua\lprefix.h	27;"	d
_FPS_H	.\src\include\FPS.h	2;"	d
_FT_GASP_H_	.\dep\SFML\extlibs\headers\freetype2\ftgasp.h	20;"	d
_GAME_H	.\src\include\Game.h	2;"	d
_GAME_WINDOW_H	.\src\include\GameWindow.h	2;"	d
_GPU_DEVICE	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^struct _GPU_DEVICE {$/;"	s
_LARGEFILE_SOURCE	.\dep\Lua\src\lprefix.h	26;"	d
_LARGEFILE_SOURCE	.\include\lua\lprefix.h	26;"	d
_LOGGER_H_	.\src\include\Logger.h	2;"	d
_LUA_SCRIPT_H	.\src\include\LuaScript.h	2;"	d
_MAP_H	.\src\include\Map.h	2;"	d
_MENU_H	.\src\include\Menu.h	2;"	d
_OBJECT_H	.\src\include\Object.h	2;"	d
_OGG_H	.\dep\SFML\extlibs\headers\ogg\ogg.h	18;"	d
_OS_TYPES_H	.\dep\SFML\extlibs\headers\ogg\os_types.h	18;"	d
_OV_ENC_H_	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	25;"	d
_OV_FILE_H_	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	19;"	d
_PARTICLE_EMITTER_H	.\src\include\ParticleEmitter.h	2;"	d
_PARTICLE_H	.\src\include\Particle.h	2;"	d
_PATH_H	.\src\include\Path.h	2;"	d
_PAUSE_WINDOW_H	.\src\include\PauseWindow.h	2;"	d
_PERK_H	.\src\include\Perk.h	2;"	d
_PROJECTILE_H	.\src\include\Projectile.h	2;"	d
_RANDOM_H_	.\src\include\Random.h	2;"	d
_SFLINE_H	.\src\include\sfLine.h	2;"	d
_SFML_QS	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	171;"	d	file:
_SFML_QS	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	175;"	d	file:
_SFML_S	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	172;"	d	file:
_SFML_S	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	174;"	d	file:
_SHIP_H	.\src\include\Ship.h	2;"	d
_SKILL_TREE_H	.\src\include\SkillTree.h	2;"	d
_SKILL_TREE_WINDOW_H	.\src\include\SkillTreeWindow.h	2;"	d
_STATE_MANAGER_H	.\src\include\StateManager.h	2;"	d
_STATS_H	.\src\include\Stats.h	2;"	d
_TARGET_H	.\src\include\Target.h	2;"	d
_TOWER_H	.\src\include\Tower.h	2;"	d
_TRAIT_H	.\src\include\Trait.h	2;"	d
_UNIT_H	.\src\include\Unit.h	2;"	d
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	32;"	d
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	37;"	d
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	29;"	d	file:
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	34;"	d	file:
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	32;"	d
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	37;"	d
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	29;"	d	file:
_WIN32_WINDOWS	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	34;"	d	file:
_WIN32_WINNT	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	35;"	d
_WIN32_WINNT	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	38;"	d
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	32;"	d	file:
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	35;"	d	file:
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	35;"	d
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	38;"	d
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	32;"	d	file:
_WIN32_WINNT	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	35;"	d	file:
_WINDOW_H	.\src\include\Window.h	2;"	d
_XOPEN_SOURCE	.\dep\Lua\src\lprefix.h	17;"	d
_XOPEN_SOURCE	.\dep\Lua\src\lprefix.h	19;"	d
_XOPEN_SOURCE	.\include\lua\lprefix.h	17;"	d
_XOPEN_SOURCE	.\include\lua\lprefix.h	19;"	d
__CONFIG_TYPES_H__	.\dep\SFML\extlibs\headers\ogg\config_types.h	2;"	d
__FREETYPE_H__	.\dep\SFML\extlibs\headers\freetype2\freetype.h	20;"	d
__FT2BUILD_H__	.\dep\SFML\extlibs\headers\freetype2\ft2build.h	35;"	d
__FTADVANC_H__	.\dep\SFML\extlibs\headers\freetype2\ftadvanc.h	20;"	d
__FTAUTOH_H__	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	20;"	d
__FTBBOX_H__	.\dep\SFML\extlibs\headers\freetype2\ftbbox.h	31;"	d
__FTBDF_H__	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	20;"	d
__FTBITMAP_H__	.\dep\SFML\extlibs\headers\freetype2\ftbitmap.h	20;"	d
__FTBZIP2_H__	.\dep\SFML\extlibs\headers\freetype2\ftbzip2.h	20;"	d
__FTCACHE_H__	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	20;"	d
__FTCFFDRV_H__	.\dep\SFML\extlibs\headers\freetype2\ftcffdrv.h	20;"	d
__FTCID_H__	.\dep\SFML\extlibs\headers\freetype2\ftcid.h	19;"	d
__FTCONFIG_H__	.\dep\SFML\extlibs\headers\freetype2\config\ftconfig.h	39;"	d
__FTERRORS_H__	.\dep\SFML\extlibs\headers\freetype2\fterrors.h	85;"	d
__FTGLYPH_H__	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	33;"	d
__FTGXVAL_H__	.\dep\SFML\extlibs\headers\freetype2\ftgxval.h	29;"	d
__FTGZIP_H__	.\dep\SFML\extlibs\headers\freetype2\ftgzip.h	20;"	d
__FTIMAGE_H__	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	28;"	d
__FTINCREM_H__	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	20;"	d
__FTLIST_H__	.\dep\SFML\extlibs\headers\freetype2\ftlist.h	28;"	d
__FTLZW_H__	.\dep\SFML\extlibs\headers\freetype2\ftlzw.h	20;"	d
__FTMAC_H__	.\dep\SFML\extlibs\headers\freetype2\ftmac.h	29;"	d
__FTMM_H__	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	20;"	d
__FTMODAPI_H__	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	20;"	d
__FTMODERR_H__	.\dep\SFML\extlibs\headers\freetype2\ftmoderr.h	95;"	d
__FTOPTION_H__	.\dep\SFML\extlibs\headers\freetype2\config\ftoption.h	20;"	d
__FTOTVAL_H__	.\dep\SFML\extlibs\headers\freetype2\ftotval.h	31;"	d
__FTOUTLN_H__	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	21;"	d
__FTPFR_H__	.\dep\SFML\extlibs\headers\freetype2\ftpfr.h	20;"	d
__FTRENDER_H__	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	20;"	d
__FTSIZES_H__	.\dep\SFML\extlibs\headers\freetype2\ftsizes.h	29;"	d
__FTSTDLIB_H__	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	33;"	d
__FTSYNTH_H__	.\dep\SFML\extlibs\headers\freetype2\ftsynth.h	45;"	d
__FTSYSTEM_H__	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	20;"	d
__FTTRIGON_H__	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	20;"	d
__FTTTDRV_H__	.\dep\SFML\extlibs\headers\freetype2\ftttdrv.h	21;"	d
__FTTYPES_H__	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	20;"	d
__FTWINFNT_H__	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	20;"	d
__FTXF86_H__	.\dep\SFML\extlibs\headers\freetype2\ftxf86.h	20;"	d
__FT_HEADER_H__	.\dep\SFML\extlibs\headers\freetype2\config\ftheader.h	19;"	d
__FT_LCD_FILTER_H__	.\dep\SFML\extlibs\headers\freetype2\ftlcdfil.h	21;"	d
__FT_SFNT_NAMES_H__	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	23;"	d
__FT_STROKE_H__	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	20;"	d
__GLEW_H__	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	45;"	d
__GLEXT_H_	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	49;"	d
__GLXextFuncPtr	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    typedef void (APIENTRY *__GLXextFuncPtr)(void);$/;"	t
__GL_H__	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	47;"	d
__T1TABLES_H__	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	21;"	d
__TRMCLR_H__	.\src\include\trmclr.hpp	2;"	d
__TTAGS_H__	.\dep\SFML\extlibs\headers\freetype2\tttags.h	20;"	d
__TTNAMEID_H__	.\dep\SFML\extlibs\headers\freetype2\ttnameid.h	20;"	d
__TTTABLES_H__	.\dep\SFML\extlibs\headers\freetype2\tttables.h	21;"	d
__TTUNPAT_H__	.\dep\SFML\extlibs\headers\freetype2\ttunpat.h	22;"	d
___SOL_OPTIONAL_HPP___	.\include\sol\Optional\optional.hpp	11;"	d
__gl_ATI_h_	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	51;"	d
__gl_h_	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	46;"	d
__glew_h__	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	44;"	d
__glext_h_	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	48;"	d
__gltypes_h_	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	50;"	d
__glxext_h_	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	32;"	d
__init__	.\include\sol\Catch\scripts\releaseCommon.py	/^    def __init__(self):$/;"	m	class:Version
__init__	.\include\sol\ninja_syntax.py	/^    def __init__(self, output, width=78):$/;"	m	class:Writer
__wglext_h_	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	32;"	d
_acceleration	.\src\include\Object.h	/^	Vector2 _acceleration; \/\/ $/;"	m	class:Object
_as_list	.\include\sol\ninja_syntax.py	/^    def _as_list(self, input):$/;"	m	class:Writer
_attached	.\src\include\Perk.h	/^	Object* _attached; \/\/ Object we're attached to$/;"	m	class:Perk
_attached	.\src\include\SkillTree.h	/^	Object* _attached; \/\/ Object we're attached to$/;"	m	class:SkillTree
_attackerCount	.\src\include\Object.h	/^	int _attackerCount; \/\/ Number of Objects that have targetted us$/;"	m	class:Object
_baseStats	.\src\include\Object.h	/^    Stats _baseStats;$/;"	m	class:Object
_box	.\src\include\PauseWindow.h	/^	sf::RectangleShape _box;$/;"	m	class:PauseWindow
_collisionRadius	.\src\include\Object.h	/^	int  _collisionRadius;$/;"	m	class:Object
_color	.\src\include\Projectile.h	/^	Color _color;$/;"	m	class:Projectile
_comp	.\src\include\SkillTree.h	/^	bool _comp; \/\/ If the tree is done being created$/;"	m	class:SkillTree
_components	.\src\include\Window.h	/^	std::vector<GuiComponent*> _components; \/\/ Components in the Window$/;"	m	class:Window
_count	.\src\include\SkillTree.h	/^	int _count;$/;"	m	class:SkillTree
_count_dollars_before_index	.\include\sol\ninja_syntax.py	/^    def _count_dollars_before_index(self, s, i):$/;"	m	class:Writer
_counter	.\include\sol\Optional\test_optional.cpp	/^  static int _counter;$/;"	m	struct:CountedObject	file:
_counter	.\include\sol\Optional\test_optional.cpp	/^int CountedObject::_counter = 0;$/;"	m	class:CountedObject	file:
_currState	.\src\include\Window.h	/^	WindowState _currState; \/\/ Current state the window is in$/;"	m	class:Window
_data	.\src\include\SkillTree.h	/^	std::vector<SkillNode*> _data;$/;"	m	class:SkillTree
_direction	.\src\include\Object.h	/^	Vector2 _direction; \/\/ Direction they're moving to$/;"	m	class:Object
_drawn	.\src\include\PauseWindow.h	/^	bool _drawn; \/\/ If we've drawn ourselves yet$/;"	m	class:PauseWindow
_duration	.\src\include\Perk.h	/^	float _duration; \/\/ -1 duration means infinite$/;"	m	class:Perk
_ended	.\src\include\Enemy.h	/^	bool _ended; \/\/ If this enemy reached the end of the path$/;"	m	class:Enemy
_font	.\src\include\GameWindow.h	/^	sf::Font _font;$/;"	m	class:GameWindow
_game	.\src\include\StateManager.h	/^	Game* _game;$/;"	m	class:StateManager
_head	.\src\include\SkillTree.h	/^	SkillNode* _head;$/;"	m	class:SkillTree
_health	.\src\include\Enemy.h	/^	float _health;	  \/\/ Current health of an enemy$/;"	m	class:Enemy
_health	.\src\include\Unit.h	/^	int _health; \/\/ Current health of this Unit$/;"	m	class:Unit
_hpBar	.\src\include\Enemy.h	/^	sf::RectangleShape _hpBar;$/;"	m	class:Enemy
_lastShot	.\src\include\Tower.h	/^	float _lastShot;$/;"	m	class:Tower
_lifetime	.\src\include\Particle.h	/^    float _lifetime;$/;"	m	class:ParticleEmitter
_line	.\include\sol\ninja_syntax.py	/^    def _line(self, text, indent=0):$/;"	m	class:Writer
_lines	.\src\include\SkillTree.h	/^	sf::VertexArray _lines;$/;"	m	class:SkillTree
_loaded	.\src\include\LuaScript.h	/^	bool _loaded;$/;"	m	class:LuaScript
_lua	.\src\include\Object.h	/^	LuaScript _lua; \/\/ Script associated with this Object$/;"	m	class:Object
_lua	.\src\include\Perk.h	/^	LuaScript _lua;$/;"	m	class:Perk
_map	.\src\include\GameWindow.h	/^	Map _map;$/;"	m	class:GameWindow
_map	.\src\include\Object.h	/^	Map* _map; \/\/ Map this object is located on$/;"	m	class:Object
_maxDuration	.\src\include\Perk.h	/^	float _maxDuration; \/\/_duration changes each update, but _maxDuration doesnt$/;"	m	class:Perk
_maxHealth	.\src\include\Enemy.h	/^	float _maxHealth; \/\/ Max health of the enemy$/;"	m	class:Enemy
_maxHealth	.\src\include\Unit.h	/^	int _maxHealth; \/\/ Max health this Unit can have$/;"	m	class:Unit
_maxStacks	.\src\include\Perk.h	/^	int _maxStacks;$/;"	m	class:Perk
_name	.\src\include\LuaScript.h	/^	std::string _name; \/\/ File name that's loaded$/;"	m	class:LuaScript
_name	.\src\include\Perk.h	/^	std::string _name; \/\/ Display name of the perk$/;"	m	class:Perk
_name	.\src\include\Window.h	/^	std::string _name; \/\/ Internal name of the Window, should be unique$/;"	m	class:Window
_nodes	.\src\include\SkillTree.h	/^	sf::VertexArray _nodes;$/;"	m	class:SkillTree
_ogg_calloc	.\dep\SFML\extlibs\headers\ogg\os_types.h	23;"	d
_ogg_free	.\dep\SFML\extlibs\headers\ogg\os_types.h	25;"	d
_ogg_malloc	.\dep\SFML\extlibs\headers\ogg\os_types.h	22;"	d
_ogg_realloc	.\dep\SFML\extlibs\headers\ogg\os_types.h	24;"	d
_origin	.\src\include\Map.h	/^	Vector2 _origin; \/\/ (0, 0)$/;"	m	class:Map
_origin	.\src\include\Particle.h	/^    sf::Vector2f _origin;$/;"	m	class:ParticleEmitter
_ov_header_fseek_wrap	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^static int _ov_header_fseek_wrap(FILE *f,ogg_int64_t off,int whence){$/;"	f
_particles	.\src\include\Particle.h	/^	std::vector<Particle> _particles;$/;"	m	class:ParticleEmitter
_path	.\src\include\Enemy.h	/^	Path* _path;	\/\/ Path the enemy will follow$/;"	m	class:Enemy
_pathPoint	.\src\include\Enemy.h	/^	unsigned int _pathPoint;\/\/ Index in path of the point it's travelling to$/;"	m	class:Enemy
_pauseWindow	.\src\include\Game.h	/^	static PauseWindow _pauseWindow; \/\/ Global pause window$/;"	m	class:Game
_pauseWindow	.\src\src\Game.cpp	/^PauseWindow Game::_pauseWindow;$/;"	m	class:Game	file:
_perks	.\src\include\Object.h	/^	std::vector<Perk*> _perks;$/;"	m	class:Object
_pos	.\src\include\GuiComponent.h	/^	Vector2 _pos; \/\/ Position of this component$/;"	m	class:GuiComponent
_projectile	.\src\include\Tower.h	/^	Object* _projectile; \/\/ What we'll be shooting at our _target$/;"	m	class:Tower
_selected	.\src\include\Map.h	/^	Ship* _selected;$/;"	m	class:Map
_shape	.\src\include\Object.h	/^	sf::CircleShape _shape;$/;"	m	class:Object
_shooter	.\src\include\Projectile.h	/^	Tower* _shooter; \/\/ Tower shot from$/;"	m	class:Projectile
_size	.\src\include\Game.h	/^	static Vector2 _size;$/;"	m	class:Game
_size	.\src\include\GuiComponent.h	/^	Vector2 _size; \/\/ Dimension of the component. x = width, y = height$/;"	m	class:GuiComponent
_size	.\src\include\Map.h	/^	Vector2 _size;$/;"	m	class:Map
_size	.\src\include\SkillTree.h	/^	Vector2 _size; \/\/ Width and Height of the sf::Window it's being drawn to$/;"	m	class:SkillTree
_size	.\src\include\Window.h	/^	Vector2 _size; \/\/ width and height of the Window$/;"	m	class:Window
_size	.\src\src\Game.cpp	/^Vector2 Game::_size;$/;"	m	class:Game	file:
_stack	.\src\include\StateManager.h	/^	std::vector<Window*> _stack; \/\/ First In, Last Out$/;"	m	class:StateManager
_stackable	.\src\include\Perk.h	/^	bool _stackable;$/;"	m	class:Perk
_stacks	.\src\include\Perk.h	/^	int _stacks;$/;"	m	class:Perk
_stats	.\src\include\Object.h	/^	Stats _stats;$/;"	m	class:Object
_stats	.\src\include\Perk.h	/^	Stats _stats; \/\/ Stats applied to the Object$/;"	m	class:Perk
_target	.\src\include\Object.h	/^	Target* _target; \/\/ Target the enemy is running to (can be coord or enemy)$/;"	m	class:Object
_throw	.\include\sol\Optional\test_optional.cpp	/^  bool _throw;$/;"	m	struct:CountedObject	file:
_toRemove	.\src\include\Object.h	/^	bool _toRemove; \/\/ Is this object marked for removal?$/;"	m	class:Object
_toRemove	.\src\include\Perk.h	/^	bool _toRemove; \/\/ Marked for removal$/;"	m	class:Perk
_tree	.\src\include\Object.h	/^	SkillTree* _tree; \/\/ Skill tree attached to this Object$/;"	m	class:Object
_tree	.\src\include\SkillTreeWindow.h	/^	SkillTree* _tree; \/\/ The SkillTree to draw$/;"	m	class:SkillTreeWindow
_updating	.\src\include\GuiComponent.h	/^	bool _updating; \/\/ If we should update this component$/;"	m	class:GuiComponent
_value	.\src\include\trmclr.hpp	/^    uint32_t _value;$/;"	m	struct:trmclr::Style
_vertices	.\src\include\Particle.h	/^    sf::VertexArray _vertices;$/;"	m	class:ParticleEmitter
_view	.\src\include\GuiComponent.h	/^	sf::View _view;$/;"	m	class:GuiComponent
_visible	.\src\include\GuiComponent.h	/^	bool _visible; \/\/ If this component is visible$/;"	m	class:GuiComponent
_vorbis_codec_h_	.\dep\SFML\extlibs\headers\vorbis\codec.h	19;"	d
_window	.\src\include\Game.h	/^	static sf::RenderWindow _window;$/;"	m	class:Game
_window	.\src\src\Game.cpp	/^sf::RenderWindow Game::_window;$/;"	m	class:Game	file:
a	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_CeilFix( FT_Fixed  a );$/;"	v
a	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_FloorFix( FT_Fixed  a );$/;"	v
a	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_RoundFix( FT_Fixed  a );$/;"	v
a	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color
a	.\include\SFML\Graphics\Color.hpp	/^    Uint8 a; \/\/\/< Alpha (opacity) component$/;"	m	class:sf::Color
a	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int a;$/;"	m	struct:A::X	file:
a	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int a;$/;"	m	struct:B::Y	file:
a	.\include\sol\test_customizations.cpp	/^	int a;$/;"	m	struct:two_things	file:
a	.\include\sol\test_functions.cpp	/^	int a = 0xA; int bark() { return 1; }$/;"	m	struct:A	file:
a	.\include\sol\test_usertypes.cpp	/^	int a = 0;$/;"	m	struct:giver	file:
a	.\include\sol\test_usertypes.cpp	/^	int a;$/;"	m	struct:factory_test	file:
a	.\src\include\Color.h	/^	unsigned char a;$/;"	m	struct:Color
abitmap	.\dep\SFML\extlibs\headers\freetype2\ftbitmap.h	/^  FT_Bitmap_New( FT_Bitmap  *abitmap );$/;"	v
abortAfter	.\include\sol\Catch\include\internal\catch_config.hpp	/^        int abortAfter() const { return m_data.abortAfter; }$/;"	f	class:Catch::Config
abortAfter	.\include\sol\Catch\include\internal\catch_config.hpp	/^        int abortAfter;$/;"	m	struct:Catch::ConfigData
abortAfterFirst	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void abortAfterFirst( ConfigData& config ) { config.abortAfter = 1; }$/;"	f	namespace:Catch
abortAfterX	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void abortAfterX( ConfigData& config, int x ) {$/;"	f	namespace:Catch
aborting	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool aborting;$/;"	m	struct:Catch::TestCaseStats
aborting	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool aborting;$/;"	m	struct:Catch::TestGroupStats
aborting	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool aborting;$/;"	m	struct:Catch::TestRunStats
aborting	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        bool aborting() const {$/;"	f	class:Catch::RunContext
absolute_index	.\include\sol\single\sol\sol.hpp	/^		absolute_index(lua_State* L, int idx) : index(lua_absindex(L, idx)) {}$/;"	f	struct:sol::sol::absolute_index
absolute_index	.\include\sol\single\sol\sol.hpp	/^	struct absolute_index {$/;"	s	namespace:sol::sol
absolute_index	.\include\sol\sol\types.hpp	/^		absolute_index(lua_State* L, int idx) : index(lua_absindex(L, idx)) {}$/;"	f	struct:sol::absolute_index
absolute_index	.\include\sol\sol\types.hpp	/^	struct absolute_index {$/;"	s	namespace:sol
ac_huff_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];$/;"	m	struct:jpeg_compress_struct
ac_huff_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JHUFF_TBL * ac_huff_tbl_ptrs[NUM_HUFF_TBLS];$/;"	m	struct:jpeg_decompress_struct
ac_tbl_no	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int ac_tbl_no;		\/* AC entropy table selector (0..3) *\/$/;"	m	struct:__anon81
accept	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^Socket::Status TcpListener::accept(TcpSocket& socket)$/;"	f	class:sf::TcpListener
accumulate	.\include\sol\single\sol\sol.hpp	/^		struct accumulate : std::integral_constant<C, v> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
accumulate	.\include\sol\single\sol\sol.hpp	/^		struct accumulate<C, v, V, T, Args...> : accumulate<C, v + V<T>::value, V, Args...> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
accumulate	.\include\sol\sol\types.hpp	/^		struct accumulate : std::integral_constant<C, v> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
accumulate	.\include\sol\sol\types.hpp	/^		struct accumulate<C, v, V, T, Args...> : accumulate<C, v + V<T>::value, V, Args...> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
achVendID	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Char    achVendID[4];$/;"	m	struct:TT_OS2_
acquire	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        static IndexTracker& acquire( TrackerContext& ctx, std::string const& name, int size ) {$/;"	f	class:Catch::TestCaseTracking::IndexTracker
acquire	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        static SectionTracker& acquire( TrackerContext& ctx, std::string const& name ) {$/;"	f	class:Catch::TestCaseTracking::SectionTracker
activate	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^bool RenderTexture::activate(bool active)$/;"	f	class:sf::RenderTexture
activate	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^bool RenderTextureImplDefault::activate(bool active)$/;"	f	class:sf::priv::RenderTextureImplDefault
activate	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^bool RenderTextureImplFBO::activate(bool active)$/;"	f	class:sf::priv::RenderTextureImplFBO
activate	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^bool RenderWindow::activate(bool active)$/;"	f	class:sf::RenderWindow
activity	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    ANativeActivity* activity;$/;"	m	struct:sf::priv::ActivityStates
activityOnCreatePointer	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	/^    typedef void (*activityOnCreatePointer)(ANativeActivity*, void*, size_t);$/;"	t	namespace:__anon131	file:
actual_number_of_colors	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int actual_number_of_colors;	\/* number of entries in use *\/$/;"	m	struct:jpeg_decompress_struct
actual_type	.\include\sol\single\sol\sol.hpp	/^		typedef T actual_type;$/;"	t	struct:sol::sol::unique_usertype_traits
actual_type	.\include\sol\single\sol\sol.hpp	/^		typedef std::shared_ptr<T> actual_type;$/;"	t	struct:sol::sol::unique_usertype_traits
actual_type	.\include\sol\single\sol\sol.hpp	/^		typedef std::unique_ptr<T, D> actual_type;$/;"	t	struct:sol::sol::unique_usertype_traits
actual_type	.\include\sol\sol\types.hpp	/^		typedef T actual_type;$/;"	t	struct:sol::unique_usertype_traits
actual_type	.\include\sol\sol\types.hpp	/^		typedef std::shared_ptr<T> actual_type;$/;"	t	struct:sol::unique_usertype_traits
actual_type	.\include\sol\sol\types.hpp	/^		typedef std::unique_ptr<T, D> actual_type;$/;"	t	struct:sol::unique_usertype_traits
actvar	.\dep\Lua\src\lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon14
actvar	.\include\lua\lparser.h	/^  } actvar;$/;"	m	struct:Dyndata	typeref:struct:Dyndata::__anon165
add	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^void SocketSelector::add(Socket& socket)$/;"	f	class:sf::SocketSelector
add	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    void add( T value ) {$/;"	f	class:Catch::ValuesGenerator
add	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    void add( const IGenerator<T>* generator ) {$/;"	f	class:Catch::CompositeGenerator
add	.\include\sol\Catch\include\internal\catch_list.hpp	/^        void add( std::string const& spelling ) {$/;"	f	struct:Catch::TagInfo
add	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AllOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
add	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AnyOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
add	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    void TagAliasRegistry::add( char const* alias, char const* tag, SourceLineInfo const& lineInfo ) {$/;"	f	class:Catch::TagAliasRegistry
add	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^    void add( Ptr<IStreamingReporter> const& reporter ) {$/;"	f	class:Catch::MultipleReporters
add	.\include\sol\Catch\single_include\catch.hpp	/^            AllOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
add	.\include\sol\Catch\single_include\catch.hpp	/^            AnyOf& add( Matcher<ExpressionT> const& matcher ) {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
add	.\include\sol\single\sol\sol.hpp	/^		void add(lua_State* L, N&& n, F&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
add	.\include\sol\single\sol\sol.hpp	/^		void add(lua_State* L, N&& n, constructor_list<Lists...> c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
add	.\include\sol\single\sol\sol.hpp	/^		void add(lua_State* L, N&& n, constructor_wrapper<Fxs...> c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
add	.\include\sol\single\sol\sol.hpp	/^		void add(lua_State* L, call_construction, F&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
add	.\include\sol\sol\simple_usertype_metatable.hpp	/^		void add(lua_State* L, N&& n, F&& f) {$/;"	f	struct:sol::simple_usertype_metatable
add	.\include\sol\sol\simple_usertype_metatable.hpp	/^		void add(lua_State* L, N&& n, constructor_list<Lists...> c) {$/;"	f	struct:sol::simple_usertype_metatable
add	.\include\sol\sol\simple_usertype_metatable.hpp	/^		void add(lua_State* L, N&& n, constructor_wrapper<Fxs...> c) {$/;"	f	struct:sol::simple_usertype_metatable
add	.\include\sol\sol\simple_usertype_metatable.hpp	/^		void add(lua_State* L, call_construction, F&& f) {$/;"	f	struct:sol::simple_usertype_metatable
add	.\include\sol\sol\table_core.hpp	/^		basic_table_core& add(Args&&... args) {$/;"	f	class:sol::basic_table_core
add	.\include\sol\test_usertypes.cpp	/^		int add(int y) {$/;"	f	struct:crapola::fuser
add	.\include\sol\test_usertypes.cpp	/^	int add(int y) {$/;"	f	struct:fuser
add	.\src\src\SkillTree.cpp	/^bool SkillNode::add(SkillNode* node) {$/;"	f	class:SkillNode
add2	.\include\sol\test_usertypes.cpp	/^		int add2(int y) {$/;"	f	struct:crapola::fuser
add2	.\include\sol\test_usertypes.cpp	/^	int add2(int y) {$/;"	f	struct:fuser
addColour	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    ColourString& addColour( Colour::Code colour, int _fromIndex, int _toIndex ) {$/;"	f	class:ColourString
addColour	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    ColourString& addColour( Colour::Code colour, int _index ) {$/;"	f	class:ColourString
addFilter	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        void addFilter() {$/;"	f	class:Catch::TestSpecParser
addListeners	.\include\sol\Catch\include\catch_session.hpp	/^    Ptr<IStreamingReporter> addListeners( Ptr<IConfig const> const& config, Ptr<IStreamingReporter> reporters ) {$/;"	f	namespace:Catch
addOptName	.\include\sol\Catch\include\external\clara.h	/^        friend void addOptName( Arg& arg, std::string const& optName )$/;"	f	class:Clara::CommandLine
addPattern	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        void addPattern() {$/;"	f	class:Catch::TestSpecParser
addPerk	.\src\src\Object.cpp	/^void Object::addPerk(Perk* p) {$/;"	f	class:Object
addPerk	.\src\src\SkillTree.cpp	/^SkillNode* SkillTree::addPerk(SkillNode* parent, Perk* perk) {$/;"	f	class:SkillTree
addPoint	.\src\src\Path.cpp	/^void Path::addPoint(float x, float y) {$/;"	f	class:Path
addRef	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
addRef	.\include\sol\Catch\single_include\catch.hpp	/^        virtual void addRef() const {$/;"	f	struct:Catch::SharedImpl
addReporter	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^Ptr<IStreamingReporter> addReporter( Ptr<IStreamingReporter> const& existingReporter, Ptr<IStreamingReporter> const& additionalReporter ) {$/;"	f	namespace:Catch
addReporterName	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void addReporterName( ConfigData& config, std::string const& _reporterName ) { config.reporterNames.push_back( _reporterName ); }$/;"	f	namespace:Catch
addRow	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            SummaryColumn addRow( std::size_t count ) {$/;"	f	struct:Catch::ConsoleReporter::SummaryColumn
addStack	.\src\src\Perk.cpp	/^void Perk::addStack() {$/;"	f	class:Perk
addStat	.\src\src\Stats.cpp	/^void Stats::addStat(std::string name, float value) {$/;"	f	class:Stats
addTestOrTags	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void addTestOrTags( ConfigData& config, std::string const& _testSpec ) { config.testsOrTags.push_back( _testSpec ); }$/;"	f	namespace:Catch
addWarning	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void addWarning( ConfigData& config, std::string const& _warning ) {$/;"	f	namespace:Catch
add_destructor_tag	.\include\sol\single\sol\sol.hpp	/^		struct add_destructor_tag {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
add_destructor_tag	.\include\sol\sol\usertype_metatable.hpp	/^		struct add_destructor_tag {};$/;"	s	namespace:sol::usertype_detail
add_s	.\dep\Lua\src\lstrlib.c	/^static void add_s (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
add_value	.\dep\Lua\src\lstrlib.c	/^static void add_value (MatchState *ms, luaL_Buffer *b, const char *s,$/;"	f	file:
addbuff	.\dep\Lua\src\lstate.c	77;"	d	file:
adddigit	.\dep\Lua\src\lstrlib.c	/^static lua_Number adddigit (char *buff, int n, lua_Number x) {$/;"	f	file:
addfield	.\dep\Lua\src\ltablib.c	/^static void addfield (lua_State *L, luaL_Buffer *b, lua_Integer i) {$/;"	f	file:
addition	.\include\sol\single\sol\sol.hpp	/^		addition,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
addition	.\include\sol\sol\types.hpp	/^		addition,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
addk	.\dep\Lua\src\lcode.c	/^static int addk (FuncState *fs, TValue *key, TValue *v) {$/;"	f	file:
addlenmod	.\dep\Lua\src\lstrlib.c	/^static void addlenmod (char *form, const char *lenmod) {$/;"	f	file:
addliteral	.\dep\Lua\src\lstrlib.c	/^static void addliteral (lua_State *L, luaL_Buffer *b, int arg) {$/;"	f	file:
addon_message_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const char * const * addon_message_table; \/* Non-library errors *\/$/;"	m	struct:jpeg_error_mgr
addprototype	.\dep\Lua\src\lparser.c	/^static Proto *addprototype (LexState *ls) {$/;"	f	file:
addquoted	.\dep\Lua\src\lstrlib.c	/^static void addquoted (luaL_Buffer *b, const char *s, size_t len) {$/;"	f	file:
addreturn	.\dep\Lua\src\lua.c	/^static int addreturn (lua_State *L) {$/;"	f	file:
addstr	.\dep\Lua\src\lobject.c	484;"	d	file:
addtoclib	.\dep\Lua\src\loadlib.c	/^static void addtoclib (lua_State *L, const char *path, void *plib) {$/;"	f	file:
adjustCase	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        std::string adjustCase( std::string const& str ) const {$/;"	f	class:Catch::WildcardPattern
adjustString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            std::string adjustString( std::string const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
adjustString	.\include\sol\Catch\single_include\catch.hpp	/^            std::string adjustString( std::string const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
adjust_assign	.\dep\Lua\src\lparser.c	/^static void adjust_assign (LexState *ls, int nvars, int nexps, expdesc *e) {$/;"	f	file:
adjust_varargs	.\dep\Lua\src\ldo.c	/^static StkId adjust_varargs (lua_State *L, Proto *p, int actual) {$/;"	f	file:
adjustlocalvars	.\dep\Lua\src\lparser.c	/^static void adjustlocalvars (LexState *ls, int nvars) {$/;"	f	file:
adjustresults	.\dep\Lua\src\lapi.h	17;"	d
adjustresults	.\include\lua\lapi.h	17;"	d
adl_barrier_detail	.\include\sol\single\sol\sol.hpp	/^	namespace adl_barrier_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
adl_barrier_detail	.\include\sol\sol\tie.hpp	/^	namespace adl_barrier_detail {$/;"	n	namespace:sol
advance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Vector         advance;$/;"	m	struct:FT_GlyphSlotRec_
advance	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Vector              advance;$/;"	m	struct:FT_GlyphRec_
advance	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Long  advance;$/;"	m	struct:FT_Incremental_MetricsRec_
advance	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^    float     advance;     \/\/\/< Offset to move horizontally to the next character$/;"	m	class:sf::Glyph
advance	.\include\SFML\Graphics\Glyph.hpp	/^    float     advance;     \/\/\/< Offset to move horizontally to the next character$/;"	m	class:sf::Glyph
advanceGeneratorsForCurrentTest	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual bool advanceGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context
advance_Height_Max	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  advance_Height_Max;      \/* advance height maximum *\/$/;"	m	struct:TT_VertHeader_
advance_Width_Max	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  advance_Width_Max;      \/* advance width maximum *\/$/;"	m	struct:TT_HoriHeader_
advance_v	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Long  advance_v;     \/* since 2.3.12 *\/$/;"	m	struct:FT_Incremental_MetricsRec_
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper<bases<Args...>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper<lua_CFunction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper<lua_r_CFunction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper<no_construction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct agnostic_lua_call_wrapper<no_prop, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper {$/;"	s	namespace:sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper<bases<Args...>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper<lua_CFunction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper<lua_r_CFunction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper<no_construction, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
agnostic_lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct agnostic_lua_call_wrapper<no_prop, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
alCheck	.\dep\SFML\src\SFML\Audio\ALCheck.hpp	52;"	d
alCheckError	.\dep\SFML\src\SFML\Audio\ALCheck.cpp	/^void alCheckError(const char* file, unsigned int line, const char* expression)$/;"	f	namespace:sf::priv
alibrary	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Init_FreeType( FT_Library  *alibrary );$/;"	v
all	.\include\sol\Catch\include\internal\catch_list.hpp	/^        std::string all() const {$/;"	f	struct:Catch::TagInfo
all	.\include\sol\single\sol\sol.hpp	/^		struct all : boolean<true> {};$/;"	s	namespace:sol::meta
all	.\include\sol\single\sol\sol.hpp	/^		struct all<T, Args...> : condition<T, all<Args...>, boolean<false>> {};$/;"	s	namespace:sol::meta
all	.\include\sol\sol\traits.hpp	/^		struct all : boolean<true> {};$/;"	s	namespace:sol::meta
all	.\include\sol\sol\traits.hpp	/^		struct all<T, Args...> : condition<T, all<Args...>, boolean<false>> {};$/;"	s	namespace:sol::meta
allOk	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        bool allOk() const {$/;"	f	struct:Catch::Counts
allPassed	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        bool allPassed() const {$/;"	f	struct:Catch::Counts
allSockets	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^    fd_set allSockets;   \/\/\/< Set containing all the sockets handles$/;"	m	struct:sf::SocketSelector::SocketSelectorImpl	file:
allWindows	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    std::vector<sf::priv::WindowImplX11*> allWindows;$/;"	m	namespace:__anon151	file:
allWindowsMutex	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    sf::Mutex                             allWindowsMutex;$/;"	m	namespace:__anon151	file:
all_same	.\include\sol\single\sol\sol.hpp	/^		struct all_same : std::true_type { };$/;"	s	namespace:sol::meta
all_same	.\include\sol\single\sol\sol.hpp	/^		struct all_same<T, U, Args...> : std::integral_constant <bool, std::is_same<T, U>::value && all_same<T, Args...>::value> { };$/;"	s	namespace:sol::meta
all_same	.\include\sol\sol\traits.hpp	/^		struct all_same : std::true_type { };$/;"	s	namespace:sol::meta
all_same	.\include\sol\sol\traits.hpp	/^		struct all_same<T, U, Args...> : std::integral_constant <bool, std::is_same<T, U>::value && all_same<T, Args...>::value> { };$/;"	s	namespace:sol::meta
allgc	.\dep\Lua\src\lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
allgc	.\include\lua\lstate.h	/^  GCObject *allgc;  \/* list of all collectable objects *\/$/;"	m	struct:global_State
alloc	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Alloc_Func    alloc;$/;"	m	struct:FT_MemoryRec_
alloc_chain	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^struct alloc_chain{$/;"	s
alloc_destroy	.\include\sol\single\sol\sol.hpp	/^			inline int alloc_destroy(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
alloc_destroy	.\include\sol\sol\stack_core.hpp	/^			inline int alloc_destroy(lua_State* L) {$/;"	f	namespace:sol::stack::stack_detail
allocate	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        T *allocate( size_type n ) {$/;"	f	struct:__anon187::minimal_allocator
allowThrows	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual bool allowThrows() const        { return !m_data.noThrow; }$/;"	f	class:Catch::Config
allowThrows	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    bool ResultBuilder::allowThrows() const { return getCurrentContext().getConfig()->allowThrows(); }$/;"	f	class:Catch::ResultBuilder
allowhook	.\dep\Lua\src\lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allowhook	.\include\lua\lstate.h	/^  lu_byte allowhook;$/;"	m	struct:lua_State
allweak	.\dep\Lua\src\lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
allweak	.\include\lua\lstate.h	/^  GCObject *allweak;  \/* list of all-weak tables *\/$/;"	m	struct:global_State
alphaDstFactor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Factor   alphaDstFactor; \/\/\/< Destination blending factor for the alpha channel$/;"	m	struct:sf::BlendMode
alphaDstFactor	.\include\SFML\Graphics\BlendMode.hpp	/^    Factor   alphaDstFactor; \/\/\/< Destination blending factor for the alpha channel$/;"	m	struct:sf::BlendMode
alphaEquation	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Equation alphaEquation;  \/\/\/< Blending equation for the alpha channel$/;"	m	struct:sf::BlendMode
alphaEquation	.\include\SFML\Graphics\BlendMode.hpp	/^    Equation alphaEquation;  \/\/\/< Blending equation for the alpha channel$/;"	m	struct:sf::BlendMode
alphaSrcFactor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Factor   alphaSrcFactor; \/\/\/< Source blending factor for the alpha channel$/;"	m	struct:sf::BlendMode
alphaSrcFactor	.\include\SFML\Graphics\BlendMode.hpp	/^    Factor   alphaSrcFactor; \/\/\/< Source blending factor for the alpha channel$/;"	m	struct:sf::BlendMode
alreadyInstantiated	.\include\sol\Catch\include\catch_session.hpp	/^        static bool alreadyInstantiated;$/;"	m	class:Catch::Session
alreadyInstantiated	.\include\sol\Catch\include\catch_session.hpp	/^    bool Session::alreadyInstantiated = false;$/;"	m	class:Catch::Session
alt	.\dep\SFML\include\SFML\Window\Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent
alt	.\include\SFML\Window\Event.hpp	/^        bool          alt;     \/\/\/< Is the Alt key pressed?$/;"	m	struct:sf::Event::KeyEvent
alwaysFalse	.\include\sol\Catch\include\internal\catch_common.h	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch
alwaysFalse	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool alwaysFalse() { return false; }$/;"	f	namespace:Catch
alwaysTrue	.\include\sol\Catch\include\internal\catch_common.h	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch
alwaysTrue	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool alwaysTrue() { return true; }$/;"	f	namespace:Catch
analysisp	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int analysisp;$/;"	m	struct:vorbis_dsp_state
andaux	.\dep\Lua\src\lbitlib.c	/^static lua_Unsigned andaux (lua_State *L) {$/;"	f	file:
androidKeyToSF	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^Keyboard::Key WindowImplAndroid::androidKeyToSF(int32_t key)$/;"	f	class:sf::priv::WindowImplAndroid
angle	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	/^  FT_Cos( FT_Angle  angle );$/;"	v
angle	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	/^  FT_Sin( FT_Angle  angle );$/;"	v
angle	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	/^  FT_Tan( FT_Angle  angle );$/;"	v
antialiasingLevel	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings
antialiasingLevel	.\include\SFML\Window\ContextSettings.hpp	/^    unsigned int antialiasingLevel; \/\/\/< Level of antialiasing$/;"	m	struct:sf::ContextSettings
any	.\include\sol\single\sol\sol.hpp	/^		struct any : boolean<false> {};$/;"	s	namespace:sol::meta
any	.\include\sol\single\sol\sol.hpp	/^		struct any<T, Args...> : condition<T, boolean<true>, any<Args...>> {};$/;"	s	namespace:sol::meta
any	.\include\sol\sol\traits.hpp	/^		struct any : boolean<false> {};$/;"	s	namespace:sol::meta
any	.\include\sol\sol\traits.hpp	/^		struct any<T, Args...> : condition<T, boolean<true>, any<Args...>> {};$/;"	s	namespace:sol::meta
any_same	.\include\sol\single\sol\sol.hpp	/^		struct any_same : std::false_type { };$/;"	s	namespace:sol::meta
any_same	.\include\sol\single\sol\sol.hpp	/^		struct any_same<T, U, Args...> : std::integral_constant <bool, std::is_same<T, U>::value || any_same<T, Args...>::value> { };$/;"	s	namespace:sol::meta
any_same	.\include\sol\sol\traits.hpp	/^		struct any_same : std::false_type { };$/;"	s	namespace:sol::meta
any_same	.\include\sol\sol\traits.hpp	/^		struct any_same<T, U, Args...> : std::integral_constant <bool, std::is_same<T, U>::value || any_same<T, Args...>::value> { };$/;"	s	namespace:sol::meta
api_check	.\dep\Lua\src\llimits.h	101;"	d
api_check	.\include\lua\llimits.h	101;"	d
api_checknelems	.\dep\Lua\src\lapi.h	20;"	d
api_checknelems	.\include\lua\lapi.h	20;"	d
api_checkstackindex	.\dep\Lua\src\lapi.c	56;"	d	file:
api_checkvalidindex	.\dep\Lua\src\lapi.c	54;"	d	file:
api_incr_top	.\dep\Lua\src\lapi.h	14;"	d
api_incr_top	.\include\lua\lapi.h	14;"	d
append	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^void VertexArray::append(const Vertex& vertex)$/;"	f	class:sf::VertexArray
append	.\dep\SFML\src\SFML\Network\Packet.cpp	/^void Packet::append(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::Packet
application	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_Application application;$/;"	m	union:__anon57::__anon58
apply	.\include\sol\single\sol\sol.hpp	/^			probe apply(std::index_sequence<I, I1, In...>, int sofar, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe_field_getter
apply	.\include\sol\single\sol\sol.hpp	/^			probe apply(std::index_sequence<I>, int sofar, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe_field_getter
apply	.\include\sol\single\sol\sol.hpp	/^			static decltype(auto) apply(std::index_sequence<I...>, lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
apply	.\include\sol\single\sol\sol.hpp	/^			void apply(std::index_sequence<0, I...>, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
apply	.\include\sol\single\sol\sol.hpp	/^			void apply(std::index_sequence<I0, I1, I...>, lua_State* L, Keys&& keys, Value&& value, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
apply	.\include\sol\single\sol\sol.hpp	/^			void apply(std::index_sequence<I>, lua_State* L, Key&& keys, Value&& value, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
apply	.\include\sol\sol\stack_field.hpp	/^			void apply(std::index_sequence<0, I...>, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::stack::field_getter
apply	.\include\sol\sol\stack_field.hpp	/^			void apply(std::index_sequence<I0, I1, I...>, lua_State* L, Keys&& keys, Value&& value, int tableindex) {$/;"	f	struct:sol::stack::field_setter
apply	.\include\sol\sol\stack_field.hpp	/^			void apply(std::index_sequence<I>, lua_State* L, Key&& keys, Value&& value, int tableindex) {$/;"	f	struct:sol::stack::field_setter
apply	.\include\sol\sol\stack_get.hpp	/^			static decltype(auto) apply(std::index_sequence<I...>, lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
apply	.\include\sol\sol\stack_probe.hpp	/^			probe apply(std::index_sequence<I, I1, In...>, int sofar, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::stack::probe_field_getter
apply	.\include\sol\sol\stack_probe.hpp	/^			probe apply(std::index_sequence<I>, int sofar, lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::stack::probe_field_getter
applyBlendMode	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::applyBlendMode(const BlendMode& mode)$/;"	f	class:sf::RenderTarget
applyCommandLine	.\include\sol\Catch\include\catch_session.hpp	/^        int applyCommandLine( int argc, char const* argv[], OnUnusedOptions::DoWhat unusedOptionBehaviour = OnUnusedOptions::Fail ) {$/;"	f	class:Catch::Session
applyCurrentView	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::applyCurrentView()$/;"	f	class:sf::RenderTarget
applyDamage	.\src\src\Enemy.cpp	/^void Enemy::applyDamage(float amount, Object* hitter) {$/;"	f	class:Enemy
applyEvaluator	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    bool applyEvaluator( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
applyEvaluator	.\include\sol\Catch\single_include\catch.hpp	/^    bool applyEvaluator( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
applyFilenamesAsTags	.\include\sol\Catch\include\catch_session.hpp	/^    void applyFilenamesAsTags( IConfig const& config ) {$/;"	f	namespace:Catch
applyShader	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::applyShader(const Shader* shader)$/;"	f	class:sf::RenderTarget
applyStat	.\src\src\Object.cpp	/^void Object::applyStat(Stats s) {$/;"	f	class:Object
applyTexture	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::applyTexture(const Texture* texture)$/;"	f	class:sf::RenderTarget
applyTransform	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::applyTransform(const Transform& transform)$/;"	f	class:sf::RenderTarget
approve	.\include\sol\Catch\scripts\approvalTests.py	/^def approve( baseName, args ):$/;"	f
approveFile	.\include\sol\Catch\scripts\approve.py	/^def approveFile( approvedFile, unapprovedFile ):$/;"	f
arcSafeRelease	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arcSafeRelease	.\include\sol\Catch\single_include\catch.hpp	/^inline void arcSafeRelease( NSObject* ){}$/;"	f
arcSafeRelease	.\include\sol\Catch\single_include\catch.hpp	/^inline void arcSafeRelease( NSObject* obj ) {$/;"	f
arg	.\include\sol\Catch\scripts\generateSingleHeader.py	/^    arg = string.lower(arg)$/;"	v
argSynopsis	.\include\sol\Catch\include\external\clara.h	/^        std::string argSynopsis() const {$/;"	f	class:Clara::CommandLine
argSynopsis	.\include\sol\Catch\include\external\clara.h	/^        void argSynopsis( std::ostream& os ) const {$/;"	f	class:Clara::CommandLine
argparse	.\include\sol\bootstrap.py	/^import argparse$/;"	i
argparse	.\include\sol\single.py	/^import argparse$/;"	i
args	.\include\sol\bootstrap.py	/^args = parser.parse_args()$/;"	v
args	.\include\sol\single.py	/^args = parser.parse_args()$/;"	v
args_list	.\include\sol\single\sol\sol.hpp	/^				typedef types<Arg> args_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
args_list	.\include\sol\single\sol\sol.hpp	/^				typedef types<Args...> args_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
args_list	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::args_list args_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
args_list	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::args_list args_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
args_list	.\include\sol\sol\bind_traits.hpp	/^				typedef types<Arg> args_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
args_list	.\include\sol\sol\bind_traits.hpp	/^				typedef types<Args...> args_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
args_list	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::args_list args_list;$/;"	t	struct:sol::member_function_wrapper
args_list	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::args_list args_list;$/;"	t	struct:sol::wrapper
args_lists	.\include\sol\single\sol\sol.hpp	/^			typedef meta::function_args_t<function_type> args_lists;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
args_lists	.\include\sol\single\sol\sol.hpp	/^			typedef meta::function_args_t<function_type> args_lists;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
args_lists	.\include\sol\single\sol\sol.hpp	/^			typedef typename fx_t::args_list args_lists;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
args_lists	.\include\sol\single\sol\sol.hpp	/^			typedef typename meta::bind_traits<function_type>::args_list args_lists;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
args_lists	.\include\sol\sol\function.hpp	/^			typedef typename fx_t::args_list args_lists;$/;"	t	struct:sol::stack::getter
args_lists	.\include\sol\sol\function_types_stateful.hpp	/^			typedef meta::function_args_t<function_type> args_lists;$/;"	t	struct:sol::function_detail::functor_function
args_lists	.\include\sol\sol\function_types_stateful.hpp	/^			typedef meta::function_args_t<function_type> args_lists;$/;"	t	struct:sol::function_detail::member_function
args_lists	.\include\sol\sol\function_types_stateful.hpp	/^			typedef typename meta::bind_traits<function_type>::args_list args_lists;$/;"	t	struct:sol::function_detail::member_variable
args_tuple	.\include\sol\single\sol\sol.hpp	/^				typedef std::tuple<Arg> args_tuple;$/;"	t	struct:sol::meta::meta_detail::callable_traits
args_tuple	.\include\sol\single\sol\sol.hpp	/^				typedef std::tuple<Args...> args_tuple;$/;"	t	struct:sol::meta::meta_detail::basic_traits
args_tuple	.\include\sol\sol\bind_traits.hpp	/^				typedef std::tuple<Arg> args_tuple;$/;"	t	struct:sol::meta::meta_detail::callable_traits
args_tuple	.\include\sol\sol\bind_traits.hpp	/^				typedef std::tuple<Args...> args_tuple;$/;"	t	struct:sol::meta::meta_detail::basic_traits
argument_type	.\include\sol\Optional\optional.hpp	/^    typedef sol::optional<T&> argument_type;$/;"	t	struct:std::hash
argument_type	.\include\sol\Optional\optional.hpp	/^    typedef sol::optional<T> argument_type;$/;"	t	struct:std::hash
arith_ac_K	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_ac_K[NUM_ARITH_TBLS]; \/* Kx values for AC arith-coding tables *\/$/;"	m	struct:jpeg_compress_struct
arith_ac_K	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_ac_K[NUM_ARITH_TBLS]; \/* Kx values for AC arith-coding tables *\/$/;"	m	struct:jpeg_decompress_struct
arith_code	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean arith_code;		\/* TRUE=arithmetic coding, FALSE=Huffman *\/$/;"	m	struct:jpeg_compress_struct
arith_code	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean arith_code;		\/* TRUE=arithmetic coding, FALSE=Huffman *\/$/;"	m	struct:jpeg_decompress_struct
arith_dc_L	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_dc_L[NUM_ARITH_TBLS]; \/* L values for DC arith-coding tables *\/$/;"	m	struct:jpeg_compress_struct
arith_dc_L	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_dc_L[NUM_ARITH_TBLS]; \/* L values for DC arith-coding tables *\/$/;"	m	struct:jpeg_decompress_struct
arith_dc_U	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_dc_U[NUM_ARITH_TBLS]; \/* U values for DC arith-coding tables *\/$/;"	m	struct:jpeg_compress_struct
arith_dc_U	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 arith_dc_U[NUM_ARITH_TBLS]; \/* U values for DC arith-coding tables *\/$/;"	m	struct:jpeg_decompress_struct
arity	.\include\sol\single\sol\sol.hpp	/^				static const std::size_t arity = 1;$/;"	m	struct:sol::meta::meta_detail::callable_traits
arity	.\include\sol\single\sol\sol.hpp	/^				static const std::size_t arity = sizeof...(Args);$/;"	m	struct:sol::meta::meta_detail::basic_traits
arity	.\include\sol\single\sol\sol.hpp	/^		static const std::size_t arity = base_t::arity - meta::count_for<is_transparent_argument, typename base_t::args_list>::value;$/;"	m	struct:sol::sol::call_syntax::call_status::type::lua_bind_traits
arity	.\include\sol\sol\bind_traits.hpp	/^				static const std::size_t arity = 1;$/;"	m	struct:sol::meta::meta_detail::callable_traits
arity	.\include\sol\sol\bind_traits.hpp	/^				static const std::size_t arity = sizeof...(Args);$/;"	m	struct:sol::meta::meta_detail::basic_traits
arity	.\include\sol\sol\types.hpp	/^		static const std::size_t arity = base_t::arity - meta::count_for<is_transparent_argument, typename base_t::args_list>::value;$/;"	m	struct:sol::call_syntax::call_status::type::lua_bind_traits
arr	.\dep\Lua\src\lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon14
arr	.\dep\Lua\src\lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
arr	.\include\lua\lparser.h	/^    Vardesc *arr;$/;"	m	struct:Dyndata::__anon165
arr	.\include\lua\lparser.h	/^  Labeldesc *arr;  \/* array *\/$/;"	m	struct:Labellist
array	.\dep\Lua\src\lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
array	.\include\lua\lobject.h	/^  TValue *array;  \/* array part *\/$/;"	m	struct:Table
arrayindex	.\dep\Lua\src\ltable.c	/^static unsigned int arrayindex (const TValue *key) {$/;"	f	file:
as	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) as() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
as	.\include\sol\sol\object.hpp	/^		decltype(auto) as() const {$/;"	f	class:sol::basic_object
asMicroseconds	.\dep\SFML\src\SFML\System\Time.cpp	/^Int64 Time::asMicroseconds() const$/;"	f	class:sf::Time
asMilliseconds	.\dep\SFML\src\SFML\System\Time.cpp	/^Int32 Time::asMilliseconds() const$/;"	f	class:sf::Time
asSeconds	.\dep\SFML\src\SFML\System\Time.cpp	/^float Time::asSeconds() const$/;"	f	class:sf::Time
as_reference_tag	.\include\sol\single\sol\sol.hpp	/^		struct as_reference_tag {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
as_reference_tag	.\include\sol\sol\stack_core.hpp	/^		struct as_reference_tag {};$/;"	s	namespace:sol::detail
as_stack	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) as_stack(std::false_type) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
as_stack	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) as_stack(std::true_type) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
as_stack	.\include\sol\sol\object.hpp	/^		decltype(auto) as_stack(std::false_type) const {$/;"	f	class:sol::basic_object
as_stack	.\include\sol\sol\object.hpp	/^		decltype(auto) as_stack(std::true_type) const {$/;"	f	class:sol::basic_object
ascender	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos     ascender;    \/* ascender in 26.6 frac. pixels          *\/$/;"	m	struct:FT_Size_Metrics_
ascender	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          ascender;$/;"	m	struct:FT_FaceRec_
ascent	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  ascent;$/;"	m	struct:FT_WinFNT_HeaderRec_
assertionEnded	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    bool LegacyReporterAdapter::assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	class:Catch::LegacyReporterAdapter
assertionEnded	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void assertionEnded( AssertionResult const& result ) {$/;"	f	class:Catch::RunContext
assertionEnded	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        virtual bool assertionEnded( AssertionStats const& assertionStats ) {$/;"	f	struct:Catch::CumulativeReporterBase
assertionEnded	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        virtual bool assertionEnded( AssertionStats const& _assertionStats ) {$/;"	f	struct:Catch::CompactReporter
assertionResult	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        AssertionResult assertionResult;$/;"	m	struct:Catch::AssertionStats
assertionStarting	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::assertionStarting( AssertionInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter
assertionStarting	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        virtual void assertionStarting( AssertionInfo const& ) {$/;"	f	struct:Catch::CompactReporter
assertions	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Counts assertions;$/;"	m	struct:Catch::SectionStats
assertions	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Counts assertions;$/;"	m	struct:Catch::Totals
assertions	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            Assertions assertions;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode
assign_norebind	.\include\sol\Optional\test_optional.cpp	/^void assign_norebind(tr2::optional<T&>& optref, T& obj)$/;"	f
assignment	.\dep\Lua\src\lparser.c	/^static void assignment (LexState *ls, struct LHS_assign *lh, int nvars) {$/;"	f	file:
at_in_pack	.\include\sol\single\sol\sol.hpp	/^		struct at_in_pack {};$/;"	s	namespace:sol::meta
at_in_pack	.\include\sol\single\sol\sol.hpp	/^		struct at_in_pack<0, Arg, Args...> { typedef Arg type; };$/;"	s	namespace:sol::meta
at_in_pack	.\include\sol\single\sol\sol.hpp	/^		struct at_in_pack<I, Arg, Args...> : std::conditional<I == 0, Arg, at_in_pack_t<I - 1, Args...>> {};$/;"	s	namespace:sol::meta
at_in_pack	.\include\sol\sol\traits.hpp	/^		struct at_in_pack {};$/;"	s	namespace:sol::meta
at_in_pack	.\include\sol\sol\traits.hpp	/^		struct at_in_pack<0, Arg, Args...> { typedef Arg type; };$/;"	s	namespace:sol::meta
at_in_pack	.\include\sol\sol\traits.hpp	/^		struct at_in_pack<I, Arg, Args...> : std::conditional<I == 0, Arg, at_in_pack_t<I - 1, Args...>> {};$/;"	s	namespace:sol::meta
atom	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^      const char*     atom;$/;"	m	union:BDF_PropertyRec_::__anon77
atomic	.\dep\Lua\src\lgc.c	/^static l_mem atomic (lua_State *L) {$/;"	f	file:
atoms	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^    AtomMap atoms;$/;"	m	namespace:__anon144	file:
attachSound	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^void SoundBuffer::attachSound(Sound* sound) const$/;"	f	class:sf::SoundBuffer
attached	.\src\include\SkillTree.h	/^	Object* attached; \/\/ What object this Node is attached to$/;"	m	class:SkillNode
attr	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes attr;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
attr	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes attr;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
attributeFlags	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    Uint32       attributeFlags;    \/\/\/< The attribute flags to create the context with$/;"	m	struct:sf::ContextSettings
attributeFlags	.\include\SFML\Window\ContextSettings.hpp	/^    Uint32       attributeFlags;    \/\/\/< The attribute flags to create the context with$/;"	m	struct:sf::ContextSettings
audioContext	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^    ALCcontext* audioContext = NULL;$/;"	m	namespace:__anon118	file:
audioDevice	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^    ALCdevice*  audioDevice  = NULL;$/;"	m	namespace:__anon118	file:
author	.\include\sol\docs\source\conf.py	/^author = 'ThePhD'$/;"	v
autoTestReg	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^AutoTestReg autoTestReg;$/;"	v
autohint	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Generic        autohint;   \/* face-specific auto-hinter data *\/$/;"	m	struct:FT_FaceRec_
aux_close	.\dep\Lua\src\liolib.c	/^static int aux_close (lua_State *L) {$/;"	f	file:
aux_getn	.\dep\Lua\src\ltablib.c	33;"	d	file:
aux_lines	.\dep\Lua\src\liolib.c	/^static void aux_lines (lua_State *L, int toclose) {$/;"	f	file:
aux_upvalue	.\dep\Lua\src\lapi.c	/^static const char *aux_upvalue (StkId fi, int n, TValue **val,$/;"	f	file:
auxgetinfo	.\dep\Lua\src\ldebug.c	/^static int auxgetinfo (lua_State *L, const char *what, lua_Debug *ar,$/;"	f	file:
auxgetstr	.\dep\Lua\src\lapi.c	/^static int auxgetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxresume	.\dep\Lua\src\lcorolib.c	/^static int auxresume (lua_State *L, lua_State *co, int narg) {$/;"	f	file:
auxsetstr	.\dep\Lua\src\lapi.c	/^static void auxsetstr (lua_State *L, const TValue *t, const char *k) {$/;"	f	file:
auxsort	.\dep\Lua\src\ltablib.c	/^static void auxsort (lua_State *L, IdxT lo, IdxT up,$/;"	f	file:
auxupvalue	.\dep\Lua\src\ldblib.c	/^static int auxupvalue (lua_State *L, int get) {$/;"	f	file:
available	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^        bool available;    \/\/\/< Is the sensor available on this device?$/;"	m	struct:sf::priv::SensorManager::Item
available_sizes	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Bitmap_Size*   available_sizes;$/;"	m	struct:FT_FaceRec_
avg_width	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  avg_width;$/;"	m	struct:FT_WinFNT_HeaderRec_
axes	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    bool         axes[Joystick::AxisCount]; \/\/\/< Support for each axis$/;"	m	struct:sf::priv::JoystickCaps
axes	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    float axes[Joystick::AxisCount];      \/\/\/< Position of each axis, in range [-100, 100]$/;"	m	struct:sf::priv::JoystickState
axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_MM_Axis  axis[T1_MAX_MM_AXIS];$/;"	m	struct:FT_Multi_Master_
axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Var_Axis*         axis;$/;"	m	struct:FT_MM_Var_
axis	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent
axis	.\include\SFML\Window\Event.hpp	/^        Joystick::Axis axis;       \/\/\/< Axis on which the joystick moved$/;"	m	struct:sf::Event::JoystickMoveEvent
axis_names	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*       axis_names[T1_MAX_MM_AXIS];$/;"	m	struct:PS_BlendRec_
b	.\dep\Lua\src\lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	.\dep\Lua\src\ldo.c	/^  luai_jmpbuf b;$/;"	m	struct:lua_longjmp	file:
b	.\dep\Lua\src\lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color
b	.\include\SFML\Graphics\Color.hpp	/^    Uint8 b; \/\/\/< Blue component$/;"	m	class:sf::Color
b	.\include\lua\lauxlib.h	/^  char *b;  \/* buffer address *\/$/;"	m	struct:luaL_Buffer
b	.\include\lua\lobject.h	/^  int b;           \/* booleans *\/$/;"	m	union:Value
b	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int b;$/;"	m	struct:A::X	file:
b	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int b;$/;"	m	struct:B::Y	file:
b	.\include\sol\single\sol\sol.hpp	/^    luaL_Buffer b; \/* make incorrect code crash! *\/$/;"	m	struct:sol::luaL_Buffer_52
b	.\include\sol\sol\compatibility\5.1.0.h	/^    luaL_Buffer b; \/* make incorrect code crash! *\/$/;"	m	struct:luaL_Buffer_52
b	.\include\sol\test_customizations.cpp	/^	bool b;$/;"	m	struct:two_things	file:
b	.\src\include\Color.h	/^	unsigned char b;$/;"	m	struct:Color
b_and	.\dep\Lua\src\lbitlib.c	/^static int b_and (lua_State *L) {$/;"	f	file:
b_arshift	.\dep\Lua\src\lbitlib.c	/^static int b_arshift (lua_State *L) {$/;"	f	file:
b_extract	.\dep\Lua\src\lbitlib.c	/^static int b_extract (lua_State *L) {$/;"	f	file:
b_lrot	.\dep\Lua\src\lbitlib.c	/^static int b_lrot (lua_State *L) {$/;"	f	file:
b_lshift	.\dep\Lua\src\lbitlib.c	/^static int b_lshift (lua_State *L) {$/;"	f	file:
b_not	.\dep\Lua\src\lbitlib.c	/^static int b_not (lua_State *L) {$/;"	f	file:
b_o_s	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int     b_o_s;          \/* set after we've written the initial page$/;"	m	struct:__anon90
b_o_s	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long  b_o_s;$/;"	m	struct:__anon91
b_or	.\dep\Lua\src\lbitlib.c	/^static int b_or (lua_State *L) {$/;"	f	file:
b_replace	.\dep\Lua\src\lbitlib.c	/^static int b_replace (lua_State *L) {$/;"	f	file:
b_rot	.\dep\Lua\src\lbitlib.c	/^static int b_rot (lua_State *L, lua_Integer d) {$/;"	f	file:
b_rrot	.\dep\Lua\src\lbitlib.c	/^static int b_rrot (lua_State *L) {$/;"	f	file:
b_rshift	.\dep\Lua\src\lbitlib.c	/^static int b_rshift (lua_State *L) {$/;"	f	file:
b_shift	.\dep\Lua\src\lbitlib.c	/^static int b_shift (lua_State *L, lua_Unsigned r, lua_Integer i) {$/;"	f	file:
b_str2int	.\dep\Lua\src\lbaselib.c	/^static const char *b_str2int (const char *s, int base, lua_Integer *pn) {$/;"	f	file:
b_test	.\dep\Lua\src\lbitlib.c	/^static int b_test (lua_State *L) {$/;"	f	file:
b_xor	.\dep\Lua\src\lbitlib.c	/^static int b_xor (lua_State *L) {$/;"	f	file:
backend_state	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  void       *backend_state;$/;"	m	struct:vorbis_dsp_state
backingScaleFactor	.\dep\SFML\src\SFML\Window\iOS\SFAppDelegate.hpp	/^@property (nonatomic) CGFloat backingScaleFactor;$/;"	v
bad_optional_access	.\include\sol\Optional\optional.hpp	/^  explicit bad_optional_access(const ::std::string& what_arg) : ::std::logic_error{what_arg} {}$/;"	f	class:sol::bad_optional_access
bad_optional_access	.\include\sol\Optional\optional.hpp	/^  explicit bad_optional_access(const char* what_arg) : ::std::logic_error{what_arg} {}$/;"	f	class:sol::bad_optional_access
bad_optional_access	.\include\sol\Optional\optional.hpp	/^class bad_optional_access : public ::std::logic_error {$/;"	c	namespace:sol
bark	.\include\sol\test_functions.cpp	/^	int a = 0xA; int bark() { return 1; }$/;"	f	struct:A
bark	.\include\sol\test_functions.cpp	/^std::tuple<int, int> bark(int num_value, A* a) {$/;"	f
bark	.\include\sol\test_usertypes.cpp	/^	int bark = 24;$/;"	m	struct:ext_getset	file:
bark	.\include\sol\test_usertypes.cpp	/^	int bark;$/;"	m	struct:self_test	file:
base	.\dep\Lua\src\lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon15::__anon16
base	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    unsigned char*       base;$/;"	m	struct:FT_StreamRec_
base	.\include\lua\lstate.h	/^      StkId base;  \/* base for this function *\/$/;"	m	struct:CallInfo::__anon166::__anon167
base	.\include\sol\single\sol\sol.hpp	/^		base,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
base	.\include\sol\sol\state_view.hpp	/^		base,$/;"	m	class:sol::lib
base_ci	.\dep\Lua\src\lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_ci	.\include\lua\lstate.h	/^  CallInfo base_ci;  \/* CallInfo for first level (C calling Lua) *\/$/;"	m	struct:lua_State
base_class_cast_key	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) base_class_cast_key() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
base_class_cast_key	.\include\sol\sol\inheritance.hpp	/^		inline decltype(auto) base_class_cast_key() {$/;"	f	namespace:sol::detail
base_class_check_key	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) base_class_check_key() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
base_class_check_key	.\include\sol\sol\inheritance.hpp	/^		inline decltype(auto) base_class_check_key() {$/;"	f	namespace:sol::detail
base_classes	.\include\sol\single\sol\sol.hpp	/^	const auto base_classes = base_classes_tag();$/;"	m	namespace:sol::sol::call_syntax::call_status::sol
base_classes	.\include\sol\sol\inheritance.hpp	/^	const auto base_classes = base_classes_tag();$/;"	m	namespace:sol
base_classes_tag	.\include\sol\single\sol\sol.hpp	/^	typedef bases<> base_classes_tag;$/;"	t	namespace:sol::sol::call_syntax::call_status::sol
base_classes_tag	.\include\sol\sol\inheritance.hpp	/^	typedef bases<> base_classes_tag;$/;"	t	namespace:sol
base_funcs	.\dep\Lua\src\lbaselib.c	/^static const luaL_Reg base_funcs[] = {$/;"	v	file:
base_height	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  base_width, base_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
base_list	.\include\sol\single\sol\sol.hpp	/^	struct base_list { };$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
base_list	.\include\sol\sol\inheritance.hpp	/^	struct base_list { };$/;"	s	namespace:sol
base_t	.\include\sol\single\sol\sol.hpp	/^		basic_object(lua_State* L, int index = -1) noexcept : base_t(L, index) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
base_t	.\include\sol\single\sol\sol.hpp	/^		basic_table_core() noexcept : base_t() { }$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
base_t	.\include\sol\single\sol\sol.hpp	/^		typedef meta::bind_traits<Signature> base_t;$/;"	t	struct:sol::sol::call_syntax::call_status::type::lua_bind_traits
base_t	.\include\sol\single\sol\sol.hpp	/^		typedef std::iterator<std::input_iterator_tag, std::pair<object, object>> base_t;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
base_t	.\include\sol\single\sol\sol.hpp	/^		typedef std::iterator<std::random_access_iterator_tag, std::conditional_t<is_const, const stack_proxy, stack_proxy>, std::ptrdiff_t, std::conditional_t<is_const, const stack_proxy*, stack_proxy*>, std::conditional_t<is_const, const stack_proxy, stack_proxy>> base_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
base_t	.\include\sol\single\sol\sol.hpp	/^		typedef std::tuple<std::add_lvalue_reference_t<Tn>...> base_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::tie_t
base_t	.\include\sol\sol\object.hpp	/^		basic_object(lua_State* L, int index = -1) noexcept : base_t(L, index) {}$/;"	f	class:sol::basic_object
base_t	.\include\sol\sol\table_core.hpp	/^		basic_table_core() noexcept : base_t() { }$/;"	f	class:sol::basic_table_core
base_t	.\include\sol\sol\table_iterator.hpp	/^		typedef std::iterator<std::input_iterator_tag, std::pair<object, object>> base_t;$/;"	t	class:sol::basic_table_iterator
base_t	.\include\sol\sol\tie.hpp	/^		typedef std::tuple<std::add_lvalue_reference_t<Tn>...> base_t;$/;"	t	struct:sol::tie_t
base_t	.\include\sol\sol\types.hpp	/^		typedef meta::bind_traits<Signature> base_t;$/;"	t	struct:sol::call_syntax::call_status::type::lua_bind_traits
base_t	.\include\sol\sol\variadic_args.hpp	/^		typedef std::iterator<std::random_access_iterator_tag, std::conditional_t<is_const, const stack_proxy, stack_proxy>, std::ptrdiff_t, std::conditional_t<is_const, const stack_proxy*, stack_proxy*>, std::conditional_t<is_const, const stack_proxy, stack_proxy>> base_t;$/;"	t	struct:sol::va_iterator
base_width	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  base_width, base_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
baseclasscast	.\include\sol\single\sol\sol.hpp	/^		void* baseclasscast;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
baseclasscast	.\include\sol\sol\usertype_metatable.hpp	/^		void* baseclasscast;$/;"	m	struct:sol::usertype_metatable
baseclasscheck	.\include\sol\single\sol\sol.hpp	/^		void* baseclasscheck;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
baseclasscheck	.\include\sol\sol\usertype_metatable.hpp	/^		void* baseclasscheck;$/;"	m	struct:sol::usertype_metatable
basehookcount	.\dep\Lua\src\lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
basehookcount	.\include\lua\lstate.h	/^  int basehookcount;$/;"	m	struct:lua_State
basicTree	.\src\src\SkillTree.cpp	/^	SkillTree* basicTree;$/;"	m	namespace:SkillTrees	file:
basic_check	.\include\sol\single\sol\sol.hpp	/^			struct basic_check {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
basic_check	.\include\sol\sol\stack_check.hpp	/^			struct basic_check {$/;"	s	namespace:sol::stack::stack_detail
basic_function	.\include\sol\single\sol\sol.hpp	/^		basic_function(const stack_reference& r) : basic_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
basic_function	.\include\sol\single\sol\sol.hpp	/^		basic_function(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
basic_function	.\include\sol\single\sol\sol.hpp	/^		basic_function(stack_reference&& r) : basic_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
basic_function	.\include\sol\single\sol\sol.hpp	/^	class basic_function : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
basic_function	.\include\sol\sol\function.hpp	/^		basic_function(const stack_reference& r) : basic_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_function
basic_function	.\include\sol\sol\function.hpp	/^		basic_function(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::basic_function
basic_function	.\include\sol\sol\function.hpp	/^		basic_function(stack_reference&& r) : basic_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_function
basic_function	.\include\sol\sol\function.hpp	/^	class basic_function : public base_t {$/;"	c	namespace:sol
basic_lightuserdata	.\include\sol\single\sol\sol.hpp	/^		basic_lightuserdata(const stack_reference& r) : basic_lightuserdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\single\sol\sol.hpp	/^		basic_lightuserdata(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\single\sol\sol.hpp	/^		basic_lightuserdata(stack_reference&& r) : basic_lightuserdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\single\sol\sol.hpp	/^	class basic_lightuserdata : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol
basic_lightuserdata	.\include\sol\sol\userdata.hpp	/^		basic_lightuserdata(const stack_reference& r) : basic_lightuserdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\sol\userdata.hpp	/^		basic_lightuserdata(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\sol\userdata.hpp	/^		basic_lightuserdata(stack_reference&& r) : basic_lightuserdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_lightuserdata
basic_lightuserdata	.\include\sol\sol\userdata.hpp	/^	class basic_lightuserdata : public base_t {$/;"	c	namespace:sol
basic_object	.\include\sol\single\sol\sol.hpp	/^		basic_object(T&& r) : base_t(std::forward<T>(r)) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
basic_object	.\include\sol\single\sol\sol.hpp	/^		basic_object(const stack_reference& r) noexcept : basic_object(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
basic_object	.\include\sol\single\sol\sol.hpp	/^		basic_object(nil_t r) : base_t(r) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
basic_object	.\include\sol\single\sol\sol.hpp	/^		basic_object(stack_reference&& r) noexcept : basic_object(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
basic_object	.\include\sol\single\sol\sol.hpp	/^	class basic_object : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
basic_object	.\include\sol\sol\object.hpp	/^		basic_object(T&& r) : base_t(std::forward<T>(r)) {}$/;"	f	class:sol::basic_object
basic_object	.\include\sol\sol\object.hpp	/^		basic_object(const stack_reference& r) noexcept : basic_object(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_object
basic_object	.\include\sol\sol\object.hpp	/^		basic_object(nil_t r) : base_t(r) {}$/;"	f	class:sol::basic_object
basic_object	.\include\sol\sol\object.hpp	/^		basic_object(stack_reference&& r) noexcept : basic_object(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_object
basic_object	.\include\sol\sol\object.hpp	/^	class basic_object : public base_t {$/;"	c	namespace:sol
basic_protected_function	.\include\sol\single\sol\sol.hpp	/^	class basic_protected_function : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^		basic_protected_function(basic_function<base_t>&& b) : base_t(std::move(b)) {}$/;"	f	class:sol::basic_protected_function
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^		basic_protected_function(const basic_function<base_t>& b) : base_t(b) {}$/;"	f	class:sol::basic_protected_function
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^		basic_protected_function(const stack_reference& r) : basic_protected_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_protected_function
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^		basic_protected_function(lua_State* L, int index = -1) : base_t(L, index), error_handler(get_default_handler()) {$/;"	f	class:sol::basic_protected_function
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^		basic_protected_function(stack_reference&& r) : basic_protected_function(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_protected_function
basic_protected_function	.\include\sol\sol\protected_function.hpp	/^	class basic_protected_function : public base_t {$/;"	c	namespace:sol
basic_table_core	.\include\sol\single\sol\sol.hpp	/^	class basic_table_core : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
basic_table_core	.\include\sol\sol\table_core.hpp	/^		basic_table_core(const stack_reference& r) : basic_table_core(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_table_core
basic_table_core	.\include\sol\sol\table_core.hpp	/^		basic_table_core(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::basic_table_core
basic_table_core	.\include\sol\sol\table_core.hpp	/^		basic_table_core(stack_reference&& r) : basic_table_core(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_table_core
basic_table_core	.\include\sol\sol\table_core.hpp	/^	class basic_table_core : public base_t {$/;"	c	namespace:sol
basic_table_iterator	.\include\sol\single\sol\sol.hpp	/^		basic_table_iterator() : keyidx(-1), idx(-1) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
basic_table_iterator	.\include\sol\single\sol\sol.hpp	/^		basic_table_iterator(reference_type x) : ref(std::move(x)) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
basic_table_iterator	.\include\sol\single\sol\sol.hpp	/^	class basic_table_iterator : public std::iterator<std::input_iterator_tag, std::pair<object, object>> {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
basic_table_iterator	.\include\sol\sol\table_iterator.hpp	/^		basic_table_iterator() : keyidx(-1), idx(-1) {$/;"	f	class:sol::basic_table_iterator
basic_table_iterator	.\include\sol\sol\table_iterator.hpp	/^		basic_table_iterator(reference_type x) : ref(std::move(x)) {$/;"	f	class:sol::basic_table_iterator
basic_table_iterator	.\include\sol\sol\table_iterator.hpp	/^	class basic_table_iterator : public std::iterator<std::input_iterator_tag, std::pair<object, object>> {$/;"	c	namespace:sol
basic_traits	.\include\sol\single\sol\sol.hpp	/^			struct basic_traits {$/;"	s	namespace:sol::meta::meta_detail
basic_traits	.\include\sol\sol\bind_traits.hpp	/^			struct basic_traits {$/;"	s	namespace:sol::meta::meta_detail
basic_userdata	.\include\sol\single\sol\sol.hpp	/^		basic_userdata(const stack_reference& r) : basic_userdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_userdata
basic_userdata	.\include\sol\single\sol\sol.hpp	/^		basic_userdata(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_userdata
basic_userdata	.\include\sol\single\sol\sol.hpp	/^		basic_userdata(stack_reference&& r) : basic_userdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::basic_userdata
basic_userdata	.\include\sol\single\sol\sol.hpp	/^	class basic_userdata : public base_t {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol
basic_userdata	.\include\sol\sol\userdata.hpp	/^		basic_userdata(const stack_reference& r) : basic_userdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_userdata
basic_userdata	.\include\sol\sol\userdata.hpp	/^		basic_userdata(lua_State* L, int index = -1) : base_t(L, index) {$/;"	f	class:sol::basic_userdata
basic_userdata	.\include\sol\sol\userdata.hpp	/^		basic_userdata(stack_reference&& r) : basic_userdata(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::basic_userdata
basic_userdata	.\include\sol\sol\userdata.hpp	/^	class basic_userdata : public base_t {$/;"	c	namespace:sol
bbox	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_BBox           bbox;$/;"	m	struct:FT_FaceRec_
bboxes	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_BBox*         bboxes    [T1_MAX_MM_DESIGNS + 1];$/;"	m	struct:PS_BlendRec_
bearing_x	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Long  bearing_x;$/;"	m	struct:FT_Incremental_MetricsRec_
bearing_y	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Long  bearing_y;$/;"	m	struct:FT_Incremental_MetricsRec_
begin	.\dep\SFML\src\SFML\System\String.cpp	/^String::ConstIterator String::begin() const$/;"	f	class:sf::String
begin	.\dep\SFML\src\SFML\System\String.cpp	/^String::Iterator String::begin()$/;"	f	class:sf::String
begin	.\include\sol\Catch\include\external\clara.h	/^        const_iterator begin() const { return lines.begin(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
begin	.\include\sol\Catch\include\external\tbc_text_format.h	/^        const_iterator begin() const { return lines.begin(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
begin	.\include\sol\single\sol\sol.hpp	/^		const_iterator begin() const { return const_iterator(L, index, stacktop + 1); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
begin	.\include\sol\single\sol\sol.hpp	/^		iterator begin() { return iterator(L, index, stacktop + 1); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
begin	.\include\sol\sol\state_view.hpp	/^		iterator begin() const {$/;"	f	class:sol::state_view
begin	.\include\sol\sol\table_core.hpp	/^		iterator begin() const {$/;"	f	class:sol::basic_table_core
begin	.\include\sol\sol\variadic_args.hpp	/^		const_iterator begin() const { return const_iterator(L, index, stacktop + 1); }$/;"	f	struct:sol::variadic_args
begin	.\include\sol\sol\variadic_args.hpp	/^		iterator begin() { return iterator(L, index, stacktop + 1); }$/;"	f	struct:sol::variadic_args
begintop	.\include\sol\test_stack_guard.hpp	/^	int& begintop;$/;"	m	struct:test_stack_guard
between	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator<T> between( T from, T to ) {$/;"	f	namespace:Catch::Generators
bgindex	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon108
bind	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::bind(const Shader* shader)$/;"	f	class:sf::Shader
bind	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::bind(const Texture* texture, CoordinateType coordinateType)$/;"	f	class:sf::Texture
bind	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^Socket::Status UdpSocket::bind(unsigned short port)$/;"	f	class:sf::UdpSocket
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( M C::* field, std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( bool C::* field ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( void (* binaryFunction)( C&, T ), std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( void (* unaryFunction)( C& ) ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( void (C::* nullaryMethod)() ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( void (C::* unaryMethod)( M ), std::string const& placeholder ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bind	.\include\sol\Catch\include\external\clara.h	/^            void bind( void (C::* unaryMethod)( bool ) ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
bindProcessName	.\include\sol\Catch\include\external\clara.h	/^        void bindProcessName( M C::* field ) {$/;"	f	class:Clara::CommandLine
bindProcessName	.\include\sol\Catch\include\external\clara.h	/^        void bindProcessName( void (C::*_unaryMethod)( M ) ) {$/;"	f	class:Clara::CommandLine
bindTextures	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::bindTextures() const$/;"	f	class:sf::Shader
bind_traits	.\include\sol\single\sol\sol.hpp	/^		struct bind_traits : meta_detail::callable_traits<Signature> {};$/;"	s	namespace:sol::meta
bind_traits	.\include\sol\sol\bind_traits.hpp	/^		struct bind_traits : meta_detail::callable_traits<Signature> {};$/;"	s	namespace:sol::meta
bit0	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit1	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit1and2	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit2	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit2mask	.\dep\Lua\src\lgc.h	71;"	d
bit2mask	.\include\lua\lgc.h	71;"	d
bit3	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    enum Bits {bit0 = 0x0001, bit1 = 0x0002, bit2 = 0x0004, bit3 = 0x0008, bit1and2 = 0x0006,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit30	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        bit30 = 0x40000000, bit31 = 0x80000000,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit30and31	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        bit30and31 = 0xc0000000};$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit31	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        bit30 = 0x40000000, bit31 = 0x80000000,$/;"	e	enum:EnumBitFieldTests::Bits	file:
bit32	.\include\sol\single\sol\sol.hpp	/^		bit32,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
bit32	.\include\sol\sol\state_view.hpp	/^		bit32,$/;"	m	class:sol::lib
bit_set	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_BitSet_Func   bit_set;      \/* unused *\/$/;"	m	struct:FT_Raster_Params_
bit_test	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_BitTest_Func  bit_test;     \/* unused *\/$/;"	m	struct:FT_Raster_Params_
bitlib	.\dep\Lua\src\lbitlib.c	/^static const luaL_Reg bitlib[] = {$/;"	v	file:
bitmap	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Bitmap         bitmap;$/;"	m	struct:FT_GlyphSlotRec_
bitmap	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Bitmap    bitmap;$/;"	m	struct:FT_BitmapGlyphRec_
bitmap_left	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Int            bitmap_left;$/;"	m	struct:FT_GlyphSlotRec_
bitmap_top	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Int            bitmap_top;$/;"	m	struct:FT_GlyphSlotRec_
bitmask	.\dep\Lua\src\lgc.h	70;"	d
bitmask	.\include\lua\lgc.h	70;"	d
bitrate_av_hi	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_av_hi;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_av_lo	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_av_lo;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_av_window	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  double bitrate_av_window;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_av_window_center	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  double bitrate_av_window_center;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_average_damping	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  double bitrate_average_damping;$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_average_kbps	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_average_kbps;$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_hard_max	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_hard_max;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_hard_min	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_hard_min;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_hard_window	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  double bitrate_hard_window;$/;"	m	struct:ovectl_ratemanage_arg
bitrate_limit_max_kbps	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_limit_max_kbps;$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_limit_min_kbps	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_limit_min_kbps;$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_limit_reservoir_bias	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  double bitrate_limit_reservoir_bias;$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_limit_reservoir_bits	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  long   bitrate_limit_reservoir_bits; \/**<Size of the bitrate reservoir in bits *\/$/;"	m	struct:ovectl_ratemanage2_arg
bitrate_lower	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long bitrate_lower;$/;"	m	struct:vorbis_info
bitrate_nominal	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long bitrate_nominal;$/;"	m	struct:vorbis_info
bitrate_upper	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long bitrate_upper;$/;"	m	struct:vorbis_info
bitrate_window	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long bitrate_window;$/;"	m	struct:vorbis_info
bits	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 bits[17];		\/* bits[k] = # of symbols with codes of *\/$/;"	m	struct:__anon80
bitsPerPixel	.\dep\SFML\include\SFML\Window\VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode
bitsPerPixel	.\include\SFML\Window\VideoMode.hpp	/^    unsigned int bitsPerPixel; \/\/\/< Video mode pixel depth, in bits per pixels$/;"	m	class:sf::VideoMode
bits_offset	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   bits_offset;$/;"	m	struct:FT_WinFNT_HeaderRec_
bits_per_sample	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned bits_per_sample;$/;"	m	struct:__anon39
bits_per_sample	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned bits_per_sample;$/;"	m	struct:__anon44
bits_pointer	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   bits_pointer;$/;"	m	struct:FT_WinFNT_HeaderRec_
bittrack	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  double           bittrack;$/;"	m	struct:OggVorbis_File
bl	.\dep\Lua\src\lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
bl	.\include\lua\lparser.h	/^  struct BlockCnt *bl;  \/* chain of current blocks *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::BlockCnt
black2gray	.\dep\Lua\src\lgc.c	71;"	d	file:
black_spans	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_SpanFunc             black_spans;  \/* unused *\/$/;"	m	struct:FT_Raster_Params_
blankParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^blankParser = re.compile( r'^\\s*$')$/;"	v
blendMode	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates
blendMode	.\include\SFML\Graphics\RenderStates.hpp	/^    BlendMode      blendMode; \/\/\/< Blending mode$/;"	m	class:sf::RenderStates
blend_bitflags	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong         blend_bitflags;$/;"	m	struct:PS_BlendRec_
blend_points	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed*  blend_points;$/;"	m	struct:PS_DesignMap_
block	.\dep\Lua\src\lparser.c	/^static void block (LexState *ls) {$/;"	f	file:
block_follow	.\dep\Lua\src\lparser.c	/^static int block_follow (LexState *ls, int withuntil) {$/;"	f	file:
block_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int block_size;		\/* the basic DCT block size: 1..16 *\/$/;"	m	struct:jpeg_compress_struct
block_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int block_size;		\/* the basic DCT block size: 1..16 *\/$/;"	m	struct:jpeg_decompress_struct
blocks_in_MCU	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int blocks_in_MCU;		\/* # of DCT blocks per MCU *\/$/;"	m	struct:jpeg_compress_struct
blocks_in_MCU	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int blocks_in_MCU;		\/* # of DCT blocks per MCU *\/$/;"	m	struct:jpeg_decompress_struct
blocksize	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned blocksize;$/;"	m	struct:__anon39
blue	.\src\src\Colors.cpp	/^	const char blue[] =    { 0x1b, '[', '0', '3', '4', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
blue_fuzz	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int     blue_fuzz;$/;"	m	struct:PS_PrivateRec_
blue_scale	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed   blue_scale;$/;"	m	struct:PS_PrivateRec_
blue_shift	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int     blue_shift;$/;"	m	struct:PS_PrivateRec_
blue_values	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   blue_values[14];$/;"	m	struct:PS_PrivateRec_
body	.\dep\Lua\src\lparser.c	/^static void body (LexState *ls, expdesc *e, int ismethod, int line) {$/;"	f	file:
body	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *body;$/;"	m	struct:__anon89
body_data	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char   *body_data;    \/* bytes from packet bodies *\/$/;"	m	struct:__anon90
body_fill	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    body_fill;             \/* elements stored; fill mark *\/$/;"	m	struct:__anon90
body_len	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long body_len;$/;"	m	struct:__anon89
body_returned	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    body_returned;         \/* elements of fill returned *\/$/;"	m	struct:__anon90
body_storage	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    body_storage;          \/* storage elements allocated *\/$/;"	m	struct:__anon90
bodybytes	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int bodybytes;$/;"	m	struct:__anon92
boolK	.\dep\Lua\src\lcode.c	/^static int boolK (FuncState *fs, int b) {$/;"	f	file:
boolean	.\dep\SFML\extlibs\headers\jpeg\jconfig.h	/^typedef unsigned char boolean;$/;"	t
boolean	.\dep\SFML\extlibs\headers\jpeg\jmorecfg.h	/^typedef int boolean;$/;"	t
boolean	.\include\sol\single\sol\sol.hpp	/^		boolean = LUA_TBOOLEAN,$/;"	m	class:sol::sol::call_syntax::call_status::type
boolean	.\include\sol\sol\types.hpp	/^		boolean = LUA_TBOOLEAN,$/;"	m	class:sol::call_syntax::call_status::type
boop	.\include\sol\test_usertypes.cpp	/^	int boop = 0;$/;"	m	struct:vars	file:
boost_level	.\include\sol\examples\usertype.cpp	/^    int boost_level = 0;$/;"	m	struct:variables	file:
bothOrAll	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        std::string bothOrAll( std::size_t count ) const {$/;"	f	struct:Catch::CompactReporter
boundField	.\include\sol\Catch\include\external\clara.h	/^        Detail::BoundArgFunction<ConfigT> boundField;$/;"	m	struct:Clara::CommonArgProperties
bounds	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^    FloatRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to the baseline$/;"	m	class:sf::Glyph
bounds	.\include\SFML\Graphics\Glyph.hpp	/^    FloatRect bounds;      \/\/\/< Bounding rectangle of the glyph, in coordinates relative to the baseline$/;"	m	class:sf::Glyph
box	.\dep\Lua\src\lauxlib.c	/^  void *box;$/;"	m	struct:UBox	file:
box	.\src\include\SkillTree.h	/^	sf::RectangleShape box;$/;"	m	class:SkillNode
boxgc	.\dep\Lua\src\lauxlib.c	/^static int boxgc (lua_State *L) {$/;"	f	file:
branchName	.\include\sol\Catch\include\internal\catch_version.h	/^        std::string const branchName;$/;"	m	class:Catch::Version::std
break_char	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    break_char;$/;"	m	struct:FT_WinFNT_HeaderRec_
breaklabel	.\dep\Lua\src\lparser.c	/^static void breaklabel (LexState *ls) {$/;"	f	file:
bsize	.\dep\Lua\src\lauxlib.c	/^  size_t bsize;$/;"	m	struct:UBox	file:
buff	.\dep\Lua\src\lauxlib.c	/^  char buff[BUFSIZ];  \/* area for reading file *\/$/;"	m	struct:LoadF	file:
buff	.\dep\Lua\src\ldo.c	/^  Mbuffer buff;  \/* dynamic structure used by the scanner *\/$/;"	m	struct:SParser	file:
buff	.\dep\Lua\src\liolib.c	/^  char buff[L_MAXLENNUM + 1];  \/* +1 for ending '\\0' *\/$/;"	m	struct:__anon4	file:
buff	.\dep\Lua\src\llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buff	.\dep\Lua\src\lstrlib.c	/^  char buff[5 * sizeof(lua_Number)];  \/* enough for any float type *\/$/;"	m	union:Ftypes	file:
buff	.\include\lua\llex.h	/^  Mbuffer *buff;  \/* buffer for tokens *\/$/;"	m	struct:LexState
buffer	.\dep\Lua\src\lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffer	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Byte*  buffer;$/;"	m	struct:FTC_SBitRec_
buffer	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned char*  buffer;$/;"	m	struct:FT_Bitmap_
buffer	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *buffer;$/;"	m	struct:__anon88
buffer	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        Int16*                buffer;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
buffer	.\include\lua\lzio.h	/^  char *buffer;$/;"	m	struct:Mbuffer
buffer_start	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc buffer_start[128];$/;"	m	struct:__anon95
buffered_image	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean buffered_image;	\/* TRUE=multiple output passes *\/$/;"	m	struct:jpeg_decompress_struct
buffonstack	.\dep\Lua\src\lauxlib.c	500;"	d	file:
buffsize	.\dep\Lua\src\lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
buffsize	.\include\lua\lzio.h	/^  size_t buffsize;$/;"	m	struct:Mbuffer
buflen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int buflen;$/;"	m	struct:__anon95
build	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    AssertionResult ResultBuilder::build() const$/;"	f	class:Catch::ResultBuilder
build	.\include\sol\ninja_syntax.py	/^    def build(self, outputs, rule, inputs=None, implicit=None, order_only=None,$/;"	m	class:Writer
buildNumber	.\include\sol\Catch\include\internal\catch_version.h	/^        unsigned int const buildNumber;$/;"	m	struct:Catch::Version
builddir	.\include\sol\bootstrap.py	/^builddir = 'bin'$/;"	v
button	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent
button	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 .. Joystick::ButtonCount - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
button	.\include\SFML\Window\Event.hpp	/^        Mouse::Button button; \/\/\/< Code of the button that has been pressed$/;"	m	struct:sf::Event::MouseButtonEvent
button	.\include\SFML\Window\Event.hpp	/^        unsigned int button;     \/\/\/< Index of the button that has been pressed (in range [0 .. Joystick::ButtonCount - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
buttonCount	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    unsigned int buttonCount;               \/\/\/< Number of buttons supported by the joystick$/;"	m	struct:sf::priv::JoystickCaps
buttons	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    bool  buttons[Joystick::ButtonCount]; \/\/\/< Status of each button (true = pressed)$/;"	m	struct:sf::priv::JoystickState
bvalue	.\dep\Lua\src\lobject.h	176;"	d
bvalue	.\include\lua\lobject.h	176;"	d
by_five	.\include\sol\examples\functions.cpp	/^    static int by_five(int x) {$/;"	f	struct:multiplier
byte	.\src\include\Color.h	/^typedef unsigned char byte;$/;"	t
byteoffset	.\dep\Lua\src\lutf8lib.c	/^static int byteoffset (lua_State *L) {$/;"	f	file:
bytes	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long  bytes;$/;"	m	struct:__anon91
bytes_in_buffer	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  size_t bytes_in_buffer;	\/* # of bytes remaining in buffer *\/$/;"	m	struct:jpeg_source_mgr
bytes_per_row	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  bytes_per_row;$/;"	m	struct:FT_WinFNT_HeaderRec_
c	.\dep\Lua\src\liolib.c	/^  int c;  \/* current character (look ahead) *\/$/;"	m	struct:__anon4	file:
c	.\dep\Lua\src\lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	.\dep\Lua\src\lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon15	typeref:struct:CallInfo::__anon15::__anon17
c	.\dep\Lua\src\lstrlib.c	/^  char c;$/;"	m	struct:cD	file:
c	.\include\lua\lobject.h	/^  CClosure c;$/;"	m	union:Closure
c	.\include\lua\lstate.h	/^    } c;$/;"	m	union:CallInfo::__anon166	typeref:struct:CallInfo::__anon166::__anon168
c	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int c;$/;"	m	struct:A::X	file:
c	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        int c;$/;"	m	struct:B::Y	file:
cD	.\dep\Lua\src\lstrlib.c	/^struct cD {$/;"	s	file:
c_call	.\include\sol\single\sol\sol.hpp	/^	inline int c_call(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
c_call	.\include\sol\sol\function_types_templated.hpp	/^	inline int c_call(lua_State* L) {$/;"	f	namespace:sol
c_call_matcher	.\include\sol\single\sol\sol.hpp	/^		struct c_call_matcher {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
c_call_matcher	.\include\sol\sol\function_types_templated.hpp	/^		struct c_call_matcher {$/;"	s	namespace:sol::function_detail
c_closure	.\include\sol\single\sol\sol.hpp	/^	typedef closure<> c_closure;$/;"	t	namespace:sol::sol
c_closure	.\include\sol\sol\types.hpp	/^	typedef closure<> c_closure;$/;"	t	namespace:sol
c_function	.\include\sol\single\sol\sol.hpp	/^		lua_CFunction c_function;$/;"	m	struct:sol::sol::closure
c_function	.\include\sol\sol\types.hpp	/^		lua_CFunction c_function;$/;"	m	struct:sol::closure
c_str	.\include\sol\single\sol\sol.hpp	/^			const char* c_str() const {$/;"	f	struct:sol::sol::string_detail::string_shim
c_str	.\include\sol\sol\string_shim.hpp	/^			const char* c_str() const {$/;"	f	struct:sol::string_detail::string_shim
c_trampoline	.\include\sol\single\sol\sol.hpp	/^		inline int c_trampoline(lua_State* L, lua_CFunction f) {$/;"	f	namespace:sol::sol::detail
c_trampoline	.\include\sol\sol\types.hpp	/^		inline int c_trampoline(lua_State* L, lua_CFunction f) {$/;"	f	namespace:sol::detail
cache	.\dep\Lua\src\lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:Proto::LClosure
cache	.\include\lua\lobject.h	/^  struct LClosure *cache;  \/* last-created closure with this prototype *\/$/;"	m	struct:Proto	typeref:struct:Proto::LClosure
calcCollisions	.\src\src\Map.cpp	/^void Map::calcCollisions() {$/;"	f	class:Map
call	.\include\sol\single\sol\sol.hpp	/^			inline decltype(auto) call(types<R>, types<Args...> ta, std::index_sequence<I...> tai, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
call	.\include\sol\single\sol\sol.hpp	/^			inline void call(types<void>, types<Args...> ta, std::index_sequence<I...> tai, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
call	.\include\sol\single\sol\sol.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
call	.\include\sol\single\sol\sol.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
call	.\include\sol\single\sol\sol.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
call	.\include\sol\single\sol\sol.hpp	/^			int call(types<Fx>, index_value<I>, types<R...>, types<Args...>, lua_State* L, int, int) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_free_function
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_function
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_variable
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_function
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_variable
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, Fx&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, Fx&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, Fx&& f, object_type& o) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, const no_construction&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, const no_prop&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, lua_CFunction f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State* L, lua_r_CFunction f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static int call(lua_State*, const bases<Args...>&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\single\sol\sol.hpp	/^			static void call(Args...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::void_call
call	.\include\sol\single\sol\sol.hpp	/^		call,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
call	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) call(Args&&... args) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
call	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
call	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
call	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
call	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) call(types<R> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) call(types<R> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call	.\include\sol\single\sol\sol.hpp	/^		inline int call(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::function_detail
call	.\include\sol\single\sol\sol.hpp	/^		inline void call(types<void> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call	.\include\sol\single\sol\sol.hpp	/^		inline void call(types<void> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call	.\include\sol\single\sol\sol.hpp	/^		static R call(Fx&& fx, O& mem, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
call	.\include\sol\single\sol\sol.hpp	/^		static decltype(auto) call(F& f, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
call	.\include\sol\single\sol\sol.hpp	/^		static decltype(auto) call(F& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
call	.\include\sol\single\sol\sol.hpp	/^		static decltype(auto) call(Fx&& fx, object_type& mem) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
call	.\include\sol\single\sol\sol.hpp	/^		static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
call	.\include\sol\single\sol\sol.hpp	/^		static int call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::wrap
call	.\include\sol\single\sol\sol.hpp	/^		static void call(Fx&& fx, object_type& mem, Arg&& arg, Args&&...) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, F& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, F& fx) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, F& fx, Args&&... args) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, F&) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, Fx&& f) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, Fx&& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, Fx&& f, object_type& o) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, V&& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, V&& f, object_type& o) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, const F& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, const F&) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, const no_construction&) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, const no_prop&) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, lua_CFunction f) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State* L, lua_r_CFunction f) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static int call(lua_State*, const bases<Args...>&) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
call	.\include\sol\sol\call.hpp	/^			static void call(Args...) {}$/;"	f	struct:sol::call_detail::void_call
call	.\include\sol\sol\coroutine.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	class:sol::coroutine
call	.\include\sol\sol\function.hpp	/^		decltype(auto) call(Args&&... args) const {$/;"	f	class:sol::basic_function
call	.\include\sol\sol\function_types_core.hpp	/^		inline int call(lua_State* L) {$/;"	f	namespace:sol::function_detail
call	.\include\sol\sol\function_types_overloaded.hpp	/^			int call(types<Fx>, index_value<I>, types<R...>, types<Args...>, lua_State* L, int, int) {$/;"	f	struct:sol::function_detail::overloaded_function
call	.\include\sol\sol\function_types_stateful.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::function_detail::functor_function
call	.\include\sol\sol\function_types_stateful.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::function_detail::member_function
call	.\include\sol\sol\function_types_stateful.hpp	/^			int call(lua_State* L) {$/;"	f	struct:sol::function_detail::member_variable
call	.\include\sol\sol\function_types_stateless.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_free_function
call	.\include\sol\sol\function_types_stateless.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_function
call	.\include\sol\sol\function_types_stateless.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_variable
call	.\include\sol\sol\function_types_stateless.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_function
call	.\include\sol\sol\function_types_stateless.hpp	/^			static int call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_variable
call	.\include\sol\sol\function_types_templated.hpp	/^		static int call(lua_State* L) {$/;"	f	struct:sol::wrap
call	.\include\sol\sol\load_result.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	struct:sol::load_result
call	.\include\sol\sol\protected_function.hpp	/^		decltype(auto) call(Args&&... args) const {$/;"	f	class:sol::basic_protected_function
call	.\include\sol\sol\proxy.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	struct:sol::proxy
call	.\include\sol\sol\stack.hpp	/^			inline decltype(auto) call(types<R>, types<Args...> ta, std::index_sequence<I...> tai, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack::stack_detail
call	.\include\sol\sol\stack.hpp	/^			inline void call(types<void>, types<Args...> ta, std::index_sequence<I...> tai, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack::stack_detail
call	.\include\sol\sol\stack.hpp	/^		inline decltype(auto) call(types<R> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call	.\include\sol\sol\stack.hpp	/^		inline decltype(auto) call(types<R> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call	.\include\sol\sol\stack.hpp	/^		inline void call(types<void> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call	.\include\sol\sol\stack.hpp	/^		inline void call(types<void> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call	.\include\sol\sol\stack_proxy.hpp	/^		decltype(auto) call(Args&&... args) {$/;"	f	struct:sol::stack_proxy
call	.\include\sol\sol\types.hpp	/^		call,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
call	.\include\sol\sol\usertype_metatable.hpp	/^		static int call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
call	.\include\sol\sol\wrapper.hpp	/^		static R call(Fx&& fx, O& mem, Args&&... args) {$/;"	f	struct:sol::member_function_wrapper
call	.\include\sol\sol\wrapper.hpp	/^		static decltype(auto) call(F& f, Args&&... args) {$/;"	f	struct:sol::wrapper
call	.\include\sol\sol\wrapper.hpp	/^		static decltype(auto) call(F& fx, Args&&... args) {$/;"	f	struct:sol::wrapper
call	.\include\sol\sol\wrapper.hpp	/^		static decltype(auto) call(Fx&& fx, object_type& mem) {$/;"	f	struct:sol::wrapper
call	.\include\sol\sol\wrapper.hpp	/^		static void call(Fx&& fx, object_type& mem, Arg&& arg, Args&&...) {$/;"	f	struct:sol::wrapper
callFunction	.\src\include\LuaScript.h	/^	void callFunction(const char* name, Args&&... args) {$/;"	f	class:LuaScript
call_assign	.\include\sol\sol\call.hpp	/^			static int call_assign(std::false_type, lua_State* L, Args&&...) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call_assign	.\include\sol\sol\call.hpp	/^			static int call_assign(std::true_type, lua_State* L, V&& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call_assign	.\include\sol\sol\call.hpp	/^			static int call_assign(std::true_type, lua_State* L, V&& f, object_type& o) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call_const	.\include\sol\sol\call.hpp	/^			static int call_const(std::false_type, lua_State* L, Args&&... args) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call_const	.\include\sol\sol\call.hpp	/^			static int call_const(std::true_type, lua_State* L, Args&&...) {$/;"	f	struct:sol::call_detail::lua_call_wrapper
call_construction	.\include\sol\single\sol\sol.hpp	/^	struct call_construction {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
call_construction	.\include\sol\sol\raii.hpp	/^	struct call_construction {};$/;"	s	namespace:sol
call_constructor	.\include\sol\single\sol\sol.hpp	/^	const auto call_constructor = call_construction{};$/;"	m	namespace:sol::sol::call_syntax::call_status::sol
call_constructor	.\include\sol\sol\raii.hpp	/^	const auto call_constructor = call_construction{};$/;"	m	namespace:sol
call_detail	.\include\sol\single\sol\sol.hpp	/^	namespace call_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
call_detail	.\include\sol\sol\call.hpp	/^	namespace call_detail {$/;"	n	namespace:sol
call_from_top	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) call_from_top(types<R> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call_from_top	.\include\sol\single\sol\sol.hpp	/^		inline void call_from_top(types<void> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call_from_top	.\include\sol\sol\stack.hpp	/^		inline decltype(auto) call_from_top(types<R> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call_from_top	.\include\sol\sol\stack.hpp	/^		inline void call_from_top(types<void> tr, types<Args...> ta, lua_State* L, Fx&& fx, FxArgs&&... args) {$/;"	f	namespace:sol::stack
call_function	.\include\sol\single\sol\sol.hpp	/^		call_function = call,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
call_function	.\include\sol\sol\types.hpp	/^		call_function = call,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
call_into_lua	.\include\sol\single\sol\sol.hpp	/^		inline int call_into_lua(types<Ret0, Ret...>, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call_into_lua	.\include\sol\single\sol\sol.hpp	/^		inline int call_into_lua(types<void> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call_into_lua	.\include\sol\sol\stack.hpp	/^		inline int call_into_lua(types<Ret0, Ret...>, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::stack
call_into_lua	.\include\sol\sol\stack.hpp	/^		inline int call_into_lua(types<void> tr, types<Args...> ta, lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::stack
call_lua	.\include\sol\single\sol\sol.hpp	/^		inline int call_lua(lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
call_lua	.\include\sol\sol\stack.hpp	/^		inline int call_lua(lua_State* L, int start, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	namespace:sol::stack
call_set_assignable	.\include\sol\single\sol\sol.hpp	/^		inline int call_set_assignable(std::false_type, T&&, lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_set_assignable	.\include\sol\single\sol\sol.hpp	/^		inline int call_set_assignable(std::true_type, lua_State* L, T&& mem) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_set_assignable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_set_assignable(std::false_type, T&&, lua_State* L) {$/;"	f	namespace:sol::function_detail
call_set_assignable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_set_assignable(std::true_type, lua_State* L, T&& mem) {$/;"	f	namespace:sol::function_detail
call_set_variable	.\include\sol\single\sol\sol.hpp	/^		inline int call_set_variable(std::false_type, lua_State* L, T&&) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_set_variable	.\include\sol\single\sol\sol.hpp	/^		inline int call_set_variable(std::true_type, lua_State* L, T&& mem) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_set_variable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_set_variable(std::false_type, lua_State* L, T&&) {$/;"	f	namespace:sol::function_detail
call_set_variable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_set_variable(std::true_type, lua_State* L, T&& mem) {$/;"	f	namespace:sol::function_detail
call_status	.\include\sol\single\sol\sol.hpp	/^	enum class call_status : int {$/;"	c	class:sol::sol::call_syntax
call_status	.\include\sol\sol\types.hpp	/^	enum class call_status : int {$/;"	c	class:sol::call_syntax
call_syntax	.\include\sol\single\sol\sol.hpp	/^	enum class call_syntax {$/;"	c	namespace:sol::sol
call_syntax	.\include\sol\sol\types.hpp	/^	enum class call_syntax {$/;"	c	namespace:sol
call_user	.\include\sol\sol\call.hpp	/^		inline int call_user(lua_State* L) {$/;"	f	namespace:sol::call_detail
call_with	.\include\sol\single\sol\sol.hpp	/^		static int call_with(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
call_with	.\include\sol\sol\usertype_metatable.hpp	/^		static int call_with(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
call_wrapped	.\include\sol\sol\call.hpp	/^		inline int call_wrapped(lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	namespace:sol::call_detail
call_wrapper_entry	.\include\sol\single\sol\sol.hpp	/^		int call_wrapper_entry(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_wrapper_entry	.\include\sol\sol\function_types_templated.hpp	/^		int call_wrapper_entry(lua_State* L) {$/;"	f	namespace:sol::function_detail
call_wrapper_function	.\include\sol\single\sol\sol.hpp	/^		inline int call_wrapper_function(std::false_type, lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_wrapper_function	.\include\sol\single\sol\sol.hpp	/^		inline int call_wrapper_function(std::true_type, lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_wrapper_function	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_wrapper_function(std::false_type, lua_State* L) {$/;"	f	namespace:sol::function_detail
call_wrapper_function	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_wrapper_function(std::true_type, lua_State* L) {$/;"	f	namespace:sol::function_detail
call_wrapper_variable	.\include\sol\single\sol\sol.hpp	/^		inline int call_wrapper_variable(std::false_type, lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_wrapper_variable	.\include\sol\single\sol\sol.hpp	/^		inline int call_wrapper_variable(std::true_type, lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
call_wrapper_variable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_wrapper_variable(std::false_type, lua_State* L) {$/;"	f	namespace:sol::function_detail
call_wrapper_variable	.\include\sol\sol\function_types_templated.hpp	/^		inline int call_wrapper_variable(std::true_type, lua_State* L) {$/;"	f	namespace:sol::function_detail
callable_traits	.\include\sol\single\sol\sol.hpp	/^			struct callable_traits : fx_traits<std::decay_t<Signature>> {$/;"	s	namespace:sol::meta::meta_detail
callable_traits	.\include\sol\single\sol\sol.hpp	/^			struct callable_traits<R(T::*), true> {$/;"	s	namespace:sol::meta::meta_detail
callable_traits	.\include\sol\sol\bind_traits.hpp	/^			struct callable_traits : fx_traits<std::decay_t<Signature>> {$/;"	s	namespace:sol::meta::meta_detail
callable_traits	.\include\sol\sol\bind_traits.hpp	/^			struct callable_traits<R(T::*), true> {$/;"	s	namespace:sol::meta::meta_detail
callallpendingfinalizers	.\dep\Lua\src\lgc.c	/^static void callallpendingfinalizers (lua_State *L) {$/;"	f	file:
callbacks	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ov_callbacks callbacks;$/;"	m	struct:OggVorbis_File
callbacks	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^    static ov_callbacks callbacks = {&read, &seek, NULL, &tell};$/;"	m	namespace:__anon121	file:
callconstructfunc	.\include\sol\single\sol\sol.hpp	/^		lua_CFunction callconstructfunc;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
callconstructfunc	.\include\sol\single\sol\sol.hpp	/^		object callconstructfunc;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
callconstructfunc	.\include\sol\sol\simple_usertype_metatable.hpp	/^		object callconstructfunc;$/;"	m	struct:sol::simple_usertype_metatable
callconstructfunc	.\include\sol\sol\usertype_metatable.hpp	/^		lua_CFunction callconstructfunc;$/;"	m	struct:sol::usertype_metatable
caller	.\include\sol\Optional\test_optional.cpp	/^    template <class T> caller(T fun) { fun(); }$/;"	f	struct:caller
caller	.\include\sol\Optional\test_optional.cpp	/^struct caller {$/;"	s	file:
caller	.\include\sol\single\sol\sol.hpp	/^		struct caller {$/;"	s	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
caller	.\include\sol\single\sol\sol.hpp	/^		struct caller {$/;"	s	struct:sol::sol::call_syntax::call_status::sol::wrapper
caller	.\include\sol\sol\wrapper.hpp	/^		struct caller {$/;"	s	struct:sol::member_function_wrapper
caller	.\include\sol\sol\wrapper.hpp	/^		struct caller {$/;"	s	struct:sol::wrapper
callhook	.\dep\Lua\src\ldo.c	/^static void callhook (lua_State *L, CallInfo *ci) {$/;"	f	file:
callstatus	.\dep\Lua\src\lstate.h	/^  lu_byte callstatus;$/;"	m	struct:CallInfo
callstatus	.\include\lua\lstate.h	/^  lu_byte callstatus;$/;"	m	struct:CallInfo
can_read	.\include\sol\single\sol\sol.hpp	/^		typedef std::integral_constant<bool, !std::is_void<R>::value> can_read;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
can_read	.\include\sol\sol\property.hpp	/^		typedef std::integral_constant<bool, !std::is_void<R>::value> can_read;$/;"	t	struct:sol::property_wrapper
can_write	.\include\sol\single\sol\sol.hpp	/^		typedef std::integral_constant<bool, !std::is_void<W>::value> can_write;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
can_write	.\include\sol\sol\property.hpp	/^		typedef std::integral_constant<bool, !std::is_void<W>::value> can_write;$/;"	t	struct:sol::property_wrapper
cannot	.\dep\Lua\src\luac.c	/^static void cannot(const char* what)$/;"	f	file:
capabilities	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^        JoystickCaps             capabilities;   \/\/\/< The joystick capabilities$/;"	m	struct:sf::priv::JoystickManager::Item
capacity	.\include\sol\single\sol\sol.hpp	/^    size_t capacity;$/;"	m	struct:sol::luaL_Buffer_52
capacity	.\include\sol\sol\compatibility\5.1.0.h	/^    size_t capacity;$/;"	m	struct:luaL_Buffer_52
capacity_by_order	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned capacity_by_order;$/;"	m	struct:__anon26
capture	.\dep\Lua\src\lstrlib.c	/^  } capture[LUA_MAXCAPTURES];$/;"	m	struct:MatchState	typeref:struct:MatchState::__anon18	file:
capture	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^Image RenderWindow::capture() const$/;"	f	class:sf::RenderWindow
captureDevice	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^    ALCdevice* captureDevice = NULL;$/;"	m	namespace:__anon124	file:
captureExpectedException	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::captureExpectedException( Matchers::Impl::Matcher<std::string> const& matcher ) {$/;"	f	class:Catch::ResultBuilder
captureExpectedException	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::captureExpectedException( std::string const& expectedMessage ) {$/;"	f	class:Catch::ResultBuilder
captureExpression	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& captureExpression( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
captureExpression	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::captureExpression() {$/;"	f	class:Catch::ResultBuilder
captureResult	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::captureResult( ResultWas::OfType resultType ) {$/;"	f	class:Catch::ResultBuilder
capture_to_close	.\dep\Lua\src\lstrlib.c	/^static int capture_to_close (MatchState *ms) {$/;"	f	file:
capturedExpression	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo
capturedExpression	.\include\sol\Catch\single_include\catch.hpp	/^        std::string capturedExpression;$/;"	m	struct:Catch::AssertionInfo
capturedExpressionWithSecondArgument	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    std::string capturedExpressionWithSecondArgument( std::string const& capturedExpression, std::string const& secondArg ) {$/;"	f	namespace:Catch
cardinal	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^      FT_UInt32       cardinal;$/;"	m	union:BDF_PropertyRec_::__anon77
caret_Offset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Offset;$/;"	m	struct:TT_HoriHeader_
caret_Offset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Offset;$/;"	m	struct:TT_VertHeader_
caret_Slope_Rise	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Slope_Rise;$/;"	m	struct:TT_HoriHeader_
caret_Slope_Rise	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Slope_Rise;$/;"	m	struct:TT_VertHeader_
caret_Slope_Run	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Slope_Run;$/;"	m	struct:TT_HoriHeader_
caret_Slope_Run	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   caret_Slope_Run;$/;"	m	struct:TT_VertHeader_
cast	.\dep\Lua\src\llimits.h	111;"	d
cast	.\include\lua\llimits.h	111;"	d
castFromGlHandle	.\dep\SFML\src\SFML\Graphics\Shader.cpp	46;"	d	file:
castFromGlHandle	.\dep\SFML\src\SFML\Graphics\Shader.cpp	51;"	d	file:
castToGlHandle	.\dep\SFML\src\SFML\Graphics\Shader.cpp	45;"	d	file:
castToGlHandle	.\dep\SFML\src\SFML\Graphics\Shader.cpp	50;"	d	file:
cast_byte	.\dep\Lua\src\llimits.h	114;"	d
cast_byte	.\include\lua\llimits.h	114;"	d
cast_func	.\dep\Lua\src\loadlib.c	145;"	d	file:
cast_func	.\dep\Lua\src\loadlib.c	147;"	d	file:
cast_int	.\dep\Lua\src\llimits.h	116;"	d
cast_int	.\include\lua\llimits.h	116;"	d
cast_num	.\dep\Lua\src\llimits.h	115;"	d
cast_num	.\include\lua\llimits.h	115;"	d
cast_u	.\dep\Lua\src\lstate.h	203;"	d
cast_u	.\include\lua\lstate.h	203;"	d
cast_uchar	.\dep\Lua\src\llimits.h	117;"	d
cast_uchar	.\include\lua\llimits.h	117;"	d
cast_void	.\dep\Lua\src\llimits.h	113;"	d
cast_void	.\include\lua\llimits.h	113;"	d
catchPath	.\include\sol\Catch\scripts\approvalTests.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\approve.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\generateSingleHeader.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\releaseCommon.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\releaseNotes.py	/^from scriptCommon import catchPath$/;"	i
catchPath	.\include\sol\Catch\scripts\scriptCommon.py	/^catchPath = os.path.dirname(os.path.realpath( os.path.dirname(sys.argv[0])))$/;"	v
cb	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    DWORD  cb;$/;"	m	struct:_GPU_DEVICE
cbegin	.\include\sol\single\sol\sol.hpp	/^		const_iterator cbegin() const { return begin(); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
cbegin	.\include\sol\sol\state_view.hpp	/^		const_iterator cbegin() const {$/;"	f	class:sol::state_view
cbegin	.\include\sol\sol\table_core.hpp	/^		const_iterator cbegin() const {$/;"	f	class:sol::basic_table_core
cbegin	.\include\sol\sol\variadic_args.hpp	/^		const_iterator cbegin() const { return begin(); }$/;"	f	struct:sol::variadic_args
cconvert	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_color_converter * cconvert;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_color_converter
cconvert	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_color_deconverter * cconvert;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_color_deconverter
cend	.\include\sol\single\sol\sol.hpp	/^		const_iterator cend() const { return end(); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
cend	.\include\sol\sol\state_view.hpp	/^		const_iterator cend() const {$/;"	f	class:sol::state_view
cend	.\include\sol\sol\table_core.hpp	/^		const_iterator cend() const {$/;"	f	class:sol::basic_table_core
cend	.\include\sol\sol\variadic_args.hpp	/^		const_iterator cend() const { return end(); }$/;"	f	struct:sol::variadic_args
centerW	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long centerW;$/;"	m	struct:vorbis_dsp_state
cerr	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    std::ostream& cerr() {$/;"	f	namespace:Catch
changeDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::changeDirectory(const std::string& directory)$/;"	f	class:sf::Ftp
changeWindowProperty	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^bool WindowImplX11::changeWindowProperty(xcb_atom_t property, xcb_atom_t type, uint8_t format, uint32_t length, const void* data)$/;"	f	class:sf::priv::WindowImplX11
changedFiles	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^changedFiles = 0$/;"	v
changewhite	.\dep\Lua\src\lgc.h	98;"	d
changewhite	.\include\lua\lgc.h	98;"	d
channel	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon106
channel	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int     channel;$/;"	m	struct:__anon147
channelCount	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^        unsigned int channelCount; \/\/\/< Number of channels of the sound$/;"	m	struct:sf::SoundFileReader::Info
channelCount	.\include\SFML\Audio\SoundFileReader.hpp	/^        unsigned int channelCount; \/\/\/< Number of channels of the sound$/;"	m	struct:sf::SoundFileReader::Info
channel_assignment	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__ChannelAssignment channel_assignment;$/;"	m	struct:__anon39
channels	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned channels;$/;"	m	struct:__anon39
channels	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned channels;$/;"	m	struct:__anon44
channels	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int channels;$/;"	m	struct:vorbis_info
charmap	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_CharMap        charmap;$/;"	m	struct:FT_FaceRec_
charmap	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Get_Charmap_Index( FT_CharMap  charmap );$/;"	v
charmap	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  FT_Get_CMap_Format( FT_CharMap  charmap );$/;"	v
charmap	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^  FT_Get_CMap_Language_ID( FT_CharMap  charmap );$/;"	v
charmaps	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_CharMap*       charmaps;$/;"	m	struct:FT_FaceRec_
charset	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    charset;$/;"	m	struct:FT_WinFNT_HeaderRec_
check	.\dep\Lua\src\lparser.c	/^static void check (LexState *ls, int c) {$/;"	f	file:
check	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^        bool (*check)(InputStream&);$/;"	m	struct:sf::SoundFileFactory::ReaderFactory
check	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^        bool (*check)(const std::string&);$/;"	m	struct:sf::SoundFileFactory::WriterFactory
check	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^bool SoundFileReaderFlac::check(InputStream& stream)$/;"	f	class:sf::priv::SoundFileReaderFlac
check	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^bool SoundFileReaderOgg::check(InputStream& stream)$/;"	f	class:sf::priv::SoundFileReaderOgg
check	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^bool SoundFileReaderWav::check(InputStream& stream)$/;"	f	class:sf::priv::SoundFileReaderWav
check	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^bool SoundFileWriterFlac::check(const std::string& filename)$/;"	f	class:sf::priv::SoundFileWriterFlac
check	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^bool SoundFileWriterOgg::check(const std::string& filename)$/;"	f	class:sf::priv::SoundFileWriterOgg
check	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^bool SoundFileWriterWav::check(const std::string& filename)$/;"	f	class:sf::priv::SoundFileWriterWav
check	.\include\SFML\Audio\SoundFileFactory.hpp	/^        bool (*check)(InputStream&);$/;"	m	struct:sf::SoundFileFactory::ReaderFactory
check	.\include\SFML\Audio\SoundFileFactory.hpp	/^        bool (*check)(const std::string&);$/;"	m	struct:sf::SoundFileFactory::WriterFactory
check	.\include\sol\single\sol\sol.hpp	/^				static bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::basic_check
check	.\include\sol\single\sol\sol.hpp	/^				static bool check(types<>, lua_State*, int, Handler&&, record&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::check_types
check	.\include\sol\single\sol\sol.hpp	/^				static bool check(types<Args...>, lua_State*, int, Handler&&, record&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::check_types
check	.\include\sol\single\sol\sol.hpp	/^				static bool check(types<T, Args...>, lua_State* L, int firstargument, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::check_types
check	.\include\sol\single\sol\sol.hpp	/^			static bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::checker
check	.\include\sol\single\sol\sol.hpp	/^			static bool check(lua_State*, int, Handler&&, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::checker
check	.\include\sol\single\sol\sol.hpp	/^			static bool check(types<U>, lua_State* L, type indextype, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::checker
check	.\include\sol\single\sol\sol.hpp	/^		bool check(lua_State* L, int index = -1) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check	.\include\sol\single\sol\sol.hpp	/^		bool check(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check	.\include\sol\single\sol\sol.hpp	/^		bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check	.\include\sol\sol\stack_check.hpp	/^				static bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::stack_detail::basic_check
check	.\include\sol\sol\stack_check.hpp	/^			static bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::checker
check	.\include\sol\sol\stack_check.hpp	/^			static bool check(lua_State*, int, Handler&&, record& tracking) {$/;"	f	struct:sol::stack::checker
check	.\include\sol\sol\stack_check.hpp	/^			static bool check(types<U>, lua_State* L, type indextype, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::checker
check	.\include\sol\sol\stack_core.hpp	/^				static bool check(types<>, lua_State*, int, Handler&&, record&) {$/;"	f	struct:sol::stack::stack_detail::check_types
check	.\include\sol\sol\stack_core.hpp	/^				static bool check(types<Args...>, lua_State*, int, Handler&&, record&) {$/;"	f	struct:sol::stack::stack_detail::check_types
check	.\include\sol\sol\stack_core.hpp	/^				static bool check(types<T, Args...>, lua_State* L, int firstargument, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::stack_detail::check_types
check	.\include\sol\sol\stack_core.hpp	/^		bool check(lua_State* L, int index = -1) {$/;"	f	namespace:sol::stack
check	.\include\sol\sol\stack_core.hpp	/^		bool check(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::stack
check	.\include\sol\sol\stack_core.hpp	/^		bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::stack
check	.\include\sol\test_customizations.cpp	/^			static bool check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::checker
checkEvent	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    Bool checkEvent(::Display*, XEvent* event, XPointer userData)$/;"	f	namespace:__anon151
checkGC	.\dep\Lua\src\lvm.c	749;"	d	file:
checkHeader	.\dep\Lua\src\lundump.c	/^static void checkHeader (LoadState *S) {$/;"	f	file:
checkMaxTextureUnits	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    GLint checkMaxTextureUnits()$/;"	f	namespace:__anon128
checkMaximumTextureSize	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^    unsigned int checkMaximumTextureSize()$/;"	f	namespace:__anon130
checkSettings	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^void GlContext::checkSettings(const ContextSettings& requestedSettings)$/;"	f	class:sf::priv::GlContext
checkShadersAvailable	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    bool checkShadersAvailable()$/;"	f	namespace:__anon128
checkSize	.\dep\SFML\src\SFML\Network\Packet.cpp	/^bool Packet::checkSize(std::size_t size)$/;"	f	class:sf::Packet
checkSizes	.\dep\Lua\src\lgc.c	/^static void checkSizes (lua_State *L, global_State *g) {$/;"	f	file:
check_binding	.\include\sol\single\sol\sol.hpp	/^		struct check_binding : is_variable_binding<meta::unqualified_tuple_element_t<Idx, Tuple>> {};$/;"	s	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
check_binding	.\include\sol\sol\usertype_metatable.hpp	/^		struct check_binding : is_variable_binding<meta::unqualified_tuple_element_t<Idx, Tuple>> {};$/;"	s	struct:sol::usertype_metatable
check_capture	.\dep\Lua\src\lstrlib.c	/^static int check_capture (MatchState *ms, int l) {$/;"	f	file:
check_condition	.\dep\Lua\src\lparser.c	118;"	d	file:
check_conflict	.\dep\Lua\src\lparser.c	/^static void check_conflict (LexState *ls, struct LHS_assign *lh, expdesc *v) {$/;"	f	file:
check_deducible_signature	.\include\sol\single\sol\sol.hpp	/^			struct check_deducible_signature {$/;"	s	namespace:sol::meta::meta_detail
check_deducible_signature	.\include\sol\sol\bind_traits.hpp	/^			struct check_deducible_signature {$/;"	s	namespace:sol::meta::meta_detail
check_destructor_tag	.\include\sol\single\sol\sol.hpp	/^		struct check_destructor_tag {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
check_destructor_tag	.\include\sol\sol\usertype_metatable.hpp	/^		struct check_destructor_tag {};$/;"	s	namespace:sol::usertype_detail
check_exp	.\dep\Lua\src\llimits.h	85;"	d
check_exp	.\dep\Lua\src\llimits.h	90;"	d
check_exp	.\include\lua\llimits.h	85;"	d
check_exp	.\include\lua\llimits.h	90;"	d
check_get	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index = -1) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check_get	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check_get	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
check_get	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index = -1) {$/;"	f	namespace:sol::stack
check_get	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::stack
check_get	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) check_get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::stack
check_getter	.\include\sol\single\sol\sol.hpp	/^		struct check_getter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
check_getter	.\include\sol\single\sol\sol.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_enum<T>::value && !meta::any_same<T, meta_function, type>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
check_getter	.\include\sol\single\sol\sol.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
check_getter	.\include\sol\single\sol\sol.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_integral<T>::value && lua_type_of<T>::value == type::number>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
check_getter	.\include\sol\single\sol\sol.hpp	/^		struct check_getter<optional<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
check_getter	.\include\sol\sol\stack_check_get.hpp	/^		struct check_getter {$/;"	s	namespace:sol::stack
check_getter	.\include\sol\sol\stack_check_get.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_enum<T>::value && !meta::any_same<T, meta_function, type>::value>> {$/;"	s	namespace:sol::stack
check_getter	.\include\sol\sol\stack_check_get.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::stack
check_getter	.\include\sol\sol\stack_check_get.hpp	/^		struct check_getter<T, std::enable_if_t<std::is_integral<T>::value && lua_type_of<T>::value == type::number>> {$/;"	s	namespace:sol::stack
check_getter	.\include\sol\sol\stack_check_get.hpp	/^		struct check_getter<optional<T>> {$/;"	s	namespace:sol::stack
check_match	.\dep\Lua\src\lparser.c	/^static void check_match (LexState *ls, int what, int who, int where) {$/;"	f	file:
check_metatable	.\include\sol\single\sol\sol.hpp	/^			inline bool check_metatable(lua_State* L, int index = -2) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
check_metatable	.\include\sol\sol\stack_check.hpp	/^			inline bool check_metatable(lua_State* L, int index = -2) {$/;"	f	namespace:sol::stack::stack_detail
check_next1	.\dep\Lua\src\llex.c	/^static int check_next1 (LexState *ls, int c) {$/;"	f	file:
check_next2	.\dep\Lua\src\llex.c	/^static int check_next2 (LexState *ls, const char *set) {$/;"	f	file:
check_types	.\include\sol\single\sol\sol.hpp	/^			struct check_types {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
check_types	.\include\sol\single\sol\sol.hpp	/^			struct check_types<false> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
check_types	.\include\sol\sol\stack_core.hpp	/^			struct check_types {$/;"	s	namespace:sol::stack::stack_detail
check_types	.\include\sol\sol\stack_core.hpp	/^			struct check_types<false> {$/;"	s	namespace:sol::stack::stack_detail
checkclib	.\dep\Lua\src\loadlib.c	/^static void *checkclib (lua_State *L, const char *path) {$/;"	f	file:
checkconsistency	.\dep\Lua\src\lgc.c	79;"	d	file:
checkdeadkey	.\dep\Lua\src\lgc.c	76;"	d	file:
checkdp	.\dep\Lua\src\lstrlib.c	/^static void checkdp (char *buff, int nb) {$/;"	f	file:
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T*, type::userdata, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::function, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::lightuserdata, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::table, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::userdata, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<T, type::userdata, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<c_closure, type::function, C> : checker<lua_CFunction, type::function, C> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<lua_CFunction, type::function, C> : stack_detail::basic_check<type::function, lua_iscfunction> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<nil_t, expected, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<non_null<T>, type::userdata, C> : checker<T, lua_type_of<T>::value, C> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<nullopt_t, expected, C> : checker<nil_t> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<optional<T>, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<std::pair<A, B>, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<std::reference_wrapper<T>, type::userdata, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<std::remove_pointer_t<lua_CFunction>, type::function, C> : checker<lua_CFunction, type::function, C> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<std::tuple<Args...>, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<this_state, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<type, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<user<T>, type::userdata, C> : checker<user<T>, type::lightuserdata, C> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<userdata_value, type::userdata, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\single\sol\sol.hpp	/^		struct checker<variadic_args, type::poly, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T*, type::userdata, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::function, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::lightuserdata, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::table, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::userdata, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<T, type::userdata, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<c_closure, type::function, C> : checker<lua_CFunction, type::function, C> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<lua_CFunction, type::function, C> : stack_detail::basic_check<type::function, lua_iscfunction> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<nil_t, expected, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<non_null<T>, type::userdata, C> : checker<T, lua_type_of<T>::value, C> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<nullopt_t, expected, C> : checker<nil_t> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<optional<T>, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<std::pair<A, B>, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<std::reference_wrapper<T>, type::userdata, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<std::remove_pointer_t<lua_CFunction>, type::function, C> : checker<lua_CFunction, type::function, C> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<std::tuple<Args...>, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<this_state, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<type, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<user<T>, type::userdata, C> : checker<user<T>, type::lightuserdata, C> {};$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<userdata_value, type::userdata, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\sol\stack_check.hpp	/^		struct checker<variadic_args, type::poly, C> {$/;"	s	namespace:sol::stack
checker	.\include\sol\test_customizations.cpp	/^		struct checker<two_things> {$/;"	s	namespace:sol::stack	file:
checkfield	.\dep\Lua\src\ltablib.c	/^static int checkfield (lua_State *L, const char *key, int n) {$/;"	f	file:
checklimit	.\dep\Lua\src\lparser.c	/^static void checklimit (FuncState *fs, int v, int l, const char *what) {$/;"	f	file:
checkliteral	.\dep\Lua\src\lundump.c	/^static void checkliteral (LoadState *S, const char *s, const char *msg) {$/;"	f	file:
checkliveness	.\dep\Lua\src\lobject.h	190;"	d
checkliveness	.\include\lua\lobject.h	190;"	d
checkload	.\dep\Lua\src\loadlib.c	/^static int checkload (lua_State *L, int stat, const char *filename) {$/;"	f	file:
checkmode	.\dep\Lua\src\ldo.c	/^static void checkmode (lua_State *L, const char *mode, const char *x) {$/;"	f	file:
checkname	.\dep\Lua\src\lparser.c	/^static void checkname (LexState *ls, expdesc *e) {$/;"	f	file:
checknext	.\dep\Lua\src\lparser.c	/^static void checknext (LexState *ls, int c) {$/;"	f	file:
checkoption	.\dep\Lua\src\loslib.c	/^static const char *checkoption (lua_State *L, const char *conv, char *buff) {$/;"	f	file:
checkrepeated	.\dep\Lua\src\lparser.c	/^static void checkrepeated (FuncState *fs, Labellist *ll, TString *label) {$/;"	f	file:
checkresults	.\dep\Lua\src\lapi.c	903;"	d	file:
checksize	.\dep\Lua\src\lundump.c	234;"	d	file:
checkstack	.\dep\Lua\src\ldblib.c	/^static void checkstack (lua_State *L, lua_State *L1, int n) {$/;"	f	file:
checkstackp	.\dep\Lua\src\ldo.c	330;"	d	file:
checktab	.\dep\Lua\src\ltablib.c	/^static void checktab (lua_State *L, int arg, int what) {$/;"	f	file:
checktag	.\dep\Lua\src\lobject.h	140;"	d
checktag	.\include\lua\lobject.h	140;"	d
checktype	.\dep\Lua\src\lobject.h	141;"	d
checktype	.\include\lua\lobject.h	141;"	d
checkunsigned	.\dep\Lua\src\lbitlib.c	23;"	d	file:
checkupval	.\dep\Lua\src\ldblib.c	/^static int checkupval (lua_State *L, int argf, int argnup) {$/;"	f	file:
chgfltvalue	.\dep\Lua\src\lobject.h	201;"	d
chgfltvalue	.\include\lua\lobject.h	201;"	d
chgivalue	.\dep\Lua\src\lobject.h	207;"	d
chgivalue	.\include\lua\lobject.h	207;"	d
childCount	.\src\src\SkillTree.cpp	/^const int SkillTree::childCount(const SkillNode* node) {$/;"	f	class:SkillTree
childSections	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            ChildSections childSections;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode
children	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            ChildNodes children;$/;"	m	struct:Catch::CumulativeReporterBase::Node
choosePivot	.\dep\Lua\src\ltablib.c	/^static IdxT choosePivot (IdxT lo, IdxT up, unsigned int rnd) {$/;"	f	file:
ci	.\dep\Lua\src\lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci	.\include\lua\lstate.h	/^  CallInfo *ci;  \/* call info for current function *\/$/;"	m	struct:lua_State
ci_func	.\dep\Lua\src\ldebug.c	38;"	d	file:
cid_count	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong        cid_count;$/;"	m	struct:CID_FaceInfoRec_
cid_font_name	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*      cid_font_name;$/;"	m	struct:CID_FaceInfoRec_
cid_font_type	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          cid_font_type;$/;"	m	struct:CID_FaceInfoRec_
cid_version	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed        cid_version;$/;"	m	struct:CID_FaceInfoRec_
cidmap_offset	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong        cidmap_offset;$/;"	m	struct:CID_FaceInfoRec_
cl	.\dep\Lua\src\lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:GCUnion::Closure
cl	.\include\lua\lstate.h	/^  union Closure cl;$/;"	m	union:GCUnion	typeref:union:GCUnion::Closure
clCvalue	.\dep\Lua\src\lobject.h	173;"	d
clCvalue	.\include\lua\lobject.h	173;"	d
clLvalue	.\dep\Lua\src\lobject.h	172;"	d
clLvalue	.\include\lua\lobject.h	172;"	d
className	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^    const wchar_t*             className        = L"SFML_Window";$/;"	m	namespace:__anon153	file:
className	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::string className;$/;"	m	struct:Catch::TestCaseInfo
classend	.\dep\Lua\src\lstrlib.c	/^static const char *classend (MatchState *ms, const char *p) {$/;"	f	file:
clazz	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    const FT_Glyph_Class*  clazz;$/;"	m	struct:FT_GlyphRec_
clean	.\include\sol\single\sol\sol.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::clean
clean	.\include\sol\single\sol\sol.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail
clean	.\include\sol\sol\table_core.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::detail::clean
clean	.\include\sol\sol\table_core.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	s	namespace:sol::detail
cleanUp	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^    void cleanUp() {$/;"	f	namespace:Catch
cleanUpContext	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^    void cleanUpContext() {$/;"	f	namespace:Catch
clean_type	.\include\sol\single\sol\sol.hpp	/^	struct clean_type {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
clean_type	.\include\sol\sol\usertype_metatable.hpp	/^	struct clean_type {$/;"	s	namespace:sol
cleanup	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::cleanup()$/;"	f	class:sf::SoundRecorder
cleanup	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^void Font::cleanup()$/;"	f	class:sf::Font
cleanup	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^void JoystickImpl::cleanup()$/;"	f	class:sf::priv::JoystickImpl
cleanup	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^void SensorImpl::cleanup()$/;"	f	class:sf::priv::SensorImpl
cleanup	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^void JoystickImpl::cleanup()$/;"	f	class:sf::priv::JoystickImpl
cleanup	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^void JoystickImpl::cleanup()$/;"	f	class:sf::priv::JoystickImpl
cleanup	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^void SensorImpl::cleanup()$/;"	f	class:sf::priv::SensorImpl
cleanup	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^void JoystickImpl::cleanup()$/;"	f	class:sf::priv::JoystickImpl
cleanup	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^void SensorImpl::cleanup()$/;"	f	class:sf::priv::SensorImpl
cleanup	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::cleanup()$/;"	f	class:sf::priv::WindowImplX11
cleanup	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^void JoystickImpl::cleanup()$/;"	f	class:sf::priv::JoystickImpl
cleanup	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^void SensorImpl::cleanup()$/;"	f	class:sf::priv::SensorImpl
cleanup	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::cleanup()$/;"	f	class:sf::priv::WindowImplWin32
clear	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::clear(const Color& color)$/;"	f	class:sf::RenderTarget
clear	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^void VertexArray::clear()$/;"	f	class:sf::VertexArray
clear	.\dep\SFML\src\SFML\Network\Packet.cpp	/^void Packet::clear()$/;"	f	class:sf::Packet
clear	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^void SocketSelector::clear()$/;"	f	class:sf::SocketSelector
clear	.\dep\SFML\src\SFML\System\String.cpp	/^void String::clear()$/;"	f	class:sf::String
clear	.\src\src\Colors.cpp	/^	const char clear[] =   { 0x1b, '[', '0', '3', '0', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
clearQueue	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::clearQueue()$/;"	f	class:sf::SoundStream
clearkeys	.\dep\Lua\src\lgc.c	/^static void clearkeys (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
clearvalues	.\dep\Lua\src\lgc.c	/^static void clearvalues (global_State *g, GCObject *l, GCObject *f) {$/;"	f	file:
cli	.\include\sol\Catch\include\catch_session.hpp	/^        Clara::CommandLine<ConfigData> const& cli() const {$/;"	f	class:Catch::Session::Clara
clip_box	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_BBox                 clip_box;$/;"	m	struct:FT_Raster_Params_
clock	.\src\include\FPS.h	/^    sf::Clock clock;$/;"	m	class:FPS
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new BoundBinaryFunction( *this ); }$/;"	f	struct:Clara::Detail::BoundBinaryFunction
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new BoundDataMember( *this ); }$/;"	f	struct:Clara::Detail::BoundDataMember
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new BoundNullaryMethod( *this ); }$/;"	f	struct:Clara::Detail::BoundNullaryMethod
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new BoundUnaryFunction( *this ); }$/;"	f	struct:Clara::Detail::BoundUnaryFunction
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new BoundUnaryMethod( *this ); }$/;"	f	struct:Clara::Detail::BoundUnaryMethod
clone	.\include\sol\Catch\include\external\clara.h	/^            virtual IArgFunction<C>* clone() const { return new NullBinder( *this ); }$/;"	f	struct:Clara::Detail::NullBinder
clone	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        virtual Ptr<Matcher<ExpressionT> > clone() const {$/;"	f	struct:Catch::Matchers::Impl::MatcherImpl
clone	.\include\sol\Catch\single_include\catch.hpp	/^        virtual Ptr<Matcher<ExpressionT> > clone() const {$/;"	f	struct:Catch::Matchers::Impl::MatcherImpl
clone	.\src\src\Perk.cpp	/^Perk* Perk::clone() {$/;"	f	class:Perk
clone	.\src\src\SkillTree.cpp	/^SkillNode* SkillNode::clone(std::vector<SkillNode*>* vec) {$/;"	f	class:SkillNode
clone	.\src\src\SkillTree.cpp	/^SkillTree* SkillTree::clone() {$/;"	f	class:SkillTree
close	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Close close;$/;"	m	struct:__anon24
close	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Stream_CloseFunc  close;$/;"	m	struct:FT_StreamRec_
close	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^void InputSoundFile::close()$/;"	f	class:sf::InputSoundFile
close	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^void OutputSoundFile::close()$/;"	f	class:sf::OutputSoundFile
close	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^void SoundFileReaderFlac::close()$/;"	f	class:sf::priv::SoundFileReaderFlac
close	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^void SoundFileReaderOgg::close()$/;"	f	class:sf::priv::SoundFileReaderOgg
close	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^void SoundFileWriterFlac::close()$/;"	f	class:sf::priv::SoundFileWriterFlac
close	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^void SoundFileWriterOgg::close()$/;"	f	class:sf::priv::SoundFileWriterOgg
close	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^void SoundFileWriterWav::close()$/;"	f	class:sf::priv::SoundFileWriterWav
close	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^    void close(FT_Stream)$/;"	f	namespace:__anon125
close	.\dep\SFML\src\SFML\Network\Socket.cpp	/^void Socket::close()$/;"	f	class:sf::Socket
close	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^void TcpListener::close()$/;"	f	class:sf::TcpListener
close	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^void SocketImpl::close(SocketHandle sock)$/;"	f	class:sf::priv::SocketImpl
close	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^void SocketImpl::close(SocketHandle sock)$/;"	f	class:sf::priv::SocketImpl
close	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^void JoystickImpl::close()$/;"	f	class:sf::priv::JoystickImpl
close	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^void SensorImpl::close()$/;"	f	class:sf::priv::SensorImpl
close	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^void JoystickImpl::close()$/;"	f	class:sf::priv::JoystickImpl
close	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^void JoystickImpl::close()$/;"	f	class:sf::priv::JoystickImpl
close	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^void SensorImpl::close()$/;"	f	class:sf::priv::SensorImpl
close	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^void JoystickImpl::close()$/;"	f	class:sf::priv::JoystickImpl
close	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^void SensorImpl::close()$/;"	f	class:sf::priv::SensorImpl
close	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^void JoystickImpl::close()$/;"	f	class:sf::priv::JoystickImpl
close	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^void SensorImpl::close()$/;"	f	class:sf::priv::SensorImpl
close	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::close()$/;"	f	class:sf::Window
close	.\src\src\Window.cpp	/^void Window::close() {$/;"	f	class:Window
close_func	.\dep\Lua\src\lparser.c	/^static void close_func (LexState *ls) {$/;"	f	file:
close_func	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int    (*close_func) (void *datasource);$/;"	m	struct:__anon109
close_state	.\dep\Lua\src\lstate.c	/^static void close_state (lua_State *L) {$/;"	f	file:
closef	.\dep\Lua\src\lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closef	.\include\lua\lauxlib.h	/^  lua_CFunction closef;  \/* to close stream (NULL for closed streams) *\/$/;"	m	struct:luaL_Stream
closegoto	.\dep\Lua\src\lparser.c	/^static void closegoto (LexState *ls, int g, Labeldesc *label) {$/;"	f	file:
closelistfield	.\dep\Lua\src\lparser.c	/^static void closelistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
closure	.\include\sol\single\sol\sol.hpp	/^		closure(lua_CFunction f, Upvalues... upvalues) : c_function(f), upvalues(std::forward<Upvalues>(upvalues)...) {}$/;"	f	struct:sol::sol::closure
closure	.\include\sol\single\sol\sol.hpp	/^		closure(lua_CFunction f, int upvalues = 0) : c_function(f), upvalues(upvalues) {}$/;"	f	struct:sol::sol::closure
closure	.\include\sol\single\sol\sol.hpp	/^	struct closure {$/;"	s	namespace:sol::sol
closure	.\include\sol\single\sol\sol.hpp	/^	struct closure<> {$/;"	s	namespace:sol::sol
closure	.\include\sol\sol\types.hpp	/^		closure(lua_CFunction f, Upvalues... upvalues) : c_function(f), upvalues(std::forward<Upvalues>(upvalues)...) {}$/;"	f	struct:sol::closure
closure	.\include\sol\sol\types.hpp	/^		closure(lua_CFunction f, int upvalues = 0) : c_function(f), upvalues(upvalues) {}$/;"	f	struct:sol::closure
closure	.\include\sol\sol\types.hpp	/^	struct closure {$/;"	s	namespace:sol
closure	.\include\sol\sol\types.hpp	/^	struct closure<> {$/;"	s	namespace:sol
clvalue	.\dep\Lua\src\lobject.h	171;"	d
clvalue	.\include\lua\lobject.h	171;"	d
cmdPath	.\include\sol\Catch\scripts\approvalTests.py	/^	cmdPath = os.path.join( catchPath, 'projects\/XCode\/CatchSelfTest\/DerivedData\/CatchSelfTest\/Build\/Products\/Debug\/CatchSelfTest' )$/;"	v
cmdPath	.\include\sol\Catch\scripts\approvalTests.py	/^	cmdPath = sys.argv[1]$/;"	v
co_funcs	.\dep\Lua\src\lcorolib.c	/^static const luaL_Reg co_funcs[] = {$/;"	v	file:
code	.\dep\Lua\src\lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto
code	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint16 code[256];$/;"	m	struct:__anon97
code	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent
code	.\include\SFML\Window\Event.hpp	/^        Keyboard::Key code;    \/\/\/< Code of the key that has been pressed$/;"	m	struct:sf::Event::KeyEvent
code	.\include\lua\lobject.h	/^  Instruction *code;  \/* opcodes *\/$/;"	m	struct:Proto
code_bits	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            code_bits;   \/\/ number of valid bits$/;"	m	struct:__anon98
code_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32   code_buffer; \/\/ jpeg entropy-coded buffer$/;"	m	struct:__anon98
code_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32 code_buffer;$/;"	m	struct:__anon102
code_loadbool	.\dep\Lua\src\lcode.c	/^static int code_loadbool (FuncState *fs, int A, int b, int jump) {$/;"	f	file:
codebinexpval	.\dep\Lua\src\lcode.c	/^static void codebinexpval (FuncState *fs, OpCode op,$/;"	f	file:
codec_setup	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  void *codec_setup;$/;"	m	struct:vorbis_info
codeclosure	.\dep\Lua\src\lparser.c	/^static void codeclosure (LexState *ls, expdesc *v) {$/;"	f	file:
codecomp	.\dep\Lua\src\lcode.c	/^static void codecomp (FuncState *fs, BinOpr opr, expdesc *e1, expdesc *e2) {$/;"	f	file:
codeextraarg	.\dep\Lua\src\lcode.c	/^static int codeextraarg (FuncState *fs, int a) {$/;"	f	file:
codenot	.\dep\Lua\src\lcode.c	/^static void codenot (FuncState *fs, expdesc *e) {$/;"	f	file:
codepoint	.\dep\Lua\src\lutf8lib.c	/^static int codepoint (lua_State *L) {$/;"	f	file:
codes	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__gif_lzw codes[4096];$/;"	m	struct:__anon108
codestring	.\dep\Lua\src\lparser.c	/^static void codestring (LexState *ls, expdesc *e, TString *s) {$/;"	f	file:
codeunexpval	.\dep\Lua\src\lcode.c	/^static void codeunexpval (FuncState *fs, OpCode op, expdesc *e, int line) {$/;"	f	file:
coef	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_c_coef_controller * coef;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_c_coef_controller
coef	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_d_coef_controller * coef;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_d_coef_controller
coef_bits	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int (*coef_bits)[DCTSIZE2];	\/* -1 or current Al value for each coef *\/$/;"	m	struct:jpeg_decompress_struct
coeff	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      short   *coeff;   \/\/ progressive only$/;"	m	struct:__anon98::__anon99
coeff_h	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon98::__anon99
coeff_w	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int      coeff_w, coeff_h; \/\/ number of 8x8 coefficient blocks$/;"	m	struct:__anon98::__anon99
collectargs	.\dep\Lua\src\lua.c	/^static int collectargs (char **argv, int *first) {$/;"	f	file:
collectvalidlines	.\dep\Lua\src\ldebug.c	/^static void collectvalidlines (lua_State *L, Closure *f) {$/;"	f	file:
collidesWith	.\src\src\Object.cpp	/^bool Object::collidesWith(Object* o) {$/;"	f	class:Object
colon	.\include\sol\single\sol\sol.hpp	/^		colon = 1$/;"	m	class:sol::sol::call_syntax
colon	.\include\sol\sol\types.hpp	/^		colon = 1$/;"	m	class:sol::call_syntax
color	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex
color	.\include\SFML\Graphics\Vertex.hpp	/^    Color     color;     \/\/\/< Color of the vertex$/;"	m	class:sf::Vertex
color	.\src\include\sfLine.h	/^    sf::Color color;$/;"	m	class:sfLine
colorDstFactor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Factor   colorDstFactor; \/\/\/< Destination blending factor for the color channels$/;"	m	struct:sf::BlendMode
colorDstFactor	.\include\SFML\Graphics\BlendMode.hpp	/^    Factor   colorDstFactor; \/\/\/< Destination blending factor for the color channels$/;"	m	struct:sf::BlendMode
colorEquation	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Equation colorEquation;  \/\/\/< Blending equation for the color channels$/;"	m	struct:sf::BlendMode
colorEquation	.\include\SFML\Graphics\BlendMode.hpp	/^    Equation colorEquation;  \/\/\/< Blending equation for the color channels$/;"	m	struct:sf::BlendMode
colorSrcFactor	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^    Factor   colorSrcFactor; \/\/\/< Source blending factor for the color channels$/;"	m	struct:sf::BlendMode
colorSrcFactor	.\include\SFML\Graphics\BlendMode.hpp	/^    Factor   colorSrcFactor; \/\/\/< Source blending factor for the color channels$/;"	m	struct:sf::BlendMode
color_table	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *color_table;$/;"	m	struct:__anon108
color_table_offset	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  color_table_offset;$/;"	m	struct:FT_WinFNT_HeaderRec_
colormap	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JSAMPARRAY colormap;		\/* The color map as a 2-D pixel array *\/$/;"	m	struct:jpeg_decompress_struct
colors	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 colors;$/;"	m	struct:__anon55
colour	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            Colour::Code colour;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
colour	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            Colour::Code colour;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn
colour	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^        Colour::Code colour;$/;"	m	struct:ColourString::ColourIndex	file:
colours	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    std::vector<ColourIndex> colours;$/;"	m	class:ColourString	file:
combine	.\dep\Lua\src\luac.c	/^static const Proto* combine(lua_State* L, int n)$/;"	f	file:
combine	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::combine(const Transform& transform)$/;"	f	class:sf::Transform
commands	.\include\sol\Catch\include\external\clara.h	/^            std::string commands() const {$/;"	f	struct:Clara::CommandLine::Arg
comment	.\include\sol\ninja_syntax.py	/^    def comment(self, text):$/;"	m	class:Writer
commentParser1	.\include\sol\Catch\scripts\generateSingleHeader.py	/^commentParser1 = re.compile( r'^\\s*\/\\*')$/;"	v
commentParser2	.\include\sol\Catch\scripts\generateSingleHeader.py	/^commentParser2 = re.compile( r'^ \\*')$/;"	v
comment_lengths	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int   *comment_lengths;$/;"	m	struct:vorbis_comment
comments	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_VorbisComment_Entry *comments;$/;"	m	struct:__anon50
comments	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int    comments;$/;"	m	struct:vorbis_comment
comp_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_component_info * comp_info;$/;"	m	struct:jpeg_compress_struct
comp_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_component_info * comp_info;$/;"	m	struct:jpeg_decompress_struct
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    bool compare( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( long long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    bool compare( T1 const& lhs, T2 const& rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( T* lhs, std::nullptr_t ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( int lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( long long lhs, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op, typename T> bool compare( std::nullptr_t, T* rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( int lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( long long lhs, unsigned long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned char lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned int lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, char rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, int rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> bool compare( unsigned long long lhs, long rhs ) {$/;"	f	namespace:Catch::Internal
compare	.\include\sol\single\sol\sol.hpp	/^			static int compare(const char* lhs_p, std::size_t lhs_sz, const char* rhs_p, std::size_t rhs_sz) {$/;"	f	struct:sol::sol::string_detail::string_shim
compare	.\include\sol\sol\string_shim.hpp	/^			static int compare(const char* lhs_p, std::size_t lhs_sz, const char* rhs_p, std::size_t rhs_sz) {$/;"	f	struct:sol::string_detail::string_shim
compat52_arith_code	.\include\sol\single\sol\sol.hpp	/^static const char compat52_arith_code[] = {$/;"	v
compat52_call_lua	.\include\sol\single\sol\sol.hpp	/^inline static void compat52_call_lua(lua_State *L, char const code[], size_t len,$/;"	f
compat52_compare_code	.\include\sol\single\sol\sol.hpp	/^static const char compat52_compare_code[] = {$/;"	v
compat52_luai_Cast	.\include\sol\single\sol\sol.hpp	/^union compat52_luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	u
compilation_database_folder	.\.ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
compile	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::compile(const char* vertexShaderCode, const char* fragmentShaderCode)$/;"	f	class:sf::Shader
completeCycle	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void completeCycle() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
completedCycle	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        bool completedCycle() const {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
completed_passes	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int completed_passes;		\/* passes completed so far *\/$/;"	m	struct:jpeg_progress_mgr
component_id	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int component_id;		\/* identifier for this component (0..255) *\/$/;"	m	struct:__anon81
component_index	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int component_index;		\/* its index in SOF or cinfo->comp_info[] *\/$/;"	m	struct:__anon81
component_index	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int component_index[MAX_COMPS_IN_SCAN]; \/* their SOF\/comp_info[] indexes *\/$/;"	m	struct:__anon82
component_needed	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean component_needed;	\/* do we need the value of this component? *\/$/;"	m	struct:__anon81
comps_in_scan	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int comps_in_scan;		\/* # of JPEG components in this scan *\/$/;"	m	struct:jpeg_compress_struct
comps_in_scan	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int comps_in_scan;		\/* # of JPEG components in this scan *\/$/;"	m	struct:jpeg_decompress_struct
comps_in_scan	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int comps_in_scan;		\/* number of components encoded in this scan *\/$/;"	m	struct:__anon82
computeNormal	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^    sf::Vector2f computeNormal(const sf::Vector2f& p1, const sf::Vector2f& p2)$/;"	f	namespace:__anon129
computesizes	.\dep\Lua\src\ltable.c	/^static unsigned int computesizes (unsigned int nums[], unsigned int *pna) {$/;"	f	file:
concatenation	.\include\sol\single\sol\sol.hpp	/^		concatenation,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
concatenation	.\include\sol\sol\types.hpp	/^		concatenation,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
cond	.\dep\Lua\src\lparser.c	/^static int cond (LexState *ls) {$/;"	f	file:
condchangemem	.\dep\Lua\src\llimits.h	317;"	d
condchangemem	.\dep\Lua\src\llimits.h	319;"	d
condchangemem	.\include\lua\llimits.h	317;"	d
condchangemem	.\include\lua\llimits.h	319;"	d
condjump	.\dep\Lua\src\lcode.c	/^static int condjump (FuncState *fs, OpCode op, int A, int B, int C) {$/;"	f	file:
condmovestack	.\dep\Lua\src\llimits.h	309;"	d
condmovestack	.\dep\Lua\src\llimits.h	312;"	d
condmovestack	.\include\lua\llimits.h	309;"	d
condmovestack	.\include\lua\llimits.h	312;"	d
config	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    AConfiguration* config;$/;"	m	struct:sf::priv::ActivityStates
config	.\include\sol\Catch\include\catch_session.hpp	/^        Config& config() {$/;"	f	class:Catch::Session
config	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        Ptr<IConfig const> config() const {$/;"	f	class:Catch::RunContext
config	.\include\sol\examples\config.cpp	/^struct config {$/;"	s	file:
configData	.\include\sol\Catch\include\catch_session.hpp	/^        ConfigData& configData() {$/;"	f	class:Catch::Session
conic_to	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Outline_ConicToFunc  conic_to;$/;"	m	struct:FT_Outline_Funcs_
connect	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::connect(const IpAddress& server, unsigned short port, Time timeout)$/;"	f	class:sf::Ftp
connect	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::connect(const IpAddress& remoteAddress, unsigned short remotePort, Time timeout)$/;"	f	class:sf::TcpSocket
connected	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^    bool  connected;                      \/\/\/< Is the joystick currently connected?$/;"	m	struct:sf::priv::JoystickState
connected	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^        bool connected;$/;"	m	struct:__anon152::ConnectionCache	file:
connectionCache	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^    ConnectionCache connectionCache[sf::Joystick::Count];$/;"	m	namespace:__anon152	file:
connectionRefreshDelay	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^    const sf::Time connectionRefreshDelay = sf::milliseconds(500);$/;"	m	namespace:__anon152	file:
consoleWidth	.\include\sol\Catch\include\external\clara.h	/^    const unsigned int consoleWidth = CLARA_CONFIG_CONSOLE_WIDTH;$/;"	m	namespace:Clara::Detail
consoleWidth	.\include\sol\Catch\include\external\clara.h	/^    const unsigned int consoleWidth = TBC_TEXT_FORMAT_CONSOLE_WIDTH;$/;"	m	namespace:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
consoleWidth	.\include\sol\Catch\include\external\tbc_text_format.h	/^    const unsigned int consoleWidth = TBC_TEXT_FORMAT_CONSOLE_WIDTH;$/;"	m	namespace:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc
const_iterator	.\include\sol\Catch\include\external\clara.h	/^        typedef std::vector<std::string>::const_iterator const_iterator;$/;"	t	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
const_iterator	.\include\sol\Catch\include\external\tbc_text_format.h	/^        typedef std::vector<std::string>::const_iterator const_iterator;$/;"	t	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
const_iterator	.\include\sol\single\sol\sol.hpp	/^		typedef iterator const_iterator;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
const_iterator	.\include\sol\single\sol\sol.hpp	/^		typedef va_iterator<true> const_iterator;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
const_iterator	.\include\sol\sol\state_view.hpp	/^		typedef global_table::const_iterator const_iterator;$/;"	t	class:sol::state_view
const_iterator	.\include\sol\sol\table_core.hpp	/^		typedef iterator const_iterator;$/;"	t	class:sol::basic_table_core
const_iterator	.\include\sol\sol\variadic_args.hpp	/^		typedef va_iterator<true> const_iterator;$/;"	t	struct:sol::variadic_args
const_reference	.\include\sol\single\sol\sol.hpp	/^		typedef const value_type& const_reference;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
const_reference	.\include\sol\sol\table_iterator.hpp	/^		typedef const value_type& const_reference;$/;"	t	class:sol::basic_table_iterator
const_reverse_iterator	.\include\sol\single\sol\sol.hpp	/^		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
const_reverse_iterator	.\include\sol\sol\variadic_args.hpp	/^		typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	struct:sol::variadic_args
constant	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__Subframe_Constant constant;$/;"	m	union:__anon35::__anon36
constexpr_optional_base	.\include\sol\Optional\optional.hpp	/^    OPTIONAL_CONSTEXPR_INIT_LIST explicit constexpr_optional_base(in_place_t, ::std::initializer_list<U> il, Args&&... args)$/;"	f	struct:sol::constexpr_optional_base
constexpr_optional_base	.\include\sol\Optional\optional.hpp	/^    explicit constexpr constexpr_optional_base(T&& v) : init_(true), storage_(constexpr_move(v)) {}$/;"	f	struct:sol::constexpr_optional_base
constexpr_optional_base	.\include\sol\Optional\optional.hpp	/^    explicit constexpr constexpr_optional_base(const T& v) : init_(true), storage_(v) {}$/;"	f	struct:sol::constexpr_optional_base
constexpr_optional_base	.\include\sol\Optional\optional.hpp	/^    template <class... Args> explicit constexpr constexpr_optional_base(in_place_t, Args&&... args)$/;"	f	struct:sol::constexpr_optional_base
constexpr_optional_base	.\include\sol\Optional\optional.hpp	/^struct constexpr_optional_base$/;"	s	namespace:sol
constexpr_storage_t	.\include\sol\Optional\optional.hpp	/^    constexpr constexpr_storage_t( Args&&... args ) : value_(constexpr_forward<Args>(args)...) {}$/;"	f	union:sol::constexpr_storage_t
constexpr_storage_t	.\include\sol\Optional\optional.hpp	/^union constexpr_storage_t$/;"	u	namespace:sol
constexpr_test_disengaged	.\include\sol\Optional\test_optional.cpp	/^void constexpr_test_disengaged()$/;"	f
constfolding	.\dep\Lua\src\lcode.c	/^static int constfolding (FuncState *fs, int op, expdesc *e1, expdesc *e2) {$/;"	f	file:
construct	.\include\sol\single\sol\sol.hpp	/^			static void construct(T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::default_construct
construct	.\include\sol\single\sol\sol.hpp	/^		construct,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
construct	.\include\sol\single\sol\sol.hpp	/^		inline int construct(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
construct	.\include\sol\sol\call.hpp	/^		inline int construct(lua_State* L) {$/;"	f	namespace:sol::call_detail
construct	.\include\sol\sol\raii.hpp	/^			static void construct(T&& obj, Args&&... args) {$/;"	f	struct:sol::detail::default_construct
construct	.\include\sol\sol\types.hpp	/^		construct,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
construct_match	.\include\sol\single\sol\sol.hpp	/^		inline int construct_match(Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
construct_match	.\include\sol\sol\call.hpp	/^		inline int construct_match(Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::call_detail
constructor	.\dep\Lua\src\lparser.c	/^static void constructor (LexState *ls, expdesc *t) {$/;"	f	file:
constructor_list	.\include\sol\single\sol\sol.hpp	/^	struct constructor_list {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
constructor_list	.\include\sol\sol\raii.hpp	/^	struct constructor_list {};$/;"	s	namespace:sol
constructor_match	.\include\sol\single\sol\sol.hpp	/^			constructor_match(T* obj) : obj(obj) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::constructor_match
constructor_match	.\include\sol\single\sol\sol.hpp	/^		struct constructor_match {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
constructor_match	.\include\sol\sol\call.hpp	/^			constructor_match(T* obj) : obj(obj) {}$/;"	f	struct:sol::call_detail::constructor_match
constructor_match	.\include\sol\sol\call.hpp	/^		struct constructor_match {$/;"	s	namespace:sol::call_detail
constructor_wrapper	.\include\sol\single\sol\sol.hpp	/^		constructor_wrapper(Args&&... args) : set(std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::constructor_wrapper
constructor_wrapper	.\include\sol\single\sol\sol.hpp	/^	struct constructor_wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
constructor_wrapper	.\include\sol\sol\raii.hpp	/^		constructor_wrapper(Args&&... args) : set(std::forward<Args>(args)...) {}$/;"	f	struct:sol::constructor_wrapper
constructor_wrapper	.\include\sol\sol\raii.hpp	/^	struct constructor_wrapper {$/;"	s	namespace:sol
contained_val	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T& contained_val() & { return OptionalBase<T>::storage_.value_; }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T&& contained_val() && { return ::std::move(OptionalBase<T>::storage_.value_); }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  T& contained_val() & { return OptionalBase<T>::storage_.value_; }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  T& contained_val() { return OptionalBase<T>::storage_.value_; }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  T&& contained_val() && { return ::std::move(OptionalBase<T>::storage_.value_); }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  constexpr const T& contained_val() const { return OptionalBase<T>::storage_.value_; }$/;"	f	class:sol::optional
contained_val	.\include\sol\Optional\optional.hpp	/^  constexpr const T& contained_val() const& { return OptionalBase<T>::storage_.value_; }$/;"	f	class:sol::optional
contains	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool contains( std::string const& s, std::string const& infix ) {$/;"	f	namespace:Catch
contains	.\src\src\Object.cpp	/^bool Object::contains(float px, float py) {$/;"	f	class:Object
contains	.\src\src\SkillTree.cpp	/^bool SkillNode::contains(float px, float py) {$/;"	f	class:SkillNode
contains_index	.\include\sol\single\sol\sol.hpp	/^		bool contains_index() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
contains_index	.\include\sol\sol\usertype_metatable.hpp	/^		bool contains_index() const {$/;"	f	struct:sol::usertype_metatable
contains_variable	.\include\sol\single\sol\sol.hpp	/^		static bool contains_variable() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
contains_variable	.\include\sol\sol\usertype_metatable.hpp	/^		static bool contains_variable() {$/;"	f	struct:sol::usertype_metatable
contents	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	const FLAC__EntropyCodingMethod_PartitionedRiceContents *contents;$/;"	m	struct:__anon27
context	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    EglContext* context;$/;"	m	struct:sf::priv::ActivityStates
context	.\dep\SFML\src\SFML\Window\iOS\SFView.hpp	/^@property (nonatomic) sf::priv::EaglContext* context; \/\/\/< The attached EAGL context$/;"	v
contours	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    short*      contours;        \/* the contour end points             *\/$/;"	m	struct:FT_Outline_
control	.\dep\SFML\include\SFML\Window\Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent
control	.\include\SFML\Window\Event.hpp	/^        bool          control; \/\/\/< Is the Control key pressed?$/;"	m	struct:sf::Event::KeyEvent
control_data	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    void*             control_data;$/;"	m	struct:FT_GlyphSlotRec_
control_len	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    long              control_len;$/;"	m	struct:FT_GlyphSlotRec_
convergeephemerons	.\dep\Lua\src\lgc.c	/^static void convergeephemerons (global_State *g) {$/;"	f	file:
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static std::string convert( T const& ) { return unprintableString; }$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static std::string convert( T const& _value ) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::StringMakerBase
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^    static std::string convert( R C::* p ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\include\internal\catch_tostring.h	/^    static std::string convert( U* p ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\projects\SelfTest\ToStringPair.cpp	/^        static std::string convert( const std::pair<T1,T2>& pair ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^        static std::string convert( const has_maker& ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^        static std::string convert( const has_maker_and_toString& ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\single_include\catch.hpp	/^        static std::string convert( T const& ) { return unprintableString; }$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	.\include\sol\Catch\single_include\catch.hpp	/^        static std::string convert( T const& _value ) {$/;"	f	struct:Catch::Detail::StringMakerBase
convert	.\include\sol\Catch\single_include\catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::EnumStringMaker
convert	.\include\sol\Catch\single_include\catch.hpp	/^        static std::string convert( T const& v )$/;"	f	struct:Catch::Detail::StringMakerBase
convert	.\include\sol\Catch\single_include\catch.hpp	/^    static std::string convert( R C::* p ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Catch\single_include\catch.hpp	/^    static std::string convert( U* p ) {$/;"	f	struct:Catch::StringMaker
convert	.\include\sol\Optional\optional.hpp	/^constexpr U convert(U v) { return v; }$/;"	f	namespace:sol::detail_
convert	.\src\include\Convert.h	/^namespace convert {$/;"	n
convert	.\src\src\Convert.cpp	/^namespace convert {$/;"	n	file:
convertCGModeToSFMode	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^VideoMode convertCGModeToSFMode(CGDisplayModeRef cgmode)$/;"	f	namespace:sf::priv
convertInto	.\include\sol\Catch\include\external\clara.h	/^        inline void convertInto( bool _source, bool& _dest ) {$/;"	f	namespace:Clara::Detail
convertInto	.\include\sol\Catch\include\external\clara.h	/^        inline void convertInto( bool, T& ) {$/;"	f	namespace:Clara::Detail
convertInto	.\include\sol\Catch\include\external\clara.h	/^        inline void convertInto( std::string const& _source, bool& _dest ) {$/;"	f	namespace:Clara::Detail
convertInto	.\include\sol\Catch\include\external\clara.h	/^        inline void convertInto( std::string const& _source, std::string& _dest ) {$/;"	f	namespace:Clara::Detail
convertInto	.\include\sol\Catch\include\external\clara.h	/^        void convertInto( std::string const& _source, T& _dest ) {$/;"	f	namespace:Clara::Detail
convertSFModeToCGMode	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^CGDisplayModeRef convertSFModeToCGMode(VideoMode sfmode)$/;"	f	namespace:sf::priv
coords	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Fixed*  coords;$/;"	m	struct:FT_Var_Named_Style_
copy	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::copy(const Image& source, unsigned int destX, unsigned int destY, const IntRect& sourceRect, bool applyAlpha)$/;"	f	class:sf::Image
copy2buff	.\dep\Lua\src\lvm.c	/^static void copy2buff (StkId top, int n, char *buff) {$/;"	f	file:
copyJoysticks	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^CFSetRef HIDJoystickManager::copyJoysticks()$/;"	f	class:sf::priv::HIDJoystickManager
copyToImage	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Image Texture::copyToImage() const$/;"	f	class:sf::Texture
copy_command	.\include\sol\bootstrap.py	/^copy_command = 'cp -rf {} $in && cp -f {} $in'.format(sol_dir, sol_file)$/;"	v
copyright	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    copyright[60];$/;"	m	struct:FT_WinFNT_HeaderRec_
copyright	.\include\sol\docs\source\conf.py	/^copyright = '2016, ThePhD'$/;"	v
copywithendian	.\dep\Lua\src\lstrlib.c	/^static void copywithendian (volatile char *dest, volatile const char *src,$/;"	f	file:
coroutine	.\include\sol\single\sol\sol.hpp	/^		coroutine(lua_State* L, int index = -1) : reference(L, index) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
coroutine	.\include\sol\single\sol\sol.hpp	/^		coroutine,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
coroutine	.\include\sol\single\sol\sol.hpp	/^	class coroutine : public reference {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol
coroutine	.\include\sol\sol\coroutine.hpp	/^		coroutine(lua_State* L, int index = -1) : reference(L, index) {$/;"	f	class:sol::coroutine
coroutine	.\include\sol\sol\coroutine.hpp	/^	class coroutine : public reference {$/;"	c	namespace:sol
coroutine	.\include\sol\sol\state_view.hpp	/^		coroutine,$/;"	m	class:sol::lib
correctstack	.\dep\Lua\src\ldo.c	/^static void correctstack (lua_State *L, TValue *oldstack) {$/;"	f	file:
count	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^    unsigned int count = 0;$/;"	m	namespace:__anon117	file:
count	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^    unsigned int count = 0;$/;"	m	namespace:__anon141	file:
count	.\include\sol\Catch\include\internal\catch_list.hpp	/^        std::size_t count;$/;"	m	struct:Catch::TagInfo
count_for_pack	.\include\sol\single\sol\sol.hpp	/^			struct count_for_pack : std::integral_constant<std::size_t, 0> {};$/;"	s	namespace:sol::meta::meta_detail
count_for_pack	.\include\sol\single\sol\sol.hpp	/^			struct count_for_pack<Limit, I, Pred, T, Ts...> : std::conditional_t < sizeof...(Ts) == 0 || Limit < 2,$/;"	s	namespace:sol::meta::meta_detail
count_for_pack	.\include\sol\sol\traits.hpp	/^			struct count_for_pack : std::integral_constant<std::size_t, 0> {};$/;"	s	namespace:sol::meta::meta_detail
count_for_pack	.\include\sol\sol\traits.hpp	/^			struct count_for_pack<Limit, I, Pred, T, Ts...> : std::conditional_t < sizeof...(Ts) == 0 || Limit < 2,$/;"	s	namespace:sol::meta::meta_detail
counter	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^    int counter()$/;"	f	struct:__anon184::Fixture
countint	.\dep\Lua\src\ltable.c	/^static int countint (const TValue *key, unsigned int *nums) {$/;"	f	file:
countlevels	.\include\sol\single\sol\sol.hpp	/^inline static int countlevels(lua_State *L) {$/;"	f
cout	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    std::ostream& cout() {$/;"	f	namespace:Catch
coverage	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned char   coverage;$/;"	m	struct:FT_Span_
cquantize	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_color_quantizer * cquantize;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_color_quantizer
crapola	.\include\sol\test_usertypes.cpp	/^namespace crapola {$/;"	n	file:
crbegin	.\include\sol\single\sol\sol.hpp	/^		const_reverse_iterator crbegin() const { return std::reverse_iterator<const_iterator>(cbegin()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
crbegin	.\include\sol\sol\variadic_args.hpp	/^		const_reverse_iterator crbegin() const { return std::reverse_iterator<const_iterator>(cbegin()); }$/;"	f	struct:sol::variadic_args
crc	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint16 crc;$/;"	m	struct:__anon41
crc	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint8 crc;$/;"	m	struct:__anon39
create	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^        SoundFileReader* (*create)();$/;"	m	struct:sf::SoundFileFactory::ReaderFactory
create	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^        SoundFileWriter* (*create)();$/;"	m	struct:sf::SoundFileFactory::WriterFactory
create	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::create(unsigned int width, unsigned int height, const Color& color)$/;"	f	class:sf::Image
create	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::create(unsigned int width, unsigned int height, const Uint8* pixels)$/;"	f	class:sf::Image
create	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^bool RenderTexture::create(unsigned int width, unsigned int height, bool depthBuffer)$/;"	f	class:sf::RenderTexture
create	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^bool RenderTextureImplDefault::create(unsigned int width, unsigned int height, unsigned int, bool depthBuffer)$/;"	f	class:sf::priv::RenderTextureImplDefault
create	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^bool RenderTextureImplFBO::create(unsigned int width, unsigned int height, unsigned int textureId, bool depthBuffer)$/;"	f	class:sf::priv::RenderTextureImplFBO
create	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::create(unsigned int width, unsigned int height)$/;"	f	class:sf::Texture
create	.\dep\SFML\src\SFML\Network\Socket.cpp	/^void Socket::create()$/;"	f	class:sf::Socket
create	.\dep\SFML\src\SFML\Network\Socket.cpp	/^void Socket::create(SocketHandle handle)$/;"	f	class:sf::Socket
create	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlContext* GlContext::create()$/;"	f	class:sf::priv::GlContext
create	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlContext* GlContext::create(const ContextSettings& settings, const WindowImpl* owner, unsigned int bitsPerPixel)$/;"	f	class:sf::priv::GlContext
create	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlContext* GlContext::create(const ContextSettings& settings, unsigned int width, unsigned int height)$/;"	f	class:sf::priv::GlContext
create	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::create(VideoMode mode, const String& title, Uint32 style, const ContextSettings& settings)$/;"	f	class:sf::Window
create	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::create(WindowHandle handle, const ContextSettings& settings)$/;"	f	class:sf::Window
create	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^WindowImpl* WindowImpl::create(VideoMode mode, const String& title, Uint32 style, const ContextSettings& settings)$/;"	f	class:sf::priv::WindowImpl
create	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^WindowImpl* WindowImpl::create(WindowHandle handle)$/;"	f	class:sf::priv::WindowImpl
create	.\include\SFML\Audio\SoundFileFactory.hpp	/^        SoundFileReader* (*create)();$/;"	m	struct:sf::SoundFileFactory::ReaderFactory
create	.\include\SFML\Audio\SoundFileFactory.hpp	/^        SoundFileWriter* (*create)();$/;"	m	struct:sf::SoundFileFactory::WriterFactory
create	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual IStreamingReporter* create( ReporterConfig const& config ) const {$/;"	f	class:Catch::LegacyReporterRegistrar::ReporterFactory
create	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual IStreamingReporter* create( ReporterConfig const& config ) const {$/;"	f	class:Catch::ListenerRegistrar::ListenerFactory
create	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual IStreamingReporter* create( ReporterConfig const& config ) const {$/;"	f	class:Catch::ReporterRegistrar::ReporterFactory
create	.\include\sol\single\sol\sol.hpp	/^		static thread create(lua_State* L) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
create	.\include\sol\single\sol\sol.hpp	/^		thread create() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
create	.\include\sol\sol\table_core.hpp	/^		static inline table create(lua_State* L, int narr = 0, int nrec = 0) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\table_core.hpp	/^		static inline table create(lua_State* L, int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\table_core.hpp	/^		table create(Name&& name, int narr = 0, int nrec = 0) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\table_core.hpp	/^		table create(Name&& name, int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\table_core.hpp	/^		table create(int narr = 0, int nrec = 0) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\table_core.hpp	/^		table create(int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::basic_table_core
create	.\include\sol\sol\thread.hpp	/^		static thread create(lua_State* L) {$/;"	f	class:sol::thread
create	.\include\sol\sol\thread.hpp	/^		thread create() {$/;"	f	class:sol::thread
createAddress	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^sockaddr_in SocketImpl::createAddress(Uint32 address, unsigned short port)$/;"	f	class:sf::priv::SocketImpl
createAddress	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^sockaddr_in SocketImpl::createAddress(Uint32 address, unsigned short port)$/;"	f	class:sf::priv::SocketImpl
createContext	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^void EglContext::createContext(EglContext* shared)$/;"	f	class:sf::priv::EglContext
createContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^void GlxContext::createContext(GlxContext* shared, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::GlxContext
createContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^void WglContext::createContext(WglContext* shared, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::WglContext
createDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::createDirectory(const std::string& name)$/;"	f	class:sf::Ftp
createGeneratorsForTest	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^    IGeneratorsForTest* createGeneratorsForTest()$/;"	f	namespace:Catch
createHiddenCursor	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::createHiddenCursor()$/;"	f	class:sf::priv::WindowImplX11
createMaskFromColor	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::createMaskFromColor(const Color& color, Uint8 alpha)$/;"	f	class:sf::Image
createReaderFromFilename	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileReader* SoundFileFactory::createReaderFromFilename(const std::string& filename)$/;"	f	class:sf::SoundFileFactory
createReaderFromMemory	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileReader* SoundFileFactory::createReaderFromMemory(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::SoundFileFactory
createReaderFromStream	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileReader* SoundFileFactory::createReaderFromStream(InputStream& stream)$/;"	f	class:sf::SoundFileFactory
createReporter	.\include\sol\Catch\include\catch_session.hpp	/^    Ptr<IStreamingReporter> createReporter( std::string const& reporterName, Ptr<Config> const& config ) {$/;"	f	namespace:Catch
createSurface	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^void EglContext::createSurface(EGLNativeWindowType window)$/;"	f	class:sf::priv::EglContext
createTrees	.\src\src\SkillTree.cpp	/^	void createTrees(Vector2 size) {$/;"	f	namespace:SkillTrees
createWriterFromFilename	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileWriter* SoundFileFactory::createWriterFromFilename(const std::string& filename)$/;"	f	class:sf::SoundFileFactory
create_named	.\include\sol\sol\table_core.hpp	/^		table create_named(Name&& name, Args&&... args) {$/;"	f	class:sol::basic_table_core
create_named_table	.\include\sol\sol\state_view.hpp	/^		table create_named_table(Name&& name, Args&&... args) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		static inline table create_table(lua_State* L, int narr = 0, int nrec = 0) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		static inline table create_table(lua_State* L, int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		table create_table(Name&& name, int narr = 0, int nrec = 0) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		table create_table(Name&& name, int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		table create_table(int narr = 0, int nrec = 0) {$/;"	f	class:sol::state_view
create_table	.\include\sol\sol\state_view.hpp	/^		table create_table(int narr, int nrec, Key&& key, Value&& value, Args&&... args) {$/;"	f	class:sol::state_view
create_table_with	.\include\sol\sol\state_view.hpp	/^		static inline table create_table_with(lua_State* L, Args&&... args) {$/;"	f	class:sol::state_view
create_table_with	.\include\sol\sol\state_view.hpp	/^		table create_table_with(Args&&... args) {$/;"	f	class:sol::state_view
create_with	.\include\sol\sol\table_core.hpp	/^		static inline table create_with(lua_State* L, Args&&... args) {$/;"	f	class:sol::basic_table_core
create_with	.\include\sol\sol\table_core.hpp	/^		table create_with(Args&&... args) {$/;"	f	class:sol::basic_table_core
createargtable	.\dep\Lua\src\lua.c	/^static void createargtable (lua_State *L, char **argv, int argc, int script) {$/;"	f	file:
createclibstable	.\dep\Lua\src\loadlib.c	/^static void createclibstable (lua_State *L) {$/;"	f	file:
createmeta	.\dep\Lua\src\liolib.c	/^static void createmeta (lua_State *L) {$/;"	f	file:
createmetatable	.\dep\Lua\src\lstrlib.c	/^static void createmetatable (lua_State *L) {$/;"	f	file:
createsearcherstable	.\dep\Lua\src\loadlib.c	/^static void createsearcherstable (lua_State *L) {$/;"	f	file:
createstdfile	.\dep\Lua\src\liolib.c	/^static void createstdfile (lua_State *L, FILE *f, const char *k,$/;"	f	file:
createstrobj	.\dep\Lua\src\lstring.c	/^static TString *createstrobj (lua_State *L, size_t l, int tag, unsigned int h) {$/;"	f	file:
crend	.\include\sol\single\sol\sol.hpp	/^		const_reverse_iterator crend() const { return std::reverse_iterator<const_iterator>(cend()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
crend	.\include\sol\sol\variadic_args.hpp	/^		const_reverse_iterator crend() const { return std::reverse_iterator<const_iterator>(cend()); }$/;"	f	struct:sol::variadic_args
ctb	.\dep\Lua\src\lobject.h	66;"	d
ctb	.\include\lua\lobject.h	66;"	d
ctti_get_type_name	.\include\sol\single\sol\sol.hpp	/^		inline std::string ctti_get_type_name() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
ctti_get_type_name	.\include\sol\sol\demangle.hpp	/^		inline std::string ctti_get_type_name() {$/;"	f	namespace:sol::detail
ctx	.\dep\Lua\src\lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon15::__anon17
ctx	.\include\lua\lstate.h	/^      lua_KContext ctx;  \/* context info. in case of yields *\/$/;"	m	struct:CallInfo::__anon166::__anon168
cubic_to	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Outline_CubicToFunc  cubic_to;$/;"	m	struct:FT_Outline_Funcs_
cue_sheet	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_CueSheet cue_sheet;$/;"	m	union:__anon57::__anon58
cur_comp_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];$/;"	m	struct:jpeg_compress_struct
cur_comp_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_component_info * cur_comp_info[MAX_COMPS_IN_SCAN];$/;"	m	struct:jpeg_decompress_struct
cur_x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon108
cur_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int cur_x, cur_y;$/;"	m	struct:__anon108
currIsNewline	.\dep\Lua\src\llex.c	36;"	d	file:
current	.\dep\Lua\src\llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
current	.\include\lua\llex.h	/^  int current;  \/* current character (charint) *\/$/;"	m	struct:LexState
currentContext	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        Context* currentContext = CATCH_NULL;$/;"	m	namespace:Catch::__anon179
currentGroupInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        LazyStat<GroupInfo> currentGroupInfo;$/;"	m	struct:Catch::StreamingReporterBase
currentTestCaseInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        LazyStat<TestCaseInfo> currentTestCaseInfo;$/;"	m	struct:Catch::StreamingReporterBase
currentTestRunInfo	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        LazyStat<TestRunInfo> currentTestRunInfo;$/;"	m	struct:Catch::StreamingReporterBase
currentTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        ITracker& currentTracker() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
current_link	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int              current_link;$/;"	m	struct:OggVorbis_File
current_serialno	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  long             current_serialno;$/;"	m	struct:OggVorbis_File
currentline	.\dep\Lua\src\ldebug.c	/^static int currentline (CallInfo *ci) {$/;"	f	file:
currentline	.\dep\Lua\src\lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentline	.\include\lua\lua.h	/^  int currentline;	\/* (l) *\/$/;"	m	struct:lua_Debug
currentpc	.\dep\Lua\src\ldebug.c	/^static int currentpc (CallInfo *ci) {$/;"	f	file:
currentwhite	.\dep\Lua\src\lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
currentwhite	.\include\lua\lstate.h	/^  lu_byte currentwhite;$/;"	m	struct:global_State
cursor	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    unsigned char*       cursor;$/;"	m	struct:FT_StreamRec_
custom	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        static Approx custom() {$/;"	f	class:Catch::Detail::Approx
cvt2num	.\dep\Lua\src\lvm.h	24;"	d
cvt2num	.\dep\Lua\src\lvm.h	26;"	d
cvt2num	.\include\lua\lvm.h	24;"	d
cvt2num	.\include\lua\lvm.h	26;"	d
cvt2str	.\dep\Lua\src\lvm.h	17;"	d
cvt2str	.\dep\Lua\src\lvm.h	19;"	d
cvt2str	.\include\lua\lvm.h	17;"	d
cvt2str	.\include\lua\lvm.h	19;"	d
cxx	.\include\sol\bootstrap.py	/^cxx = os.environ.get('CXX', "g++") $/;"	v
cyan	.\src\src\Colors.cpp	/^	const char cyan[] =    { 0x1b, '[', '0', '3', '6', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
d	.\dep\Lua\src\lstrlib.c	/^  double d;$/;"	m	union:Ftypes	file:
d	.\dep\Lua\src\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon20	file:
d_counter	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^    int d_counter;$/;"	m	struct:__anon184::Fixture	file:
data	.\dep\Lua\src\ldump.c	/^  void *data;$/;"	m	struct:__anon1	file:
data	.\dep\Lua\src\lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte *data;$/;"	m	struct:__anon46
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte *data;$/;"	m	struct:__anon55
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte *data;$/;"	m	struct:__anon56
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	const FLAC__int32 *data; \/**< A pointer to verbatim signal. *\/$/;"	m	struct:__anon32
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	} data;$/;"	m	struct:__anon28	typeref:union:__anon28::__anon29
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	} data;$/;"	m	struct:__anon35	typeref:union:__anon35::__anon36
data	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	} data;$/;"	m	struct:__anon57	typeref:union:__anon57::__anon58
data	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pointer  data;$/;"	m	struct:FT_Parameter_
data	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    void*                 data;$/;"	m	struct:FT_Generic_
data	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    void*        data;$/;"	m	struct:FT_ListNodeRec_
data	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JOCTET FAR * data;		\/* the data contained in the marker *\/$/;"	m	struct:jpeg_marker_struct
data	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *data;$/;"	m	struct:__anon92
data	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      stbi_uc *data;$/;"	m	struct:__anon98::__anon99
data	.\include\lua\lzio.h	/^  void *data;			\/* additional data *\/$/;"	m	struct:Zio
data	.\include\sol\Catch\include\external\clara.h	/^            std::string data;$/;"	m	struct:Clara::Parser::Token
data	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        char data[bufferSize];$/;"	m	class:Catch::StreamBufImpl
data	.\include\sol\single\sol\sol.hpp	/^			const char* data() const {$/;"	f	struct:sol::sol::string_detail::string_shim
data	.\include\sol\sol\string_shim.hpp	/^			const char* data() const {$/;"	f	struct:sol::string_detail::string_shim
data	.\src\include\Path.h	/^	std::vector<Vector2*> data() { return points; }$/;"	f	class:Path
data	.\src\include\SkillTree.h	/^	std::vector<SkillNode*> data() { return _data; }$/;"	f	class:SkillTree
data_length	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 data_length;$/;"	m	struct:__anon55
data_length	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int data_length;	\/* # bytes of data saved at data[] *\/$/;"	m	struct:jpeg_marker_struct
data_offset	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong        data_offset;$/;"	m	struct:CID_FaceInfoRec_
data_precision	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int data_precision;		\/* bits of precision in image data *\/$/;"	m	struct:jpeg_compress_struct
data_precision	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int data_precision;		\/* bits of precision in image data *\/$/;"	m	struct:jpeg_decompress_struct
database	.\.ycm_extra_conf.py	/^  database = None$/;"	v
database	.\.ycm_extra_conf.py	/^  database = ycm_core.CompilationDatabase( compilation_database_folder )$/;"	v
dataoffsets	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t     *dataoffsets;$/;"	m	struct:OggVorbis_File
dataptr	.\include\sol\Optional\optional.hpp	/^  constexpr const T* dataptr() const { return detail_::static_addressof(OptionalBase<T>::storage_.value_); }$/;"	f	class:sol::optional
dataptr	.\include\sol\Optional\optional.hpp	/^  typename ::std::remove_const<T>::type* dataptr() {  return ::std::addressof(OptionalBase<T>::storage_.value_); }$/;"	f	class:sol::optional
datasource	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  void            *datasource; \/* Pointer to a FILE *, etc. *\/$/;"	m	struct:OggVorbis_File
dates	.\include\sol\Catch\scripts\releaseNotes.py	/^dates = []$/;"	v
datetime	.\include\sol\Catch\scripts\generateSingleHeader.py	/^import datetime$/;"	i
db_debug	.\dep\Lua\src\ldblib.c	/^static int db_debug (lua_State *L) {$/;"	f	file:
db_gethook	.\dep\Lua\src\ldblib.c	/^static int db_gethook (lua_State *L) {$/;"	f	file:
db_getinfo	.\dep\Lua\src\ldblib.c	/^static int db_getinfo (lua_State *L) {$/;"	f	file:
db_getlocal	.\dep\Lua\src\ldblib.c	/^static int db_getlocal (lua_State *L) {$/;"	f	file:
db_getmetatable	.\dep\Lua\src\ldblib.c	/^static int db_getmetatable (lua_State *L) {$/;"	f	file:
db_getregistry	.\dep\Lua\src\ldblib.c	/^static int db_getregistry (lua_State *L) {$/;"	f	file:
db_getupvalue	.\dep\Lua\src\ldblib.c	/^static int db_getupvalue (lua_State *L) {$/;"	f	file:
db_getuservalue	.\dep\Lua\src\ldblib.c	/^static int db_getuservalue (lua_State *L) {$/;"	f	file:
db_sethook	.\dep\Lua\src\ldblib.c	/^static int db_sethook (lua_State *L) {$/;"	f	file:
db_setlocal	.\dep\Lua\src\ldblib.c	/^static int db_setlocal (lua_State *L) {$/;"	f	file:
db_setmetatable	.\dep\Lua\src\ldblib.c	/^static int db_setmetatable (lua_State *L) {$/;"	f	file:
db_setupvalue	.\dep\Lua\src\ldblib.c	/^static int db_setupvalue (lua_State *L) {$/;"	f	file:
db_setuservalue	.\dep\Lua\src\ldblib.c	/^static int db_setuservalue (lua_State *L) {$/;"	f	file:
db_traceback	.\dep\Lua\src\ldblib.c	/^static int db_traceback (lua_State *L) {$/;"	f	file:
db_upvalueid	.\dep\Lua\src\ldblib.c	/^static int db_upvalueid (lua_State *L) {$/;"	f	file:
db_upvaluejoin	.\dep\Lua\src\ldblib.c	/^static int db_upvaluejoin (lua_State *L) {$/;"	f	file:
dbgName	.\include\sol\Catch\include\external\clara.h	/^            std::string dbgName() const {$/;"	f	struct:Clara::CommandLine::Arg
dblib	.\dep\Lua\src\ldblib.c	/^static const luaL_Reg dblib[] = {$/;"	v	file:
dc_huff_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];$/;"	m	struct:jpeg_compress_struct
dc_huff_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JHUFF_TBL * dc_huff_tbl_ptrs[NUM_HUFF_TBLS];$/;"	m	struct:jpeg_decompress_struct
dc_pred	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int dc_pred;$/;"	m	struct:__anon98::__anon99
dc_tbl_no	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int dc_tbl_no;		\/* DC entropy table selector (0..3) *\/$/;"	m	struct:__anon81
dct_bfly32o	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1949;"	d
dct_bfly32o	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2083;"	d
dct_bfly32o	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2135;"	d
dct_bfly32o	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2293;"	d
dct_const	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1921;"	d
dct_const	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2078;"	d
dct_interleave16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1966;"	d
dct_interleave16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2085;"	d
dct_interleave8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1960;"	d
dct_interleave8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2084;"	d
dct_long_mac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2116;"	d
dct_long_mac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2289;"	d
dct_long_mul	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2112;"	d
dct_long_mul	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2288;"	d
dct_method	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_DCT_METHOD dct_method;	\/* DCT algorithm selector *\/$/;"	m	struct:jpeg_compress_struct
dct_method	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_DCT_METHOD dct_method;	\/* IDCT algorithm selector *\/$/;"	m	struct:jpeg_decompress_struct
dct_pass	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1971;"	d
dct_pass	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2086;"	d
dct_pass	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2143;"	d
dct_pass	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2294;"	d
dct_rot	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1925;"	d
dct_rot	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2079;"	d
dct_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  void * dct_table;$/;"	m	struct:__anon81
dct_trn16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2203;"	d
dct_trn16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2225;"	d
dct_trn32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2204;"	d
dct_trn32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2226;"	d
dct_trn64	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2205;"	d
dct_trn64	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2227;"	d
dct_trn8_16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2249;"	d
dct_trn8_16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2284;"	d
dct_trn8_32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2250;"	d
dct_trn8_32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2285;"	d
dct_trn8_8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2248;"	d
dct_trn8_8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2283;"	d
dct_wadd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1939;"	d
dct_wadd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2081;"	d
dct_wadd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2125;"	d
dct_wadd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2291;"	d
dct_widen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1934;"	d
dct_widen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2080;"	d
dct_widen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2120;"	d
dct_widen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2290;"	d
dct_wsub	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1944;"	d
dct_wsub	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2082;"	d
dct_wsub	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2130;"	d
dct_wsub	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2292;"	d
dead	.\include\sol\single\sol\sol.hpp	/^		dead,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
dead	.\include\sol\sol\types.hpp	/^		dead,$/;"	m	class:sol::call_syntax::call_status::thread_status
deadvalue	.\dep\Lua\src\lobject.h	179;"	d
deadvalue	.\include\lua\lobject.h	179;"	d
deallocate	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        void deallocate( T *p, size_type \/*n*\/ ) {$/;"	f	struct:__anon187::minimal_allocator
debug	.\include\sol\single\sol\sol.hpp	/^		debug,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
debug	.\include\sol\sol\debug.hpp	/^		namespace debug {$/;"	n	namespace:sol::detail
debug	.\include\sol\sol\state_view.hpp	/^		debug,$/;"	m	class:sol::lib
decAttackerCount	.\src\include\Object.h	/^	void decAttackerCount() { --_attackerCount; }$/;"	f	class:Object
decPoints	.\src\include\SkillTree.h	/^    void decPoints() { setPoints(points - 1); }$/;"	f	class:SkillNode
decltype	.\include\sol\single\sol\sol.hpp	/^				static auto test(int) -> decltype(&G::operator(), void());$/;"	m	struct:sol::meta::meta_detail::check_deducible_signature
decltype	.\include\sol\sol\bind_traits.hpp	/^				static auto test(int) -> decltype(&G::operator(), void());$/;"	m	struct:sol::meta::meta_detail::check_deducible_signature
decode	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    bool decode(sf::InputStream& stream, sf::Int16& value)$/;"	f	namespace:__anon122
decode	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    bool decode(sf::InputStream& stream, sf::Int32& value)$/;"	f	namespace:__anon122
decode	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    bool decode(sf::InputStream& stream, sf::Uint16& value)$/;"	f	namespace:__anon122
decode	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    bool decode(sf::InputStream& stream, sf::Uint32& value)$/;"	f	namespace:__anon122
decode	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    bool decode(sf::InputStream& stream, sf::Uint8& value)$/;"	f	namespace:__anon122
def	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Fixed    def;$/;"	m	struct:FT_Var_Axis_
default	.\include\sol\ninja_syntax.py	/^    def default(self, paths):$/;"	m	class:Writer
default_at_panic	.\include\sol\single\sol\sol.hpp	/^	inline int default_at_panic(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol
default_at_panic	.\include\sol\sol\state.hpp	/^	inline int default_at_panic(lua_State* L) {$/;"	f	namespace:sol
default_char	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    default_char;$/;"	m	struct:FT_WinFNT_HeaderRec_
default_check_arguments	.\include\sol\single\sol\sol.hpp	/^			const bool default_check_arguments =$/;"	m	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
default_check_arguments	.\include\sol\sol\stack_core.hpp	/^			const bool default_check_arguments =$/;"	m	namespace:sol::stack::stack_detail
default_construct	.\include\sol\single\sol\sol.hpp	/^		struct default_construct {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
default_construct	.\include\sol\sol\raii.hpp	/^		struct default_construct {$/;"	s	namespace:sol::detail
default_constructor	.\include\sol\single\sol\sol.hpp	/^	const auto default_constructor = constructors<types<>>{};$/;"	m	namespace:sol::sol::call_syntax::call_status::sol
default_constructor	.\include\sol\sol\raii.hpp	/^	const auto default_constructor = constructors<types<>>{};$/;"	m	namespace:sol
default_design_vector	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt          default_design_vector[T1_MAX_MM_DESIGNS];$/;"	m	struct:PS_BlendRec_
default_destruct	.\include\sol\single\sol\sol.hpp	/^		struct default_destruct {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
default_destruct	.\include\sol\sol\raii.hpp	/^		struct default_destruct {$/;"	s	namespace:sol::detail
default_weight_vector	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed*        default_weight_vector;$/;"	m	struct:PS_BlendRec_
defineEnemy	.\src\src\LuaScript.cpp	/^void LuaScript::defineEnemy() {$/;"	f	class:LuaScript
defineMap	.\src\src\LuaScript.cpp	/^void LuaScript::defineMap() {$/;"	f	class:LuaScript
defineObject	.\src\src\LuaScript.cpp	/^void LuaScript::defineObject() {$/;"	f	class:LuaScript
defineParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^defineParser = re.compile( r'\\s*#define')$/;"	v
definePerk	.\src\src\LuaScript.cpp	/^void LuaScript::definePerk() {$/;"	f	class:LuaScript
defineStats	.\src\src\LuaScript.cpp	/^void LuaScript::defineStats() {$/;"	f	class:LuaScript
defineTarget	.\src\src\LuaScript.cpp	/^void LuaScript::defineTarget() {$/;"	f	class:LuaScript
defineTower	.\src\src\LuaScript.cpp	/^void LuaScript::defineTower() {$/;"	f	class:LuaScript
define_cpp	.\include\sol\single.py	/^define_cpp = re.compile(r'#define SOL_.*?_HPP')$/;"	v
deleteAll	.\include\sol\Catch\include\internal\catch_common.h	/^    inline void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch
deleteAll	.\include\sol\Catch\single_include\catch.hpp	/^    inline void deleteAll( ContainerT& container ) {$/;"	f	namespace:Catch
deleteAllValues	.\include\sol\Catch\include\internal\catch_common.h	/^    inline void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch
deleteAllValues	.\include\sol\Catch\single_include\catch.hpp	/^    inline void deleteAllValues( AssociativeContainerT& container ) {$/;"	f	namespace:Catch
deleteDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::deleteDirectory(const std::string& name)$/;"	f	class:sf::Ftp
deleteFile	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::deleteFile(const std::string& name)$/;"	f	class:sf::Ftp
deleter	.\include\sol\single\sol\sol.hpp	/^		struct deleter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
deleter	.\include\sol\sol\raii.hpp	/^		struct deleter {$/;"	s	namespace:sol::detail
deleter	.\include\sol\test_usertypes.cpp	/^	struct deleter {$/;"	s	struct:factory_test	file:
delta	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos                  delta;$/;"	m	struct:FT_Outline_Funcs_
delta	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int    delta[17];   \/\/ old 'firstsymbol' - old 'firstcode'$/;"	m	struct:__anon97
delta	.\dep\SFML\include\SFML\Window\Event.hpp	/^        float        delta; \/\/\/< Wheel offset (positive is up\/left, negative is down\/right). High-precision mice may use non-integral offsets.$/;"	m	struct:sf::Event::MouseWheelScrollEvent
delta	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down)$/;"	m	struct:sf::Event::MouseWheelEvent
delta	.\include\SFML\Window\Event.hpp	/^        float        delta; \/\/\/< Wheel offset (positive is up\/left, negative is down\/right). High-precision mice may use non-integral offsets.$/;"	m	struct:sf::Event::MouseWheelScrollEvent
delta	.\include\SFML\Window\Event.hpp	/^        int delta; \/\/\/< Number of ticks the wheel has moved (positive is up, negative is down)$/;"	m	struct:sf::Event::MouseWheelEvent
delta	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Totals delta( Totals const& prevTotals ) const {$/;"	f	struct:Catch::Totals
demangle	.\include\sol\single\sol\sol.hpp	/^		inline std::string demangle() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
demangle	.\include\sol\sol\demangle.hpp	/^		inline std::string demangle() {$/;"	f	namespace:sol::detail
demangle_once	.\include\sol\single\sol\sol.hpp	/^		inline std::string demangle_once() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
demangle_once	.\include\sol\sol\demangle.hpp	/^		inline std::string demangle_once() {$/;"	f	namespace:sol::detail
density_unit	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 density_unit;		\/* JFIF code for pixel size units *\/$/;"	m	struct:jpeg_compress_struct
density_unit	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 density_unit;		\/* JFIF code for pixel size units *\/$/;"	m	struct:jpeg_decompress_struct
dependencies	.\include\sol\bootstrap.py	/^def dependencies(l):$/;"	f
depends	.\include\sol\bootstrap.py	/^depends = [os.path.join('Catch', 'include')]$/;"	v
deprecate_type	.\include\sol\single\sol\sol.hpp	/^		struct SOL_DEPRECATED deprecate_type {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail
deprecate_type	.\include\sol\sol\deprecate.hpp	/^		struct SOL_DEPRECATED deprecate_type {$/;"	s	namespace:sol::detail
depth	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 depth;$/;"	m	struct:__anon55
depth	.\src\include\SkillTree.h	/^	int depth;     \/\/ Level this Node is on$/;"	m	class:SkillNode
depth	.\src\src\SkillTree.cpp	/^const int SkillTree::depth(const SkillNode* node) {$/;"	f	class:SkillTree
depthBits	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings
depthBits	.\include\SFML\Window\ContextSettings.hpp	/^    unsigned int depthBits;         \/\/\/< Bits of the depth buffer$/;"	m	struct:sf::ContextSettings
dequant	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc dequant[4][64];$/;"	m	struct:__anon98
deref	.\include\sol\single\sol\sol.hpp	/^		T& deref(T* item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\single\sol\sol.hpp	/^		T& deref(const std::shared_ptr<T>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\single\sol\sol.hpp	/^		T& deref(std::shared_ptr<T>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) deref(T&& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) deref(const std::unique_ptr<T, Dx>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) deref(std::unique_ptr<T, Dx>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		T& deref(T* item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		T& deref(const std::shared_ptr<T>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		T& deref(std::shared_ptr<T>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		decltype(auto) deref(T&& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		decltype(auto) deref(const std::unique_ptr<T, Dx>& item) {$/;"	f	namespace:sol::meta::meta_detail
deref	.\include\sol\sol\traits.hpp	/^		decltype(auto) deref(std::unique_ptr<T, Dx>& item) {$/;"	f	namespace:sol::meta::meta_detail
des	.\include\sol\test_usertypes.cpp	/^void des(T& e) {$/;"	f
descender	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos     descender;   \/* descender in 26.6 frac. pixels         *\/$/;"	m	struct:FT_Size_Metrics_
descender	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          descender;$/;"	m	struct:FT_FaceRec_
describe	.\include\sol\Catch\include\external\clara.h	/^            ArgBuilder& describe( std::string const& description ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
description	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte *description;$/;"	m	struct:__anon55
description	.\include\sol\Catch\include\external\clara.h	/^        std::string description;$/;"	m	struct:Clara::CommonArgProperties
description	.\include\sol\Catch\include\internal\catch_section_info.h	/^        std::string description;$/;"	m	struct:Catch::SectionInfo
description	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::string description;$/;"	m	struct:Catch::TestCaseInfo
description	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc
description	.\include\sol\Catch\single_include\catch.hpp	/^    const char* description;$/;"	m	struct:Catch::NameAndDesc
description	.\include\sol\bootstrap.py	/^                      description = 'Compiling $in to $out')$/;"	v
description	.\include\sol\single.py	/^description = "Converts sol to a single file for convenience."$/;"	v
descriptor	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_StreamDesc        descriptor;$/;"	m	struct:FT_StreamRec_
design_map	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_DesignMapRec  design_map[T1_MAX_MM_AXIS];$/;"	m	struct:PS_BlendRec_
design_points	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Long*   design_points;$/;"	m	struct:PS_DesignMap_
design_pos	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed*        design_pos[T1_MAX_MM_DESIGNS];$/;"	m	struct:PS_BlendRec_
desired_number_of_colors	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int desired_number_of_colors;	\/* max # colors to use in created colormap *\/$/;"	m	struct:jpeg_decompress_struct
dest	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_destination_mgr * dest;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_destination_mgr
destHeight	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int destXOrigin, destYOrigin, destWidth, destHeight;$/;"	m	struct:__anon148
destWidth	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int destXOrigin, destYOrigin, destWidth, destHeight;$/;"	m	struct:__anon148
destXOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int destXOrigin, destYOrigin, destWidth, destHeight;$/;"	m	struct:__anon148
destYOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int destXOrigin, destYOrigin, destWidth, destHeight;$/;"	m	struct:__anon148
destroy	.\include\sol\single\sol\sol.hpp	/^			static void destroy(T&& obj) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::default_destruct
destroy	.\include\sol\sol\raii.hpp	/^			static void destroy(T&& obj) {$/;"	f	struct:sol::detail::default_destruct
destroySurface	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^void EglContext::destroySurface()$/;"	f	class:sf::priv::EglContext
destruct	.\include\sol\single\sol\sol.hpp	/^		inline int destruct(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
destruct	.\include\sol\sol\call.hpp	/^		inline int destruct(lua_State* L) {$/;"	f	namespace:sol::call_detail
destructfunc	.\include\sol\single\sol\sol.hpp	/^		lua_CFunction destructfunc;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
destructfunc	.\include\sol\sol\usertype_metatable.hpp	/^		lua_CFunction destructfunc;$/;"	m	struct:sol::usertype_metatable
destructor	.\include\sol\single\sol\sol.hpp	/^	inline auto destructor(Fx&& fx) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
destructor	.\include\sol\sol\raii.hpp	/^	inline auto destructor(Fx&& fx) {$/;"	f	namespace:sol
destructor_wrapper	.\include\sol\single\sol\sol.hpp	/^		destructor_wrapper(Function f) : fx(std::move(f)) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::destructor_wrapper
destructor_wrapper	.\include\sol\single\sol\sol.hpp	/^	struct destructor_wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
destructor_wrapper	.\include\sol\single\sol\sol.hpp	/^	struct destructor_wrapper<void> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
destructor_wrapper	.\include\sol\sol\raii.hpp	/^		destructor_wrapper(Function f) : fx(std::move(f)) {}$/;"	f	struct:sol::destructor_wrapper
destructor_wrapper	.\include\sol\sol\raii.hpp	/^	struct destructor_wrapper {$/;"	s	namespace:sol
destructor_wrapper	.\include\sol\sol\raii.hpp	/^	struct destructor_wrapper<void> {};$/;"	s	namespace:sol
detachSound	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^void SoundBuffer::detachSound(Sound* sound) const$/;"	f	class:sf::SoundBuffer
detail	.\include\sol\Catch\include\external\clara.h	/^            ArgBuilder& detail( std::string const& detail ) {$/;"	f	class:Clara::CommandLine::ArgBuilder
detail	.\include\sol\Catch\include\external\clara.h	/^        std::string detail;$/;"	m	struct:Clara::CommonArgProperties
detail	.\include\sol\single\sol\sol.hpp	/^		namespace detail {$/;"	n	namespace:sol::meta
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	class:sol::sol::call_syntax::call_status::type
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol::sol
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol
detail	.\include\sol\single\sol\sol.hpp	/^	namespace detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
detail	.\include\sol\sol\debug.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\demangle.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\deprecate.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\error.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\inheritance.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\raii.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\reference.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\resolve.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\stack_core.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\stack_guard.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\stack_proxy.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\table_core.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\tie.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\tuple.hpp	/^		namespace detail {$/;"	n	namespace:sol::meta
detail	.\include\sol\sol\tuple.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail	.\include\sol\sol\types.hpp	/^	namespace detail {$/;"	n	class:sol::call_syntax::call_status::type
detail	.\include\sol\sol\types.hpp	/^	namespace detail {$/;"	n	namespace:sol
detail_	.\include\sol\Optional\optional.hpp	/^namespace detail_$/;"	n	namespace:sol
devVersionParser	.\include\sol\Catch\scripts\approvalTests.py	/^devVersionParser = re.compile( r'(.*?)Catch v[0-9]*\\.[0-9]*\\.[0-9]*-develop\\.[0-9]*(.*)' )$/;"	v
developBuild	.\include\sol\Catch\scripts\releaseCommon.py	/^    def developBuild(self):$/;"	m	class:Version
deviceNode	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^        std::string deviceNode;$/;"	m	struct:__anon150::JoystickRecord	file:
device_offset	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   device_offset;$/;"	m	struct:FT_WinFNT_HeaderRec_
difference_type	.\include\sol\single\sol\sol.hpp	/^		typedef base_t::difference_type difference_type;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
difference_type	.\include\sol\single\sol\sol.hpp	/^		typedef std::ptrdiff_t difference_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
difference_type	.\include\sol\single\sol\sol.hpp	/^		typedef typename base_t::difference_type difference_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
difference_type	.\include\sol\sol\table_iterator.hpp	/^		typedef base_t::difference_type difference_type;$/;"	t	class:sol::basic_table_iterator
difference_type	.\include\sol\sol\variadic_args.hpp	/^		typedef std::ptrdiff_t difference_type;$/;"	t	struct:sol::variadic_args
difference_type	.\include\sol\sol\variadic_args.hpp	/^		typedef typename base_t::difference_type difference_type;$/;"	t	struct:sol::va_iterator
digit	.\dep\Lua\src\lstrlib.c	/^static int digit (int c) { return '0' <= c && c <= '9'; }$/;"	f	file:
dimColour	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            static Colour::Code dimColour() { return Colour::FileName; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter
direct_error	.\include\sol\single\sol\sol.hpp	/^		const auto direct_error = direct_error_tag{};$/;"	m	namespace:sol::detail
direct_error	.\include\sol\sol\error.hpp	/^		const auto direct_error = direct_error_tag{};$/;"	m	namespace:sol::detail
direct_error_tag	.\include\sol\single\sol\sol.hpp	/^		struct direct_error_tag {};$/;"	s	namespace:sol::detail
direct_error_tag	.\include\sol\sol\error.hpp	/^		struct direct_error_tag {};$/;"	s	namespace:sol::detail
discharge2anyreg	.\dep\Lua\src\lcode.c	/^static void discharge2anyreg (FuncState *fs, expdesc *e) {$/;"	f	file:
discharge2reg	.\dep\Lua\src\lcode.c	/^static void discharge2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
dischargejpc	.\dep\Lua\src\lcode.c	/^static void dischargejpc (FuncState *fs) {$/;"	f	file:
disconnect	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::disconnect()$/;"	f	class:sf::Ftp
disconnect	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^void TcpSocket::disconnect()$/;"	f	class:sf::TcpSocket
display	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^void RenderTexture::display()$/;"	f	class:sf::RenderTexture
display	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    EGLDisplay display;$/;"	m	struct:sf::priv::ActivityStates
display	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^void EglContext::display()$/;"	f	class:sf::priv::EglContext
display	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^void GlxContext::display()$/;"	f	class:sf::priv::GlxContext
display	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^void WglContext::display()$/;"	f	class:sf::priv::WglContext
display	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::display()$/;"	f	class:sf::Window
displayBitsPerPixel	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^size_t displayBitsPerPixel(CGDirectDisplayID displayId)$/;"	f	namespace:sf::priv
distanceWith	.\src\src\Target.cpp	/^float Target::distanceWith(Target* target) {$/;"	f	class:Target
distanceWith	.\src\src\Target.cpp	/^float Target::distanceWith(float dx, float dy) {$/;"	f	class:Target
distanceWithSqr	.\src\src\Target.cpp	/^float Target::distanceWithSqr(Target* target) {$/;"	f	class:Target
distanceWithSqr	.\src\src\Target.cpp	/^float Target::distanceWithSqr(float dx, float dy) {$/;"	f	class:Target
dither_mode	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_DITHER_MODE dither_mode;	\/* type of color dithering to use *\/$/;"	m	struct:jpeg_decompress_struct
divide	.\include\sol\Catch\projects\SelfTest\ApproxTests.cpp	/^inline double divide( double a, double b ) {$/;"	f
division	.\include\sol\single\sol\sol.hpp	/^		division,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
division	.\include\sol\sol\types.hpp	/^		division,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
doREPL	.\dep\Lua\src\lua.c	/^static void doREPL (lua_State *L) {$/;"	f	file:
do_block_smoothing	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean do_block_smoothing;	\/* TRUE=apply interblock smoothing *\/$/;"	m	struct:jpeg_decompress_struct
do_fancy_downsampling	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean do_fancy_downsampling; \/* TRUE=apply fancy downsampling *\/$/;"	m	struct:jpeg_compress_struct
do_fancy_upsampling	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean do_fancy_upsampling;	\/* TRUE=apply fancy upsampling *\/$/;"	m	struct:jpeg_decompress_struct
doargs	.\dep\Lua\src\luac.c	/^static int doargs(int argc, char* argv[])$/;"	f	file:
docall	.\dep\Lua\src\lua.c	/^static int docall (lua_State *L, int narg, int nres) {$/;"	f	file:
dochunk	.\dep\Lua\src\lua.c	/^static int dochunk (lua_State *L, int status) {$/;"	f	file:
dofile	.\dep\Lua\src\lua.c	/^static int dofile (lua_State *L, const char *name) {$/;"	f	file:
dofilecont	.\dep\Lua\src\lbaselib.c	/^static int dofilecont (lua_State *L, int d1, lua_KContext d2) {$/;"	f	file:
dojump	.\dep\Lua\src\lvm.c	738;"	d	file:
dolibrary	.\dep\Lua\src\lua.c	/^static int dolibrary (lua_State *L, const char *name) {$/;"	f	file:
done	.\src\include\Particle.h	/^		bool done;$/;"	m	struct:ParticleEmitter::Particle
done	.\src\src\Particle.cpp	/^bool ParticleEmitter::done() {$/;"	f	class:ParticleEmitter
donextjump	.\dep\Lua\src\lvm.c	744;"	d	file:
dooptions	.\dep\Lua\src\loadlib.c	/^static void dooptions (lua_State *L, int n) {$/;"	f	file:
dostring	.\dep\Lua\src\lua.c	/^static int dostring (lua_State *L, const char *s, const char *name) {$/;"	f	file:
dot	.\include\sol\single\sol\sol.hpp	/^		dot = 0,$/;"	m	class:sol::sol::call_syntax
dot	.\include\sol\sol\types.hpp	/^		dot = 0,$/;"	m	class:sol::call_syntax
dotProduct	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^    float dotProduct(const sf::Vector2f& p1, const sf::Vector2f& p2)$/;"	f	namespace:__anon129
dothecall	.\dep\Lua\src\lgc.c	/^static void dothecall (lua_State *L, void *ud) {$/;"	f	file:
double_pi	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    double double_pi;$/;"	m	struct:TestData	file:
download	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::download(const std::string& remoteFile, const std::string& localPath, TransferMode mode)$/;"	f	class:sf::Ftp
downsample	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_downsampler * downsample;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_downsampler
downsampled_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION downsampled_height; \/* actual height in samples *\/$/;"	m	struct:__anon81
downsampled_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION downsampled_width;	 \/* actual width in samples *\/$/;"	m	struct:__anon81
draw	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::draw(const Drawable& drawable, const RenderStates& states)$/;"	f	class:sf::RenderTarget
draw	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::draw(const Vertex* vertices, std::size_t vertexCount,$/;"	f	class:sf::RenderTarget
draw	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::draw(RenderTarget& target, RenderStates states) const$/;"	f	class:sf::Shape
draw	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::draw(RenderTarget& target, RenderStates states) const$/;"	f	class:sf::Sprite
draw	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::draw(RenderTarget& target, RenderStates states) const$/;"	f	class:sf::Text
draw	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^void VertexArray::draw(RenderTarget& target, RenderStates states) const$/;"	f	class:sf::VertexArray
draw	.\src\src\Enemy.cpp	/^void Enemy::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:Enemy
draw	.\src\src\GuiComponent.cpp	/^void GuiComponent::draw(sf::RenderTarget& target,$/;"	f	class:GuiComponent
draw	.\src\src\Object.cpp	/^void Object::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:Object
draw	.\src\src\Particle.cpp	/^void ParticleEmitter::draw(sf::RenderTarget& target,$/;"	f	class:ParticleEmitter
draw	.\src\src\Projectile.cpp	/^void Projectile::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:Projectile
draw	.\src\src\SkillTree.cpp	/^void SkillTree::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:SkillTree
draw	.\src\src\Tower.cpp	/^void Tower::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:Tower
draw	.\src\src\Unit.cpp	/^void Unit::draw(sf::RenderTarget& target, sf::RenderStates stats) const {$/;"	f	class:Unit
draw	.\src\src\sfLine.cpp	/^void sfLine::draw(sf::RenderTarget& target, sf::RenderStates states) const {$/;"	f	class:sfLine
driver	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Driver         driver;$/;"	m	struct:FT_FaceRec_
driver	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Module       driver;$/;"	m	struct:FT_Open_Args_
dt	.\include\sol\single.py	/^import datetime as dt$/;"	i
dummy	.\dep\Lua\src\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata
dummy	.\dep\Lua\src\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString
dummy	.\dep\Lua\src\lstrlib.c	/^  int dummy;$/;"	m	union:__anon19	file:
dummy	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	int dummy;$/;"	m	struct:__anon45
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_coef_controller { long dummy; };$/;"	m	struct:jpeg_c_coef_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_main_controller { long dummy; };$/;"	m	struct:jpeg_c_main_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_prep_controller { long dummy; };$/;"	m	struct:jpeg_c_prep_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_converter { long dummy; };$/;"	m	struct:jpeg_color_converter
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_deconverter { long dummy; };$/;"	m	struct:jpeg_color_deconverter
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_quantizer { long dummy; };$/;"	m	struct:jpeg_color_quantizer
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_comp_master { long dummy; };$/;"	m	struct:jpeg_comp_master
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_coef_controller { long dummy; };$/;"	m	struct:jpeg_d_coef_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_main_controller { long dummy; };$/;"	m	struct:jpeg_d_main_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_post_controller { long dummy; };$/;"	m	struct:jpeg_d_post_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_decomp_master { long dummy; };$/;"	m	struct:jpeg_decomp_master
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_downsampler { long dummy; };$/;"	m	struct:jpeg_downsampler
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_entropy_decoder { long dummy; };$/;"	m	struct:jpeg_entropy_decoder
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_entropy_encoder { long dummy; };$/;"	m	struct:jpeg_entropy_encoder
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_forward_dct { long dummy; };$/;"	m	struct:jpeg_forward_dct
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_input_controller { long dummy; };$/;"	m	struct:jpeg_input_controller
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_inverse_dct { long dummy; };$/;"	m	struct:jpeg_inverse_dct
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_marker_reader { long dummy; };$/;"	m	struct:jpeg_marker_reader
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_marker_writer { long dummy; };$/;"	m	struct:jpeg_marker_writer
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_upsampler { long dummy; };$/;"	m	struct:jpeg_upsampler
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jvirt_barray_control { long dummy; };$/;"	m	struct:jvirt_barray_control
dummy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jvirt_sarray_control { long dummy; };$/;"	m	struct:jvirt_sarray_control
dummy	.\include\lua\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for 'local' udata *\/$/;"	m	union:UUdata
dummy	.\include\lua\lobject.h	/^  L_Umaxalign dummy;  \/* ensures maximum alignment for strings *\/$/;"	m	union:UTString
dummy	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    void Config::dummy() {}$/;"	f	class:Catch::Config
dummy_	.\include\sol\Optional\optional.hpp	/^    constexpr constexpr_storage_t( trivial_init_t ) noexcept : dummy_() {};$/;"	f	union:sol::constexpr_storage_t
dummy_	.\include\sol\Optional\optional.hpp	/^    unsigned char dummy_;$/;"	m	union:sol::constexpr_storage_t
dummy_	.\include\sol\Optional\optional.hpp	/^  constexpr storage_t( trivial_init_t ) noexcept : dummy_() {};$/;"	f	union:sol::storage_t
dummy_	.\include\sol\Optional\optional.hpp	/^  unsigned char dummy_;$/;"	m	union:sol::storage_t
dummynode	.\dep\Lua\src\ltable.c	75;"	d	file:
dummynode_	.\dep\Lua\src\ltable.c	/^static const Node dummynode_ = {$/;"	v	file:
dump_types	.\include\sol\sol\debug.hpp	/^			inline std::string dump_types(lua_State* L) {$/;"	f	namespace:sol::detail::debug
dumping	.\dep\Lua\src\luac.c	/^static int dumping=1;			\/* dump bytecodes? *\/$/;"	v	file:
durationInSeconds	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        double durationInSeconds;$/;"	m	struct:Catch::SectionStats
durationInSeconds	.\include\sol\Catch\include\internal\catch_section_info.h	/^        double durationInSeconds;$/;"	m	struct:Catch::SectionEndInfo
durationsParser	.\include\sol\Catch\scripts\approvalTests.py	/^durationsParser = re.compile( r'(.*)time="[0-9]*\\.[0-9]*"(.*)' )$/;"	v
dyd	.\dep\Lua\src\ldo.c	/^  Dyndata dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:SParser	file:
dyd	.\dep\Lua\src\llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
dyd	.\include\lua\llex.h	/^  struct Dyndata *dyd;  \/* dynamic structures used by the parser *\/$/;"	m	struct:LexState	typeref:struct:LexState::Dyndata
e	.\include\sol\single\sol\sol.hpp	/^		error& operator=(const error& e) = default;$/;"	m	class:sol::error
e	.\include\sol\single\sol\sol.hpp	/^		error& operator=(error&& e) = default;$/;"	m	class:sol::error
e	.\include\sol\single\sol\sol.hpp	/^		error(const error& e) = default;$/;"	m	class:sol::error
e	.\include\sol\single\sol\sol.hpp	/^		error(error&& e) = default;$/;"	m	class:sol::error
e	.\include\sol\sol\error.hpp	/^		error& operator=(const error& e) = default;$/;"	m	class:sol::error
e	.\include\sol\sol\error.hpp	/^		error& operator=(error&& e) = default;$/;"	m	class:sol::error
e	.\include\sol\sol\error.hpp	/^		error(const error& e) = default;$/;"	m	class:sol::error
e	.\include\sol\sol\error.hpp	/^		error(error&& e) = default;$/;"	m	class:sol::error
e_o_s	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int     e_o_s;          \/* set when we have buffered the last packet in the$/;"	m	struct:__anon90
e_o_s	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long  e_o_s;$/;"	m	struct:__anon91
eflags	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon108
eglCheck	.\dep\SFML\src\SFML\Window\EGLCheck.hpp	46;"	d
eglCheckError	.\dep\SFML\src\SFML\Window\EGLCheck.cpp	/^void eglCheckError(const char* file, unsigned int line)$/;"	f	namespace:sf::priv
emit	.\src\src\ParticleEmitter.cpp	/^	void emit(float x, float y, int amount, Color c) {$/;"	f	namespace:ParticleEmit
emitters	.\src\include\GameWindow.h	/^	std::vector<ParticleEmitter*> emitters;$/;"	m	class:GameWindow
emplace	.\include\sol\Optional\optional.hpp	/^  void emplace(::std::initializer_list<U> il, Args&&... args)$/;"	f	class:sol::optional
emplace	.\include\sol\Optional\optional.hpp	/^  void emplace(Args&&... args)$/;"	f	class:sol::optional
empty	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool SourceLineInfo::empty() const {$/;"	f	class:Catch::SourceLineInfo
empty	.\include\sol\sol\table_core.hpp	/^		bool empty() const {$/;"	f	class:sol::basic_table_core
empty	.\src\src\StateManager.cpp	/^bool StateManager::empty() {$/;"	f	class:StateManager
enable_1pass_quant	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean enable_1pass_quant;	\/* enable future use of 1-pass quantizer *\/$/;"	m	struct:jpeg_decompress_struct
enable_2pass_quant	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean enable_2pass_quant;	\/* enable future use of 2-pass quantizer *\/$/;"	m	struct:jpeg_decompress_struct
enable_external_quant	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean enable_external_quant;\/* enable future use of external colormap *\/$/;"	m	struct:jpeg_decompress_struct
enable_t	.\include\sol\single\sol\sol.hpp	/^		enum class enable_t {$/;"	c	namespace:sol::meta
enable_t	.\include\sol\sol\traits.hpp	/^		enum class enable_t {$/;"	c	namespace:sol::meta
enabled	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^        bool enabled;      \/\/\/< Current enable state of the sensor$/;"	m	struct:sf::priv::SensorManager::Item
enabler	.\include\sol\single\sol\sol.hpp	/^		constexpr const auto enabler = enable_t::_;$/;"	m	namespace:sol::meta
enabler	.\include\sol\sol\traits.hpp	/^		constexpr const auto enabler = enable_t::_;$/;"	m	namespace:sol::meta
encode	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^    void encode(std::ostream& stream, sf::Int16 value)$/;"	f	namespace:__anon123
encode	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^    void encode(std::ostream& stream, sf::Uint16 value)$/;"	f	namespace:__anon123
encode	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^    void encode(std::ostream& stream, sf::Uint32 value)$/;"	f	namespace:__anon123
encode	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline std::string encode( std::string const& str, Catch::XmlEncode::ForWhat forWhat = Catch::XmlEncode::ForTextNodes ) {$/;"	f
encodeTo	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        void encodeTo( std::ostream& os ) const {$/;"	f	class:Catch::XmlEncode
encoding	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Encoding  encoding;$/;"	m	struct:FT_CharMapRec_
encoding_id	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UShort    encoding_id;$/;"	m	struct:FT_CharMapRec_
encoding_id	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_UShort  encoding_id;$/;"	m	struct:FT_SfntName_
end	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t      end;$/;"	m	struct:OggVorbis_File
end	.\dep\SFML\src\SFML\System\String.cpp	/^String::ConstIterator String::end() const$/;"	f	class:sf::String
end	.\dep\SFML\src\SFML\System\String.cpp	/^String::Iterator String::end()$/;"	f	class:sf::String
end	.\include\sol\Catch\include\external\clara.h	/^        const_iterator end() const { return lines.end(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
end	.\include\sol\Catch\include\external\tbc_text_format.h	/^        const_iterator end() const { return lines.end(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
end	.\include\sol\docs\make.bat	/^:end$/;"	l
end	.\include\sol\single\sol\sol.hpp	/^		const_iterator end() const { return const_iterator(L, stacktop + 1, stacktop + 1); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
end	.\include\sol\single\sol\sol.hpp	/^		iterator end() { return iterator(L, stacktop + 1, stacktop + 1); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
end	.\include\sol\sol\state_view.hpp	/^		iterator end() const {$/;"	f	class:sol::state_view
end	.\include\sol\sol\table_core.hpp	/^		iterator end() const {$/;"	f	class:sol::basic_table_core
end	.\include\sol\sol\variadic_args.hpp	/^		const_iterator end() const { return const_iterator(L, stacktop + 1, stacktop + 1); }$/;"	f	struct:sol::variadic_args
end	.\include\sol\sol\variadic_args.hpp	/^		iterator end() { return iterator(L, stacktop + 1, stacktop + 1); }$/;"	f	struct:sol::variadic_args
end	.\src\src\SkillTree.cpp	/^void SkillTree::end() {$/;"	f	class:SkillTree
endElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& endElement() {$/;"	f	class:Catch::XmlWriter
endExpression	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    void endExpression() {$/;"	f	class:Catch::ExpressionLhs
endExpression	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::endExpression() {$/;"	f	class:Catch::ResultBuilder
endIfParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^endIfParser = re.compile( r'\\s*#endif \/\/ TWOBLUECUBES_CATCH_.*_INCLUDED')$/;"	v
endOfPacket	.\dep\SFML\src\SFML\Network\Packet.cpp	/^bool Packet::endOfPacket() const$/;"	f	class:sf::Packet
endRun	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void endRun() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
end_capture	.\dep\Lua\src\lstrlib.c	/^static const char *end_capture (MatchState *ms, const char *s,$/;"	f	file:
endbit	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int  endbit;$/;"	m	struct:__anon88
endbyte	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long endbyte;$/;"	m	struct:__anon88
endif_cpp	.\include\sol\single.py	/^endif_cpp = re.compile(r'#endif \/\/ SOL_.*?_HPP')$/;"	v
endpc	.\dep\Lua\src\lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
endpc	.\include\lua\lobject.h	/^  int endpc;    \/* first point where variable is dead *\/$/;"	m	struct:LocVar
endsWith	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool endsWith( std::string const& s, std::string const& suffix ) {$/;"	f	namespace:Catch
endtop	.\include\sol\test_stack_guard.hpp	/^	int& endtop;$/;"	m	struct:test_stack_guard
enforceNoDuplicateTestCases	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    void enforceNoDuplicateTestCases( std::vector<TestCase> const& functions ) {$/;"	f	namespace:Catch
enforceNotReservedTag	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    inline void enforceNotReservedTag( std::string const& tag, SourceLineInfo const& _lineInfo ) {$/;"	f	namespace:Catch
ensureContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^void GlContext::ensureContext()$/;"	f	class:sf::priv::GlContext
ensureDefaultReadersWritersRegistered	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^    void ensureDefaultReadersWritersRegistered()$/;"	f	namespace:__anon119
ensureExtensionsInit	.\dep\SFML\src\SFML\Graphics\GLExtensions.cpp	/^void ensureExtensionsInit()$/;"	f	namespace:sf::priv
ensureExtensionsInit	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^void ensureExtensionsInit(::Display* display, int screen)$/;"	f	namespace:sf::priv
ensureExtensionsInit	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^void ensureExtensionsInit(HDC deviceContext)$/;"	f	namespace:sf::priv
ensureGeometryUpdate	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::ensureGeometryUpdate() const$/;"	f	class:sf::Text
ensureGlContext	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^void GlResource::ensureGlContext()$/;"	f	class:sf::GlResource
ensureTagClosed	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        void ensureTagClosed() {$/;"	f	class:Catch::XmlWriter
ensure_package	.\include\sol\single\sol\sol.hpp	/^		void ensure_package(const std::string& key, T&& sr) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
ensure_package	.\include\sol\sol\state_view.hpp	/^		void ensure_package(const std::string& key, T&& sr) {$/;"	f	class:sol::state_view
enterblock	.\dep\Lua\src\lparser.c	/^static void enterblock (FuncState *fs, BlockCnt *bl, lu_byte isloop) {$/;"	f	file:
enterlevel	.\dep\Lua\src\lparser.c	/^static void enterlevel (LexState *ls) {$/;"	f	file:
entersweep	.\dep\Lua\src\lgc.c	/^static void entersweep (lua_State *L) {$/;"	f	file:
entropy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_entropy_decoder * entropy;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_entropy_decoder
entropy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_entropy_encoder * entropy;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_entropy_encoder
entropy_coding_method	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__EntropyCodingMethod entropy_coding_method;$/;"	m	struct:__anon33
entropy_coding_method	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__EntropyCodingMethod entropy_coding_method;$/;"	m	struct:__anon34
entry	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte *entry;$/;"	m	struct:__anon49
entryPoint	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^void* ThreadImpl::entryPoint(void* userData)$/;"	f	class:sf::priv::ThreadImpl
entryPoint	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^unsigned int __stdcall ThreadImpl::entryPoint(void* userData)$/;"	f	class:sf::priv::ThreadImpl
envn	.\dep\Lua\src\llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
envn	.\include\lua\llex.h	/^  TString *envn;  \/* environment variable name *\/$/;"	m	struct:LexState
eob_run	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            eob_run;$/;"	m	struct:__anon98
eof	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Eof eof;$/;"	m	struct:__anon24
eof	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int      (*eof)   (void *user);                       \/\/ returns nonzero if we are at end of file\/data$/;"	m	struct:__anon94
eof	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^    int eof(void* user)$/;"	f	namespace:__anon126
eofflag	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int         eofflag;$/;"	m	struct:vorbis_block
eofflag	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int  eofflag;$/;"	m	struct:vorbis_dsp_state
ephemeron	.\dep\Lua\src\lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
ephemeron	.\include\lua\lstate.h	/^  GCObject *ephemeron;  \/* list of ephemeron tables (weak keys) *\/$/;"	m	struct:global_State
epsilon	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        Approx& epsilon( double newEpsilon ) {$/;"	f	class:Catch::Detail::Approx
eqshrstr	.\dep\Lua\src\lstring.h	33;"	d
eqshrstr	.\include\lua\lstring.h	33;"	d
eqstr	.\dep\Lua\src\lparser.c	42;"	d	file:
equal_to	.\include\sol\single\sol\sol.hpp	/^		equal_to,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
equal_to	.\include\sol\sol\types.hpp	/^		equal_to,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
equationToGlConstant	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^    sf::Uint32 equationToGlConstant(sf::BlendMode::Equation blendEquation)$/;"	f	namespace:__anon127
erase	.\dep\SFML\src\SFML\System\String.cpp	/^void String::erase(std::size_t position, std::size_t count)$/;"	f	class:sf::String
err	.\dep\SFML\src\SFML\System\Err.cpp	/^std::ostream& err()$/;"	f	namespace:sf
err	.\include\sol\single\sol\sol.hpp	/^		call_status err;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
err	.\include\sol\single\sol\sol.hpp	/^		load_status err;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
err	.\include\sol\sol\load_result.hpp	/^		load_result(load_result&& o) noexcept : L(o.L), index(o.index), returncount(o.returncount), popcount(o.popcount), err(o.err) {$/;"	f	struct:sol::load_result
err	.\include\sol\sol\load_result.hpp	/^		load_result(lua_State* L, int index = -1, int returncount = 0, int popcount = 0, load_status err = load_status::ok) noexcept : L(L), index(index), returncount(returncount), popcount(popcount), err(err) {$/;"	f	struct:sol::load_result
err	.\include\sol\sol\load_result.hpp	/^		load_status err;$/;"	m	struct:sol::load_result
err	.\include\sol\sol\protected_function_result.hpp	/^		call_status err;$/;"	m	struct:sol::protected_function_result
err	.\include\sol\sol\protected_function_result.hpp	/^		protected_function_result(lua_State* L, int index = -1, int returncount = 0, int popcount = 0, call_status err = call_status::ok) noexcept : L(L), index(index), returncount(returncount), popcount(popcount), err(err) {$/;"	f	struct:sol::protected_function_result
err	.\include\sol\sol\protected_function_result.hpp	/^		protected_function_result(protected_function_result&& o) noexcept : L(o.L), index(o.index), returncount(o.returncount), popcount(o.popcount), err(o.err) {$/;"	f	struct:sol::protected_function_result
errfile	.\dep\Lua\src\lauxlib.c	/^static int errfile (lua_State *L, const char *what, int fnameindex) {$/;"	f	file:
errfunc	.\dep\Lua\src\lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
errfunc	.\include\lua\lstate.h	/^  ptrdiff_t errfunc;  \/* current error handling function (stack index) *\/$/;"	m	struct:lua_State
error	.\dep\Lua\src\lundump.c	/^static l_noret error(LoadState *S, const char *why) {$/;"	f	file:
error	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        bool                  error;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
error	.\include\sol\single\sol\sol.hpp	/^		error(const std::string& str) : error(detail::direct_error, "lua: error: " + str) {}$/;"	f	class:sol::error
error	.\include\sol\single\sol\sol.hpp	/^		error(detail::direct_error_tag, const std::string& str) : std::runtime_error(""), w(str) {}$/;"	f	class:sol::error
error	.\include\sol\single\sol\sol.hpp	/^		error(detail::direct_error_tag, std::string&& str) : std::runtime_error(""), w(std::move(str)) {}$/;"	f	class:sol::error
error	.\include\sol\single\sol\sol.hpp	/^	class error : public std::runtime_error {$/;"	c	namespace:sol
error	.\include\sol\sol\error.hpp	/^		error(const std::string& str) : error(detail::direct_error, "lua: error: " + str) {}$/;"	f	class:sol::error
error	.\include\sol\sol\error.hpp	/^		error(detail::direct_error_tag, const std::string& str) : std::runtime_error(""), w(str) {}$/;"	f	class:sol::error
error	.\include\sol\sol\error.hpp	/^		error(detail::direct_error_tag, std::string&& str) : std::runtime_error(""), w(std::move(str)) {}$/;"	f	class:sol::error
error	.\include\sol\sol\error.hpp	/^	class error : public std::runtime_error {$/;"	c	namespace:sol
errorJmp	.\dep\Lua\src\lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
errorJmp	.\include\lua\lstate.h	/^  struct lua_longjmp *errorJmp;  \/* current error recover point *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_longjmp
error_expected	.\dep\Lua\src\lparser.c	/^static l_noret error_expected (LexState *ls, int token) {$/;"	f	file:
error_handler	.\include\sol\sol\protected_function.hpp	/^		reference error_handler;$/;"	m	class:sol::basic_protected_function
errorlimit	.\dep\Lua\src\lparser.c	/^static l_noret errorlimit (FuncState *fs, int limit, const char *what) {$/;"	f	file:
errorstatus	.\dep\Lua\src\ldo.c	38;"	d	file:
escape	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        static std::string escape( std::string const& str ) {$/;"	f	struct:Catch::TeamCityReporter
escape	.\include\sol\ninja_syntax.py	/^def escape(string):$/;"	f
escape_path	.\include\sol\ninja_syntax.py	/^def escape_path(word):$/;"	f
esccheck	.\dep\Lua\src\llex.c	/^static void esccheck (LexState *ls, int c, const char *msg) {$/;"	f	file:
eval	.\include\sol\single\sol\sol.hpp	/^				static decltype(auto) eval(types<>, std::index_sequence<>, lua_State*, int, record&, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::evaluator
eval	.\include\sol\single\sol\sol.hpp	/^				static decltype(auto) eval(types<Arg, Args...>, std::index_sequence<I, Is...>, lua_State* L, int start, record& tracking, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::evaluator
eval	.\include\sol\sol\stack.hpp	/^				static decltype(auto) eval(types<>, std::index_sequence<>, lua_State*, int, record&, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::stack_detail::evaluator
eval	.\include\sol\sol\stack.hpp	/^				static decltype(auto) eval(types<Arg, Args...>, std::index_sequence<I, Is...>, lua_State* L, int start, record& tracking, Fx&& fx, FxArgs&&... fxargs) {$/;"	f	struct:sol::stack::stack_detail::evaluator
evaluate	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	.\include\sol\Catch\single_include\catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs ) {$/;"	f	struct:Catch::Internal::Evaluator
evaluate	.\include\sol\Catch\single_include\catch.hpp	/^        static bool evaluate( T1 const& lhs, T2 const& rhs) {$/;"	f	struct:Catch::Internal::Evaluator
evaluateFormat	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^int GlContext::evaluateFormat(unsigned int bitsPerPixel, const ContextSettings& settings, int colorBits, int depthBits, int stencilBits, int antialiasing, bool accelerated)$/;"	f	class:sf::priv::GlContext
evaluator	.\include\sol\single\sol\sol.hpp	/^			struct evaluator {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
evaluator	.\include\sol\sol\stack.hpp	/^			struct evaluator {$/;"	s	namespace:sol::stack::stack_detail
event	.\dep\Lua\src\lua.h	/^  int event;$/;"	m	struct:lua_Debug
event	.\include\lua\lua.h	/^  int event;$/;"	m	struct:lua_Debug
eventMask	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    static const unsigned long            eventMask = XCB_EVENT_MASK_FOCUS_CHANGE   | XCB_EVENT_MASK_BUTTON_PRESS     |$/;"	m	namespace:__anon151	file:
ewmhSupported	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    bool ewmhSupported()$/;"	f	namespace:__anon151
example	.\include\sol\bootstrap.py	/^    example = os.path.join(builddir, replace_extension(f, ''))$/;"	v
examples	.\include\sol\bootstrap.py	/^examples = []$/;"	v
exceptionTranslateFunction	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^    typedef std::string(*exceptionTranslateFunction)();$/;"	t	class:Catch::std
exclude_patterns	.\include\sol\docs\source\conf.py	/^exclude_patterns = []$/;"	v
exp1	.\dep\Lua\src\lparser.c	/^static int exp1 (LexState *ls) {$/;"	f	file:
exp2reg	.\dep\Lua\src\lcode.c	/^static void exp2reg (FuncState *fs, expdesc *e, int reg) {$/;"	f	file:
expandAliases	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    std::string TagAliasRegistry::expandAliases( std::string const& unexpandedTestSpec ) const {$/;"	f	class:Catch::TagAliasRegistry
expanded	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon104
expansion_factor	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed       expansion_factor;$/;"	m	struct:CID_FaceDictRec_
expansion_factor	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed   expansion_factor;$/;"	m	struct:PS_PrivateRec_
expdesc	.\dep\Lua\src\lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	.\dep\Lua\src\lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expdesc	.\include\lua\lparser.h	/^typedef struct expdesc {$/;"	s
expdesc	.\include\lua\lparser.h	/^} expdesc;$/;"	t	typeref:struct:expdesc
expectedToFail	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCaseInfo::expectedToFail() const {$/;"	f	class:Catch::TestCaseInfo
experimental	.\include\sol\Optional\test_type_traits.cpp	/^namespace std { namespace experimental {$/;"	n	namespace:std	file:
expkind	.\dep\Lua\src\lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon11
expkind	.\include\lua\lparser.h	/^} expkind;$/;"	t	typeref:enum:__anon162
explist	.\dep\Lua\src\lparser.c	/^static int explist (LexState *ls, expdesc *v) {$/;"	f	file:
explosive	.\src\include\Trait.h	/^	bool explosive; \/\/ On remove, remove all objects inside range$/;"	m	class:Trait
export_compiler_vars	.\include\sol\install.deps.sh	/^export_compiler_vars() {$/;"	f
expr	.\dep\Lua\src\lparser.c	/^static void expr (LexState *ls, expdesc *v) {$/;"	f	file:
exprstat	.\dep\Lua\src\lparser.c	/^static void exprstat (LexState *ls) {$/;"	f	file:
ext_getset	.\include\sol\test_usertypes.cpp	/^	ext_getset(int v) : bark(v) {}$/;"	f	struct:ext_getset
ext_getset	.\include\sol\test_usertypes.cpp	/^struct ext_getset {$/;"	s	file:
extensionName	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^    const char *extensionName;$/;"	m	struct:sfogl_StrToExtMap_s	file:
extensionName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^    const char *extensionName;$/;"	m	struct:sfglx_StrToExtMap_s	file:
extensionName	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^    const char *extensionName;$/;"	m	struct:sfwgl_StrToExtMap_s	file:
extensionVariable	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^    int *extensionVariable;$/;"	m	struct:sfogl_StrToExtMap_s	file:
extensionVariable	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^    int *extensionVariable;$/;"	m	struct:sfglx_StrToExtMap_s	file:
extensionVariable	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^    int *extensionVariable;$/;"	m	struct:sfwgl_StrToExtMap_s	file:
extensions	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    void*             extensions; \/* unused                         *\/$/;"	m	struct:FT_FaceRec_
extensions	.\include\sol\docs\source\conf.py	/^extensions = [$/;"	v
external_leading	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  external_leading;$/;"	m	struct:FT_WinFNT_HeaderRec_
extra	.\dep\Lua\src\lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString
extra	.\dep\Lua\src\lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
extra	.\include\lua\lobject.h	/^  lu_byte extra;  \/* reserved words for short strings; "has hash" for longs *\/$/;"	m	struct:TString
extra	.\include\lua\lstate.h	/^  ptrdiff_t extra;$/;"	m	struct:CallInfo
extra_	.\dep\Lua\src\lstate.c	/^  lu_byte extra_[LUA_EXTRASPACE];$/;"	m	struct:LX	file:
extractClassName	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    inline std::string extractClassName( std::string const& classOrQualifiedMethodName ) {$/;"	f	namespace:Catch
f	.\dep\Lua\src\lauxlib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:LoadF	file:
f	.\dep\Lua\src\lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	.\dep\Lua\src\liolib.c	/^  FILE *f;  \/* file being read *\/$/;"	m	struct:__anon4	file:
f	.\dep\Lua\src\lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	.\dep\Lua\src\lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	.\dep\Lua\src\lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	.\dep\Lua\src\lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc
f	.\dep\Lua\src\lstrlib.c	/^  float f;$/;"	m	union:Ftypes	file:
f	.\include\lua\lauxlib.h	/^  FILE *f;  \/* stream (NULL for incompletely created streams) *\/$/;"	m	struct:luaL_Stream
f	.\include\lua\lobject.h	/^  lua_CFunction f; \/* light C functions *\/$/;"	m	union:Value
f	.\include\lua\lobject.h	/^  lua_CFunction f;$/;"	m	struct:CClosure
f	.\include\lua\lparser.h	/^  Proto *f;  \/* current function header *\/$/;"	m	struct:FuncState
f	.\include\lua\lparser.h	/^  int f;  \/* patch list of 'exit when false' *\/$/;"	m	struct:expdesc
f	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    void f() {}$/;"	f	struct:S
f	.\include\sol\test_usertypes.cpp	/^	void f(const self_test& t) {$/;"	f	struct:self_test
f1	.\include\sol\test_functions.cpp	/^int f1(int) { return 32; }$/;"	f
f2	.\include\sol\test_functions.cpp	/^int f2(int, int) { return 1; }$/;"	f
f3	.\include\sol\test_functions.cpp	/^	double f3(int, int) {$/;"	f	struct:fer
f_call	.\dep\Lua\src\lapi.c	/^static void f_call (lua_State *L, void *ud) {$/;"	f	file:
f_flush	.\dep\Lua\src\liolib.c	/^static int f_flush (lua_State *L) {$/;"	f	file:
f_gc	.\dep\Lua\src\liolib.c	/^static int f_gc (lua_State *L) {$/;"	f	file:
f_lines	.\dep\Lua\src\liolib.c	/^static int f_lines (lua_State *L) {$/;"	f	file:
f_luaopen	.\dep\Lua\src\lstate.c	/^static void f_luaopen (lua_State *L, void *ud) {$/;"	f	file:
f_parser	.\dep\Lua\src\ldo.c	/^static void f_parser (lua_State *L, void *ud) {$/;"	f	file:
f_read	.\dep\Lua\src\liolib.c	/^static int f_read (lua_State *L) {$/;"	f	file:
f_seek	.\dep\Lua\src\liolib.c	/^static int f_seek (lua_State *L) {$/;"	f	file:
f_setvbuf	.\dep\Lua\src\liolib.c	/^static int f_setvbuf (lua_State *L) {$/;"	f	file:
f_tostring	.\dep\Lua\src\liolib.c	/^static int f_tostring (lua_State *L) {$/;"	f	file:
f_write	.\dep\Lua\src\liolib.c	/^static int f_write (lua_State *L) {$/;"	f	file:
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Face           face;      \/* parent face object              *\/$/;"	m	struct:FT_SizeRec_
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Face           face;$/;"	m	struct:FT_GlyphSlotRec_
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Face      face;$/;"	m	struct:FT_CharMapRec_
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Done_Face( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Face_CheckTrueTypePatents( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Face_GetVariantSelectors( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Get_FSType_Flags( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Get_Postscript_Name( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Reference_Face( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^    FT_Face   face;$/;"	m	struct:FT_Prop_GlyphToScriptMap_
face	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^    FT_Face  face;$/;"	m	struct:FT_Prop_IncreaseXHeight_
face	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^  FT_Get_Sfnt_Name_Count( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\ftxf86.h	/^  FT_Get_X11_Font_Format( FT_Face  face );$/;"	v
face	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^  FT_Has_PS_Glyph_Names( FT_Face  face );$/;"	v
face_flags	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long           face_flags;$/;"	m	struct:FT_FaceRec_
face_id	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FTC_FaceID  face_id;$/;"	m	struct:FTC_ImageTypeRec_
face_id	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FTC_FaceID  face_id;$/;"	m	struct:FTC_ScalerRec_
face_index	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long           face_index;$/;"	m	struct:FT_FaceRec_
face_name_offset	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   face_name_offset;$/;"	m	struct:FT_WinFNT_HeaderRec_
factorToGlConstant	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^    sf::Uint32 factorToGlConstant(sf::BlendMode::Factor blendFactor)$/;"	f	namespace:__anon127
factory_test	.\include\sol\test_usertypes.cpp	/^	factory_test() { a = true_a; }$/;"	f	struct:factory_test	file:
factory_test	.\include\sol\test_usertypes.cpp	/^struct factory_test {$/;"	s	file:
fail_on_newindex	.\include\sol\single\sol\sol.hpp	/^		inline int fail_on_newindex(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail
fail_on_newindex	.\include\sol\sol\table_core.hpp	/^		inline int fail_on_newindex(lua_State* L) {$/;"	f	namespace:sol::detail
failed	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        std::size_t failed;$/;"	m	struct:Catch::Counts
failedButOk	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        std::size_t failedButOk;$/;"	m	struct:Catch::Counts
failedString	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            static const char* failedString() { return "FAILED"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter
failedString	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            static const char* failedString() { return "failed"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter
failingCase	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^        void failingCase()$/;"	f	class:__anon185::TestClass
fakeTestCase	.\include\sol\Catch\projects\SelfTest\CmdLineTests.cpp	/^inline Catch::TestCase fakeTestCase( const char* name, const char* desc = "" ){ return Catch::makeTestCase( CATCH_NULL, "", name, desc, CATCH_INTERNAL_LINEINFO ); }$/;"	f
fakeTestCase	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^inline Catch::TestCase fakeTestCase( const char* name, const char* desc = "" ){ return Catch::makeTestCase( CATCH_NULL, "", name, desc, CATCH_INTERNAL_LINEINFO ); }$/;"	f
false	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	79;"	d
false	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	83;"	d
family	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        std::string family; \/\/\/< The font family$/;"	m	struct:sf::Font::Info
family	.\include\SFML\Graphics\Font.hpp	/^        std::string family; \/\/\/< The font family$/;"	m	struct:sf::Font::Info
family_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   family_blues      [14];$/;"	m	struct:PS_PrivateRec_
family_name	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_String*        family_name;$/;"	m	struct:FT_FaceRec_
family_name	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*  family_name;$/;"	m	struct:PS_FontInfoRec_
family_other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   family_other_blues[10];$/;"	m	struct:PS_PrivateRec_
fast	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint16 fast[1 << STBI__ZFAST_BITS];$/;"	m	struct:__anon101
fast	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc  fast[1 << FAST_BITS];$/;"	m	struct:__anon97
fast_ac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__int16 fast_ac[4][1 << FAST_BITS];$/;"	m	struct:__anon98
fasttm	.\dep\Lua\src\ltm.h	51;"	d
fasttm	.\include\lua\ltm.h	51;"	d
fatal	.\dep\Lua\src\luac.c	/^static void fatal(const char* message)$/;"	f	file:
fatal	.\include\sol\Catch\include\internal\catch_fatal_condition.hpp	/^    inline void fatal( std::string const& message, int exitCode ) {$/;"	f	namespace:Catch
fchecksize	.\dep\Lua\src\lundump.c	/^static void fchecksize (LoadState *S, size_t size, const char *tname) {$/;"	f	file:
fd_bytes	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          fd_bytes;$/;"	m	struct:CID_FaceInfoRec_
fdct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_forward_dct * fdct;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_forward_dct
fer	.\include\sol\test_functions.cpp	/^struct fer {$/;"	s	file:
ffi	.\include\sol\single\sol\sol.hpp	/^		ffi,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
ffi	.\include\sol\sol\state_view.hpp	/^		ffi,$/;"	m	class:sol::lib
field	.\dep\Lua\src\lparser.c	/^static void field (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<T, false, false, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<T, false, false, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<T, false, true, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<T, true, raw, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<metatable_key_t, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\single\sol\sol.hpp	/^		struct field_getter<void*, false, true, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<T, false, false, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<T, false, false, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<T, false, true, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<T, true, raw, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<metatable_key_t, b, raw, C> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::stack
field_getter	.\include\sol\sol\stack_field.hpp	/^		struct field_getter<void*, false, true, C> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<T, b, true, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<T, false, false, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<T, false, false, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<T, false, true, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<T, true, raw, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<metatable_key_t, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\single\sol\sol.hpp	/^		struct field_setter<void*, false, true, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<T, b, true, C> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<T, false, false, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<T, false, false, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<T, false, true, std::enable_if_t<std::is_integral<T>::value>> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<T, true, raw, std::enable_if_t<meta::is_c_str<T>::value>> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<metatable_key_t, b, raw, C> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::stack
field_setter	.\include\sol\sol\stack_field.hpp	/^		struct field_setter<void*, false, true, C> {$/;"	s	namespace:sol::stack
fieldargs	.\dep\Lua\src\lbitlib.c	/^static int fieldargs (lua_State *L, int farg, int *width) {$/;"	f	file:
fieldsel	.\dep\Lua\src\lparser.c	/^static void fieldsel (LexState *ls, expdesc *v) {$/;"	f	file:
file	.\include\sol\Catch\include\internal\catch_common.h	/^        std::string file;$/;"	m	struct:Catch::SourceLineInfo
file	.\include\sol\Catch\single_include\catch.hpp	/^        std::string file;$/;"	m	struct:Catch::SourceLineInfo
file	.\include\sol\single\sol\sol.hpp	/^		file = LUA_ERRFILE,$/;"	m	class:sol::sol::call_syntax::call_status::load_status
file	.\include\sol\sol\types.hpp	/^		file = LUA_ERRFILE,$/;"	m	class:sol::call_syntax::call_status::load_status
file_size	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   file_size;$/;"	m	struct:FT_WinFNT_HeaderRec_
file_type	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  file_type;$/;"	m	struct:FT_WinFNT_HeaderRec_
filelineParser	.\include\sol\Catch\scripts\approvalTests.py	/^filelineParser = re.compile( r'(.*\\..pp:)([0-9]*)(.*)' )$/;"	v
filenameParser	.\include\sol\Catch\scripts\approvalTests.py	/^filenameParser = re.compile( r'(.*)\/(.*\\..pp:)(.*)' )$/;"	v
filenamesAsTags	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool filenamesAsTags;$/;"	m	struct:Catch::ConfigData
files	.\include\sol\Catch\scripts\approve.py	/^	files = [os.path.join( rootPath, f ) for f in sys.argv[1:]]$/;"	v
files	.\include\sol\Catch\scripts\approve.py	/^	files = glob.glob( os.path.join( rootPath, "*.unapproved.txt" ) )$/;"	v
fill	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int fill;$/;"	m	struct:__anon92
fillAndPushBuffer	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^bool SoundStream::fillAndPushBuffer(unsigned int bufferNum)$/;"	f	class:sf::SoundStream
fillFileBuffer	.\src\src\Logger.cpp	/^void Logger::fillFileBuffer(std::string& outputBuffer, const std::string& tag,$/;"	f	class:Logger
fillOutputBuffer	.\src\src\Logger.cpp	/^void Logger::fillOutputBuffer(std::string& outputBuffer, const std::string& tag,$/;"	f	class:Logger
fillQueue	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^bool SoundStream::fillQueue()$/;"	f	class:sf::SoundStream
filterEvent	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::filterEvent(const Event& event)$/;"	f	class:sf::Window
filterLine	.\include\sol\Catch\scripts\approvalTests.py	/^def filterLine( line ):$/;"	f
filterTests	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    std::vector<TestCase> filterTests( std::vector<TestCase> const& testCases, TestSpec const& testSpec, IConfig const& config ) {$/;"	f	namespace:Catch
filterpc	.\dep\Lua\src\ldebug.c	/^static int filterpc (int pc, int jmptarget) {$/;"	f	file:
finalizer	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Generic_Finalizer  finalizer;$/;"	m	struct:FT_Generic_
find	.\dep\SFML\src\SFML\System\String.cpp	/^std::size_t String::find(const String& str, std::size_t start) const$/;"	f	class:sf::String
find	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    Option<TagAlias> TagAliasRegistry::find( std::string const& alias ) const {$/;"	f	class:Catch::TagAliasRegistry
findCharacterPos	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^Vector2f Text::findCharacterPos(std::size_t index) const$/;"	f	class:sf::Text
findExecutableName	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    std::string findExecutableName()$/;"	f	namespace:__anon151
findGeneratorsForCurrentTest	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        IGeneratorsForTest* findGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context
findGlyphRect	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^IntRect Font::findGlyphRect(Page& page, unsigned int width, unsigned int height) const$/;"	f	class:sf::Font
findMax	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        static std::size_t& findMax( std::size_t& i, std::size_t& j, std::size_t& k ) {$/;"	f	struct:Catch::ConsoleReporter
findOrAddSubSection	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        RunningSection* findOrAddSubSection( std::string const& name, bool& changed ) {$/;"	f	class:Catch::RunningSection
find_call	.\include\sol\single\sol\sol.hpp	/^		void find_call(std::integral_constant<bool, is_index> idx, lua_State* L, bool& found, int& ret, const sol::string_detail::string_shim& accessor) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
find_call	.\include\sol\sol\usertype_metatable.hpp	/^		void find_call(std::integral_constant<bool, is_index> idx, lua_State* L, bool& found, int& ret, const sol::string_detail::string_shim& accessor) {$/;"	f	struct:sol::usertype_metatable
find_in_pack_v	.\include\sol\single\sol\sol.hpp	/^		struct find_in_pack_v : boolean<false> { };$/;"	s	namespace:sol::meta
find_in_pack_v	.\include\sol\single\sol\sol.hpp	/^		struct find_in_pack_v<V, Vs1, Vs...> : any<boolean<(V::value == Vs1::value)>, find_in_pack_v<V, Vs...>> { };$/;"	s	namespace:sol::meta
find_in_pack_v	.\include\sol\sol\traits.hpp	/^		struct find_in_pack_v : boolean<false> { };$/;"	s	namespace:sol::meta
find_in_pack_v	.\include\sol\sol\traits.hpp	/^		struct find_in_pack_v<V, Vs1, Vs...> : any<boolean<(V::value == Vs1::value)>, find_in_pack_v<V, Vs...>> { };$/;"	s	namespace:sol::meta
findfield	.\dep\Lua\src\lauxlib.c	/^static int findfield (lua_State *L, int objidx, int level) {$/;"	f	file:
findfield	.\include\sol\single\sol\sol.hpp	/^inline static int findfield(lua_State *L, int objidx, int level) {$/;"	f
findfile	.\dep\Lua\src\loadlib.c	/^static const char *findfile (lua_State *L, const char *name,$/;"	f	file:
findgotos	.\dep\Lua\src\lparser.c	/^static void findgotos (LexState *ls, Labeldesc *lb) {$/;"	f	file:
findindex	.\dep\Lua\src\ltable.c	/^static unsigned int findindex (lua_State *L, Table *t, StkId key) {$/;"	f	file:
findlabel	.\dep\Lua\src\lparser.c	/^static int findlabel (LexState *ls, int g) {$/;"	f	file:
findlast	.\dep\Lua\src\lgc.c	/^static GCObject **findlast (GCObject **p) {$/;"	f	file:
findloader	.\dep\Lua\src\loadlib.c	/^static void findloader (lua_State *L, const char *name) {$/;"	f	file:
findlocal	.\dep\Lua\src\ldebug.c	/^static const char *findlocal (lua_State *L, CallInfo *ci, int n,$/;"	f	file:
findpcall	.\dep\Lua\src\ldo.c	/^static CallInfo *findpcall (lua_State *L) {$/;"	f	file:
findsetreg	.\dep\Lua\src\ldebug.c	/^static int findsetreg (Proto *p, int lastpc, int reg) {$/;"	f	file:
findvararg	.\dep\Lua\src\ldebug.c	/^static const char *findvararg (CallInfo *ci, int n, StkId *pos) {$/;"	f	file:
finger	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int finger; \/\/\/< Index of the finger in case of multi-touch events$/;"	m	struct:sf::Event::TouchEvent
finger	.\include\SFML\Window\Event.hpp	/^        unsigned int finger; \/\/\/< Index of the finger in case of multi-touch events$/;"	m	struct:sf::Event::TouchEvent
finishCcall	.\dep\Lua\src\ldo.c	/^static void finishCcall (lua_State *L, int status) {$/;"	f	file:
finish_regs	.\include\sol\single\sol\sol.hpp	/^		int finish_regs(regs_t& l, int& index) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
finish_regs	.\include\sol\sol\usertype_metatable.hpp	/^		int finish_regs(regs_t& l, int& index) {$/;"	f	struct:sol::usertype_metatable
finishpcall	.\dep\Lua\src\lbaselib.c	/^static int finishpcall (lua_State *L, int status, lua_KContext extra) {$/;"	f	file:
finobj	.\dep\Lua\src\lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
finobj	.\include\lua\lstate.h	/^  GCObject *finobj;  \/* list of collectable objects with finalizers *\/$/;"	m	struct:global_State
first	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc first;$/;"	m	struct:__anon107
first	.\include\sol\Catch\projects\SelfTest\GeneratorTests.cpp	/^struct IntPair { int first, second; };$/;"	m	struct:IntPair	file:
first_addon_message	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int first_addon_message;	\/* code for first string in addon table *\/$/;"	m	struct:jpeg_error_mgr
first_char	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    first_char;$/;"	m	struct:FT_WinFNT_HeaderRec_
first_row_filter	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc first_row_filter[5] =$/;"	v
first_type	.\include\sol\single\sol\sol.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, int, T>& first_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
first_type	.\include\sol\sol\bind_traits.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, int, T>& first_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
firstcode	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint16 firstcode[16];$/;"	m	struct:__anon101
firstgoto	.\dep\Lua\src\lparser.c	/^  int firstgoto;  \/* index of first pending goto in this block *\/$/;"	m	struct:BlockCnt	file:
firstlabel	.\dep\Lua\src\lparser.c	/^  int firstlabel;  \/* index of first label in this block *\/$/;"	m	struct:BlockCnt	file:
firstlocal	.\dep\Lua\src\lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
firstlocal	.\include\lua\lparser.h	/^  int firstlocal;  \/* index of first local var (in Dyndata array) *\/$/;"	m	struct:FuncState
firstsymbol	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint16 firstsymbol[16];$/;"	m	struct:__anon101
fixAllFilesInDir	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^def fixAllFilesInDir( dir ):$/;"	f
fixFile	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^def fixFile( path ):$/;"	f
fixed	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__Subframe_Fixed fixed;$/;"	m	union:__anon35::__anon36
fixedgc	.\dep\Lua\src\lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State
fixedgc	.\include\lua\lstate.h	/^  GCObject *fixedgc;  \/* list of objects not to be collected *\/$/;"	m	struct:global_State
fixjump	.\dep\Lua\src\lcode.c	/^static void fixjump (FuncState *fs, int pc, int dest) {$/;"	f	file:
flAirAbsorptionGainHF	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flAirAbsorptionGainHF;$/;"	m	struct:__anon23
flDecayHFRatio	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flDecayHFRatio;$/;"	m	struct:__anon23
flDecayLFRatio	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flDecayLFRatio;$/;"	m	struct:__anon23
flDecayTime	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flDecayTime;$/;"	m	struct:__anon23
flDensity	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flDensity;$/;"	m	struct:__anon23
flDiffusion	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flDiffusion;$/;"	m	struct:__anon23
flEchoDepth	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flEchoDepth;$/;"	m	struct:__anon23
flEchoTime	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flEchoTime;$/;"	m	struct:__anon23
flGain	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flGain;$/;"	m	struct:__anon23
flGainHF	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flGainHF;$/;"	m	struct:__anon23
flGainLF	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flGainLF;$/;"	m	struct:__anon23
flHFReference	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flHFReference;$/;"	m	struct:__anon23
flLFReference	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flLFReference;$/;"	m	struct:__anon23
flLateReverbDelay	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flLateReverbDelay;$/;"	m	struct:__anon23
flLateReverbGain	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flLateReverbGain;$/;"	m	struct:__anon23
flLateReverbPan	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flLateReverbPan[3];$/;"	m	struct:__anon23
flModulationDepth	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flModulationDepth;$/;"	m	struct:__anon23
flModulationTime	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flModulationTime;$/;"	m	struct:__anon23
flReflectionsDelay	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flReflectionsDelay;$/;"	m	struct:__anon23
flReflectionsGain	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flReflectionsGain;$/;"	m	struct:__anon23
flReflectionsPan	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flReflectionsPan[3];$/;"	m	struct:__anon23
flRoomRolloffFactor	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    float flRoomRolloffFactor;$/;"	m	struct:__anon23
flags	.\.ycm_extra_conf.py	/^flags = [$/;"	v
flags	.\dep\Lua\src\lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flags	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UInt         flags;$/;"	m	struct:FT_Open_Args_
flags	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Int32    flags;$/;"	m	struct:FTC_ImageTypeRec_
flags	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    int                     flags;$/;"	m	struct:FT_Raster_Params_
flags	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    int         flags;           \/* outline masks                      *\/$/;"	m	struct:FT_Outline_
flags	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   flags;$/;"	m	struct:FT_WinFNT_HeaderRec_
flags	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon108
flags	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^        const int flags = MSG_NOSIGNAL;$/;"	m	namespace:__anon134	file:
flags	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t      flags;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
flags	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        uint32_t flags;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
flags	.\include\lua\lobject.h	/^  lu_byte flags;  \/* 1<<p means tagmethod(p) is not present *\/$/;"	m	struct:Table
flags	.\include\sol\bootstrap.py	/^def flags(*args):$/;"	f
flib	.\dep\Lua\src\liolib.c	/^static const luaL_Reg flib[] = {$/;"	v	file:
flipHorizontally	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::flipHorizontally()$/;"	f	class:sf::Image
flipVertically	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::flipVertically()$/;"	f	class:sf::Image
float2fixed	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2944;"	d
float2fixed	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2972;"	d
float_nine_point_one	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    float float_nine_point_one;$/;"	m	struct:TestData	file:
floor_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long floor_bits;$/;"	m	struct:vorbis_block
floor_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t floor_bits;$/;"	m	struct:vorbis_dsp_state
fltvalue	.\dep\Lua\src\lobject.h	164;"	d
fltvalue	.\include\lua\lobject.h	164;"	d
flush	.\src\src\Logger.cpp	/^void Logger::flush() {$/;"	f	class:Logger
flushBlocks	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^void SoundFileWriterOgg::flushBlocks()$/;"	f	class:sf::priv::SoundFileWriterOgg
followWindow	.\src\src\Game.cpp	/^void Game::followWindow(Window* w) {$/;"	f	class:Game
font_bbox	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_BBox         font_bbox;$/;"	m	struct:CID_FaceInfoRec_
font_dicts	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    CID_FaceDict    font_dicts;$/;"	m	struct:CID_FaceInfoRec_
font_info	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_FontInfoRec  font_info;$/;"	m	struct:CID_FaceInfoRec_
font_infos	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_FontInfo      font_infos[T1_MAX_MM_DESIGNS + 1];$/;"	m	struct:PS_BlendRec_
font_matrix	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Matrix      font_matrix;$/;"	m	struct:CID_FaceDictRec_
font_offset	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Vector      font_offset;$/;"	m	struct:CID_FaceDictRec_
font_type	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte        font_type;$/;"	m	struct:CID_FaceDictRec_
foo	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^inline void foo() {}$/;"	f
foo	.\include\sol\examples\usertype.cpp	/^    foo(std::string name): name(std::string(name)) {}$/;"	f	struct:foo
foo	.\include\sol\examples\usertype.cpp	/^struct foo {$/;"	s	file:
fooptr_t	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^typedef void (*fooptr_t)();$/;"	t	file:
footer	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__FrameFooter footer;$/;"	m	struct:__anon42
for_each	.\include\sol\single\sol\sol.hpp	/^		void for_each(std::false_type, Fx&& fx) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
for_each	.\include\sol\single\sol\sol.hpp	/^		void for_each(std::true_type, Fx&& fx) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
for_each	.\include\sol\sol\state_view.hpp	/^		void for_each(Fx&& fx) {$/;"	f	class:sol::state_view
for_each	.\include\sol\sol\table_core.hpp	/^		void for_each(Fx&& fx) const {$/;"	f	class:sol::basic_table_core
for_each	.\include\sol\sol\table_core.hpp	/^		void for_each(std::false_type, Fx&& fx) const {$/;"	f	class:sol::basic_table_core
for_each	.\include\sol\sol\table_core.hpp	/^		void for_each(std::true_type, Fx&& fx) const {$/;"	f	class:sol::basic_table_core
forbody	.\dep\Lua\src\lparser.c	/^static void forbody (LexState *ls, int base, int line, int nvars, int isnum) {$/;"	f	file:
forceColour	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool forceColour;$/;"	m	struct:Catch::ConfigData
forceColour	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual bool forceColour() const { return m_data.forceColour; }$/;"	f	class:Catch::Config
force_bold	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Bool    force_bold;$/;"	m	struct:PS_PrivateRec_
forcebold_threshold	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed       forcebold_threshold;$/;"	m	struct:CID_FaceDictRec_
forlimit	.\dep\Lua\src\lvm.c	/^static int forlimit (const TValue *obj, lua_Integer *p, lua_Integer step,$/;"	f	file:
forlist	.\dep\Lua\src\lparser.c	/^static void forlist (LexState *ls, TString *indexname) {$/;"	f	file:
format	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Glyph_Format   format;$/;"	m	struct:FT_GlyphSlotRec_
format	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Byte   format;$/;"	m	struct:FTC_SBitRec_
format	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Glyph_Format        format;$/;"	m	struct:FT_GlyphRec_
fornum	.\dep\Lua\src\lparser.c	/^static void fornum (LexState *ls, TString *varname, int line) {$/;"	f	file:
forstat	.\dep\Lua\src\lparser.c	/^static void forstat (LexState *ls, int line) {$/;"	f	file:
forward	.\include\sol\single\sol\sol.hpp	/^			-> decltype(resolve_i(types<meta::function_signature_t<decltype(&U::operator())>>(), std::forward<F>(f))) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail::std
forward	.\include\sol\single\sol\sol.hpp	/^		auto unwrap(T&& item) -> decltype(std::forward<T>(item)) {$/;"	f	namespace:sol::meta::meta_detail
forward	.\include\sol\single\sol\sol.hpp	/^		basic_table_core(T&& r) noexcept : base_t(std::forward<T>(r)) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
forward	.\include\sol\single\sol\sol.hpp	/^		inline auto resolve_i(types<>, F&& f) -> decltype(resolve_f(meta::has_deducible_signature<U>(), std::forward<F>(f))) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail::std
forward	.\include\sol\single\sol\sol.hpp	/^		inline auto resolve_i(types<Args...>, F&& f) -> decltype(resolve_i(types<R(Args...)>(), std::forward<F>(f))) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail::std
forward	.\include\sol\single\sol\sol.hpp	/^	inline auto resolve(F&& f) -> decltype(detail::resolve_i(types<Sig...>(), std::forward<F>(f))) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::std
forward	.\include\sol\sol\resolve.hpp	/^			-> decltype(resolve_i(types<meta::function_signature_t<decltype(&U::operator())>>(), std::forward<F>(f))) {$/;"	f	class:sol::detail::std
forward	.\include\sol\sol\resolve.hpp	/^		inline auto resolve_i(types<>, F&& f) -> decltype(resolve_f(meta::has_deducible_signature<U>(), std::forward<F>(f))) {$/;"	f	class:sol::detail::std
forward	.\include\sol\sol\resolve.hpp	/^		inline auto resolve_i(types<Args...>, F&& f) -> decltype(resolve_i(types<R(Args...)>(), std::forward<F>(f))) {$/;"	f	class:sol::detail::std
forward	.\include\sol\sol\resolve.hpp	/^	inline auto resolve(F&& f) -> decltype(detail::resolve_i(types<Sig...>(), std::forward<F>(f))) {$/;"	f	class:sol::std
forward	.\include\sol\sol\table_core.hpp	/^		basic_table_core(T&& r) noexcept : base_t(std::forward<T>(r)) {$/;"	f	class:sol::basic_table_core
forward	.\include\sol\sol\traits.hpp	/^		auto unwrap(T&& item) -> decltype(std::forward<T>(item)) {$/;"	f	namespace:sol::meta::meta_detail
forwardEvent	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    void (*forwardEvent)(const Event& event);$/;"	m	struct:sf::priv::ActivityStates
forwardEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::forwardEvent(const Event& event)$/;"	f	class:sf::priv::WindowImplAndroid
forward_tuple	.\include\sol\single\sol\sol.hpp	/^		auto forward_tuple(Tuple&& tuple) {$/;"	f	namespace:sol::meta::meta_detail
forward_tuple	.\include\sol\sol\traits.hpp	/^		auto forward_tuple(Tuple&& tuple) {$/;"	f	namespace:sol::meta::meta_detail
fpToString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string fpToString( T value, int precision ) {$/;"	f	namespace:Catch
fps	.\src\include\FPS.h	/^    unsigned int fps;$/;"	m	class:FPS
frame	.\src\include\FPS.h	/^    unsigned int frame;$/;"	m	class:FPS
frame_number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__uint32 frame_number;$/;"	m	union:__anon39::__anon40
frame_samples	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned frame_samples;$/;"	m	struct:__anon47
frealloc	.\dep\Lua\src\lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
frealloc	.\include\lua\lstate.h	/^  lua_Alloc frealloc;  \/* function to reallocate memory *\/$/;"	m	struct:global_State
free	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Free_Func     free;$/;"	m	struct:FT_MemoryRec_
freeLclosure	.\dep\Lua\src\lgc.c	/^static void freeLclosure (lua_State *L, LClosure *cl) {$/;"	f	file:
free_args_list	.\include\sol\single\sol\sol.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, args_list, types<first_type, Args...>> free_args_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_args_list	.\include\sol\single\sol\sol.hpp	/^				typedef types<T, Arg> free_args_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
free_args_list	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::args_list free_args_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
free_args_list	.\include\sol\single\sol\sol.hpp	/^		typedef types<object_type&, FArgs...> free_args_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
free_args_list	.\include\sol\single\sol\sol.hpp	/^		typedef types<object_type&, return_type> free_args_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
free_args_list	.\include\sol\sol\bind_traits.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, args_list, types<first_type, Args...>> free_args_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_args_list	.\include\sol\sol\bind_traits.hpp	/^				typedef types<T, Arg> free_args_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
free_args_list	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::args_list free_args_list;$/;"	t	struct:sol::wrapper
free_args_list	.\include\sol\sol\wrapper.hpp	/^		typedef types<object_type&, FArgs...> free_args_list;$/;"	t	struct:sol::member_function_wrapper
free_args_list	.\include\sol\sol\wrapper.hpp	/^		typedef types<object_type&, return_type> free_args_list;$/;"	t	struct:sol::wrapper
free_arity	.\include\sol\single\sol\sol.hpp	/^				static const std::size_t free_arity = 2;$/;"	m	struct:sol::meta::meta_detail::callable_traits
free_arity	.\include\sol\single\sol\sol.hpp	/^				static const std::size_t free_arity = sizeof...(Args)+static_cast<std::size_t>(!std::is_void<T>::value);$/;"	m	struct:sol::meta::meta_detail::basic_traits
free_arity	.\include\sol\single\sol\sol.hpp	/^		static const std::size_t free_arity = base_t::free_arity - meta::count_for<is_transparent_argument, typename base_t::args_list>::value;$/;"	m	struct:sol::sol::call_syntax::call_status::type::lua_bind_traits
free_arity	.\include\sol\sol\bind_traits.hpp	/^				static const std::size_t free_arity = 2;$/;"	m	struct:sol::meta::meta_detail::callable_traits
free_arity	.\include\sol\sol\bind_traits.hpp	/^				static const std::size_t free_arity = sizeof...(Args)+static_cast<std::size_t>(!std::is_void<T>::value);$/;"	m	struct:sol::meta::meta_detail::basic_traits
free_arity	.\include\sol\sol\types.hpp	/^		static const std::size_t free_arity = base_t::free_arity - meta::count_for<is_transparent_argument, typename base_t::args_list>::value;$/;"	m	struct:sol::call_syntax::call_status::type::lua_bind_traits
free_function	.\include\sol\test_tables.cpp	/^std::string free_function() {$/;"	f
free_function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(*free_function_pointer_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
free_function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, R(*)(Args...), R(*)(first_type, Args...)> free_function_pointer_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(*free_function_pointer_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
free_function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, R(*)(Args...), R(*)(first_type, Args...)> free_function_pointer_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_function_type	.\include\sol\single\sol\sol.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, R(Args...), R(first_type, Args...)> free_function_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_function_type	.\include\sol\sol\bind_traits.hpp	/^				typedef std::conditional_t<std::is_void<T>::value, R(Args...), R(first_type, Args...)> free_function_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
free_glyph_data	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Incremental_FreeGlyphDataFunc    free_glyph_data;$/;"	m	struct:FT_Incremental_FuncsRec_
free_in_buffer	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  size_t free_in_buffer;	\/* # of byte spaces remaining in buffer *\/$/;"	m	struct:jpeg_destination_mgr
freeexp	.\dep\Lua\src\lcode.c	/^static void freeexp (FuncState *fs, expdesc *e) {$/;"	f	file:
freeexps	.\dep\Lua\src\lcode.c	/^static void freeexps (FuncState *fs, expdesc *e1, expdesc *e2) {$/;"	f	file:
freelist	.\dep\Lua\src\lauxlib.c	593;"	d	file:
freeobj	.\dep\Lua\src\lgc.c	/^static void freeobj (lua_State *L, GCObject *o) {$/;"	f	file:
freereg	.\dep\Lua\src\lcode.c	/^static void freereg (FuncState *fs, int reg) {$/;"	f	file:
freereg	.\dep\Lua\src\lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freereg	.\include\lua\lparser.h	/^  lu_byte freereg;  \/* first free register *\/$/;"	m	struct:FuncState
freestack	.\dep\Lua\src\lstate.c	/^static void freestack (lua_State *L) {$/;"	f	file:
freeze	.\src\include\Trait.h	/^	bool freeze;	\/\/ On collision freeze the other object$/;"	m	class:Trait
fromIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^        std::size_t fromIndex;$/;"	m	struct:ColourString::ColourIndex	file:
fromstate	.\dep\Lua\src\lstate.c	70;"	d	file:
front_type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
front_type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
front_type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
front_type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
fs	.\dep\Lua\src\llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fs	.\include\lua\llex.h	/^  struct FuncState *fs;  \/* current function (parser) *\/$/;"	m	struct:LexState	typeref:struct:LexState::FuncState
fsSelection	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  fsSelection;$/;"	m	struct:TT_OS2_
fsType	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   fsType;$/;"	m	struct:TT_OS2_
ft_atol	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	144;"	d
ft_encoding_adobe_custom	.\dep\SFML\extlibs\headers\freetype2\freetype.h	789;"	d
ft_encoding_adobe_expert	.\dep\SFML\extlibs\headers\freetype2\freetype.h	788;"	d
ft_encoding_adobe_standard	.\dep\SFML\extlibs\headers\freetype2\freetype.h	787;"	d
ft_encoding_apple_roman	.\dep\SFML\extlibs\headers\freetype2\freetype.h	790;"	d
ft_encoding_big5	.\dep\SFML\extlibs\headers\freetype2\freetype.h	783;"	d
ft_encoding_gb2312	.\dep\SFML\extlibs\headers\freetype2\freetype.h	782;"	d
ft_encoding_johab	.\dep\SFML\extlibs\headers\freetype2\freetype.h	785;"	d
ft_encoding_latin_1	.\dep\SFML\extlibs\headers\freetype2\freetype.h	779;"	d
ft_encoding_latin_2	.\dep\SFML\extlibs\headers\freetype2\freetype.h	780;"	d
ft_encoding_none	.\dep\SFML\extlibs\headers\freetype2\freetype.h	776;"	d
ft_encoding_sjis	.\dep\SFML\extlibs\headers\freetype2\freetype.h	781;"	d
ft_encoding_symbol	.\dep\SFML\extlibs\headers\freetype2\freetype.h	778;"	d
ft_encoding_unicode	.\dep\SFML\extlibs\headers\freetype2\freetype.h	777;"	d
ft_encoding_wansung	.\dep\SFML\extlibs\headers\freetype2\freetype.h	784;"	d
ft_fclose	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	104;"	d
ft_fopen	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	105;"	d
ft_fread	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	106;"	d
ft_fseek	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	107;"	d
ft_ftell	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	108;"	d
ft_glyph_bbox_gridfit	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	332;"	d
ft_glyph_bbox_pixels	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	334;"	d
ft_glyph_bbox_subpixels	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	331;"	d
ft_glyph_bbox_truncate	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	333;"	d
ft_glyph_bbox_unscaled	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	330;"	d
ft_glyph_format_bitmap	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	736;"	d
ft_glyph_format_composite	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	735;"	d
ft_glyph_format_none	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	734;"	d
ft_glyph_format_outline	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	737;"	d
ft_glyph_format_plotter	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	738;"	d
ft_jmp_buf	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	157;"	d
ft_kerning_default	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2930;"	d
ft_kerning_unfitted	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2931;"	d
ft_kerning_unscaled	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2932;"	d
ft_labs	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	145;"	d
ft_longjmp	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	161;"	d
ft_memchr	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	79;"	d
ft_memcmp	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	80;"	d
ft_memcpy	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	81;"	d
ft_memmove	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	82;"	d
ft_memset	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	83;"	d
ft_module_driver_has_hinter	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	130;"	d
ft_module_driver_no_outlines	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	129;"	d
ft_module_driver_scalable	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	128;"	d
ft_module_font_driver	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	123;"	d
ft_module_hinter	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	125;"	d
ft_module_renderer	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	124;"	d
ft_module_styler	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	126;"	d
ft_open_driver	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1838;"	d
ft_open_memory	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1835;"	d
ft_open_params	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1839;"	d
ft_open_pathname	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1837;"	d
ft_open_stream	.\dep\SFML\extlibs\headers\freetype2\freetype.h	1836;"	d
ft_outline_even_odd_fill	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	448;"	d
ft_outline_high_precision	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	451;"	d
ft_outline_ignore_dropouts	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	450;"	d
ft_outline_none	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	446;"	d
ft_outline_owner	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	447;"	d
ft_outline_reverse_fill	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	449;"	d
ft_outline_single_pass	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	452;"	d
ft_pixel_mode_grays	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	200;"	d
ft_pixel_mode_mono	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	199;"	d
ft_pixel_mode_none	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	198;"	d
ft_pixel_mode_pal2	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	201;"	d
ft_pixel_mode_pal4	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	202;"	d
ft_ptrdiff_t	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	38;"	d
ft_qsort	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	121;"	d
ft_raster_flag_aa	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	963;"	d
ft_raster_flag_clip	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	965;"	d
ft_raster_flag_default	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	962;"	d
ft_raster_flag_direct	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	964;"	d
ft_render_mode_mono	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2866;"	d
ft_render_mode_normal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	2865;"	d
ft_scalloc	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	131;"	d
ft_setjmp	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	162;"	d
ft_sfnt_head	.\dep\SFML\extlibs\headers\freetype2\tttables.h	612;"	d
ft_sfnt_hhea	.\dep\SFML\extlibs\headers\freetype2\tttables.h	615;"	d
ft_sfnt_maxp	.\dep\SFML\extlibs\headers\freetype2\tttables.h	613;"	d
ft_sfnt_os2	.\dep\SFML\extlibs\headers\freetype2\tttables.h	614;"	d
ft_sfnt_pclt	.\dep\SFML\extlibs\headers\freetype2\tttables.h	618;"	d
ft_sfnt_post	.\dep\SFML\extlibs\headers\freetype2\tttables.h	617;"	d
ft_sfnt_vhea	.\dep\SFML\extlibs\headers\freetype2\tttables.h	616;"	d
ft_sfree	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	132;"	d
ft_smalloc	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	133;"	d
ft_sprintf	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	109;"	d
ft_srealloc	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	134;"	d
ft_strcat	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	84;"	d
ft_strcmp	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	85;"	d
ft_strcpy	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	86;"	d
ft_strlen	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	87;"	d
ft_strncmp	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	88;"	d
ft_strncpy	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	89;"	d
ft_strrchr	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	90;"	d
ft_strstr	.\dep\SFML\extlibs\headers\freetype2\config\ftstdlib.h	91;"	d
fullConfig	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Ptr<IConfig const> fullConfig() const { return m_fullConfig; }$/;"	f	struct:Catch::ReporterConfig
full_name	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*  full_name;$/;"	m	struct:PS_FontInfoRec_
fullscreen	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool fullscreen;$/;"	m	struct:sf::priv::ActivityStates
fullscreenWindow	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    sf::priv::WindowImplX11*              fullscreenWindow = NULL;$/;"	m	namespace:__anon151	file:
fullscreenWindow	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^    sf::priv::WindowImplWin32* fullscreenWindow = NULL;$/;"	m	namespace:__anon153	file:
fullscreenWindow	.\dep\SFML\src\SFML\Window\Window.cpp	/^    const sf::Window* fullscreenWindow = NULL;$/;"	m	namespace:__anon154	file:
fun	.\include\sol\Optional\test_optional.cpp	/^bool fun(std::string , std::experimental::optional<int> oi = std::experimental::nullopt) $/;"	f
func	.\dep\Lua\src\lapi.c	/^  StkId func;$/;"	m	struct:CallS	file:
func	.\dep\Lua\src\lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	.\dep\Lua\src\lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
func	.\include\lua\lauxlib.h	/^  lua_CFunction func;$/;"	m	struct:luaL_Reg
func	.\include\lua\lstate.h	/^  StkId func;  \/* function index in the stack *\/$/;"	m	struct:CallInfo
func_1	.\include\sol\test_functions.cpp	/^int func_1(int) {$/;"	f
func_1s	.\include\sol\test_functions.cpp	/^std::string func_1s(std::string a) {$/;"	f
func_2	.\include\sol\test_functions.cpp	/^int func_2(int, int) {$/;"	f
func_3	.\include\sol\test_functions.cpp	/^void func_3(int, int, int) {$/;"	f
func_opt_ret_bool	.\include\sol\tests.cpp	/^bool func_opt_ret_bool(sol::optional<int> i) {$/;"	f
funcargs	.\dep\Lua\src\lparser.c	/^static void funcargs (LexState *ls, expdesc *f, int line) {$/;"	f	file:
funcinfo	.\dep\Lua\src\ldebug.c	/^static void funcinfo (lua_Debug *ar, Closure *cl) {$/;"	f	file:
funcname	.\dep\Lua\src\lparser.c	/^static int funcname (LexState *ls, expdesc *v) {$/;"	f	file:
funcs	.\dep\Lua\src\lutf8lib.c	/^static const luaL_Reg funcs[] = {$/;"	v	file:
funcs	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    const FT_Incremental_FuncsRec*  funcs;$/;"	m	struct:FT_Incremental_InterfaceRec_
funcstat	.\dep\Lua\src\lparser.c	/^static void funcstat (LexState *ls, int line) {$/;"	f	file:
function	.\include\sol\Catch\include\external\clara.h	/^            void (*function)( C& );$/;"	m	struct:Clara::Detail::BoundUnaryFunction
function	.\include\sol\Catch\include\external\clara.h	/^            void (*function)( C&, T );$/;"	m	struct:Clara::Detail::BoundBinaryFunction
function	.\include\sol\single\sol\sol.hpp	/^		function = LUA_TFUNCTION,$/;"	m	class:sol::sol::call_syntax::call_status::type
function	.\include\sol\sol\types.hpp	/^		function = LUA_TFUNCTION,$/;"	m	class:sol::call_syntax::call_status::type
functionObj	.\include\sol\Catch\include\external\clara.h	/^            IArgFunction<ConfigT>* functionObj;$/;"	m	class:Clara::Detail::BoundArgFunction
function_args	.\include\sol\single\sol\sol.hpp	/^	function_arguments<Sig, Args...> function_args(Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
function_args	.\include\sol\sol\function_types.hpp	/^	function_arguments<Sig, Args...> function_args(Args&&... args) {$/;"	f	namespace:sol
function_arguments	.\include\sol\single\sol\sol.hpp	/^		function_arguments(Args&&... args) : params(std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_arguments
function_arguments	.\include\sol\single\sol\sol.hpp	/^	struct function_arguments {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
function_arguments	.\include\sol\sol\function_types.hpp	/^		function_arguments(Args&&... args) : params(std::forward<Args>(args)...) {}$/;"	f	struct:sol::function_arguments
function_arguments	.\include\sol\sol\function_types.hpp	/^	struct function_arguments {$/;"	s	namespace:sol
function_detail	.\include\sol\single\sol\sol.hpp	/^	namespace function_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
function_detail	.\include\sol\single\sol\sol.hpp	/^	namespace function_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
function_detail	.\include\sol\sol\function_types_core.hpp	/^	namespace function_detail {$/;"	n	namespace:sol
function_detail	.\include\sol\sol\function_types_overloaded.hpp	/^	namespace function_detail {$/;"	n	namespace:sol
function_detail	.\include\sol\sol\function_types_stateful.hpp	/^	namespace function_detail {$/;"	n	namespace:sol
function_detail	.\include\sol\sol\function_types_stateless.hpp	/^	namespace function_detail {$/;"	n	namespace:sol
function_detail	.\include\sol\sol\function_types_templated.hpp	/^	namespace function_detail {$/;"	n	namespace:sol
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(*function_pointer_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(*function_pointer_type)(Args..., ...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(*function_pointer_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args...) && ;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args...) &;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...) && ;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...) &;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(*function_pointer_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(*function_pointer_type)(Args..., ...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(*function_pointer_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args...) && ;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args...) &;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...) && ;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...) &;$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_pointer_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(T::* function_pointer_type)(Args..., ...);$/;"	t	struct:sol::meta::meta_detail::fx_traits
function_result	.\include\sol\single\sol\sol.hpp	/^		function_result(function_result&& o) : L(o.L), index(o.index), returncount(o.returncount) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
function_result	.\include\sol\single\sol\sol.hpp	/^		function_result(lua_State* L, int index = -1, int returncount = 0) : L(L), index(index), returncount(returncount) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
function_result	.\include\sol\single\sol\sol.hpp	/^	struct function_result : public proxy_base<function_result> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
function_result	.\include\sol\sol\function_result.hpp	/^		function_result(function_result&& o) : L(o.L), index(o.index), returncount(o.returncount) {$/;"	f	struct:sol::function_result
function_result	.\include\sol\sol\function_result.hpp	/^		function_result(lua_State* L, int index = -1, int returncount = 0) : L(L), index(index), returncount(returncount) {$/;"	f	struct:sol::function_result
function_result	.\include\sol\sol\function_result.hpp	/^	struct function_result : public proxy_base<function_result> {$/;"	s	namespace:sol
function_sig	.\include\sol\single\sol\sol.hpp	/^	struct function_sig {};$/;"	s	namespace:sol::sol
function_sig	.\include\sol\sol\types.hpp	/^	struct function_sig {};$/;"	s	namespace:sol
function_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(function_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::basic_traits
function_type	.\include\sol\single\sol\sol.hpp	/^				typedef R(function_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef decltype(&Function::operator()) function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_free_function
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_function
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_variable
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_function
function_type	.\include\sol\single\sol\sol.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_variable
function_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(function_type)(Args...);$/;"	t	struct:sol::meta::meta_detail::basic_traits
function_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R(function_type)(T&, R);$/;"	t	struct:sol::meta::meta_detail::callable_traits
function_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef decltype(&Function::operator()) function_type;$/;"	t	struct:sol::function_detail::functor_function
function_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::member_function
function_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::member_variable
function_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::upvalue_free_function
function_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::upvalue_member_function
function_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::upvalue_member_variable
function_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::upvalue_this_member_function
function_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef std::remove_pointer_t<std::decay_t<Function>> function_type;$/;"	t	struct:sol::function_detail::upvalue_this_member_variable
functions	.\include\sol\single\sol\sol.hpp	/^		Tuple functions;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
functions	.\include\sol\sol\usertype_metatable.hpp	/^		Tuple functions;$/;"	m	struct:sol::usertype_metatable
functor_function	.\include\sol\single\sol\sol.hpp	/^			functor_function(Function f, Args&&... args) : fx(std::move(f), std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
functor_function	.\include\sol\single\sol\sol.hpp	/^		struct functor_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
functor_function	.\include\sol\sol\function_types_stateful.hpp	/^			functor_function(Function f, Args&&... args) : fx(std::move(f), std::forward<Args>(args)...) {}$/;"	f	struct:sol::function_detail::functor_function
functor_function	.\include\sol\sol\function_types_stateful.hpp	/^		struct functor_function {$/;"	s	namespace:sol::function_detail
fuser	.\include\sol\test_usertypes.cpp	/^		fuser() : x(0) {}$/;"	f	struct:crapola::fuser
fuser	.\include\sol\test_usertypes.cpp	/^		fuser(int x) : x(x) {}$/;"	f	struct:crapola::fuser
fuser	.\include\sol\test_usertypes.cpp	/^		fuser(int x, int x2) : x(x * x2) {}$/;"	f	struct:crapola::fuser
fuser	.\include\sol\test_usertypes.cpp	/^	fuser() : x(0) {}$/;"	f	struct:fuser
fuser	.\include\sol\test_usertypes.cpp	/^	fuser(int x) : x(x) {}$/;"	f	struct:fuser
fuser	.\include\sol\test_usertypes.cpp	/^	struct fuser {$/;"	s	namespace:crapola	file:
fuser	.\include\sol\test_usertypes.cpp	/^struct fuser {$/;"	s	file:
fvalue	.\dep\Lua\src\lobject.h	174;"	d
fvalue	.\include\lua\lobject.h	174;"	d
fx	.\include\sol\single\sol\sol.hpp	/^			Function fx;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
fx	.\include\sol\single\sol\sol.hpp	/^		Function fx;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::destructor_wrapper
fx	.\include\sol\sol\function_types_stateful.hpp	/^			Function fx;$/;"	m	struct:sol::function_detail::functor_function
fx	.\include\sol\sol\raii.hpp	/^		Function fx;$/;"	m	struct:sol::destructor_wrapper
fx_t	.\include\sol\single\sol\sol.hpp	/^			typedef meta::bind_traits<Signature> fx_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
fx_t	.\include\sol\sol\function.hpp	/^			typedef meta::bind_traits<Signature> fx_t;$/;"	t	struct:sol::stack::getter
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits : basic_traits<false, void, void> {};$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(*)(Args...), false> : basic_traits<false, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(*)(Args..., ...), false> : basic_traits<true, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(Args...), false> : basic_traits<false, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(Args..., ...), false> : basic_traits<true, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) && , false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const &&, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile &&, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...) const, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args...), false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) && , false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const &&, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile &&, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<R(T::*)(Args..., ...), false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\single\sol\sol.hpp	/^			struct fx_traits<Signature, true> : fx_traits<typename fx_traits<decltype(&Signature::operator())>::function_type, false> {};$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits : basic_traits<false, void, void> {};$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(*)(Args...), false> : basic_traits<false, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(*)(Args..., ...), false> : basic_traits<true, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(Args...), false> : basic_traits<false, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(Args..., ...), false> : basic_traits<true, void, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) && , false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const &&, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile &&, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile &, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const volatile, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...) const, false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args...), false> : basic_traits<false, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) && , false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const &&, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile &&, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile &, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const volatile, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...) const, false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<R(T::*)(Args..., ...), false> : basic_traits<true, T, R, Args...> {$/;"	s	namespace:sol::meta::meta_detail
fx_traits	.\include\sol\sol\bind_traits.hpp	/^			struct fx_traits<Signature, true> : fx_traits<typename fx_traits<decltype(&Signature::operator())>::function_type, false> {};$/;"	s	namespace:sol::meta::meta_detail
g	.\dep\Lua\src\lstate.c	/^  global_State g;$/;"	m	struct:LG	file:
g	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color
g	.\include\SFML\Graphics\Color.hpp	/^    Uint8 g; \/\/\/< Green component$/;"	m	class:sf::Color
g	.\include\sol\test_usertypes.cpp	/^	void g(const std::string& str) {$/;"	f	struct:self_test
g	.\src\include\Color.h	/^	unsigned char g;$/;"	m	struct:Color
g_extensionMapSize	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int g_extensionMapSize = 13;$/;"	v	file:
g_extensionMapSize	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^static int g_extensionMapSize = 6;$/;"	v	file:
g_extensionMapSize	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static int g_extensionMapSize = 5;$/;"	v	file:
g_iofile	.\dep\Lua\src\liolib.c	/^static int g_iofile (lua_State *L, const char *f, const char *mode) {$/;"	f	file:
g_major_version	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int g_major_version = 0;$/;"	v	file:
g_minor_version	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^static int g_minor_version = 0;$/;"	v	file:
g_read	.\dep\Lua\src\liolib.c	/^static int g_read (lua_State *L, FILE *f, int first) {$/;"	f	file:
g_write	.\dep\Lua\src\liolib.c	/^static int g_write (lua_State *L, FILE *f, int arg) {$/;"	f	file:
garbage_collect	.\include\sol\single\sol\sol.hpp	/^		garbage_collect,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
garbage_collect	.\include\sol\sol\types.hpp	/^		garbage_collect,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
gc	.\dep\Lua\src\lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gc	.\dep\Lua\src\lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion
gc	.\include\lua\lobject.h	/^  GCObject *gc;    \/* collectable objects *\/$/;"	m	union:Value
gc	.\include\lua\lstate.h	/^  GCObject gc;  \/* common header *\/$/;"	m	union:GCUnion
gc	.\include\sol\single\sol\sol.hpp	/^		gc = LUA_ERRGCMM$/;"	m	class:sol::sol::call_syntax::call_status
gc	.\include\sol\single\sol\sol.hpp	/^		gc = LUA_ERRGCMM,$/;"	m	class:sol::sol::call_syntax::call_status::load_status
gc	.\include\sol\single\sol\sol.hpp	/^		gc = LUA_ERRGCMM,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
gc	.\include\sol\sol\types.hpp	/^		gc = LUA_ERRGCMM$/;"	m	class:sol::call_syntax::call_status
gc	.\include\sol\sol\types.hpp	/^		gc = LUA_ERRGCMM,$/;"	m	class:sol::call_syntax::call_status::load_status
gc	.\include\sol\sol\types.hpp	/^		gc = LUA_ERRGCMM,$/;"	m	class:sol::call_syntax::call_status::thread_status
gc_table	.\include\sol\single\sol\sol.hpp	/^		static const std::string gc_table;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::usertype_traits
gc_table	.\include\sol\single\sol\sol.hpp	/^	const std::string usertype_traits<T>::gc_table = std::string("sol.").append(detail::demangle<T>().append(".\\xE2\\x99\\xBB"));$/;"	m	class:sol::sol::call_syntax::call_status::sol::usertype_traits
gc_table	.\include\sol\sol\usertype_traits.hpp	/^		static const std::string gc_table;$/;"	m	struct:sol::usertype_traits
gc_table	.\include\sol\sol\usertype_traits.hpp	/^	const std::string usertype_traits<T>::gc_table = std::string("sol.").append(detail::demangle<T>().append(".\\xE2\\x99\\xBB"));$/;"	m	class:sol::usertype_traits
gcfinnum	.\dep\Lua\src\lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State
gcfinnum	.\include\lua\lstate.h	/^  unsigned int gcfinnum;  \/* number of finalizers to call in each GC step *\/$/;"	m	struct:global_State
gci	.\include\sol\Optional\test_optional.cpp	/^constexpr int gci = 1;$/;"	v
gckind	.\dep\Lua\src\lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gckind	.\include\lua\lstate.h	/^  lu_byte gckind;  \/* kind of GC running *\/$/;"	m	struct:global_State
gclist	.\dep\Lua\src\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	.\dep\Lua\src\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	.\dep\Lua\src\lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gclist	.\include\lua\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Proto
gclist	.\include\lua\lobject.h	/^  GCObject *gclist;$/;"	m	struct:Table
gclist	.\include\lua\lstate.h	/^  GCObject *gclist;$/;"	m	struct:lua_State
gco2ccl	.\dep\Lua\src\lstate.h	210;"	d
gco2ccl	.\include\lua\lstate.h	210;"	d
gco2cl	.\dep\Lua\src\lstate.h	211;"	d
gco2cl	.\include\lua\lstate.h	211;"	d
gco2lcl	.\dep\Lua\src\lstate.h	209;"	d
gco2lcl	.\include\lua\lstate.h	209;"	d
gco2p	.\dep\Lua\src\lstate.h	214;"	d
gco2p	.\include\lua\lstate.h	214;"	d
gco2t	.\dep\Lua\src\lstate.h	213;"	d
gco2t	.\include\lua\lstate.h	213;"	d
gco2th	.\dep\Lua\src\lstate.h	215;"	d
gco2th	.\include\lua\lstate.h	215;"	d
gco2ts	.\dep\Lua\src\lstate.h	206;"	d
gco2ts	.\include\lua\lstate.h	206;"	d
gco2u	.\dep\Lua\src\lstate.h	208;"	d
gco2u	.\include\lua\lstate.h	208;"	d
gcpause	.\dep\Lua\src\lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcpause	.\include\lua\lstate.h	/^  int gcpause;  \/* size of pause between successive GCs *\/$/;"	m	struct:global_State
gcrunning	.\dep\Lua\src\lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcrunning	.\include\lua\lstate.h	/^  lu_byte gcrunning;  \/* true if GC is running *\/$/;"	m	struct:global_State
gcstate	.\dep\Lua\src\lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstate	.\include\lua\lstate.h	/^  lu_byte gcstate;  \/* state of garbage collector *\/$/;"	m	struct:global_State
gcstepmul	.\dep\Lua\src\lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State
gcstepmul	.\include\lua\lstate.h	/^  int gcstepmul;  \/* GC 'granularity' *\/$/;"	m	struct:global_State
gctm	.\dep\Lua\src\loadlib.c	/^static int gctm (lua_State *L) {$/;"	f	file:
gcvalue	.\dep\Lua\src\lobject.h	167;"	d
gcvalue	.\include\lua\lobject.h	167;"	d
gd_bytes	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          gd_bytes;$/;"	m	struct:CID_FaceInfoRec_
genLines	.\src\src\SkillTree.cpp	/^void SkillTree::genLines() {$/;"	f	class:SkillTree
genNodes	.\src\src\SkillTree.cpp	/^void SkillTree::genNodes() {$/;"	f	class:SkillTree
generic	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Generic        generic;   \/* generic pointer for client uses *\/$/;"	m	struct:FT_SizeRec_
generic	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Generic        generic;$/;"	m	struct:FT_FaceRec_
generic	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Generic        generic;$/;"	m	struct:FT_GlyphSlotRec_
generic	.\include\sol\Optional\test_optional.cpp	/^struct generic$/;"	s	file:
generic	.\include\sol\Optional\test_optional.cpp	/^struct generic<U&>$/;"	s	file:
generic_fun	.\include\sol\Optional\test_optional.cpp	/^bool generic_fun()$/;"	f
generic_reader	.\dep\Lua\src\lbaselib.c	/^static const char *generic_reader (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
get	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr
get	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    ITagAliasRegistry const& ITagAliasRegistry::get() { return TagAliasRegistry::get(); }$/;"	f	class:Catch::ITagAliasRegistry
get	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    TagAliasRegistry& TagAliasRegistry::get() {$/;"	f	class:Catch::TagAliasRegistry
get	.\include\sol\Catch\single_include\catch.hpp	/^        T* get() const{ return m_p; }$/;"	f	class:Catch::Ptr
get	.\include\sol\single\sol\sol.hpp	/^			probe get(lua_State* L, Key&& key, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe_field_getter
get	.\include\sol\single\sol\sol.hpp	/^			probe get(lua_State* L, Keys&& keys, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe_field_getter
get	.\include\sol\single\sol\sol.hpp	/^			static Real& get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static T get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static T& get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static T* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static bool get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static c_closure get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static char get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static char32_t get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static const char* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static decltype(auto) get(lua_State* L, int index, Handler&&, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::check_getter
get	.\include\sol\single\sol\sol.hpp	/^			static decltype(auto) get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static error get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static light<T> get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static lightuserdata_value get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static lua_CFunction get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static meta_function get(lua_State *L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static nil_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static nullopt_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static optional<R> get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::check_getter
get	.\include\sol\single\sol\sol.hpp	/^			static optional<T> get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::check_getter
get	.\include\sol\single\sol\sol.hpp	/^			static stack_proxy get(lua_State* L, int index = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::function<Signature> get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::nullptr_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::string get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::u16string get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::u32string get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static std::wstring get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static this_state get(lua_State* L, int, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static type get(lua_State *L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static userdata_value get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static variadic_args get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static void* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			static wchar_t get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			string_detail::string_shim get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, Key&& key, int = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, Key&& key, int tableindex = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, Key&& key, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, Keys&& keys) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, metatable_key_t, int tableindex = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^			void get(lua_State* L, void* key, int tableindex = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_getter
get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get(difference_type start = 0) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
get	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) get(lua_State* L, int index = -1) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
get	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) get(lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
get	.\include\sol\single\sol\sol.hpp	/^		stack_proxy get(types<Args...>, index_value<0>, index_value<I>, const T& fr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
get	.\include\sol\single\sol\sol.hpp	/^		static auto get(U&& value) {$/;"	f	struct:sol::sol::unique_usertype_traits
get	.\include\sol\single\sol\sol.hpp	/^		static type* get(const actual_type& p) {$/;"	f	struct:sol::sol::unique_usertype_traits
get	.\include\sol\single\sol\sol.hpp	/^	stack_proxy get(const function_result& fr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
get	.\include\sol\single\sol\sol.hpp	/^	stack_proxy get(const protected_function_result& fr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
get	.\include\sol\single\sol\sol.hpp	/^	stack_proxy get(types<Args...> t, const function_result& fr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
get	.\include\sol\single\sol\sol.hpp	/^	stack_proxy get(types<Args...> t, const protected_function_result& fr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
get	.\include\sol\sol\function.hpp	/^			static std::function<Signature> get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\function_result.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::function_result
get	.\include\sol\sol\load_result.hpp	/^		T get() const {$/;"	f	struct:sol::load_result
get	.\include\sol\sol\protected_function_result.hpp	/^		T get() const {$/;"	f	struct:sol::protected_function_result
get	.\include\sol\sol\proxy.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::proxy
get	.\include\sol\sol\stack_check_get.hpp	/^			static decltype(auto) get(lua_State* L, int index, Handler&&, record& tracking) {$/;"	f	struct:sol::stack::check_getter
get	.\include\sol\sol\stack_check_get.hpp	/^			static decltype(auto) get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_check_get.hpp	/^			static optional<R> get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::check_getter
get	.\include\sol\sol\stack_check_get.hpp	/^			static optional<T> get(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	struct:sol::stack::check_getter
get	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) get(lua_State* L, int index = -1) {$/;"	f	namespace:sol::stack
get	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) get(lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::stack
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, Key&& key, int = -1) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, Key&& key, int tableindex = -1) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, Key&& key, int tableindex = -2) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, Keys&& keys) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, Keys&& keys, int tableindex) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, metatable_key_t, int tableindex = -1) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_field.hpp	/^			void get(lua_State* L, void* key, int tableindex = -1) {$/;"	f	struct:sol::stack::field_getter
get	.\include\sol\sol\stack_get.hpp	/^			static Real& get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static T get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static T& get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static T* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static bool get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static c_closure get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static char get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static const char* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static decltype(auto) get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static error get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static light<T> get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static lightuserdata_value get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static lua_CFunction get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static meta_function get(lua_State *L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static nil_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static nullopt_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static std::nullptr_t get(lua_State*, int, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static std::string get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static this_state get(lua_State* L, int, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static type get(lua_State *L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static userdata_value get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			static void* get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_get.hpp	/^			string_detail::string_shim get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_probe.hpp	/^			probe get(lua_State* L, Key&& key, int tableindex = -2) {$/;"	f	struct:sol::stack::probe_field_getter
get	.\include\sol\sol\stack_probe.hpp	/^			probe get(lua_State* L, Keys&& keys, int tableindex = -2) {$/;"	f	struct:sol::stack::probe_field_getter
get	.\include\sol\sol\stack_proxy.hpp	/^			static stack_proxy get(lua_State* L, int index = -1) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\stack_proxy.hpp	/^		decltype(auto) get() const {$/;"	f	struct:sol::stack_proxy
get	.\include\sol\sol\stack_proxy.hpp	/^		stack_proxy get(types<Args...>, index_value<0>, index_value<I>, const T& fr) {$/;"	f	namespace:sol::detail
get	.\include\sol\sol\stack_proxy.hpp	/^	stack_proxy get(const function_result& fr) {$/;"	f	namespace:sol::detail
get	.\include\sol\sol\stack_proxy.hpp	/^	stack_proxy get(const protected_function_result& fr) {$/;"	f	namespace:sol::detail
get	.\include\sol\sol\stack_proxy.hpp	/^	stack_proxy get(types<Args...> t, const function_result& fr) {$/;"	f	namespace:sol::detail
get	.\include\sol\sol\stack_proxy.hpp	/^	stack_proxy get(types<Args...> t, const protected_function_result& fr) {$/;"	f	namespace:sol::detail
get	.\include\sol\sol\state_view.hpp	/^		decltype(auto) get(Keys&&... keys) const {$/;"	f	class:sol::state_view
get	.\include\sol\sol\table_core.hpp	/^		decltype(auto) get(Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
get	.\include\sol\sol\types.hpp	/^		static auto get(U&& value) {$/;"	f	struct:sol::unique_usertype_traits
get	.\include\sol\sol\types.hpp	/^		static type* get(const actual_type& p) {$/;"	f	struct:sol::unique_usertype_traits
get	.\include\sol\sol\variadic_args.hpp	/^			static variadic_args get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\sol\variadic_args.hpp	/^		decltype(auto) get(difference_type start = 0) const {$/;"	f	struct:sol::variadic_args
get	.\include\sol\test_customizations.cpp	/^			static two_things get(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get	.\include\sol\test_usertypes.cpp	/^	int get(sol::this_state, sol::variadic_args) {$/;"	f	struct:ext_getset
getAccel	.\src\include\Object.h	/^	float getAccel() const { return _stats["accel"] + _baseStats["accel"] ; }$/;"	f	class:Object
getActivity	.\dep\SFML\src\SFML\System\Android\Activity.cpp	/^ActivityStates* getActivity(ActivityStates* initializedStates, bool reset)$/;"	f	namespace:sf::priv
getAllTestCasesSorted	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    std::vector<TestCase> const& getAllTestCasesSorted( IConfig const& config ) {$/;"	f	class:Catch::std
getAllTests	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        virtual std::vector<TestCase> const& getAllTests() const {$/;"	f	class:Catch::TestRegistry::std
getAllTestsSorted	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        virtual std::vector<TestCase> const& getAllTestsSorted( IConfig const& config ) const {$/;"	f	class:Catch::TestRegistry::std
getAndroidApiLevel	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^int getAndroidApiLevel(ANativeActivity* activity)$/;"	f	namespace:sf::priv
getAnnotation	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        inline std::string getAnnotation(   Class cls,$/;"	f	namespace:Catch::Detail
getAtom	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^xcb_atom_t getAtom(const std::string& name, bool onlyIfExists)$/;"	f	namespace:sf::priv
getAttached	.\src\include\Perk.h	/^	Object* getAttached() { return _attached; }$/;"	f	class:Perk
getAttackerCount	.\src\include\Object.h	/^	int getAttackerCount() const { return _attackerCount; }$/;"	f	class:Object
getAttenuation	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^float SoundSource::getAttenuation() const$/;"	f	class:sf::SoundSource
getAvailableDevices	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^std::vector<std::string> SoundRecorder::getAvailableDevices()$/;"	f	class:sf::SoundRecorder
getAxisPosition	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^float Joystick::getAxisPosition(unsigned int joystick, Axis axis)$/;"	f	class:sf::Joystick
getBMode	.\dep\Lua\src\lopcodes.h	282;"	d
getBMode	.\include\lua\lopcodes.h	282;"	d
getBaseStats	.\src\include\Object.h	/^    Stats getBaseStats() { return _baseStats; };$/;"	f	class:Object
getBestConfig	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^EGLConfig EglContext::getBestConfig(EGLDisplay display, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::EglContext
getBody	.\dep\SFML\src\SFML\Network\Http.cpp	/^const std::string& Http::Response::getBody() const$/;"	f	class:sf::Http::Response
getBounds	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^FloatRect VertexArray::getBounds() const$/;"	f	class:sf::VertexArray
getBuffer	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^const SoundBuffer* Sound::getBuffer() const$/;"	f	class:sf::Sound
getBuffer	.\dep\SFML\src\SFML\Audio\SoundBufferRecorder.cpp	/^const SoundBuffer& SoundBufferRecorder::getBuffer() const$/;"	f	class:sf::SoundBufferRecorder
getButtonCount	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^unsigned int Joystick::getButtonCount(unsigned int joystick)$/;"	f	class:sf::Joystick
getCMode	.\dep\Lua\src\lopcodes.h	283;"	d
getCMode	.\include\lua\lopcodes.h	283;"	d
getCapabilities	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^JoystickCaps JoystickImpl::getCapabilities() const$/;"	f	class:sf::priv::JoystickImpl
getCapabilities	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^JoystickCaps JoystickImpl::getCapabilities() const$/;"	f	class:sf::priv::JoystickImpl
getCapabilities	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^const JoystickCaps& JoystickManager::getCapabilities(unsigned int joystick) const$/;"	f	class:sf::priv::JoystickManager
getCapabilities	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^JoystickCaps JoystickImpl::getCapabilities() const$/;"	f	class:sf::priv::JoystickImpl
getCapabilities	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^JoystickCaps JoystickImpl::getCapabilities() const$/;"	f	class:sf::priv::JoystickImpl
getCapabilities	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^JoystickCaps JoystickImpl::getCapabilities() const$/;"	f	class:sf::priv::JoystickImpl
getCenter	.\dep\SFML\src\SFML\Graphics\View.cpp	/^const Vector2f& View::getCenter() const$/;"	f	class:sf::View
getChannelCount	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^unsigned int InputSoundFile::getChannelCount() const$/;"	f	class:sf::InputSoundFile
getChannelCount	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^unsigned int SoundBuffer::getChannelCount() const$/;"	f	class:sf::SoundBuffer
getChannelCount	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^unsigned int SoundStream::getChannelCount() const$/;"	f	class:sf::SoundStream
getCharacterSize	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^unsigned int Text::getCharacterSize() const$/;"	f	class:sf::Text
getCollisionBox	.\src\include\Enemy.h	/^	sf::FloatRect getCollisionBox() { return _shape.getGlobalBounds(); }$/;"	f	class:Enemy
getCollisionBox	.\src\include\Object.h	/^	virtual sf::FloatRect getCollisionBox() { return _shape.getGlobalBounds(); }$/;"	f	class:Object
getCollisionBox	.\src\include\Projectile.h	/^	sf::FloatRect getCollisionBox() { return _shape.getGlobalBounds(); }$/;"	f	class:Projectile
getCollisionRadius	.\src\include\Object.h	/^	int getCollisionRadius() const { return _collisionRadius; }$/;"	f	class:Object
getColor	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^const Color& Sprite::getColor() const$/;"	f	class:sf::Sprite
getColor	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^const Color& Text::getColor() const$/;"	f	class:sf::Text
getConfig	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual Ptr<IConfig const> getConfig() const {$/;"	f	class:Catch::Context
getCount	.\src\include\SkillTree.h	/^	const int getCount() { return _count; }$/;"	f	class:SkillTree
getCurrentContext	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^    IContext& getCurrentContext() {$/;"	f	namespace:Catch
getCurrentIndex	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        std::size_t getCurrentIndex() const {$/;"	f	struct:Catch::GeneratorInfo
getCurrentMutableContext	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^    IMutableContext& getCurrentMutableContext() {$/;"	f	namespace:Catch
getCurrentState	.\src\src\StateManager.cpp	/^Window* StateManager::getCurrentState() {$/;"	f	class:StateManager
getCurrentTestName	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual std::string getCurrentTestName() const {$/;"	f	class:Catch::RunContext
getCurrentTicks	.\include\sol\Catch\include\internal\catch_timer.hpp	/^        uint64_t getCurrentTicks() {$/;"	f	namespace:Catch::__anon181
getCurrentTime	.\dep\SFML\src\SFML\System\Unix\ClockImpl.cpp	/^Time ClockImpl::getCurrentTime()$/;"	f	class:sf::priv::ClockImpl
getCurrentTime	.\dep\SFML\src\SFML\System\Win32\ClockImpl.cpp	/^Time ClockImpl::getCurrentTime()$/;"	f	class:sf::priv::ClockImpl
getDamage	.\src\include\Object.h	/^	float getDamage() const { return _stats["damage"] + _baseStats["damage"] ; }$/;"	f	class:Object
getData	.\dep\SFML\src\SFML\Network\Packet.cpp	/^const void* Packet::getData() const$/;"	f	class:sf::Packet
getData	.\dep\SFML\src\SFML\System\String.cpp	/^const Uint32* String::getData() const$/;"	f	class:sf::String
getDataSize	.\dep\SFML\src\SFML\Network\Packet.cpp	/^std::size_t Packet::getDataSize() const$/;"	f	class:sf::Packet
getDefaultDevice	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^std::string SoundRecorder::getDefaultDevice()$/;"	f	class:sf::SoundRecorder
getDefaultSensor	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^ASensor const* SensorImpl::getDefaultSensor(Sensor::Type sensor)$/;"	f	class:sf::priv::SensorImpl
getDefaultView	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^const View& RenderTarget::getDefaultView() const$/;"	f	class:sf::RenderTarget
getDescription	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual std::string getDescription() const {$/;"	f	class:Catch::LegacyReporterRegistrar::ReporterFactory
getDescription	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual std::string getDescription() const {$/;"	f	class:Catch::ListenerRegistrar::ListenerFactory
getDescription	.\include\sol\Catch\include\internal\catch_reporter_registrars.hpp	/^            virtual std::string getDescription() const {$/;"	f	class:Catch::ReporterRegistrar::ReporterFactory
getDescription	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        static std::string getDescription() {$/;"	f	struct:Catch::CompactReporter
getDescription	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        static std::string getDescription() {$/;"	f	struct:Catch::ConsoleReporter
getDescription	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        static std::string getDescription() {$/;"	f	class:Catch::JunitReporter
getDescription	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        static std::string getDescription() {$/;"	f	struct:Catch::TeamCityReporter
getDescription	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        static std::string getDescription() {$/;"	f	class:Catch::XmlReporter
getDescription	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        static std::string getDescription$/;"	f	class:Catch::iTchRunnerReporter
getDesktopMode	.\dep\SFML\src\SFML\Window\Android\VideoModeImpl.cpp	/^VideoMode VideoModeImpl::getDesktopMode()$/;"	f	class:sf::priv::VideoModeImpl
getDesktopMode	.\dep\SFML\src\SFML\Window\OSX\VideoModeImpl.cpp	/^VideoMode VideoModeImpl::getDesktopMode()$/;"	f	class:sf::priv::VideoModeImpl
getDesktopMode	.\dep\SFML\src\SFML\Window\Unix\VideoModeImpl.cpp	/^VideoMode VideoModeImpl::getDesktopMode()$/;"	f	class:sf::priv::VideoModeImpl
getDesktopMode	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^VideoMode VideoMode::getDesktopMode()$/;"	f	class:sf::VideoMode
getDesktopMode	.\dep\SFML\src\SFML\Window\Win32\VideoModeImpl.cpp	/^VideoMode VideoModeImpl::getDesktopMode()$/;"	f	class:sf::priv::VideoModeImpl
getDevice	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^const std::string& SoundRecorder::getDevice() const$/;"	f	class:sf::SoundRecorder
getDeviceName	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^    sf::String getDeviceName(unsigned int index, JOYCAPS caps)$/;"	f	namespace:__anon152
getDeviceString	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^    std::string getDeviceString(IOHIDDeviceRef ref, CFStringRef prop, unsigned int index)$/;"	f	namespace:__anon143
getDeviceUint	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^    unsigned int getDeviceUint(IOHIDDeviceRef ref, CFStringRef prop, unsigned int index)$/;"	f	namespace:__anon143
getDirection	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^Vector3f AudioDevice::getDirection()$/;"	f	class:sf::priv::AudioDevice
getDirection	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^Vector3f Listener::getDirection()$/;"	f	class:sf::Listener
getDirection	.\src\include\Object.h	/^	Vector2 getDirection() const { return _direction; }$/;"	f	class:Object
getDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^const std::string& Ftp::DirectoryResponse::getDirectory() const$/;"	f	class:sf::Ftp::DirectoryResponse
getDirectoryListing	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::ListingResponse Ftp::getDirectoryListing(const std::string& directory)$/;"	f	class:sf::Ftp
getDuration	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^Time InputSoundFile::getDuration() const$/;"	f	class:sf::InputSoundFile
getDuration	.\dep\SFML\src\SFML\Audio\Music.cpp	/^Time Music::getDuration() const$/;"	f	class:sf::Music
getDuration	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^Time SoundBuffer::getDuration() const$/;"	f	class:sf::SoundBuffer
getDuration	.\src\include\Perk.h	/^	float getDuration() const { return _duration; }$/;"	f	class:Perk
getElapsedMicroseconds	.\include\sol\Catch\include\internal\catch_timer.hpp	/^    unsigned int Timer::getElapsedMicroseconds() const {$/;"	f	class:Catch::Timer
getElapsedMilliseconds	.\include\sol\Catch\include\internal\catch_timer.hpp	/^    unsigned int Timer::getElapsedMilliseconds() const {$/;"	f	class:Catch::Timer
getElapsedSeconds	.\include\sol\Catch\include\internal\catch_timer.hpp	/^    double Timer::getElapsedSeconds() const {$/;"	f	class:Catch::Timer
getElapsedTime	.\dep\SFML\src\SFML\System\Clock.cpp	/^Time Clock::getElapsedTime() const$/;"	f	class:sf::Clock
getEnemiesInRange	.\src\src\Map.cpp	/^std::vector<Enemy*> Map::getEnemiesInRange(float x, float y, float r) {$/;"	f	class:Map
getErrorStatus	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^Socket::Status SocketImpl::getErrorStatus()$/;"	f	class:sf::priv::SocketImpl
getErrorStatus	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^Socket::Status SocketImpl::getErrorStatus()$/;"	f	class:sf::priv::SocketImpl
getErrorString	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^    std::string getErrorString(DWORD error)$/;"	f	namespace:__anon152
getErrorString	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^String getErrorString(DWORD errorCode)$/;"	f	namespace:sf::priv
getExpandedExpression	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    std::string AssertionResult::getExpandedExpression() const {$/;"	f	class:Catch::AssertionResult
getExpression	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    std::string AssertionResult::getExpression() const {$/;"	f	class:Catch::AssertionResult
getExpressionInMacro	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    std::string AssertionResult::getExpressionInMacro() const {$/;"	f	class:Catch::AssertionResult
getF	.\dep\Lua\src\lauxlib.c	/^static const char *getF (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getFPS	.\src\include\FPS.h	/^    const unsigned int getFPS() const { return fps; }$/;"	f	class:FPS
getFailed	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        size_t getFailed$/;"	f	class:Catch::iTchRunnerReporter
getField	.\dep\SFML\src\SFML\Network\Http.cpp	/^const std::string& Http::Response::getField(const std::string& field) const$/;"	f	class:sf::Http::Response
getFileContents	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    bool getFileContents(const std::string& filename, std::vector<char>& buffer)$/;"	f	namespace:__anon128
getFilename	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::string const& getFilename() const {$/;"	f	class:Catch::Config::std
getFillColor	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^const Color& Shape::getFillColor() const$/;"	f	class:sf::Shape
getFireRate	.\src\include\Object.h	/^	float getFireRate() const { return _stats["fireRate"] + _baseStats["fireRate"]; }$/;"	f	class:Object
getFont	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^const Font* Text::getFont() const$/;"	f	class:sf::Text
getFormatFromChannelCount	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^int AudioDevice::getFormatFromChannelCount(unsigned int channelCount)$/;"	f	class:sf::priv::AudioDevice
getFrequency	.\dep\SFML\src\SFML\System\Win32\ClockImpl.cpp	/^    LARGE_INTEGER getFrequency()$/;"	f	namespace:__anon136
getFullscreenModes	.\dep\SFML\src\SFML\Window\Android\VideoModeImpl.cpp	/^std::vector<VideoMode> VideoModeImpl::getFullscreenModes()$/;"	f	class:sf::priv::VideoModeImpl
getFullscreenModes	.\dep\SFML\src\SFML\Window\OSX\VideoModeImpl.cpp	/^std::vector<VideoMode> VideoModeImpl::getFullscreenModes()$/;"	f	class:sf::priv::VideoModeImpl
getFullscreenModes	.\dep\SFML\src\SFML\Window\Unix\VideoModeImpl.cpp	/^std::vector<VideoMode> VideoModeImpl::getFullscreenModes()$/;"	f	class:sf::priv::VideoModeImpl
getFullscreenModes	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^const std::vector<VideoMode>& VideoMode::getFullscreenModes()$/;"	f	class:sf::VideoMode
getFullscreenModes	.\dep\SFML\src\SFML\Window\Win32\VideoModeImpl.cpp	/^std::vector<VideoMode> VideoModeImpl::getFullscreenModes()$/;"	f	class:sf::priv::VideoModeImpl
getFunction	.\dep\SFML\src\SFML\Window\Context.cpp	/^GlFunctionPointer Context::getFunction(const char* name)$/;"	f	class:sf::Context
getFunction	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlFunctionPointer GlContext::getFunction(const char* name)$/;"	f	class:sf::priv::GlContext
getFunction	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^GlFunctionPointer GlxContext::getFunction(const char* name)$/;"	f	class:sf::priv::GlxContext
getFunction	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^GlFunctionPointer WglContext::getFunction(const char* name)$/;"	f	class:sf::priv::WglContext
getGeneratorIndex	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual size_t getGeneratorIndex( std::string const& fileInfo, size_t totalSize ) {$/;"	f	class:Catch::Context
getGeneratorInfo	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        IGeneratorInfo& getGeneratorInfo( std::string const& fileInfo, std::size_t size ) {$/;"	f	class:Catch::GeneratorsForTest
getGeneratorsForCurrentTest	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        IGeneratorsForTest& getGeneratorsForCurrentTest() {$/;"	f	class:Catch::Context
getGlobalBounds	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^FloatRect Shape::getGlobalBounds() const$/;"	f	class:sf::Shape
getGlobalBounds	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^FloatRect Sprite::getGlobalBounds() const$/;"	f	class:sf::Sprite
getGlobalBounds	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^FloatRect Text::getGlobalBounds() const$/;"	f	class:sf::Text
getGlobalVolume	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^float AudioDevice::getGlobalVolume()$/;"	f	class:sf::priv::AudioDevice
getGlobalVolume	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^float Listener::getGlobalVolume()$/;"	f	class:sf::Listener
getGlyph	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^const Glyph& Font::getGlyph(Uint32 codePoint, unsigned int characterSize, bool bold) const$/;"	f	class:sf::Font
getHandle	.\dep\SFML\src\SFML\Network\Socket.cpp	/^SocketHandle Socket::getHandle() const$/;"	f	class:sf::Socket
getHead	.\src\include\SkillTree.h	/^	SkillNode* getHead() { return _head; }$/;"	f	class:SkillTree
getHealth	.\src\include\Enemy.h	/^	float getHealth() const { return _health; }$/;"	f	class:Enemy
getHeight	.\src\include\GuiComponent.h	/^	float getHeight() { return _size.Y; }$/;"	f	class:GuiComponent
getHeight	.\src\include\SkillTree.h	/^	float getHeight() { return _size.Y; }$/;"	f	class:SkillTree
getHeight	.\src\include\Window.h	/^	int getHeight() { return _size.Y; }$/;"	f	class:Window
getIdentification	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^Joystick::Identification JoystickImpl::getIdentification() const$/;"	f	class:sf::priv::JoystickImpl
getIdentification	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^Joystick::Identification JoystickImpl::getIdentification() const$/;"	f	class:sf::priv::JoystickImpl
getIdentification	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^Joystick::Identification Joystick::getIdentification(unsigned int joystick)$/;"	f	class:sf::Joystick
getIdentification	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^const Joystick::Identification& JoystickManager::getIdentification(unsigned int joystick) const$/;"	f	class:sf::priv::JoystickManager
getIdentification	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^Joystick::Identification JoystickImpl::getIdentification() const$/;"	f	class:sf::priv::JoystickImpl
getIdentification	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^Joystick::Identification JoystickImpl::getIdentification() const$/;"	f	class:sf::priv::JoystickImpl
getIdentification	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^Joystick::Identification JoystickImpl::getIdentification() const$/;"	f	class:sf::priv::JoystickImpl
getInfo	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^const Font::Info& Font::getInfo() const$/;"	f	class:sf::Font
getInitializedDisplay	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^    EGLDisplay getInitializedDisplay()$/;"	f	namespace:__anon138
getInstance	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^ImageLoader& ImageLoader::getInstance()$/;"	f	class:sf::priv::ImageLoader
getInstance	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^JoystickManager& JoystickManager::getInstance()$/;"	f	class:sf::priv::JoystickManager
getInstance	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^HIDJoystickManager& HIDJoystickManager::getInstance()$/;"	f	class:sf::priv::HIDJoystickManager
getInstance	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^SensorManager& SensorManager::getInstance()$/;"	f	class:sf::priv::SensorManager
getInternalContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    sf::priv::GlContext* getInternalContext()$/;"	f	namespace:__anon140
getInverse	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform Transform::getInverse() const$/;"	f	class:sf::Transform
getInverseTransform	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^const Transform& Transformable::getInverseTransform() const$/;"	f	class:sf::Transformable
getInverseTransform	.\dep\SFML\src\SFML\Graphics\View.cpp	/^const Transform& View::getInverseTransform() const$/;"	f	class:sf::View
getIssueTitle	.\include\sol\Catch\scripts\releaseNotes.py	/^def getIssueTitle( issueNumber ):$/;"	f
getJoystickCount	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^unsigned int HIDJoystickManager::getJoystickCount()$/;"	f	class:sf::priv::HIDJoystickManager
getJoystickName	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    std::string getJoystickName(unsigned int index)$/;"	f	namespace:__anon150
getJoystickProductId	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    unsigned int getJoystickProductId(unsigned int index)$/;"	f	namespace:__anon150
getJoystickVendorId	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    unsigned int getJoystickVendorId(unsigned int index)$/;"	f	namespace:__anon150
getKerning	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^float Font::getKerning(Uint32 first, Uint32 second, unsigned int characterSize) const$/;"	f	class:sf::Font
getLastResult	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual const AssertionResult* getLastResult() const {$/;"	f	class:Catch::RunContext
getLibraryName	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	/^const char *getLibraryName(JNIEnv* lJNIEnv, jobject& objectActivityInfo)$/;"	f
getLineOfChars	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^    char const* getLineOfChars() {$/;"	f	namespace:Catch
getLineSpacing	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^float Font::getLineSpacing(unsigned int characterSize) const$/;"	f	class:sf::Font
getListing	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^const std::vector<std::string>& Ftp::ListingResponse::getListing() const$/;"	f	class:sf::Ftp::ListingResponse
getLocalAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress IpAddress::getLocalAddress()$/;"	f	class:sf::IpAddress
getLocalBounds	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^FloatRect Shape::getLocalBounds() const$/;"	f	class:sf::Shape
getLocalBounds	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^FloatRect Sprite::getLocalBounds() const$/;"	f	class:sf::Sprite
getLocalBounds	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^FloatRect Text::getLocalBounds() const$/;"	f	class:sf::Text
getLocalPort	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^unsigned short TcpListener::getLocalPort() const$/;"	f	class:sf::TcpListener
getLocalPort	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^unsigned short TcpSocket::getLocalPort() const$/;"	f	class:sf::TcpSocket
getLocalPort	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^unsigned short UdpSocket::getLocalPort() const$/;"	f	class:sf::UdpSocket
getLoop	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^bool Sound::getLoop() const$/;"	f	class:sf::Sound
getLoop	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^bool SoundStream::getLoop() const$/;"	f	class:sf::SoundStream
getMajorHttpVersion	.\dep\SFML\src\SFML\Network\Http.cpp	/^unsigned int Http::Response::getMajorHttpVersion() const$/;"	f	class:sf::Http::Response
getMap	.\src\include\Object.h	/^	Map* getMap() const { return _map; }$/;"	f	class:Object
getMatrix	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^const float* Transform::getMatrix() const$/;"	f	class:sf::Transform
getMaxDuration	.\src\include\Perk.h	/^	float getMaxDuration() const { return _maxDuration; }$/;"	f	class:Perk
getMaxHealth	.\src\include\Enemy.h	/^	float getMaxHealth() const { return _maxHealth; }$/;"	f	class:Enemy
getMaxStacks	.\src\include\Perk.h	/^	int getMaxStacks() const { return _maxStacks; }$/;"	f	class:Perk
getMaxTextureUnits	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    GLint getMaxTextureUnits()$/;"	f	namespace:__anon128
getMaximumSize	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^unsigned int Texture::getMaximumSize()$/;"	f	class:sf::Texture
getMessage	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^const std::string& Ftp::Response::getMessage() const$/;"	f	class:sf::Ftp::Response
getMessage	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    std::string AssertionResult::getMessage() const {$/;"	f	class:Catch::AssertionResult
getMessage	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    std::string getMessage() const$/;"	f	class:CustomException
getMessage	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    std::string getMessage() const$/;"	f	class:CustomStdException
getMinDistance	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^float SoundSource::getMinDistance() const$/;"	f	class:sf::SoundSource
getMinorHttpVersion	.\dep\SFML\src\SFML\Network\Http.cpp	/^unsigned int Http::Response::getMinorHttpVersion() const$/;"	f	class:sf::Http::Response
getMousePosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition()$/;"	f	class:sf::priv::InputImpl
getMousePosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition(const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
getMousePosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition()$/;"	f	class:sf::priv::InputImpl
getMousePosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition(const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
getMousePosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition()$/;"	f	class:sf::priv::InputImpl
getMousePosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^Vector2i InputImpl::getMousePosition(const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
getMutableRegistryHub	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^    IMutableRegistryHub& getMutableRegistryHub() {$/;"	f	namespace:Catch
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        std::string getName() const {$/;"	f	class:Catch::RunningSection
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsEqualTo>             { static const char* getName(){ return "=="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThan>         { static const char* getName(){ return ">"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsGreaterThanOrEqualTo>{ static const char* getName(){ return ">="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsLessThan>            { static const char* getName(){ return "<"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsLessThanOrEqualTo>   { static const char* getName(){ return "<="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<> struct OperatorTraits<IsNotEqualTo>          { static const char* getName(){ return "!="; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\include\sol\Catch\single_include\catch.hpp	/^    template<Operator Op> struct OperatorTraits             { static const char* getName(){ return "*error*"; } };$/;"	f	struct:Catch::Internal::OperatorTraits
getName	.\src\include\Perk.h	/^	std::string getName() const { return _name; }$/;"	f	class:Perk
getName	.\src\include\Window.h	/^	const std::string& getName() { return _name; }$/;"	f	class:Window
getNativeHandle	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^unsigned int Shader::getNativeHandle() const$/;"	f	class:sf::Shader
getNativeHandle	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^unsigned int Texture::getNativeHandle() const$/;"	f	class:sf::Texture
getNode	.\src\src\SkillTree.cpp	/^SkillNode* SkillTree::getNode(float x, float y) {$/;"	f	class:SkillTree
getObjectsInRange	.\src\src\Map.cpp	/^std::vector<Object*> Map::getObjectsInRange(Target* t, float r) {$/;"	f	class:Map
getObjectsInRange	.\src\src\Map.cpp	/^std::vector<Object*> Map::getObjectsInRange(float x, float y, float r) {$/;"	f	class:Map
getOpMode	.\dep\Lua\src\lopcodes.h	281;"	d
getOpMode	.\include\lua\lopcodes.h	281;"	d
getOrigin	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^const Vector2f& Transformable::getOrigin() const$/;"	f	class:sf::Transformable
getOutlineColor	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^const Color& Shape::getOutlineColor() const$/;"	f	class:sf::Shape
getOutlineThickness	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^float Shape::getOutlineThickness() const$/;"	f	class:sf::Shape
getParamLocation	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^int Shader::getParamLocation(const std::string& name)$/;"	f	class:sf::Shader
getParent	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        RunningSection* getParent() {$/;"	f	class:Catch::RunningSection
getParent	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        const RunningSection* getParent() const {$/;"	f	class:Catch::RunningSection
getPath	.\src\include\Enemy.h	/^	Path* getPath() { return _path; }$/;"	f	class:Enemy
getPerk	.\src\include\Object.h	/^	Perk* getPerk(int index) { return _perks[index];}$/;"	f	class:Object
getPerk	.\src\src\Object.cpp	/^Perk* Object::getPerk(std::string name) {$/;"	f	class:Object
getPerks	.\src\include\Object.h	/^	std::vector<Perk*>& getPerks() { return _perks; }$/;"	f	class:Object
getPitch	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^float SoundSource::getPitch() const$/;"	f	class:sf::SoundSource
getPixel	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^Color Image::getPixel(unsigned int x, unsigned int y) const$/;"	f	class:sf::Image
getPixelsPtr	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^const Uint8* Image::getPixelsPtr() const$/;"	f	class:sf::Image
getPlayingOffset	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Time Sound::getPlayingOffset() const$/;"	f	class:sf::Sound
getPlayingOffset	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^Time SoundStream::getPlayingOffset() const$/;"	f	class:sf::SoundStream
getPoint	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^Vector2f CircleShape::getPoint(std::size_t index) const$/;"	f	class:sf::CircleShape
getPoint	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^Vector2f ConvexShape::getPoint(std::size_t index) const$/;"	f	class:sf::ConvexShape
getPoint	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^Vector2f RectangleShape::getPoint(std::size_t index) const$/;"	f	class:sf::RectangleShape
getPoint	.\src\src\Path.cpp	/^Vector2* Path::getPoint(unsigned int index) {$/;"	f	class:Path
getPointCount	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^std::size_t CircleShape::getPointCount() const$/;"	f	class:sf::CircleShape
getPointCount	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^std::size_t ConvexShape::getPointCount() const$/;"	f	class:sf::ConvexShape
getPointCount	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^std::size_t RectangleShape::getPointCount() const$/;"	f	class:sf::RectangleShape
getPosition	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^Vector3f AudioDevice::getPosition()$/;"	f	class:sf::priv::AudioDevice
getPosition	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^Vector3f Listener::getPosition()$/;"	f	class:sf::Listener
getPosition	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^Vector3f SoundSource::getPosition() const$/;"	f	class:sf::SoundSource
getPosition	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^const Vector2f& Transformable::getPosition() const$/;"	f	class:sf::Transformable
getPosition	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^Vector2i WindowImplAndroid::getPosition() const$/;"	f	class:sf::priv::WindowImplAndroid
getPosition	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^Vector2i Mouse::getPosition()$/;"	f	class:sf::Mouse
getPosition	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^Vector2i Mouse::getPosition(const Window& relativeTo)$/;"	f	class:sf::Mouse
getPosition	.\dep\SFML\src\SFML\Window\Touch.cpp	/^Vector2i Touch::getPosition(unsigned int finger)$/;"	f	class:sf::Touch
getPosition	.\dep\SFML\src\SFML\Window\Touch.cpp	/^Vector2i Touch::getPosition(unsigned int finger, const Window& relativeTo)$/;"	f	class:sf::Touch
getPosition	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^Vector2i WindowImplX11::getPosition() const$/;"	f	class:sf::priv::WindowImplX11
getPosition	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^Vector2i WindowImplWin32::getPosition() const$/;"	f	class:sf::priv::WindowImplWin32
getPosition	.\dep\SFML\src\SFML\Window\Window.cpp	/^Vector2i Window::getPosition() const$/;"	f	class:sf::Window
getPreferences	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    ReporterPreferences LegacyReporterAdapter::getPreferences() const {$/;"	f	class:Catch::LegacyReporterAdapter
getPreferences	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        virtual ReporterPreferences getPreferences() const {$/;"	f	struct:Catch::CompactReporter
getPrimitiveType	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^PrimitiveType VertexArray::getPrimitiveType() const$/;"	f	class:sf::VertexArray
getProcessName	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::string getProcessName() const { return m_data.processName; }$/;"	f	class:Catch::Config
getProjSpeed	.\src\include\Object.h	/^	float getProjSpeed() const { return _stats["projSpeed"] + _baseStats["projSpeed"]; }$/;"	f	class:Object
getProjectile	.\src\include\Tower.h	/^	Object* getProjectile() { return _projectile; }$/;"	f	class:Tower
getPublicAddress	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^IpAddress IpAddress::getPublicAddress(Time timeout)$/;"	f	class:sf::IpAddress
getRadius	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^float CircleShape::getRadius() const$/;"	f	class:sf::CircleShape
getRange	.\src\include\Object.h	/^	int getRange() const { return _stats["range"] + _baseStats["range"]; }$/;"	f	class:Object
getRegistryHub	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^    IRegistryHub& getRegistryHub() {$/;"	f	namespace:Catch
getRemoteAddress	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^IpAddress TcpSocket::getRemoteAddress() const$/;"	f	class:sf::TcpSocket
getRemotePort	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^unsigned short TcpSocket::getRemotePort() const$/;"	f	class:sf::TcpSocket
getReporterNames	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::vector<std::string> getReporterNames() const { return m_data.reporterNames; }$/;"	f	class:Catch::Config
getResponse	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::getResponse()$/;"	f	class:sf::Ftp
getResultCapture	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual IResultCapture* getResultCapture() {$/;"	f	class:Catch::Context
getResultCapture	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^    IResultCapture& getResultCapture() {$/;"	f	namespace:Catch
getResultType	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    ResultWas::OfType AssertionResult::getResultType() const {$/;"	f	class:Catch::AssertionResult
getRotation	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^float Transformable::getRotation() const$/;"	f	class:sf::Transformable
getRotation	.\dep\SFML\src\SFML\Graphics\View.cpp	/^float View::getRotation() const$/;"	f	class:sf::View
getRunner	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual IRunner* getRunner() {$/;"	f	class:Catch::Context
getS	.\dep\Lua\src\lauxlib.c	/^static const char *getS (lua_State *L, void *ud, size_t *size) {$/;"	f	file:
getSampleCount	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^Uint64 InputSoundFile::getSampleCount() const$/;"	f	class:sf::InputSoundFile
getSampleCount	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^Uint64 SoundBuffer::getSampleCount() const$/;"	f	class:sf::SoundBuffer
getSampleRate	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^unsigned int InputSoundFile::getSampleRate() const$/;"	f	class:sf::InputSoundFile
getSampleRate	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^unsigned int SoundBuffer::getSampleRate() const$/;"	f	class:sf::SoundBuffer
getSampleRate	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^unsigned int SoundRecorder::getSampleRate() const$/;"	f	class:sf::SoundRecorder
getSampleRate	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^unsigned int SoundStream::getSampleRate() const$/;"	f	class:sf::SoundStream
getSamples	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^const Int16* SoundBuffer::getSamples() const$/;"	f	class:sf::SoundBuffer
getScale	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^const Vector2f& Transformable::getScale() const$/;"	f	class:sf::Transformable
getScreenSizeInPixels	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^void getScreenSizeInPixels(ANativeActivity* activity, int* width, int* height)$/;"	f
getSelected	.\src\include\Map.h	/^	Ship* getSelected() { return _selected; }$/;"	f	class:Map
getSettings	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^const ContextSettings& GlContext::getSettings() const$/;"	f	class:sf::priv::GlContext
getSettings	.\dep\SFML\src\SFML\Window\Window.cpp	/^const ContextSettings& Window::getSettings() const$/;"	f	class:sf::Window
getShortDuration	.\src\include\Perk.h	/^    int getShortDuration() const { return (int)(_duration + 0.5f); }$/;"	f	class:Perk
getShortMaxDuration	.\src\include\Perk.h	/^	int getShortMaxDuration() const { return (int)_maxDuration; }$/;"	f	class:Perk
getSize	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^Vector2u Image::getSize() const$/;"	f	class:sf::Image
getSize	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^const Vector2f& RectangleShape::getSize() const$/;"	f	class:sf::RectangleShape
getSize	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^Vector2u RenderTexture::getSize() const$/;"	f	class:sf::RenderTexture
getSize	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^Vector2u RenderWindow::getSize() const$/;"	f	class:sf::RenderWindow
getSize	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Vector2u Texture::getSize() const$/;"	f	class:sf::Texture
getSize	.\dep\SFML\src\SFML\Graphics\View.cpp	/^const Vector2f& View::getSize() const$/;"	f	class:sf::View
getSize	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^Int64 ResourceStream::getSize()$/;"	f	class:sf::priv::ResourceStream
getSize	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^Int64 FileInputStream::getSize()$/;"	f	class:sf::FileInputStream
getSize	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^Int64 MemoryInputStream::getSize()$/;"	f	class:sf::MemoryInputStream
getSize	.\dep\SFML\src\SFML\System\String.cpp	/^std::size_t String::getSize() const$/;"	f	class:sf::String
getSize	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^Vector2u WindowImplAndroid::getSize() const$/;"	f	class:sf::priv::WindowImplAndroid
getSize	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^Vector2u WindowImplX11::getSize() const$/;"	f	class:sf::priv::WindowImplX11
getSize	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^Vector2u WindowImplWin32::getSize() const$/;"	f	class:sf::priv::WindowImplWin32
getSize	.\dep\SFML\src\SFML\Window\Window.cpp	/^Vector2u Window::getSize() const$/;"	f	class:sf::Window
getSize	.\src\include\GuiComponent.h	/^	Vector2 getSize() const { return _size; }$/;"	f	class:GuiComponent
getSize	.\src\include\Window.h	/^	Vector2 getSize() const { return _size; }$/;"	f	class:Window
getSourceInfo	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    SourceLineInfo AssertionResult::getSourceInfo() const {$/;"	f	class:Catch::AssertionResult
getSpeed	.\src\include\Object.h	/^	int getSpeed() const { return _stats["speed"] + _baseStats["speed"]; }$/;"	f	class:Object
getStacks	.\src\include\Perk.h	/^	int getStacks() const { return _stacks; }$/;"	f	class:Perk
getStartMidEnd	.\include\sol\Optional\test_optional.cpp	/^std::tuple<Date, Date, Date> getStartMidEnd() { return std::tuple<Date, Date, Date>{Date{1}, Date{2}, Date{3}}; }$/;"	f
getStat	.\src\src\Stats.cpp	/^float Stats::getStat(std::string name) const {$/;"	f	class:Stats
getStatMod	.\src\include\Object.h	/^	Stats getStatMod() { return _stats; }$/;"	f	class:Object
getState	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^const JoystickState& JoystickManager::getState(unsigned int joystick) const$/;"	f	class:sf::priv::JoystickManager
getState	.\src\include\Window.h	/^	const WindowState getState() { return _currState; }$/;"	f	class:Window
getStateString	.\src\src\Window.cpp	/^const std::string Window::getStateString() {$/;"	f	class:Window
getStateString	.\src\src\Window.cpp	/^const std::string Window::getStateString(WindowState state) {$/;"	f	class:Window
getStats	.\src\include\Object.h	/^	Stats getStats() { return _stats + _baseStats; }$/;"	f	class:Object
getStats	.\src\include\Perk.h	/^	Stats* getStats() { return &_stats; }$/;"	f	class:Perk
getStatus	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound::Status Sound::getStatus() const$/;"	f	class:sf::Sound
getStatus	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^SoundSource::Status SoundSource::getStatus() const$/;"	f	class:sf::SoundSource
getStatus	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^SoundStream::Status SoundStream::getStatus() const$/;"	f	class:sf::SoundStream
getStatus	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response::Status Ftp::Response::getStatus() const$/;"	f	class:sf::Ftp::Response
getStatus	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Response::Status Http::Response::getStatus() const$/;"	f	class:sf::Http::Response
getStreamContents	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    bool getStreamContents(sf::InputStream& stream, std::vector<char>& buffer)$/;"	f	namespace:__anon128
getString	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^const String& Text::getString() const$/;"	f	class:sf::Text
getStyle	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^Uint32 Text::getStyle() const$/;"	f	class:sf::Text
getSucceeded	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        size_t getSucceeded$/;"	f	class:Catch::iTchRunnerReporter
getSystemHandle	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^WindowHandle WindowImplAndroid::getSystemHandle() const$/;"	f	class:sf::priv::WindowImplAndroid
getSystemHandle	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^WindowHandle WindowImplX11::getSystemHandle() const$/;"	f	class:sf::priv::WindowImplX11
getSystemHandle	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^WindowHandle WindowImplWin32::getSystemHandle() const$/;"	f	class:sf::priv::WindowImplWin32
getSystemHandle	.\dep\SFML\src\SFML\Window\Window.cpp	/^WindowHandle Window::getSystemHandle() const$/;"	f	class:sf::Window
getTarget	.\src\include\Object.h	/^	Target* getTarget() const { return _target; }$/;"	f	class:Object
getTestCaseInfo	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCaseInfo const& TestCase::getTestCaseInfo() const$/;"	f	class:Catch::TestCase
getTestMacroName	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    std::string AssertionResult::getTestMacroName() const {$/;"	f	class:Catch::AssertionResult
getTexture	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^const Texture& Font::getTexture(unsigned int characterSize) const$/;"	f	class:sf::Font
getTexture	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^const Texture& RenderTexture::getTexture() const$/;"	f	class:sf::RenderTexture
getTexture	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^const Texture* Shape::getTexture() const$/;"	f	class:sf::Shape
getTexture	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^const Texture* Sprite::getTexture() const$/;"	f	class:sf::Sprite
getTextureRect	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^const IntRect& Shape::getTextureRect() const$/;"	f	class:sf::Shape
getTextureRect	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^const IntRect& Sprite::getTextureRect() const$/;"	f	class:sf::Sprite
getTheRegistryHub	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^        inline RegistryHub*& getTheRegistryHub() {$/;"	f	namespace:Catch::__anon180
getTitle	.\src\src\Perk.cpp	/^std::string Perk::getTitle() const {$/;"	f	class:Perk
getTouchPosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int finger)$/;"	f	class:sf::priv::InputImpl
getTouchPosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int finger, const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
getTouchPosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int \/*finger*\/)$/;"	f	class:sf::priv::InputImpl
getTouchPosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int \/*finger*\/, const Window& \/*relativeTo*\/)$/;"	f	class:sf::priv::InputImpl
getTouchPosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int \/*finger*\/)$/;"	f	class:sf::priv::InputImpl
getTouchPosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^Vector2i InputImpl::getTouchPosition(unsigned int \/*finger*\/, const Window& \/*relativeTo*\/)$/;"	f	class:sf::priv::InputImpl
getTransform	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^const Transform& Transformable::getTransform() const$/;"	f	class:sf::Transformable
getTransform	.\dep\SFML\src\SFML\Graphics\View.cpp	/^const Transform& View::getTransform() const$/;"	f	class:sf::View
getTree	.\src\include\Object.h	/^	SkillTree* getTree() const { return _tree; }$/;"	f	class:Object
getType	.\src\src\Map.cpp	/^std::string getType(Object* o) {$/;"	f
getUdevAttribute	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    const char* getUdevAttribute(udev_device* udevDevice, const std::string& attributeName)$/;"	f	namespace:__anon150
getUdevAttributeUint	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    unsigned int getUdevAttributeUint(udev_device* udevDevice, const std::string& attributeName)$/;"	f	namespace:__anon150
getUnderlinePosition	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^float Font::getUnderlinePosition(unsigned int characterSize) const$/;"	f	class:sf::Font
getUnderlineThickness	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^float Font::getUnderlineThickness(unsigned int characterSize) const$/;"	f	class:sf::Font
getUnicode	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::getUnicode(AInputEvent* event)$/;"	f	class:sf::priv::WindowImplAndroid
getUniqueId	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^    sf::Uint64 getUniqueId()$/;"	f	namespace:__anon130
getUpVector	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^Vector3f AudioDevice::getUpVector()$/;"	f	class:sf::priv::AudioDevice
getUpVector	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^Vector3f Listener::getUpVector()$/;"	f	class:sf::Listener
getUsbAttribute	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    const char* getUsbAttribute(udev_device* udevDevice, const std::string& attributeName)$/;"	f	namespace:__anon150
getUsbAttributeUint	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    unsigned int getUsbAttributeUint(udev_device* udevDevice, const std::string& attributeName)$/;"	f	namespace:__anon150
getValidSize	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^unsigned int Texture::getValidSize(unsigned int size)$/;"	f	class:sf::Texture
getValue	.\dep\SFML\src\SFML\System\ThreadLocal.cpp	/^void* ThreadLocal::getValue() const$/;"	f	class:sf::ThreadLocal
getValue	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^void* ThreadLocalImpl::getValue() const$/;"	f	class:sf::priv::ThreadLocalImpl
getValue	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^void* ThreadLocalImpl::getValue() const$/;"	f	class:sf::priv::ThreadLocalImpl
getValue	.\dep\SFML\src\SFML\Window\Sensor.cpp	/^Vector3f Sensor::getValue(Type sensor)$/;"	f	class:sf::Sensor
getValue	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^Vector3f SensorManager::getValue(Sensor::Type sensor) const$/;"	f	class:sf::priv::SensorManager
getValue	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    virtual T getValue( std::size_t index ) const {$/;"	f	class:Catch::BetweenGenerator
getValue	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    virtual T getValue( std::size_t index ) const {$/;"	f	class:Catch::ValuesGenerator
getValue	.\include\sol\Optional\test_optional.cpp	/^T getValue( tr2::optional<T> newVal = tr2::nullopt, tr2::optional<T&> storeHere = tr2::nullopt )$/;"	f
getVersionString	.\include\sol\Catch\scripts\releaseCommon.py	/^    def getVersionString(self):$/;"	m	class:Version
getVertexCount	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^std::size_t VertexArray::getVertexCount() const$/;"	f	class:sf::VertexArray
getView	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^const View& RenderTarget::getView() const$/;"	f	class:sf::RenderTarget
getView	.\src\include\GuiComponent.h	/^	sf::View getView() { return _view; }$/;"	f	class:GuiComponent
getViewport	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^IntRect RenderTarget::getViewport(const View& view) const$/;"	f	class:sf::RenderTarget
getViewport	.\dep\SFML\src\SFML\Graphics\View.cpp	/^const FloatRect& View::getViewport() const$/;"	f	class:sf::View
getVolume	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^float SoundSource::getVolume() const$/;"	f	class:sf::SoundSource
getWidth	.\src\include\GuiComponent.h	/^	float getWidth() { return _size.X; }$/;"	f	class:GuiComponent
getWidth	.\src\include\SkillTree.h	/^	float getWidth() { return _size.X; }$/;"	f	class:SkillTree
getWidth	.\src\include\Window.h	/^	int getWidth() { return _size.X; }$/;"	f	class:Window
getWorkingDir	.\src\src\Convert.cpp	/^	std::string getWorkingDir() {$/;"	f	namespace:convert
getWorkingDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::DirectoryResponse Ftp::getWorkingDirectory()$/;"	f	class:sf::Ftp
getX	.\src\include\GuiComponent.h	/^	float getX() { return _pos.X; }$/;"	f	class:GuiComponent
getX	.\src\include\SkillTree.h	/^	float getX() { return pos.X; }$/;"	f	class:SkillNode
getX	.\src\include\Target.h	/^	float getX() const { return x; }$/;"	f	class:Target
getY	.\src\include\GuiComponent.h	/^	float getY() { return _pos.Y; }$/;"	f	class:GuiComponent
getY	.\src\include\SkillTree.h	/^	float getY() { return pos.Y; }$/;"	f	class:SkillNode
getY	.\src\include\Target.h	/^	float getY() const { return y; }$/;"	f	class:Target
get_as_upvalues	.\include\sol\single\sol\sol.hpp	/^			inline std::pair<T, int> get_as_upvalues(lua_State* L, int index = 1) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
get_as_upvalues	.\include\sol\sol\stack.hpp	/^			inline std::pair<T, int> get_as_upvalues(lua_State* L, int index = 1) {$/;"	f	namespace:sol::stack::stack_detail
get_call_syntax	.\include\sol\single\sol\sol.hpp	/^		inline call_syntax get_call_syntax(lua_State* L, const std::string& key, int index = -2) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
get_call_syntax	.\include\sol\sol\stack.hpp	/^		inline call_syntax get_call_syntax(lua_State* L, const std::string& key, int index = -2) {$/;"	f	namespace:sol::stack
get_default_handler	.\include\sol\single\sol\sol.hpp	/^		static const reference& get_default_handler() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
get_default_handler	.\include\sol\sol\protected_function.hpp	/^		static const reference& get_default_handler() {$/;"	f	class:sol::basic_protected_function
get_field	.\include\sol\single\sol\sol.hpp	/^		void get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
get_field	.\include\sol\single\sol\sol.hpp	/^		void get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
get_field	.\include\sol\sol\stack_core.hpp	/^		void get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::stack
get_field	.\include\sol\sol\stack_core.hpp	/^		void get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::stack
get_glyph_cbox	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Renderer_GetCBoxFunc    get_glyph_cbox;$/;"	m	struct:FT_Renderer_Class_
get_glyph_data	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Incremental_GetGlyphDataFunc     get_glyph_data;$/;"	m	struct:FT_Incremental_FuncsRec_
get_glyph_metrics	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Incremental_GetGlyphMetricsFunc  get_glyph_metrics;$/;"	m	struct:FT_Incremental_FuncsRec_
get_include	.\include\sol\single.py	/^def get_include(line, base_path):$/;"	f
get_interface	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Module_Requester    get_interface;$/;"	m	struct:FT_Module_Class_
get_no_nil	.\include\sol\single\sol\sol.hpp	/^			static T* get_no_nil(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get_no_nil	.\include\sol\sol\stack_get.hpp	/^			static T* get_no_nil(lua_State* L, int index, record& tracking) {$/;"	f	struct:sol::stack::getter
get_no_nil_from	.\include\sol\single\sol\sol.hpp	/^			static T* get_no_nil_from(lua_State* L, void* udata, int index, record&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::getter
get_no_nil_from	.\include\sol\sol\stack_get.hpp	/^			static T* get_no_nil_from(lua_State* L, void* udata, int index, record&) {$/;"	f	struct:sol::stack::getter
get_num	.\include\sol\test_usertypes.cpp	/^	int get_num() {$/;"	f	class:Base
get_num_10	.\include\sol\test_usertypes.cpp	/^	int get_num_10() {$/;"	f	class:Derived
get_or	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get_or(D&& otherwise) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
get_or	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) get_or(T&& otherwise) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
get_or	.\include\sol\sol\proxy.hpp	/^		decltype(auto) get_or(D&& otherwise) const {$/;"	f	struct:sol::proxy
get_or	.\include\sol\sol\proxy.hpp	/^		decltype(auto) get_or(T&& otherwise) const {$/;"	f	struct:sol::proxy
get_or	.\include\sol\sol\state_view.hpp	/^		decltype(auto) get_or(Key&& key, D&& otherwise) const {$/;"	f	class:sol::state_view
get_or	.\include\sol\sol\state_view.hpp	/^		decltype(auto) get_or(Key&& key, T&& otherwise) const {$/;"	f	class:sol::state_view
get_or	.\include\sol\sol\table_core.hpp	/^		decltype(auto) get_or(Key&& key, D&& otherwise) const {$/;"	f	class:sol::basic_table_core
get_or	.\include\sol\sol\table_core.hpp	/^		decltype(auto) get_or(Key&& key, T&& otherwise) const {$/;"	f	class:sol::basic_table_core
get_prompt	.\dep\Lua\src\lua.c	/^static const char *get_prompt (lua_State *L, int firstline) {$/;"	f	file:
get_revision	.\include\sol\single.py	/^def get_revision():$/;"	f
get_std_func	.\include\sol\single\sol\sol.hpp	/^			static std::function<Signature> get_std_func(types<>, types<FxArgs...> t, lua_State* L, int index) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
get_std_func	.\include\sol\single\sol\sol.hpp	/^			static std::function<Signature> get_std_func(types<Ret...>, types<Args...>, lua_State* L, int index) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
get_std_func	.\include\sol\single\sol\sol.hpp	/^			static std::function<Signature> get_std_func(types<void>, types<FxArgs...>, lua_State* L, int index) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
get_std_func	.\include\sol\sol\function.hpp	/^			static std::function<Signature> get_std_func(types<>, types<FxArgs...> t, lua_State* L, int index) {$/;"	f	struct:sol::stack::getter
get_std_func	.\include\sol\sol\function.hpp	/^			static std::function<Signature> get_std_func(types<Ret...>, types<Args...>, lua_State* L, int index) {$/;"	f	struct:sol::stack::getter
get_std_func	.\include\sol\sol\function.hpp	/^			static std::function<Signature> get_std_func(types<void>, types<FxArgs...>, lua_State* L, int index) {$/;"	f	struct:sol::stack::getter
get_type_name	.\include\sol\single\sol\sol.hpp	/^		inline std::string get_type_name(const std::type_info& id) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
get_type_name	.\include\sol\sol\demangle.hpp	/^		inline std::string get_type_name(const std::type_info& id) {$/;"	f	namespace:sol::detail
get_version	.\include\sol\single.py	/^def get_version():$/;"	f
getarg	.\dep\Lua\src\lopcodes.h	93;"	d
getarg	.\include\lua\lopcodes.h	93;"	d
getbinopr	.\dep\Lua\src\lparser.c	/^static BinOpr getbinopr (int op) {$/;"	f	file:
getboolfield	.\dep\Lua\src\loslib.c	/^static int getboolfield (lua_State *L, const char *key) {$/;"	f	file:
getcached	.\dep\Lua\src\lvm.c	/^static LClosure *getcached (Proto *p, UpVal **encup, StkId base) {$/;"	f	file:
getco	.\dep\Lua\src\lcorolib.c	/^static lua_State *getco (lua_State *L) {$/;"	f	file:
getdebt	.\dep\Lua\src\lgc.c	/^static l_mem getdebt (global_State *g) {$/;"	f	file:
getdetails	.\dep\Lua\src\lstrlib.c	/^static KOption getdetails (Header *h, size_t totalsize,$/;"	f	file:
getfield	.\dep\Lua\src\loslib.c	/^static int getfield (lua_State *L, const char *key, int d, int delta) {$/;"	f	file:
getfreepos	.\dep\Lua\src\ltable.c	/^static Node *getfreepos (Table *t) {$/;"	f	file:
getfuncline	.\dep\Lua\src\ldebug.h	16;"	d
getfuncline	.\include\lua\ldebug.h	16;"	d
getfuncname	.\dep\Lua\src\ldebug.c	/^static const char *getfuncname (lua_State *L, CallInfo *ci, const char **name) {$/;"	f	file:
getgeneric	.\dep\Lua\src\ltable.c	/^static const TValue *getgeneric (Table *t, const TValue *key) {$/;"	f	file:
gethexa	.\dep\Lua\src\llex.c	/^static int gethexa (LexState *ls) {$/;"	f	file:
getinstruction	.\dep\Lua\src\lcode.h	44;"	d
getinstruction	.\include\lua\lcode.h	44;"	d
getiofile	.\dep\Lua\src\liolib.c	/^static FILE *getiofile (lua_State *L, const char *findex) {$/;"	f	file:
getjump	.\dep\Lua\src\lcode.c	/^static int getjump (FuncState *fs, int pc) {$/;"	f	file:
getjumpcontrol	.\dep\Lua\src\lcode.c	/^static Instruction *getjumpcontrol (FuncState *fs, int pc) {$/;"	f	file:
getlocvar	.\dep\Lua\src\lparser.c	/^static LocVar *getlocvar (FuncState *fs, int i) {$/;"	f	file:
getnum	.\dep\Lua\src\lstrlib.c	/^static int getnum (const char **fmt, int df) {$/;"	f	file:
getnumlimit	.\dep\Lua\src\lstrlib.c	/^static int getnumlimit (Header *h, const char **fmt, int df) {$/;"	f	file:
getoah	.\dep\Lua\src\lstate.h	112;"	d
getoah	.\include\lua\lstate.h	112;"	d
getobjname	.\dep\Lua\src\ldebug.c	/^static const char *getobjname (Proto *p, int lastpc, int reg,$/;"	f	file:
getoption	.\dep\Lua\src\lstrlib.c	/^static KOption getoption (Header *h, const char **fmt, int *size) {$/;"	f	file:
getproto	.\dep\Lua\src\lobject.h	468;"	d
getproto	.\include\lua\lobject.h	468;"	d
getstr	.\dep\Lua\src\lobject.h	328;"	d
getstr	.\include\lua\lobject.h	328;"	d
gettableProtected	.\dep\Lua\src\lvm.c	774;"	d	file:
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T&> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_signed<T>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_unsigned<T>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<std::is_base_of<reference, T>::value || std::is_base_of<stack_reference, T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<std::is_enum<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<bool> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<c_closure> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<char16_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<char32_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<char> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<const char*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<error> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<light<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<lightuserdata_value> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<lua_CFunction> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<meta_function> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<nil_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<non_null<T*>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<nullopt_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<optional<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<stack_proxy> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::function<Signature>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::nullptr_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::pair<A, B>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::reference_wrapper<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::tuple<Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::u16string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::u32string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<std::wstring> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<string_detail::string_shim> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<this_state> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<type> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<user<T*>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<user<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<userdata_value> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<variadic_args> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<void*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\single\sol\sol.hpp	/^		struct getter<wchar_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
getter	.\include\sol\sol\function.hpp	/^		struct getter<std::function<Signature>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_check_get.hpp	/^		struct getter<optional<T>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T&> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T*> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_signed<T>>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_unsigned<T>>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<std::is_base_of<reference, T>::value || std::is_base_of<stack_reference, T>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<std::is_enum<T>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<bool> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<c_closure> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<char> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<const char*> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<error> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<light<T>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<lightuserdata_value> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<lua_CFunction> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<meta_function> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<nil_t> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<non_null<T*>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<nullopt_t> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<std::nullptr_t> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<std::pair<A, B>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<std::reference_wrapper<T>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<std::string> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<std::tuple<Args...>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<string_detail::string_shim> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<this_state> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<type> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<user<T*>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<user<T>> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<userdata_value> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_get.hpp	/^		struct getter<void*> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\stack_proxy.hpp	/^		struct getter<stack_proxy> {$/;"	s	namespace:sol::stack
getter	.\include\sol\sol\variadic_args.hpp	/^		struct getter<variadic_args> {$/;"	s	namespace:sol::stack
getter	.\include\sol\test_customizations.cpp	/^		struct getter<two_things> {$/;"	s	namespace:sol::stack	file:
getthread	.\dep\Lua\src\ldblib.c	/^static lua_State *getthread (lua_State *L, int *arg) {$/;"	f	file:
gettotalbytes	.\dep\Lua\src\lstate.h	224;"	d
gettotalbytes	.\include\lua\lstate.h	224;"	d
getudatamem	.\dep\Lua\src\lobject.h	368;"	d
getudatamem	.\include\lua\lobject.h	368;"	d
getunopr	.\dep\Lua\src\lparser.c	/^static UnOpr getunopr (int op) {$/;"	f	file:
getupvalname	.\dep\Lua\src\ldebug.c	/^static const char *getupvalname (CallInfo *ci, const TValue *o,$/;"	f	file:
getupvalref	.\dep\Lua\src\lapi.c	/^static UpVal **getupvalref (lua_State *L, int fidx, int n, LClosure **pf) {$/;"	f	file:
getuservalue	.\dep\Lua\src\lobject.h	377;"	d
getuservalue	.\include\lua\lobject.h	377;"	d
gfasttm	.\dep\Lua\src\ltm.h	48;"	d
gfasttm	.\include\lua\ltm.h	48;"	d
gi	.\include\sol\Optional\test_optional.cpp	/^int gi = 0;$/;"	v
gief	.\include\sol\test_usertypes.cpp	/^	void gief() {$/;"	f	struct:giver
gief_stuff	.\include\sol\test_usertypes.cpp	/^	static void gief_stuff(giver& t, int a) {$/;"	f	struct:giver
giver	.\include\sol\test_usertypes.cpp	/^	giver() {$/;"	f	struct:giver
giver	.\include\sol\test_usertypes.cpp	/^struct giver {$/;"	s	file:
gkey	.\dep\Lua\src\ltable.h	19;"	d
gkey	.\include\lua\ltable.h	19;"	d
glActiveTextureARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	800;"	d
glAttachObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	814;"	d
glBindAttribLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	896;"	d
glBindFramebufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	914;"	d
glBindRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	916;"	d
glBlendEquationEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	793;"	d
glBlendEquationSeparateEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	908;"	d
glBlendFuncSeparateEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	808;"	d
glCheck	.\dep\SFML\src\SFML\Graphics\GLCheck.hpp	46;"	d
glCheckError	.\dep\SFML\src\SFML\Graphics\GLCheck.cpp	/^void glCheckError(const char* file, unsigned int line, const char* expression)$/;"	f	namespace:sf::priv
glCheckFramebufferStatusEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	918;"	d
glClientActiveTextureARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	802;"	d
glCompileShaderARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	816;"	d
glCreateProgramObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	818;"	d
glCreateShaderObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	820;"	d
glDeleteFramebuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	920;"	d
glDeleteObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	822;"	d
glDeleteRenderbuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	922;"	d
glDetachObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	824;"	d
glFramebufferRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	924;"	d
glFramebufferTexture1DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	926;"	d
glFramebufferTexture2DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	928;"	d
glFramebufferTexture3DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	930;"	d
glGenFramebuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	932;"	d
glGenRenderbuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	934;"	d
glGenerateMipmapEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	936;"	d
glGetActiveAttribARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	898;"	d
glGetActiveUniformARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	826;"	d
glGetAttachedObjectsARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	828;"	d
glGetAttribLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	900;"	d
glGetFramebufferAttachmentParameterivEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	938;"	d
glGetHandleARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	830;"	d
glGetInfoLogARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	832;"	d
glGetObjectParameterfvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	834;"	d
glGetObjectParameterivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	836;"	d
glGetRenderbufferParameterivEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	940;"	d
glGetShaderSourceARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	838;"	d
glGetStringiFuncType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    typedef const GLubyte* (*glGetStringiFuncType)(GLenum, GLuint);$/;"	t	file:
glGetStringiFuncType	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    typedef const GLubyte* (APIENTRY *glGetStringiFuncType)(GLenum, GLuint);$/;"	t	file:
glGetUniformLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	840;"	d
glGetUniformfvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	842;"	d
glGetUniformivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	844;"	d
glIsFramebufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	942;"	d
glIsRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	944;"	d
glLinkProgramARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	846;"	d
glRenderbufferStorageEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	946;"	d
glShaderSourceARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	848;"	d
glStatesSet	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache
glStatesSet	.\include\SFML\Graphics\RenderTarget.hpp	/^        bool      glStatesSet;    \/\/\/< Are our internal GL states set yet?$/;"	m	struct:sf::RenderTarget::StatesCache
glUniform1fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	850;"	d
glUniform1fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	852;"	d
glUniform1iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	854;"	d
glUniform1ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	856;"	d
glUniform2fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	858;"	d
glUniform2fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	860;"	d
glUniform2iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	862;"	d
glUniform2ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	864;"	d
glUniform3fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	866;"	d
glUniform3fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	868;"	d
glUniform3iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	870;"	d
glUniform3ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	872;"	d
glUniform4fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	874;"	d
glUniform4fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	876;"	d
glUniform4iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	878;"	d
glUniform4ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	880;"	d
glUniformMatrix2fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	882;"	d
glUniformMatrix3fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	884;"	d
glUniformMatrix4fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	886;"	d
glUseProgramObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	888;"	d
glValidateProgramARB	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	890;"	d
glXCreateContextAttribsARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	186;"	d
glXSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	170;"	d
glXSwapIntervalSGI	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	180;"	d
glob	.\include\sol\Catch\scripts\approve.py	/^import glob$/;"	i
glob	.\include\sol\bootstrap.py	/^import os, sys, glob, re$/;"	i
global	.\include\sol\single\sol\sol.hpp	/^		global_table global;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
global	.\include\sol\sol\state_view.hpp	/^		global_table global;$/;"	m	class:sol::state_view
globalCleanup	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^void GlContext::globalCleanup()$/;"	f	class:sf::priv::GlContext
globalCount	.\include\sol\Catch\include\internal\catch_message.h	/^        static unsigned int globalCount;$/;"	m	struct:Catch::MessageInfo
globalCount	.\include\sol\Catch\include\internal\catch_message.hpp	/^    unsigned int MessageInfo::globalCount = 0;$/;"	m	class:Catch::MessageInfo
globalDevice	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^    sf::priv::AudioDevice* globalDevice;$/;"	m	namespace:__anon117	file:
globalInit	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^void GlContext::globalInit()$/;"	f	class:sf::priv::GlContext
globalInitializer	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^SocketInitializer globalInitializer;$/;"	m	namespace:sf::priv	file:
globalL	.\dep\Lua\src\lua.c	/^static lua_State *globalL = NULL;$/;"	v	file:
globalOnEvent	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^LRESULT CALLBACK WindowImplWin32::globalOnEvent(HWND handle, UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:sf::priv::WindowImplWin32
global_State	.\dep\Lua\src\lstate.h	/^typedef struct global_State {$/;"	s
global_State	.\dep\Lua\src\lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_State	.\include\lua\lstate.h	/^typedef struct global_State {$/;"	s
global_State	.\include\lua\lstate.h	/^} global_State;$/;"	t	typeref:struct:global_State
global_table	.\include\sol\single\sol\sol.hpp	/^	typedef table_core<true> global_table;$/;"	t	class:sol::sol::call_syntax::call_status::type
global_table	.\include\sol\sol\types.hpp	/^	typedef table_core<true> global_table;$/;"	t	class:sol::call_syntax::call_status::type
global_tag	.\include\sol\single\sol\sol.hpp	/^		struct global_tag { } const global_{};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
global_tag	.\include\sol\sol\reference.hpp	/^		struct global_tag { } const global_{};$/;"	s	namespace:sol::detail
globals	.\include\sol\sol\state_view.hpp	/^		global_table globals() const {$/;"	f	class:sol::state_view
glue_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long glue_bits;$/;"	m	struct:vorbis_block
glue_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t glue_bits;$/;"	m	struct:vorbis_dsp_state
glxErrorMutex	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^    sf::Mutex glxErrorMutex;$/;"	m	namespace:__anon145	file:
glxErrorOccurred	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^    bool glxErrorOccurred = false;$/;"	m	namespace:__anon145	file:
glyph	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_GlyphSlot      glyph;$/;"	m	struct:FT_FaceRec_
glyph	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  FT_Done_Glyph( FT_Glyph  glyph );$/;"	v
glyph_bbox	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_GetBBoxFunc    glyph_bbox;$/;"	m	struct:FT_Glyph_Class_
glyph_copy	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_CopyFunc       glyph_copy;$/;"	m	struct:FT_Glyph_Class_
glyph_done	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_DoneFunc       glyph_done;$/;"	m	struct:FT_Glyph_Class_
glyph_format	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Glyph_Format        glyph_format;$/;"	m	struct:FT_Raster_Funcs_
glyph_format	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_Format            glyph_format;$/;"	m	struct:FT_Renderer_Class_
glyph_format	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_Format         glyph_format;$/;"	m	struct:FT_Glyph_Class_
glyph_init	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_InitFunc       glyph_init;$/;"	m	struct:FT_Glyph_Class_
glyph_prepare	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_PrepareFunc    glyph_prepare;$/;"	m	struct:FT_Glyph_Class_
glyph_size	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Long                 glyph_size;$/;"	m	struct:FT_Glyph_Class_
glyph_transform	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Glyph_TransformFunc  glyph_transform;$/;"	m	struct:FT_Glyph_Class_
glyphs	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page
glyphs	.\include\SFML\Graphics\Font.hpp	/^        GlyphTable       glyphs;  \/\/\/< Table mapping code points to their corresponding glyph$/;"	m	struct:sf::Font::Page
gmatch	.\dep\Lua\src\lstrlib.c	/^static int gmatch (lua_State *L) {$/;"	f	file:
gmatch_aux	.\dep\Lua\src\lstrlib.c	/^static int gmatch_aux (lua_State *L) {$/;"	f	file:
gnext	.\dep\Lua\src\ltable.h	15;"	d
gnext	.\include\lua\ltable.h	15;"	d
gnode	.\dep\Lua\src\ltable.h	13;"	d
gnode	.\include\lua\ltable.h	13;"	d
gnodelast	.\dep\Lua\src\lgc.c	107;"	d	file:
goToFullscreenMode	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^void goToFullscreenMode(ANativeActivity* activity)$/;"	f
gorci	.\include\sol\Optional\test_optional.cpp	/^constexpr tr2::optional<int const&> gorci = gci;$/;"	v
gori	.\include\sol\Optional\test_optional.cpp	/^constexpr tr2::optional<int&> gori = gi;$/;"	v
gotostat	.\dep\Lua\src\lparser.c	/^static void gotostat (LexState *ls, int pc) {$/;"	f	file:
grabFocus	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::grabFocus()$/;"	f	class:sf::priv::WindowImplX11
granule_vals	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  ogg_int64_t *granule_vals; \/* granulepos values for headers. Not compact$/;"	m	struct:__anon90
granulepos	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  ogg_int64_t   granulepos;$/;"	m	struct:__anon90
granulepos	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  ogg_int64_t  granulepos;$/;"	m	struct:__anon91
granulepos	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t granulepos;$/;"	m	struct:vorbis_block
granulepos	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t granulepos;$/;"	m	struct:vorbis_dsp_state
gray	.\dep\Lua\src\lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray	.\include\lua\lstate.h	/^  GCObject *gray;  \/* list of gray objects *\/$/;"	m	struct:global_State
gray2black	.\dep\Lua\src\lgc.h	99;"	d
gray2black	.\include\lua\lgc.h	99;"	d
gray_spans	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_SpanFunc             gray_spans;$/;"	m	struct:FT_Raster_Params_
grayagain	.\dep\Lua\src\lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
grayagain	.\include\lua\lstate.h	/^  GCObject *grayagain;  \/* list of objects to be traversed atomically *\/$/;"	m	struct:global_State
green	.\src\src\Colors.cpp	/^	const char green[] =   { 0x1b, '[', '0', '3', '2', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
gri	.\include\sol\Optional\test_optional.cpp	/^constexpr int& gri = *gori;$/;"	v
groupIndex	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::size_t groupIndex;$/;"	m	struct:Catch::GroupInfo
groupInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        GroupInfo groupInfo;$/;"	m	struct:Catch::TestGroupStats
groupsCounts	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::size_t groupsCounts;$/;"	m	struct:Catch::GroupInfo
growstack	.\dep\Lua\src\lapi.c	/^static void growstack (lua_State *L, void *ud) {$/;"	f	file:
gt	.\dep\Lua\src\lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
gt	.\include\lua\lparser.h	/^  Labellist gt;  \/* list of pending gotos *\/$/;"	m	struct:Dyndata
guardParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^guardParser = re.compile( r'\\s*#.*TWOBLUECUBES_CATCH_.*_INCLUDED')$/;"	v
gval	.\dep\Lua\src\ltable.h	14;"	d
gval	.\include\lua\ltable.h	14;"	d
h	.\dep\Lua\src\llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState
h	.\dep\Lua\src\lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Table
h	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int h,v;$/;"	m	struct:__anon98::__anon99
h	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int w,h;$/;"	m	struct:__anon108
h	.\include\lua\llex.h	/^  Table *h;  \/* to avoid collection\/reuse strings *\/$/;"	m	struct:LexState
h	.\include\lua\lstate.h	/^  struct Table h;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Table
h2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon98::__anon99
h_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int h_samp_factor;		\/* horizontal sampling factor (1..4) *\/$/;"	m	struct:__anon81
ha	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon98::__anon99
half_indices	.\include\sol\single\sol\sol.hpp	/^		typedef std::index_sequence<I...> half_indices;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
half_indices	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::index_sequence<I...> half_indices;$/;"	t	struct:sol::usertype_metatable
handleEvent	.\src\src\GameWindow.cpp	/^void GameWindow::handleEvent(sf::Event& e) {$/;"	f	class:GameWindow
handleEvent	.\src\src\Window.cpp	/^void Window::handleEvent(sf::Event& e) {$/;"	f	class:Window
handleFatalErrorCondition	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void handleFatalErrorCondition( std::string const& message ) {$/;"	f	class:Catch::RunContext
handleResult	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::handleResult( AssertionResult const& result )$/;"	f	class:Catch::ResultBuilder
handleUnfinishedSections	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        void handleUnfinishedSections() {$/;"	f	class:Catch::RunContext
handle_luainit	.\dep\Lua\src\lua.c	/^static int handle_luainit (lua_State *L) {$/;"	f	file:
handle_script	.\dep\Lua\src\lua.c	/^static int handle_script (lua_State *L, char **argv) {$/;"	f	file:
handler	.\include\sol\single\sol\sol.hpp	/^			handler(const reference& target) : target(target), stackindex(0) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::handler
handler	.\include\sol\single\sol\sol.hpp	/^		handler = LUA_ERRERR,$/;"	m	class:sol::sol::call_syntax::call_status
handler	.\include\sol\single\sol\sol.hpp	/^		handler = LUA_ERRERR,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
handler	.\include\sol\single\sol\sol.hpp	/^		struct handler {$/;"	s	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
handler	.\include\sol\sol\protected_function.hpp	/^			handler(const reference& target) : target(target), stackindex(0) {$/;"	f	struct:sol::basic_protected_function::handler
handler	.\include\sol\sol\protected_function.hpp	/^		struct handler {$/;"	s	class:sol::basic_protected_function
handler	.\include\sol\sol\types.hpp	/^		handler = LUA_ERRERR,$/;"	m	class:sol::call_syntax::call_status
handler	.\include\sol\sol\types.hpp	/^		handler = LUA_ERRERR,$/;"	m	class:sol::call_syntax::call_status::thread_status
handler_storage	.\include\sol\single\sol\sol.hpp	/^		static reference& handler_storage() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
handler_storage	.\include\sol\sol\protected_function.hpp	/^		static reference& handler_storage() {$/;"	f	class:sol::basic_protected_function
hasAxis	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^bool Joystick::hasAxis(unsigned int joystick, Axis axis)$/;"	f	class:sf::Joystick
hasExpandedExpression	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    bool AssertionResult::hasExpandedExpression() const {$/;"	f	class:Catch::AssertionResult
hasExpression	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    bool AssertionResult::hasExpression() const {$/;"	f	class:Catch::AssertionResult
hasField	.\dep\SFML\src\SFML\Network\Http.cpp	/^bool Http::Request::hasField(const std::string& field) const$/;"	f	class:sf::Http::Request
hasFilters	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        bool hasFilters() const {$/;"	f	class:Catch::TestSpec
hasFocus	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^bool WindowImplAndroid::hasFocus() const$/;"	f	class:sf::priv::WindowImplAndroid
hasFocus	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^bool WindowImplX11::hasFocus() const$/;"	f	class:sf::priv::WindowImplX11
hasFocus	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^bool WindowImplWin32::hasFocus() const$/;"	f	class:sf::priv::WindowImplWin32
hasFocus	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::hasFocus() const$/;"	f	class:sf::Window
hasInternalContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    bool hasInternalContext()$/;"	f	namespace:__anon140
hasLongName	.\include\sol\Catch\include\external\clara.h	/^        bool hasLongName( std::string const& _longName ) const {$/;"	f	struct:Clara::OptionArgProperties
hasMessage	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    bool AssertionResult::hasMessage() const {$/;"	f	class:Catch::AssertionResult
hasMonitorEvent	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    bool hasMonitorEvent()$/;"	f	namespace:__anon150
hasPerk	.\src\include\Object.h	/^	bool hasPerk(std::string name) { return getPerk(name) != nullptr; }$/;"	f	class:Object
hasShortName	.\include\sol\Catch\include\external\clara.h	/^        bool hasShortName( std::string const& shortName ) const {$/;"	f	struct:Clara::OptionArgProperties
hasStat	.\src\src\Stats.cpp	/^bool Stats::hasStat(std::string name) const {$/;"	f	class:Stats
hasUntestedSections	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        bool hasUntestedSections() const {$/;"	f	class:Catch::RunningSection
has_E	.\dep\Lua\src\lua.c	455;"	d	file:
has_c_var_arg	.\include\sol\single\sol\sol.hpp	/^				static const bool has_c_var_arg = has_c_variadic;$/;"	m	struct:sol::meta::meta_detail::basic_traits
has_c_var_arg	.\include\sol\sol\bind_traits.hpp	/^				static const bool has_c_var_arg = has_c_variadic;$/;"	m	struct:sol::meta::meta_detail::basic_traits
has_deducible_signature	.\include\sol\single\sol\sol.hpp	/^		struct has_deducible_signature : meta_detail::check_deducible_signature<F>::type { };$/;"	s	namespace:sol::meta
has_deducible_signature	.\include\sol\sol\bind_traits.hpp	/^		struct has_deducible_signature : meta_detail::check_deducible_signature<F>::type { };$/;"	s	namespace:sol::meta
has_derived	.\include\sol\single\sol\sol.hpp	/^		struct has_derived {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
has_derived	.\include\sol\sol\inheritance.hpp	/^		struct has_derived {$/;"	s	namespace:sol::detail
has_e	.\dep\Lua\src\lua.c	454;"	d	file:
has_error	.\dep\Lua\src\lua.c	451;"	d	file:
has_i	.\dep\Lua\src\lua.c	452;"	d	file:
has_maker	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^struct has_maker {};$/;"	s	file:
has_maker_and_toString	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^struct has_maker_and_toString {};$/;"	s	file:
has_overload	.\include\sol\Optional\optional.hpp	/^  constexpr static bool has_overload(...) { return false; }$/;"	f	struct:sol::detail_::has_overloaded_addressof
has_overload	.\include\sol\Optional\optional.hpp	/^  constexpr static bool has_overload(bool) { return true; }$/;"	f	struct:sol::detail_::has_overloaded_addressof
has_overloaded_addressof	.\include\sol\Optional\optional.hpp	/^struct has_overloaded_addressof$/;"	s	namespace:sol::detail_
has_toString	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^struct has_toString { };$/;"	s	file:
has_v	.\dep\Lua\src\lua.c	453;"	d	file:
hash	.\dep\Lua\src\lobject.h	/^  unsigned int hash;$/;"	m	struct:TString
hash	.\dep\Lua\src\lstate.h	/^  TString **hash;$/;"	m	struct:stringtable
hash	.\include\lua\lobject.h	/^  unsigned int hash;$/;"	m	struct:TString
hash	.\include\lua\lstate.h	/^  TString **hash;$/;"	m	struct:stringtable
hash	.\include\sol\Optional\optional.hpp	/^  struct hash<sol::optional<T&>>$/;"	s	namespace:std
hash	.\include\sol\Optional\optional.hpp	/^  struct hash<sol::optional<T>>$/;"	s	namespace:std
hashboolean	.\dep\Lua\src\ltable.c	61;"	d	file:
hashes	.\include\sol\Catch\scripts\releaseNotes.py	/^hashes = runAndCapture( ['git', 'log', '-2', '--format="%H"', versionPath] )$/;"	v
hashint	.\dep\Lua\src\ltable.c	62;"	d	file:
hashmod	.\dep\Lua\src\ltable.c	69;"	d	file:
hashpointer	.\dep\Lua\src\ltable.c	72;"	d	file:
hashpow2	.\dep\Lua\src\ltable.c	58;"	d	file:
hashstr	.\dep\Lua\src\ltable.c	60;"	d	file:
hasjumps	.\dep\Lua\src\lcode.c	36;"	d	file:
hasmultret	.\dep\Lua\src\lparser.c	37;"	d	file:
hatValueMap	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    std::map<int, std::pair<int, int> > hatValueMap;$/;"	m	namespace:__anon139	file:
hatValueToSfml	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    void hatValueToSfml(int value, sf::priv::JoystickState& state)$/;"	f	namespace:__anon139
hd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int hd,ha;$/;"	m	struct:__anon98::__anon99
head	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_ListNode  head;$/;"	m	struct:FT_ListRec_
header	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__FrameHeader header;$/;"	m	struct:__anon42
header	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char    header[282];      \/* working space for header encode *\/$/;"	m	struct:__anon90
header	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *header;$/;"	m	struct:__anon89
header_fill	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int              header_fill;$/;"	m	struct:__anon90
header_len	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long header_len;$/;"	m	struct:__anon89
headerbytes	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int headerbytes;$/;"	m	struct:__anon92
healing	.\src\include\Trait.h	/^	bool healing;	\/\/ On remove, add health to all objects$/;"	m	class:Trait
height	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 height;$/;"	m	struct:__anon55
height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long               height;$/;"	m	struct:FT_Size_RequestRec_
height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos     height;      \/* text height in 26.6 frac. pixels       *\/$/;"	m	struct:FT_Size_Metrics_
height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  height;$/;"	m	struct:FT_Glyph_Metrics_
height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          height;$/;"	m	struct:FT_FaceRec_
height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short  height;$/;"	m	struct:FT_Bitmap_Size_
height	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Byte   height;$/;"	m	struct:FTC_SBitRec_
height	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Int      height;$/;"	m	struct:FTC_ImageTypeRec_
height	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_UInt     height;$/;"	m	struct:FTC_ScalerRec_
height	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row
height	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect
height	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent
height	.\dep\SFML\include\SFML\Window\VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode
height	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  width, height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
height	.\include\SFML\Graphics\Font.hpp	/^        unsigned int height; \/\/\/< Height of the row$/;"	m	struct:sf::Font::Row
height	.\include\SFML\Graphics\Rect.hpp	/^    T height; \/\/\/< Height of the rectangle$/;"	m	class:sf::Rect
height	.\include\SFML\Window\Event.hpp	/^        unsigned int height; \/\/\/< New height, in pixels$/;"	m	struct:sf::Event::SizeEvent
height	.\include\SFML\Window\VideoMode.hpp	/^    unsigned int height;       \/\/\/< Video mode height, in pixels$/;"	m	class:sf::VideoMode
height	.\include\sol\examples\config.cpp	/^    int height;$/;"	m	struct:config	file:
height_in_blocks	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION height_in_blocks;$/;"	m	struct:__anon81
height_inc	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  width_inc, height_inc;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
hexParser	.\include\sol\Catch\scripts\approvalTests.py	/^hexParser = re.compile( r'(.*)\\b(0[xX][0-9a-fA-F]+)\\b(.*)' )$/;"	v
hexThreshold	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^        const int hexThreshold = 255;$/;"	m	namespace:Catch::Detail::__anon183
highlight_language	.\include\sol\docs\source\conf.py	/^highlight_language = 'c++'$/;"	v
hnext	.\dep\Lua\src\lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon7	typeref:struct:TString::__anon7::TString
hnext	.\include\lua\lobject.h	/^    struct TString *hnext;  \/* linked list for hash table *\/$/;"	m	union:TString::__anon159	typeref:struct:TString::__anon159::TString
hook	.\dep\Lua\src\lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State
hook	.\include\lua\lstate.h	/^  volatile lua_Hook hook;$/;"	m	struct:lua_State
hookcount	.\dep\Lua\src\lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookcount	.\include\lua\lstate.h	/^  int hookcount;$/;"	m	struct:lua_State
hookf	.\dep\Lua\src\ldblib.c	/^static void hookf (lua_State *L, lua_Debug *ar) {$/;"	f	file:
hookmask	.\dep\Lua\src\lstate.h	/^  l_signalT hookmask;$/;"	m	struct:lua_State
hookmask	.\include\lua\lstate.h	/^  l_signalT hookmask;$/;"	m	struct:lua_State
horiAdvance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  horiAdvance;$/;"	m	struct:FT_Glyph_Metrics_
horiBearingX	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  horiBearingX;$/;"	m	struct:FT_Glyph_Metrics_
horiBearingY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  horiBearingY;$/;"	m	struct:FT_Glyph_Metrics_
horiResolution	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UInt               horiResolution;$/;"	m	struct:FT_Size_RequestRec_
horizontal_resolution	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  horizontal_resolution;$/;"	m	struct:FT_WinFNT_HeaderRec_
hs	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon100
html_static_path	.\include\sol\docs\source\conf.py	/^html_static_path = ['_static']$/;"	v
html_theme	.\include\sol\docs\source\conf.py	/^html_theme = "haiku"$/;"	v
html_theme_path	.\include\sol\docs\source\conf.py	/^html_theme_path = ["_themes", ]$/;"	v
htmlhelp_basename	.\include\sol\docs\source\conf.py	/^htmlhelp_basename = 'Soldoc'$/;"	v
huff_ac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__huffman huff_ac[4];$/;"	m	struct:__anon98
huff_dc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__huffman huff_dc[4];$/;"	m	struct:__anon98
huffval	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 huffval[256];		\/* The symbols, in order of incr code length *\/$/;"	m	struct:__anon80
hvalue	.\dep\Lua\src\lobject.h	175;"	d
hvalue	.\include\lua\lobject.h	175;"	d
i	.\dep\Lua\src\llex.h	/^  lua_Integer i;$/;"	m	union:__anon5
i	.\dep\Lua\src\llimits.h	/^  lua_Integer i;$/;"	m	union:__anon6
i	.\dep\Lua\src\lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value
i	.\dep\Lua\src\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon20	file:
i	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^    int i[8];$/;"	m	union:jpeg_error_mgr::__anon86
i	.\include\lua\llex.h	/^  lua_Integer i;$/;"	m	union:__anon157
i	.\include\lua\llimits.h	/^  lua_Integer i;$/;"	m	union:__anon158
i	.\include\lua\lobject.h	/^  lua_Integer i;   \/* integer numbers *\/$/;"	m	union:Value
i	.\include\sol\Optional\test_optional.cpp	/^    int i;$/;"	m	struct:Date	file:
i	.\include\sol\Optional\test_optional.cpp	/^    int i;$/;"	m	struct:OracleVal	file:
i	.\include\sol\Optional\test_optional.cpp	/^  int i;$/;"	m	struct:BadRelops	file:
iABC	.\dep\Lua\src\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABC	.\include\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	.\dep\Lua\src\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iABx	.\include\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	.\dep\Lua\src\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAsBx	.\include\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	.\dep\Lua\src\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iAx	.\include\lua\lopcodes.h	/^enum OpMode {iABC, iABx, iAsBx, iAx};  \/* basic instruction format *\/$/;"	e	enum:OpMode
iDecayHFLimit	.\dep\SFML\extlibs\headers\AL\efx-presets.h	/^    int   iDecayHFLimit;$/;"	m	struct:__anon23
iTchRunnerReporter	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        iTchRunnerReporter$/;"	f	class:Catch::iTchRunnerReporter
iTchRunnerReporter	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^    class iTchRunnerReporter : public SharedImpl<IReporter>$/;"	c	namespace:Catch
i_ci	.\dep\Lua\src\lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_ci	.\include\lua\lua.h	/^  struct CallInfo *i_ci;  \/* active function *\/$/;"	m	struct:lua_Debug	typeref:struct:lua_Debug::CallInfo
i_key	.\dep\Lua\src\lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_key	.\include\lua\lobject.h	/^  TKey i_key;$/;"	m	struct:Node
i_val	.\dep\Lua\src\lobject.h	/^  TValue i_val;$/;"	m	struct:Node
i_val	.\include\lua\lobject.h	/^  TValue i_val;$/;"	m	struct:Node
icon_mask	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        xcb_pixmap_t icon_mask;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
icon_pixmap	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        xcb_pixmap_t icon_pixmap;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
icon_window	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        xcb_window_t icon_window;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
icon_x	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t      icon_x;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
icon_y	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t      icon_y;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
id	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte id[4];$/;"	m	struct:__anon46
id	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int id;$/;"	m	struct:__anon98::__anon99
id_for	.\include\sol\single\sol\sol.hpp	/^		struct id_for {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
id_for	.\include\sol\sol\inheritance.hpp	/^		struct id_for {$/;"	s	namespace:sol::detail
idata	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon104
idct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_inverse_dct * idct;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_inverse_dct
idct_block_kernel	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   void (*idct_block_kernel)(stbi_uc *out, int out_stride, short data[64]);$/;"	m	struct:__anon98
identification	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^        Joystick::Identification identification; \/\/\/< The joystick identification$/;"	m	struct:sf::priv::JoystickManager::Item
identity	.\include\sol\single\sol\sol.hpp	/^		struct identity { typedef T type; };$/;"	s	namespace:sol::meta
identity	.\include\sol\sol\traits.hpp	/^		struct identity { typedef T type; };$/;"	s	namespace:sol::meta
idx	.\dep\Lua\src\lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	.\dep\Lua\src\lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon12::__anon13
idx	.\dep\Lua\src\lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
idx	.\include\lua\lobject.h	/^  lu_byte idx;  \/* index of upvalue (in stack or in outer function's list) *\/$/;"	m	struct:Upvaldesc
idx	.\include\lua\lparser.h	/^      short idx;  \/* index (R\/K) *\/$/;"	m	struct:expdesc::__anon163::__anon164
idx	.\include\lua\lparser.h	/^  short idx;  \/* variable index in stack *\/$/;"	m	struct:Vardesc
idx	.\include\sol\single\sol\sol.hpp	/^		std::ptrdiff_t idx = 0;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
idx	.\include\sol\sol\table_iterator.hpp	/^		std::ptrdiff_t idx = 0;$/;"	m	class:sol::basic_table_iterator
ifImplParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^ifImplParser = re.compile( r'\\s*#ifdef CATCH_CONFIG_RUNNER' )$/;"	v
ifParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^ifParser = re.compile( r'\\s*#ifndef TWOBLUECUBES_CATCH_.*_INCLUDED')$/;"	v
ifdefs	.\include\sol\Catch\scripts\generateSingleHeader.py	/^ifdefs = 0$/;"	v
ifndef_cpp	.\include\sol\single.py	/^ifndef_cpp = re.compile(r'#ifndef SOL_.*?_HPP')$/;"	v
ifstat	.\dep\Lua\src\lparser.c	/^static void ifstat (LexState *ls, int line) {$/;"	f	file:
image_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION image_height;	\/* input image height *\/$/;"	m	struct:jpeg_compress_struct
image_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION image_height;	\/* nominal image height *\/$/;"	m	struct:jpeg_decompress_struct
image_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION image_width;	\/* input image width *\/$/;"	m	struct:jpeg_compress_struct
image_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION image_width;	\/* nominal image width (from SOF marker) *\/$/;"	m	struct:jpeg_decompress_struct
img_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon95
img_buffer_end	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *img_buffer, *img_buffer_end;$/;"	m	struct:__anon95
img_buffer_original	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *img_buffer_original;$/;"	m	struct:__anon95
img_comp	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   } img_comp[4];$/;"	m	struct:__anon98	typeref:struct:__anon98::__anon99
img_h_max	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon98
img_mcu_h	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon98
img_mcu_w	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_mcu_w, img_mcu_h;$/;"	m	struct:__anon98
img_mcu_x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon98
img_mcu_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_mcu_x, img_mcu_y;$/;"	m	struct:__anon98
img_n	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon95
img_out_n	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_n, img_out_n;$/;"	m	struct:__anon95
img_v_max	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int img_h_max, img_v_max;$/;"	m	struct:__anon98
img_x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon95
img_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32 img_x, img_y;$/;"	m	struct:__anon95
implIfDefs	.\include\sol\Catch\scripts\generateSingleHeader.py	/^implIfDefs = -1$/;"	v
implicit_wrapper	.\include\sol\single\sol\sol.hpp	/^			implicit_wrapper(T& item) : item(item) {}$/;"	f	struct:sol::sol::detail::implicit_wrapper
implicit_wrapper	.\include\sol\single\sol\sol.hpp	/^			implicit_wrapper(T* item) : item(*item) {}$/;"	f	struct:sol::sol::detail::implicit_wrapper
implicit_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct implicit_wrapper {$/;"	s	namespace:sol::sol::detail
implicit_wrapper	.\include\sol\sol\types.hpp	/^			implicit_wrapper(T& item) : item(item) {}$/;"	f	struct:sol::detail::implicit_wrapper
implicit_wrapper	.\include\sol\sol\types.hpp	/^			implicit_wrapper(T* item) : item(*item) {}$/;"	f	struct:sol::detail::implicit_wrapper
implicit_wrapper	.\include\sol\sol\types.hpp	/^		struct implicit_wrapper {$/;"	s	namespace:sol::detail
inMap	.\src\src\Map.cpp	/^bool Map::inMap(Object* o) {$/;"	f	class:Map
in_color_space	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_COLOR_SPACE in_color_space;	\/* colorspace of input image *\/$/;"	m	struct:jpeg_compress_struct
in_place	.\include\sol\Optional\optional.hpp	/^constexpr struct in_place_t{} in_place{};$/;"	s	namespace:sol
in_place_t	.\include\sol\Optional\optional.hpp	/^constexpr struct in_place_t{} in_place{};$/;"	s	namespace:sol
incAttackerCount	.\src\include\Object.h	/^	void incAttackerCount() { ++_attackerCount; }$/;"	f	class:Object
incPoints	.\src\include\SkillTree.h	/^    void incPoints() { setPoints(points + 1); }$/;"	f	class:SkillNode
inclinenumber	.\dep\Lua\src\llex.c	/^static void inclinenumber (LexState *ls) {$/;"	f	file:
include	.\include\sol\bootstrap.py	/^include = [ '.', '.\/include' ]$/;"	v
include	.\include\sol\ninja_syntax.py	/^    def include(self, path):$/;"	m	class:Writer
includeImpl	.\include\sol\Catch\scripts\generateSingleHeader.py	/^        includeImpl = False$/;"	v
includeImpl	.\include\sol\Catch\scripts\generateSingleHeader.py	/^includeImpl = True$/;"	v
includeSuccessfulResults	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual bool includeSuccessfulResults() const   { return m_data.showSuccessfulTests; }$/;"	f	class:Catch::Config
include_guard	.\include\sol\single.py	/^include_guard = 'SOL_SINGLE_INCLUDE_HPP'$/;"	v
includes	.\include\sol\bootstrap.py	/^def includes(l):$/;"	f
includes	.\include\sol\single.py	/^includes = set([])$/;"	v
includesParser	.\include\sol\Catch\scripts\generateSingleHeader.py	/^includesParser = re.compile( r'\\s*#include\\s*"(.*)"' )$/;"	v
incomplete	.\dep\Lua\src\lua.c	/^static int incomplete (lua_State *L, int status) {$/;"	f	file:
incrementBuildNumber	.\include\sol\Catch\scripts\releaseCommon.py	/^    def incrementBuildNumber(self):$/;"	m	class:Version
incrementMajorVersion	.\include\sol\Catch\scripts\releaseCommon.py	/^    def incrementMajorVersion(self):$/;"	m	class:Version
incrementMinorVersion	.\include\sol\Catch\scripts\releaseCommon.py	/^    def incrementMinorVersion(self):$/;"	m	class:Version
incrementPatchNumber	.\include\sol\Catch\scripts\releaseCommon.py	/^    def incrementPatchNumber(self):$/;"	m	class:Version
ind	.\dep\Lua\src\lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon12	typeref:struct:expdesc::__anon12::__anon13
ind	.\include\lua\lparser.h	/^    } ind;$/;"	m	union:expdesc::__anon163	typeref:struct:expdesc::__anon163::__anon164
indent	.\include\sol\Catch\include\external\clara.h	/^        std::size_t indent;         \/\/ indent of subsequent lines, or all if initialIndent is npos$/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
indent	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::size_t indent;         \/\/ indent of subsequent lines, or all if initialIndent is npos$/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
index	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        int index() const { return m_index; }$/;"	f	class:Catch::TestCaseTracking::IndexTracker
index	.\include\sol\single\sol\sol.hpp	/^		index,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
index	.\include\sol\single\sol\sol.hpp	/^		int index = 0;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::absolute_index
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::function_result
index	.\include\sol\single\sol\sol.hpp	/^		int index;$/;"	m	struct:sol::sol::upvalue_index
index	.\include\sol\sol\function_result.hpp	/^		int index;$/;"	m	struct:sol::function_result
index	.\include\sol\sol\load_result.hpp	/^		int index;$/;"	m	struct:sol::load_result
index	.\include\sol\sol\protected_function_result.hpp	/^		int index;$/;"	m	struct:sol::protected_function_result
index	.\include\sol\sol\stack_proxy.hpp	/^		int index;$/;"	m	struct:sol::stack_proxy
index	.\include\sol\sol\stack_reference.hpp	/^		int index = 0;$/;"	m	class:sol::stack_reference
index	.\include\sol\sol\types.hpp	/^		index,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
index	.\include\sol\sol\types.hpp	/^		int index;$/;"	m	struct:sol::absolute_index
index	.\include\sol\sol\types.hpp	/^		int index;$/;"	m	struct:sol::upvalue_index
index	.\include\sol\sol\variadic_args.hpp	/^		int index;$/;"	m	struct:sol::va_iterator
index	.\include\sol\sol\variadic_args.hpp	/^		int index;$/;"	m	struct:sol::variadic_args
index2addr	.\dep\Lua\src\lapi.c	/^static TValue *index2addr (lua_State *L, int idx) {$/;"	f	file:
index_call	.\include\sol\single\sol\sol.hpp	/^		static int index_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
index_call	.\include\sol\sol\usertype_metatable.hpp	/^		static int index_call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
index_in	.\include\sol\single\sol\sol.hpp	/^		struct index_in : meta_detail::index_in_pack<0, T, List> { };$/;"	s	namespace:sol::meta
index_in	.\include\sol\single\sol\sol.hpp	/^		struct index_in<T, types<Args...>> : meta_detail::index_in_pack<0, T, Args...> { };$/;"	s	namespace:sol::meta
index_in	.\include\sol\sol\traits.hpp	/^		struct index_in : meta_detail::index_in_pack<0, T, List> { };$/;"	s	namespace:sol::meta
index_in	.\include\sol\sol\traits.hpp	/^		struct index_in<T, types<Args...>> : meta_detail::index_in_pack<0, T, Args...> { };$/;"	s	namespace:sol::meta
index_in_pack	.\include\sol\single\sol\sol.hpp	/^			struct index_in_pack : std::integral_constant<std::size_t, SIZE_MAX> { };$/;"	s	namespace:sol::meta::meta_detail
index_in_pack	.\include\sol\single\sol\sol.hpp	/^			struct index_in_pack<I, T, T1, Args...> : std::conditional_t<std::is_same<T, T1>::value, std::integral_constant<std::ptrdiff_t, I>, index_in_pack<I + 1, T, Args...>> { };$/;"	s	namespace:sol::meta::meta_detail
index_in_pack	.\include\sol\single\sol\sol.hpp	/^		struct index_in_pack : meta_detail::index_in_pack<0, T, Args...> { };$/;"	s	namespace:sol::meta
index_in_pack	.\include\sol\sol\traits.hpp	/^			struct index_in_pack : std::integral_constant<std::size_t, SIZE_MAX> { };$/;"	s	namespace:sol::meta::meta_detail
index_in_pack	.\include\sol\sol\traits.hpp	/^			struct index_in_pack<I, T, T1, Args...> : std::conditional_t<std::is_same<T, T1>::value, std::integral_constant<std::ptrdiff_t, I>, index_in_pack<I + 1, T, Args...>> { };$/;"	s	namespace:sol::meta::meta_detail
index_in_pack	.\include\sol\sol\traits.hpp	/^		struct index_in_pack : meta_detail::index_in_pack<0, T, Args...> { };$/;"	s	namespace:sol::meta
indexfunc	.\include\sol\single\sol\sol.hpp	/^		lua_CFunction indexfunc;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
indexfunc	.\include\sol\sol\usertype_metatable.hpp	/^		lua_CFunction indexfunc;$/;"	m	struct:sol::usertype_metatable
indexing_fail	.\include\sol\single\sol\sol.hpp	/^		inline int indexing_fail(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
indexing_fail	.\include\sol\sol\usertype_metatable.hpp	/^		inline int indexing_fail(lua_State* L) {$/;"	f	namespace:sol::usertype_detail
indices	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_CueSheet_Index *indices;$/;"	m	struct:__anon52
indices	.\include\sol\single\sol\sol.hpp	/^			typedef std::make_index_sequence<sizeof...(Functions)> indices;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
indices	.\include\sol\single\sol\sol.hpp	/^		typedef std::make_index_sequence<sizeof...(I) * 2> indices;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
indices	.\include\sol\single\sol\sol.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	t	struct:sol::types
indices	.\include\sol\sol\function_types_overloaded.hpp	/^			typedef std::make_index_sequence<sizeof...(Functions)> indices;$/;"	t	struct:sol::function_detail::overloaded_function
indices	.\include\sol\sol\tuple.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	t	struct:sol::types
indices	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::make_index_sequence<sizeof...(I) * 2> indices;$/;"	t	struct:sol::usertype_metatable
info	.\dep\Lua\src\lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon12
info	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        SoundFileReader::Info info;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
info	.\include\lua\lparser.h	/^    int info;  \/* for generic use *\/$/;"	m	union:expdesc::__anon163
infoMessages	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::vector<MessageInfo> infoMessages;$/;"	m	struct:Catch::AssertionStats
info_arch	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_simulate	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const* info_simulate = "INFO" ":" "simulate[" SIMULATE_ID "]";$/;"	v
info_simulate_version	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const info_simulate_version[] = {$/;"	v
info_simulate_version	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const info_simulate_version[] = {$/;"	v
info_size	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	/^char info_size[] =  {'I', 'N', 'F', 'O', ':', 's','i','z','e','[',$/;"	v
info_version	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const info_version[] = {$/;"	v
info_version	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const info_version[] = {$/;"	v
inheritance	.\include\sol\single\sol\sol.hpp	/^		struct inheritance {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
inheritance	.\include\sol\sol\inheritance.hpp	/^		struct inheritance {$/;"	s	namespace:sol::detail
init	.\dep\Lua\src\lstrlib.c	/^    const char *init;$/;"	m	struct:MatchState::__anon18	file:
init	.\include\sol\Optional\optional.hpp	/^  struct init{};$/;"	s	struct:sol::nullopt_t
init	.\src\src\GameWindow.cpp	/^void GameWindow::init() {$/;"	f	class:GameWindow
init	.\src\src\PauseWindow.cpp	/^void PauseWindow::init() {$/;"	f	class:PauseWindow
init	.\src\src\SkillTreeWindow.cpp	/^void SkillTreeWindow::init() {$/;"	f	class:SkillTreeWindow
init	.\src\src\Window.cpp	/^void Window::init() {$/;"	f	class:Window
init_	.\include\sol\Optional\optional.hpp	/^    bool init_;$/;"	m	struct:sol::constexpr_optional_base
init_	.\include\sol\Optional\optional.hpp	/^    bool init_;$/;"	m	struct:sol::optional_base
init_exp	.\dep\Lua\src\lparser.c	/^static void init_exp (expdesc *e, expkind k, int i) {$/;"	f	file:
init_registry	.\dep\Lua\src\lstate.c	/^static void init_registry (lua_State *L, global_State *g) {$/;"	f	file:
initb	.\dep\Lua\src\lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initb	.\include\lua\lauxlib.h	/^  char initb[LUAL_BUFFERSIZE];  \/* initial buffer *\/$/;"	m	struct:luaL_Buffer
initheader	.\dep\Lua\src\lstrlib.c	/^static void initheader (lua_State *L, Header *h) {$/;"	f	file:
initialIndent	.\include\sol\Catch\include\external\clara.h	/^        std::size_t initialIndent;  \/\/ indent of first line, or npos$/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
initialIndent	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::size_t initialIndent;  \/\/ indent of first line, or npos$/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
initial_state	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t      initial_state;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
initialize	.\dep\SFML\src\SFML\Audio\Music.cpp	/^void Music::initialize()$/;"	f	class:sf::Music
initialize	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::initialize(InputSoundFile& file)$/;"	f	class:sf::SoundBuffer
initialize	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::initialize(unsigned int channelCount, unsigned int sampleRate)$/;"	f	class:sf::SoundStream
initialize	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::initialize()$/;"	f	class:sf::RenderTarget
initialize	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^void JoystickImpl::initialize()$/;"	f	class:sf::priv::JoystickImpl
initialize	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^void SensorImpl::initialize()$/;"	f	class:sf::priv::SensorImpl
initialize	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^void JoystickImpl::initialize()$/;"	f	class:sf::priv::JoystickImpl
initialize	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^void GlContext::initialize()$/;"	f	class:sf::priv::GlContext
initialize	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^void JoystickImpl::initialize()$/;"	f	class:sf::priv::JoystickImpl
initialize	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^void SensorImpl::initialize()$/;"	f	class:sf::priv::SensorImpl
initialize	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^void JoystickImpl::initialize()$/;"	f	class:sf::priv::JoystickImpl
initialize	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^void SensorImpl::initialize()$/;"	f	class:sf::priv::SensorImpl
initialize	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::initialize()$/;"	f	class:sf::priv::WindowImplX11
initialize	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^void JoystickImpl::initialize()$/;"	f	class:sf::priv::JoystickImpl
initialize	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^void SensorImpl::initialize()$/;"	f	class:sf::priv::SensorImpl
initialize	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::initialize()$/;"	f	class:sf::Window
initializeMain	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void initializeMain(ActivityStates* states)$/;"	f	namespace:sf::priv
initialized	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool initialized;$/;"	m	struct:sf::priv::ActivityStates
initializers	.\include\sol\single\sol\sol.hpp	/^	inline auto initializers(Functions&&... functions) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
initializers	.\include\sol\sol\raii.hpp	/^	inline auto initializers(Functions&&... functions) {$/;"	f	namespace:sol
input	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        uint32_t     input;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
inputQueue	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    AInputQueue*    inputQueue;$/;"	m	struct:sf::priv::ActivityStates
input_components	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int input_components;		\/* # of color components in input image *\/$/;"	m	struct:jpeg_compress_struct
input_gamma	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  double input_gamma;		\/* image gamma of input image *\/$/;"	m	struct:jpeg_compress_struct
input_iMCU_row	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION input_iMCU_row;	\/* Number of iMCU rows completed *\/$/;"	m	struct:jpeg_decompress_struct
input_scan_number	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int input_scan_number;	\/* Number of SOS markers seen so far *\/$/;"	m	struct:jpeg_decompress_struct
inputctl	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_input_controller * inputctl;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_input_controller
insert	.\dep\SFML\src\SFML\System\String.cpp	/^void String::insert(std::size_t position, const String& str)$/;"	f	class:sf::String
instack	.\dep\Lua\src\lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc
instack	.\include\lua\lobject.h	/^  lu_byte instack;  \/* whether it is in stack (register) *\/$/;"	m	struct:Upvaldesc
install_dir	.\include\sol\bootstrap.py	/^install_dir = os.path.join('\/usr', 'include') if 'linux' in sys.platform else 'include'$/;"	v
install_os_deps	.\include\sol\install.deps.sh	/^install_os_deps() {$/;"	f
instance	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^            static IColourImpl* instance() {$/;"	f	struct:Catch::__anon177::NoColourImpl
instance	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        static TrackerContext& instance() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
instance	.\src\include\Logger.h	/^	static Logger& instance() {$/;"	f	class:Logger
int32_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef __int32 int32_t;$/;"	t
int32_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef long int int32_t;$/;"	t
int32_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef __int32 int32_t;$/;"	t
int32_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef long int int32_t;$/;"	t
int64_t	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef __int64 int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef __int64 int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef long int int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef long long int int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef __int64 int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef long int int64_t;$/;"	t
int64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef long long int int64_t;$/;"	t
int_seven	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    int int_seven;$/;"	m	struct:TestData	file:
int_val	.\include\sol\Catch\projects\XCode\OCTest\OCTest\TestObj.h	/^@property (nonatomic, assign ) int int_val;$/;"	v
int_val	.\include\sol\Catch\projects\XCode\iOSTest\iOSTest\TestObj.h	/^@property (nonatomic, assign ) int int_val;$/;"	v
intarith	.\dep\Lua\src\lobject.c	/^static lua_Integer intarith (lua_State *L, int op, lua_Integer v1,$/;"	f	file:
integer	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^      FT_Int32        integer;$/;"	m	union:BDF_PropertyRec_::__anon77
internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Face_Internal  internal;$/;"	m	struct:FT_FaceRec_
internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Size_Internal  internal;$/;"	m	struct:FT_SizeRec_
internal	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Slot_Internal  internal;$/;"	m	struct:FT_GlyphSlotRec_
internal	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  void *internal;$/;"	m	struct:vorbis_block
internalContexts	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    std::set<sf::priv::GlContext*> internalContexts;$/;"	m	namespace:__anon140	file:
internalContextsMutex	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    sf::Mutex internalContextsMutex;$/;"	m	namespace:__anon140	file:
internal_leading	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  internal_leading;$/;"	m	struct:FT_WinFNT_HeaderRec_
internshrstr	.\dep\Lua\src\lstring.c	/^static TString *internshrstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
interror	.\dep\Lua\src\lauxlib.c	/^static void interror (lua_State *L, int arg) {$/;"	f	file:
intop	.\dep\Lua\src\lvm.h	46;"	d
intop	.\include\lua\lvm.h	46;"	d
invalidSocket	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^SocketHandle SocketImpl::invalidSocket()$/;"	f	class:sf::priv::SocketImpl
invalidSocket	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^SocketHandle SocketImpl::invalidSocket()$/;"	f	class:sf::priv::SocketImpl
invalidateTMcache	.\dep\Lua\src\ltable.h	27;"	d
invalidateTMcache	.\include\lua\ltable.h	27;"	d
invocation	.\include\sol\single\sol\sol.hpp	/^			function_type invocation;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
invocation	.\include\sol\sol\function_types_stateful.hpp	/^			function_type invocation;$/;"	m	struct:sol::function_detail::member_function
invoke	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        virtual void invoke() const {$/;"	f	class:Catch::OcMethod
invoke	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    void TestCase::invoke() const {$/;"	f	class:Catch::TestCase
invoke	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        virtual void invoke() const {$/;"	f	class:Catch::FreeFunctionTestCase
invoke	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
invoke	.\include\sol\Catch\single_include\catch.hpp	/^    virtual void invoke() const {$/;"	f	class:Catch::MethodTestCase
invoke	.\include\sol\single\sol\sol.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
invoke	.\include\sol\single\sol\sol.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
invoke	.\include\sol\single\sol\sol.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
invoke	.\include\sol\single\sol\sol.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
invoke	.\include\sol\single\sol\sol.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
invoke	.\include\sol\single\sol\sol.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
invoke	.\include\sol\single\sol\sol.hpp	/^		function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
invoke	.\include\sol\single\sol\sol.hpp	/^		protected_function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
invoke	.\include\sol\single\sol\sol.hpp	/^		protected_function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
invoke	.\include\sol\single\sol\sol.hpp	/^		static R invoke(O& mem, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
invoke	.\include\sol\single\sol\sol.hpp	/^		static decltype(auto) invoke(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
invoke	.\include\sol\single\sol\sol.hpp	/^		static decltype(auto) invoke(object_type& mem, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper
invoke	.\include\sol\single\sol\sol.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
invoke	.\include\sol\single\sol\sol.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
invoke	.\include\sol\single\sol\sol.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
invoke	.\include\sol\sol\coroutine.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n) {$/;"	f	class:sol::coroutine
invoke	.\include\sol\sol\coroutine.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n) {$/;"	f	class:sol::coroutine
invoke	.\include\sol\sol\coroutine.hpp	/^		protected_function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n) {$/;"	f	class:sol::coroutine
invoke	.\include\sol\sol\coroutine.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n) {$/;"	f	class:sol::coroutine
invoke	.\include\sol\sol\function.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n) const {$/;"	f	class:sol::basic_function
invoke	.\include\sol\sol\function.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n) const {$/;"	f	class:sol::basic_function
invoke	.\include\sol\sol\function.hpp	/^		function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n) const {$/;"	f	class:sol::basic_function
invoke	.\include\sol\sol\function.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n) const {$/;"	f	class:sol::basic_function
invoke	.\include\sol\sol\protected_function.hpp	/^		Ret invoke(types<Ret>, std::index_sequence<I>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::basic_protected_function
invoke	.\include\sol\sol\protected_function.hpp	/^		auto invoke(types<Ret...>, std::index_sequence<I...>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::basic_protected_function
invoke	.\include\sol\sol\protected_function.hpp	/^		protected_function_result invoke(types<>, std::index_sequence<>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::basic_protected_function
invoke	.\include\sol\sol\protected_function.hpp	/^		void invoke(types<void>, std::index_sequence<I>, std::ptrdiff_t n, handler& h) const {$/;"	f	class:sol::basic_protected_function
invoke	.\include\sol\sol\wrapper.hpp	/^		static R invoke(O& mem, Args&&... args) {$/;"	f	struct:sol::member_function_wrapper
invoke	.\include\sol\sol\wrapper.hpp	/^		static decltype(auto) invoke(Args&&... args) {$/;"	f	struct:sol::wrapper
invoke	.\include\sol\sol\wrapper.hpp	/^		static decltype(auto) invoke(object_type& mem, Args&&... args) {$/;"	f	struct:sol::wrapper
invokeActiveTestCase	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        void invokeActiveTestCase() {$/;"	f	class:Catch::RunContext
invoker	.\include\sol\single\sol\sol.hpp	/^		struct invoker {$/;"	s	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
invoker	.\include\sol\single\sol\sol.hpp	/^		struct invoker {$/;"	s	struct:sol::sol::call_syntax::call_status::sol::wrapper
invoker	.\include\sol\sol\wrapper.hpp	/^		struct invoker {$/;"	s	struct:sol::member_function_wrapper
invoker	.\include\sol\sol\wrapper.hpp	/^		struct invoker {$/;"	s	struct:sol::wrapper
involution	.\include\sol\single\sol\sol.hpp	/^		involution = power_of,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
involution	.\include\sol\sol\types.hpp	/^		involution = power_of,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
io	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_io_callbacks io;$/;"	m	struct:__anon95
io	.\include\sol\single\sol\sol.hpp	/^		io,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
io	.\include\sol\sol\state_view.hpp	/^		io,$/;"	m	class:sol::lib
io_close	.\dep\Lua\src\liolib.c	/^static int io_close (lua_State *L) {$/;"	f	file:
io_fclose	.\dep\Lua\src\liolib.c	/^static int io_fclose (lua_State *L) {$/;"	f	file:
io_flush	.\dep\Lua\src\liolib.c	/^static int io_flush (lua_State *L) {$/;"	f	file:
io_input	.\dep\Lua\src\liolib.c	/^static int io_input (lua_State *L) {$/;"	f	file:
io_lines	.\dep\Lua\src\liolib.c	/^static int io_lines (lua_State *L) {$/;"	f	file:
io_noclose	.\dep\Lua\src\liolib.c	/^static int io_noclose (lua_State *L) {$/;"	f	file:
io_open	.\dep\Lua\src\liolib.c	/^static int io_open (lua_State *L) {$/;"	f	file:
io_output	.\dep\Lua\src\liolib.c	/^static int io_output (lua_State *L) {$/;"	f	file:
io_pclose	.\dep\Lua\src\liolib.c	/^static int io_pclose (lua_State *L) {$/;"	f	file:
io_popen	.\dep\Lua\src\liolib.c	/^static int io_popen (lua_State *L) {$/;"	f	file:
io_read	.\dep\Lua\src\liolib.c	/^static int io_read (lua_State *L) {$/;"	f	file:
io_readline	.\dep\Lua\src\liolib.c	/^static int io_readline (lua_State *L) {$/;"	f	file:
io_tmpfile	.\dep\Lua\src\liolib.c	/^static int io_tmpfile (lua_State *L) {$/;"	f	file:
io_type	.\dep\Lua\src\liolib.c	/^static int io_type (lua_State *L) {$/;"	f	file:
io_user_data	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   void *io_user_data;$/;"	m	struct:__anon95
io_write	.\dep\Lua\src\liolib.c	/^static int io_write (lua_State *L) {$/;"	f	file:
iolib	.\dep\Lua\src\liolib.c	/^static const luaL_Reg iolib[] = {$/;"	v	file:
iov_base	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  void *iov_base;$/;"	m	struct:__anon87
iov_len	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  size_t iov_len;$/;"	m	struct:__anon87
ipairsaux	.\dep\Lua\src\lbaselib.c	/^static int ipairsaux (lua_State *L) {$/;"	f	file:
is	.\include\sol\single\sol\sol.hpp	/^		bool is() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
is	.\include\sol\sol\object.hpp	/^		bool is() const {$/;"	f	class:sol::basic_object
isAvailable	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^bool SoundRecorder::isAvailable()$/;"	f	class:sf::SoundRecorder
isAvailable	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^bool RenderTextureImplFBO::isAvailable()$/;"	f	class:sf::priv::RenderTextureImplFBO
isAvailable	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::isAvailable()$/;"	f	class:sf::Shader
isAvailable	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^bool SensorImpl::isAvailable(Sensor::Type sensor)$/;"	f	class:sf::priv::SensorImpl
isAvailable	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^bool SensorImpl::isAvailable(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
isAvailable	.\dep\SFML\src\SFML\Window\Sensor.cpp	/^bool Sensor::isAvailable(Type sensor)$/;"	f	class:sf::Sensor
isAvailable	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^bool SensorManager::isAvailable(Sensor::Type sensor)$/;"	f	class:sf::priv::SensorManager
isAvailable	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^bool SensorImpl::isAvailable(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
isAvailable	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^bool SensorImpl::isAvailable(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
isBlocking	.\dep\SFML\src\SFML\Network\Socket.cpp	/^bool Socket::isBlocking() const$/;"	f	class:sf::Socket
isBranch	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        bool isBranch() const {$/;"	f	class:Catch::RunningSection
isButtonPressed	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool isButtonPressed[Mouse::ButtonCount];$/;"	m	struct:sf::priv::ActivityStates
isButtonPressed	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^bool Joystick::isButtonPressed(unsigned int joystick, unsigned int button)$/;"	f	class:sf::Joystick
isButtonPressed	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^bool Mouse::isButtonPressed(Button button)$/;"	f	class:sf::Mouse
isConnected	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^bool JoystickImpl::isConnected(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
isConnected	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^bool JoystickImpl::isConnected(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
isConnected	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^bool Joystick::isConnected(unsigned int joystick)$/;"	f	class:sf::Joystick
isConnected	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^bool JoystickImpl::isConnected(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
isConnected	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^bool JoystickImpl::isConnected(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
isConnected	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^bool JoystickImpl::isConnected(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
isDebuggerActive	.\include\sol\Catch\include\internal\catch_debugger.hpp	/^        bool isDebuggerActive(){$/;"	f	namespace:Catch
isDown	.\dep\SFML\src\SFML\Window\Touch.cpp	/^bool Touch::isDown(unsigned int finger)$/;"	f	class:sf::Touch
isEmpty	.\dep\SFML\src\SFML\System\String.cpp	/^bool String::isEmpty() const$/;"	f	class:sf::String
isEnabled	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^bool SensorManager::isEnabled(Sensor::Type sensor) const$/;"	f	class:sf::priv::SensorManager
isEnemy	.\src\src\Map.cpp	/^bool isEnemy(Object* o) { return dynamic_cast<Enemy*>(o) != nullptr; }$/;"	f
isExtensionSupported	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^bool AudioDevice::isExtensionSupported(const std::string& extension)$/;"	f	class:sf::priv::AudioDevice
isFalseTest	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isFalseTest	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool isFalseTest( int flags )                { return ( flags & ResultDisposition::FalseTest ) != 0; }$/;"	f	namespace:Catch
isFixedPitch	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong  isFixedPitch;$/;"	m	struct:TT_Postscript_
isFixedPositional	.\include\sol\Catch\include\external\clara.h	/^        bool isFixedPositional() const {$/;"	f	struct:Clara::PositionalArgProperties
isHTML	.\src\include\Logger.h	/^	bool isHTML = false;$/;"	m	class:Logger
isHidden	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCaseInfo::isHidden() const {$/;"	f	class:Catch::TestCaseInfo
isJoystick	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    bool isJoystick(const char *name)$/;"	f	namespace:__anon139
isJoystick	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    bool isJoystick(udev_device* udevDevice)$/;"	f	namespace:__anon150
isJustInfo	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch
isJustInfo	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool isJustInfo( int flags ) {$/;"	f	namespace:Catch
isKeyPressed	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^bool InputImpl::isKeyPressed(Keyboard::Key key)$/;"	f	class:sf::priv::InputImpl
isKeyPressed	.\dep\SFML\src\SFML\Window\Keyboard.cpp	/^bool Keyboard::isKeyPressed(Key key)$/;"	f	class:sf::Keyboard
isKeyPressed	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^bool InputImpl::isKeyPressed(Keyboard::Key key)$/;"	f	class:sf::priv::InputImpl
isKeyPressed	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^bool InputImpl::isKeyPressed(Keyboard::Key key)$/;"	f	class:sf::priv::InputImpl
isLeft	.\src\include\SkillTree.h	/^	bool isLeft;   \/\/ Is to the left of the root Node$/;"	m	class:SkillNode
isLfunction	.\dep\Lua\src\lobject.h	466;"	d
isLfunction	.\include\lua\lobject.h	466;"	d
isLoaded	.\src\include\LuaScript.h	/^	bool isLoaded() { return _loaded; }$/;"	f	class:LuaScript
isLua	.\dep\Lua\src\lstate.h	108;"	d
isLua	.\include\lua\lstate.h	108;"	d
isMouseButtonPressed	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^bool InputImpl::isMouseButtonPressed(Mouse::Button button)$/;"	f	class:sf::priv::InputImpl
isMouseButtonPressed	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^bool InputImpl::isMouseButtonPressed(Mouse::Button button)$/;"	f	class:sf::priv::InputImpl
isMouseButtonPressed	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^bool InputImpl::isMouseButtonPressed(Mouse::Button button)$/;"	f	class:sf::priv::InputImpl
isOk	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^bool Ftp::Response::isOk() const$/;"	f	class:sf::Ftp::Response
isOk	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    bool AssertionResult::isOk() const {$/;"	f	class:Catch::AssertionResult
isOk	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch
isOk	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool isOk( ResultWas::OfType resultType ) {$/;"	f	namespace:Catch
isOpen	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::isOpen() const$/;"	f	class:sf::Window
isProjectile	.\src\src\Map.cpp	/^bool isProjectile(Object* o) { return dynamic_cast<Projectile*>(o) != nullptr; }$/;"	f
isReady	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^bool SocketSelector::isReady(Socket& socket) const$/;"	f	class:sf::SocketSelector
isRelativeToListener	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^bool SoundSource::isRelativeToListener() const$/;"	f	class:sf::SoundSource
isRepeated	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^bool RenderTexture::isRepeated() const$/;"	f	class:sf::RenderTexture
isRepeated	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::isRepeated() const$/;"	f	class:sf::Texture
isReservedTag	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    inline bool isReservedTag( std::string const& tag ) {$/;"	f	namespace:Catch
isSet	.\include\sol\Catch\include\external\clara.h	/^            bool isSet() const {$/;"	f	class:Clara::Detail::BoundArgFunction
isSimpleTarget	.\src\include\Enemy.h	/^	virtual bool isSimpleTarget() { return false; }$/;"	f	class:Enemy
isSimpleTarget	.\src\include\Object.h	/^	virtual bool isSimpleTarget() { return false; }$/;"	f	class:Object
isSimpleTarget	.\src\include\Target.h	/^	virtual bool isSimpleTarget() { return true; }$/;"	f	class:Target
isSmooth	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^bool RenderTexture::isSmooth() const$/;"	f	class:sf::RenderTexture
isSmooth	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::isSmooth() const$/;"	f	class:sf::Texture
isSourceFile	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^def isSourceFile( path ):$/;"	f
isStackable	.\src\include\Perk.h	/^	bool isStackable() const { return _stackable; }$/;"	f	class:Perk
isToRemove	.\src\include\Object.h	/^	bool isToRemove() const { return _toRemove; }$/;"	f	class:Object
isToRemove	.\src\include\Perk.h	/^	bool isToRemove() const { return _toRemove; }$/;"	f	class:Perk
isTouchDown	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^bool InputImpl::isTouchDown(unsigned int finger)$/;"	f	class:sf::priv::InputImpl
isTouchDown	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^bool InputImpl::isTouchDown(unsigned int \/*finger*\/)$/;"	f	class:sf::priv::InputImpl
isTouchDown	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^bool InputImpl::isTouchDown(unsigned int \/*finger*\/)$/;"	f	class:sf::priv::InputImpl
isTower	.\src\src\Map.cpp	/^bool isTower(Object* o) { return dynamic_cast<Tower*>(o) != nullptr; }$/;"	f
isTrue	.\include\sol\Catch\include\external\clara.h	/^        inline bool isTrue( bool value ) { return value; }$/;"	f	namespace:Clara::Detail
isTrue	.\include\sol\Catch\include\internal\catch_common.h	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch
isTrue	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool isTrue( bool value ){ return value; }$/;"	f	namespace:Catch
isUpdating	.\src\include\GuiComponent.h	/^	bool isUpdating() { return _updating; }$/;"	f	class:GuiComponent
isValid	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool VideoMode::isValid() const$/;"	f	class:sf::VideoMode
isVisible	.\src\include\GuiComponent.h	/^	bool isVisible() { return _visible; }$/;"	f	class:GuiComponent
is_baseline	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean is_baseline;		\/* TRUE if Baseline SOF0 encountered *\/$/;"	m	struct:jpeg_decompress_struct
is_cd	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__bool is_cd;$/;"	m	struct:__anon53
is_constructor	.\include\sol\single\sol\sol.hpp	/^		struct is_constructor : std::false_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_constructor	.\include\sol\single\sol\sol.hpp	/^		struct is_constructor<constructor_wrapper<Args...>> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_constructor	.\include\sol\single\sol\sol.hpp	/^		struct is_constructor<constructors<Args...>> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_constructor	.\include\sol\single\sol\sol.hpp	/^		struct is_constructor<no_construction> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_constructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_constructor : std::false_type {};$/;"	s	namespace:sol::usertype_detail
is_constructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_constructor<constructor_wrapper<Args...>> : std::true_type {};$/;"	s	namespace:sol::usertype_detail
is_constructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_constructor<constructors<Args...>> : std::true_type {};$/;"	s	namespace:sol::usertype_detail
is_constructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_constructor<no_construction> : std::true_type {};$/;"	s	namespace:sol::usertype_detail
is_destructor	.\include\sol\single\sol\sol.hpp	/^		struct is_destructor : std::false_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_destructor	.\include\sol\single\sol\sol.hpp	/^		struct is_destructor<destructor_wrapper<Fx>> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_destructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_destructor : std::false_type {};$/;"	s	namespace:sol::usertype_detail
is_destructor	.\include\sol\sol\usertype_metatable.hpp	/^		struct is_destructor<destructor_wrapper<Fx>> : std::true_type {};$/;"	s	namespace:sol::usertype_detail
is_fixed_pitch	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Bool     is_fixed_pitch;$/;"	m	struct:PS_FontInfoRec_
is_function_binding	.\include\sol\sol\call.hpp	/^	struct is_function_binding : meta::neg<is_variable_binding<T>> {};$/;"	s	namespace:sol
is_include_guard	.\include\sol\single.py	/^def is_include_guard(line):$/;"	f
is_indexer	.\include\sol\single\sol\sol.hpp	/^		inline bool is_indexer(base_classes_tag) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_indexer	.\include\sol\single\sol\sol.hpp	/^		inline bool is_indexer(call_construction) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_indexer	.\include\sol\single\sol\sol.hpp	/^		inline bool is_indexer(meta_function mf) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_indexer	.\include\sol\single\sol\sol.hpp	/^		inline bool is_indexer(string_detail::string_shim s) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
is_indexer	.\include\sol\sol\usertype_metatable.hpp	/^		inline bool is_indexer(base_classes_tag) {$/;"	f	namespace:sol::usertype_detail
is_indexer	.\include\sol\sol\usertype_metatable.hpp	/^		inline bool is_indexer(call_construction) {$/;"	f	namespace:sol::usertype_detail
is_indexer	.\include\sol\sol\usertype_metatable.hpp	/^		inline bool is_indexer(meta_function mf) {$/;"	f	namespace:sol::usertype_detail
is_indexer	.\include\sol\sol\usertype_metatable.hpp	/^		inline bool is_indexer(string_detail::string_shim s) {$/;"	f	namespace:sol::usertype_detail
is_last	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__bool is_last;$/;"	m	struct:__anon57
is_loaded_package	.\include\sol\single\sol\sol.hpp	/^		optional<object> is_loaded_package(const std::string& key) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
is_loaded_package	.\include\sol\sol\state_view.hpp	/^		optional<object> is_loaded_package(const std::string& key) {$/;"	f	class:sol::state_view
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive : std::integral_constant<bool,$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<T*> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<light<T>> : is_lua_primitive<T*> { };$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<lightuserdata_value> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<non_null<T>> : is_lua_primitive<T*> {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<optional<T>> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<std::reference_wrapper<T>> : std::true_type { };$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<user<T>> : std::true_type { };$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_lua_primitive<userdata_value> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive : std::integral_constant<bool,$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<T*> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<light<T>> : is_lua_primitive<T*> { };$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<lightuserdata_value> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<non_null<T>> : is_lua_primitive<T*> {};$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<optional<T>> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<std::reference_wrapper<T>> : std::true_type { };$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<user<T>> : std::true_type { };$/;"	s	class:sol::call_syntax::call_status::type
is_lua_primitive	.\include\sol\sol\types.hpp	/^	struct is_lua_primitive<userdata_value> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_member_function	.\include\sol\single\sol\sol.hpp	/^				static const bool is_member_function = false;$/;"	m	struct:sol::meta::meta_detail::callable_traits
is_member_function	.\include\sol\single\sol\sol.hpp	/^				static const bool is_member_function = std::is_void<T>::value;$/;"	m	struct:sol::meta::meta_detail::basic_traits
is_member_function	.\include\sol\sol\bind_traits.hpp	/^				static const bool is_member_function = false;$/;"	m	struct:sol::meta::meta_detail::callable_traits
is_member_function	.\include\sol\sol\bind_traits.hpp	/^				static const bool is_member_function = std::is_void<T>::value;$/;"	m	struct:sol::meta::meta_detail::basic_traits
is_null	.\include\sol\single\sol\sol.hpp	/^		static bool is_null(U&&) {$/;"	f	struct:sol::sol::unique_usertype_traits
is_null	.\include\sol\single\sol\sol.hpp	/^		static bool is_null(const actual_type& value) {$/;"	f	struct:sol::sol::unique_usertype_traits
is_null	.\include\sol\sol\types.hpp	/^		static bool is_null(U&&) {$/;"	f	struct:sol::unique_usertype_traits
is_null	.\include\sol\sol\types.hpp	/^		static bool is_null(const actual_type& value) {$/;"	f	struct:sol::unique_usertype_traits
is_proxy_primitive	.\include\sol\single\sol\sol.hpp	/^	struct is_proxy_primitive : is_lua_primitive<T> { };$/;"	s	class:sol::sol::call_syntax::call_status::type
is_proxy_primitive	.\include\sol\sol\types.hpp	/^	struct is_proxy_primitive : is_lua_primitive<T> { };$/;"	s	class:sol::call_syntax::call_status::type
is_specialization_of	.\include\sol\single\sol\sol.hpp	/^		struct is_specialization_of : std::false_type { };$/;"	s	namespace:sol::meta
is_specialization_of	.\include\sol\single\sol\sol.hpp	/^		struct is_specialization_of<Templ, Templ<T...>> : std::true_type { };$/;"	s	namespace:sol::meta
is_specialization_of	.\include\sol\sol\traits.hpp	/^		struct is_specialization_of : std::false_type { };$/;"	s	namespace:sol::meta
is_specialization_of	.\include\sol\sol\traits.hpp	/^		struct is_specialization_of<Templ, Templ<T...>> : std::true_type { };$/;"	s	namespace:sol::meta
is_speshul	.\include\sol\single\sol\sol.hpp	/^		struct is_speshul : std::false_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
is_speshul	.\include\sol\single\sol\sol.hpp	/^		struct is_speshul<function_result> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
is_speshul	.\include\sol\single\sol\sol.hpp	/^		struct is_speshul<protected_function_result> : std::true_type {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
is_speshul	.\include\sol\sol\stack_proxy.hpp	/^		struct is_speshul<function_result> : std::true_type {};$/;"	s	namespace:sol::detail
is_speshul	.\include\sol\sol\stack_proxy.hpp	/^		struct is_speshul<protected_function_result> : std::true_type {};$/;"	s	namespace:sol::detail
is_speshul	.\include\sol\sol\tie.hpp	/^		struct is_speshul : std::false_type {};$/;"	s	namespace:sol::detail
is_stack	.\include\sol\single\sol\sol.hpp	/^		bool is_stack(std::false_type) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
is_stack	.\include\sol\single\sol\sol.hpp	/^		bool is_stack(std::true_type) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
is_stack	.\include\sol\sol\object.hpp	/^		bool is_stack(std::false_type) const {$/;"	f	class:sol::basic_object
is_stack	.\include\sol\sol\object.hpp	/^		bool is_stack(std::true_type) const {$/;"	f	class:sol::basic_object
is_table	.\include\sol\single\sol\sol.hpp	/^	struct is_table : std::false_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_table	.\include\sol\single\sol\sol.hpp	/^	struct is_table<basic_table_core<x, T>> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_table	.\include\sol\sol\types.hpp	/^	struct is_table : std::false_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_table	.\include\sol\sol\types.hpp	/^	struct is_table<basic_table_core<x, T>> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_tieable	.\include\sol\single\sol\sol.hpp	/^	struct is_tieable : std::integral_constant<bool, (::sol::tie_size<T>::value > 0)> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
is_tieable	.\include\sol\sol\tie.hpp	/^	struct is_tieable : std::integral_constant<bool, (::sol::tie_size<T>::value > 0)> {};$/;"	s	namespace:sol
is_transparent_argument	.\include\sol\single\sol\sol.hpp	/^	struct is_transparent_argument : std::false_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_transparent_argument	.\include\sol\single\sol\sol.hpp	/^	struct is_transparent_argument<this_state> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_transparent_argument	.\include\sol\single\sol\sol.hpp	/^	struct is_transparent_argument<variadic_args> : std::true_type {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_transparent_argument	.\include\sol\sol\types.hpp	/^	struct is_transparent_argument : std::false_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_transparent_argument	.\include\sol\sol\types.hpp	/^	struct is_transparent_argument<this_state> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_transparent_argument	.\include\sol\sol\types.hpp	/^	struct is_transparent_argument<variadic_args> : std::true_type {};$/;"	s	class:sol::call_syntax::call_status::type
is_true	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^struct is_true$/;"	s	file:
is_tuple	.\include\sol\single\sol\sol.hpp	/^		struct is_tuple : std::false_type { };$/;"	s	namespace:sol::meta
is_tuple	.\include\sol\single\sol\sol.hpp	/^		struct is_tuple<std::tuple<Args...>> : std::true_type { };$/;"	s	namespace:sol::meta
is_tuple	.\include\sol\sol\traits.hpp	/^		struct is_tuple : std::false_type { };$/;"	s	namespace:sol::meta
is_tuple	.\include\sol\sol\traits.hpp	/^		struct is_tuple<std::tuple<Args...>> : std::true_type { };$/;"	s	namespace:sol::meta
is_unique_usertype	.\include\sol\single\sol\sol.hpp	/^	struct is_unique_usertype : std::integral_constant<bool, unique_usertype_traits<T>::value> {};$/;"	s	class:sol::sol::call_syntax::call_status::type
is_unique_usertype	.\include\sol\sol\types.hpp	/^	struct is_unique_usertype : std::integral_constant<bool, unique_usertype_traits<T>::value> {};$/;"	s	class:sol::call_syntax::call_status::type
is_unit	.\include\sol\examples\usertype.cpp	/^    bool is_unit() const {$/;"	f	struct:vector
is_var_bind	.\include\sol\sol\call.hpp	/^		struct is_var_bind : std::false_type {};$/;"	s	namespace:sol::call_detail
is_var_bind	.\include\sol\sol\call.hpp	/^		struct is_var_bind<T, std::enable_if_t<std::is_member_object_pointer<T>::value>> : std::true_type {};$/;"	s	namespace:sol::call_detail
is_var_bind	.\include\sol\sol\call.hpp	/^		struct is_var_bind<no_prop> : std::true_type {};$/;"	s	namespace:sol::call_detail
is_var_bind	.\include\sol\sol\call.hpp	/^		struct is_var_bind<property_wrapper<R, W>> : std::true_type {};$/;"	s	namespace:sol::call_detail
is_vararg	.\dep\Lua\src\lobject.h	/^  lu_byte is_vararg;  \/* 2: declared vararg; 1: uses vararg *\/$/;"	m	struct:Proto
is_vararg	.\include\lua\lobject.h	/^  lu_byte is_vararg;  \/* 2: declared vararg; 1: uses vararg *\/$/;"	m	struct:Proto
is_variable_binding	.\include\sol\sol\call.hpp	/^	struct is_variable_binding : call_detail::is_var_bind<meta::unqualified_t<T>> {};$/;"	s	namespace:sol
isblack	.\dep\Lua\src\lgc.h	88;"	d
isblack	.\include\lua\lgc.h	88;"	d
iscleared	.\dep\Lua\src\lgc.c	/^static int iscleared (global_State *g, const TValue *o) {$/;"	f	file:
isclosed	.\dep\Lua\src\liolib.c	146;"	d	file:
iscollectable	.\dep\Lua\src\lobject.h	184;"	d
iscollectable	.\include\lua\lobject.h	184;"	d
iscont	.\dep\Lua\src\lutf8lib.c	25;"	d	file:
isdead	.\dep\Lua\src\lgc.h	96;"	d
isdead	.\include\lua\lgc.h	96;"	d
isdeadm	.\dep\Lua\src\lgc.h	95;"	d
isdeadm	.\include\lua\lgc.h	95;"	d
isdummy	.\dep\Lua\src\ltable.c	77;"	d	file:
isemptystr	.\dep\Lua\src\lvm.c	457;"	d	file:
isgray	.\dep\Lua\src\lgc.h	89;"	d
isgray	.\include\lua\lgc.h	89;"	d
isinstack	.\dep\Lua\src\ldebug.c	/^static int isinstack (CallInfo *ci, const TValue *o) {$/;"	f	file:
isintwups	.\dep\Lua\src\lfunc.h	22;"	d
isintwups	.\include\lua\lfunc.h	22;"	d
islittle	.\dep\Lua\src\lstrlib.c	/^  int islittle;$/;"	m	struct:Header	file:
isloop	.\dep\Lua\src\lparser.c	/^  lu_byte isloop;  \/* true if 'block' is a loop *\/$/;"	m	struct:BlockCnt	file:
isneg	.\dep\Lua\src\lobject.c	/^static int isneg (const char **s) {$/;"	f	file:
ispseudo	.\dep\Lua\src\lapi.c	46;"	d	file:
isrc	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	char isrc[13];$/;"	m	struct:__anon52
isreserved	.\dep\Lua\src\lstring.h	27;"	d
isreserved	.\include\lua\lstring.h	27;"	d
isstackindex	.\dep\Lua\src\lapi.c	52;"	d	file:
issue	.\include\sol\Catch\scripts\releaseNotes.py	/^            issue = '#{0} ("{1}")'.format( issueNumber, getIssueTitle( issueNumber ) )$/;"	v
issueNumber	.\include\sol\Catch\scripts\releaseNotes.py	/^            issueNumber = match.group(2)$/;"	v
issueNumberRe	.\include\sol\Catch\scripts\releaseNotes.py	/^issueNumberRe = re.compile( r'(.*?)#([0-9]*)([^0-9]?.*)' )$/;"	v
issues	.\include\sol\Catch\scripts\releaseNotes.py	/^issues = {}$/;"	v
issweepphase	.\dep\Lua\src\lgc.h	49;"	d
issweepphase	.\include\lua\lgc.h	49;"	d
istailcall	.\dep\Lua\src\lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
istailcall	.\include\lua\lua.h	/^  char istailcall;	\/* (t) *\/$/;"	m	struct:lua_Debug
isupvalue	.\dep\Lua\src\lapi.c	49;"	d	file:
isvalid	.\dep\Lua\src\lapi.c	43;"	d	file:
isvararg	.\dep\Lua\src\lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
isvararg	.\include\lua\lua.h	/^  char isvararg;        \/* (u) *\/$/;"	m	struct:lua_Debug
iswhite	.\dep\Lua\src\lgc.h	87;"	d
iswhite	.\include\lua\lgc.h	87;"	d
itDoesThat	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^inline bool itDoesThat(){ return true; }$/;"	f
itDoesThis	.\include\sol\Catch\projects\SelfTest\BDDTests.cpp	/^inline bool itDoesThis(){ return true; }$/;"	f
itMessage	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            std::vector<MessageInfo>::const_iterator itMessage;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
italic	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    italic;$/;"	m	struct:FT_WinFNT_HeaderRec_
italicAngle	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed  italicAngle;$/;"	m	struct:TT_Postscript_
italic_angle	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Long     italic_angle;$/;"	m	struct:PS_FontInfoRec_
item	.\include\sol\single\sol\sol.hpp	/^			T& item;$/;"	m	struct:sol::sol::detail::implicit_wrapper
item	.\include\sol\sol\types.hpp	/^			T& item;$/;"	m	struct:sol::detail::implicit_wrapper
iter_aux	.\dep\Lua\src\lutf8lib.c	/^static int iter_aux (lua_State *L) {$/;"	f	file:
iter_codes	.\dep\Lua\src\lutf8lib.c	/^static int iter_codes (lua_State *L) {$/;"	f	file:
iterator	.\include\sol\single\sol\sol.hpp	/^		typedef basic_table_iterator<base_t> iterator;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
iterator	.\include\sol\single\sol\sol.hpp	/^		typedef va_iterator<false> iterator;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
iterator	.\include\sol\sol\state_view.hpp	/^		typedef global_table::iterator iterator;$/;"	t	class:sol::state_view
iterator	.\include\sol\sol\table_core.hpp	/^		typedef basic_table_iterator<base_t> iterator;$/;"	t	class:sol::basic_table_core
iterator	.\include\sol\sol\variadic_args.hpp	/^		typedef va_iterator<false> iterator;$/;"	t	struct:sol::variadic_args
iterator_category	.\include\sol\single\sol\sol.hpp	/^		typedef base_t::iterator_category iterator_category;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
iterator_category	.\include\sol\single\sol\sol.hpp	/^		typedef typename base_t::iterator_category iterator_category;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
iterator_category	.\include\sol\sol\table_iterator.hpp	/^		typedef base_t::iterator_category iterator_category;$/;"	t	class:sol::basic_table_iterator
iterator_category	.\include\sol\sol\variadic_args.hpp	/^		typedef typename base_t::iterator_category iterator_category;$/;"	t	struct:sol::va_iterator
itertools	.\include\sol\bootstrap.py	/^import itertools$/;"	i
ival	.\dep\Lua\src\lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon12
ival	.\include\lua\lparser.h	/^    lua_Integer ival;    \/* for VKINT *\/$/;"	m	union:expdesc::__anon163
ivalue	.\dep\Lua\src\lobject.h	163;"	d
ivalue	.\include\lua\lobject.h	163;"	d
j_common_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jpeg_common_struct * j_common_ptr;$/;"	t	typeref:struct:jpeg_common_struct
j_compress_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jpeg_compress_struct * j_compress_ptr;$/;"	t	typeref:struct:jpeg_compress_struct
j_decompress_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jpeg_decompress_struct * j_decompress_ptr;$/;"	t	typeref:struct:jpeg_decompress_struct
jit	.\include\sol\single\sol\sol.hpp	/^		jit,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
jit	.\include\sol\sol\state_view.hpp	/^		jit,$/;"	m	class:sol::lib
joystick	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^        JoystickImpl             joystick;       \/\/\/< Joystick implementation$/;"	m	struct:sf::priv::JoystickManager::Item
joystickButton	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickButtonEvent   joystickButton;    \/\/\/< Joystick button event parameters (Event::JoystickButtonPressed, Event::JoystickButtonReleased)$/;"	m	union:sf::Event::__anon114
joystickButton	.\include\SFML\Window\Event.hpp	/^        JoystickButtonEvent   joystickButton;    \/\/\/< Joystick button event parameters (Event::JoystickButtonPressed, Event::JoystickButtonReleased)$/;"	m	union:sf::Event::__anon174
joystickConnect	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickConnectEvent  joystickConnect;   \/\/\/< Joystick (dis)connect event parameters (Event::JoystickConnected, Event::JoystickDisconnected)$/;"	m	union:sf::Event::__anon114
joystickConnect	.\include\SFML\Window\Event.hpp	/^        JoystickConnectEvent  joystickConnect;   \/\/\/< Joystick (dis)connect event parameters (Event::JoystickConnected, Event::JoystickDisconnected)$/;"	m	union:sf::Event::__anon174
joystickId	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickMoveEvent
joystickId	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
joystickId	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickConnectEvent
joystickId	.\include\SFML\Window\Event.hpp	/^        unsigned int   joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickMoveEvent
joystickId	.\include\SFML\Window\Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickButtonEvent
joystickId	.\include\SFML\Window\Event.hpp	/^        unsigned int joystickId; \/\/\/< Index of the joystick (in range [0 .. Joystick::Count - 1])$/;"	m	struct:sf::Event::JoystickConnectEvent
joystickList	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    JoystickList joystickList;$/;"	m	namespace:__anon150	file:
joystickMove	.\dep\SFML\include\SFML\Window\Event.hpp	/^        JoystickMoveEvent     joystickMove;      \/\/\/< Joystick move event parameters (Event::JoystickMoved)$/;"	m	union:sf::Event::__anon114
joystickMove	.\include\SFML\Window\Event.hpp	/^        JoystickMoveEvent     joystickMove;      \/\/\/< Joystick move event parameters (Event::JoystickMoved)$/;"	m	union:sf::Event::__anon174
jpc	.\dep\Lua\src\lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState
jpc	.\include\lua\lparser.h	/^  int jpc;  \/* list of pending jumps to 'pc' *\/$/;"	m	struct:FuncState
jpeg_CreateCompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	872;"	d
jpeg_CreateDecompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	873;"	d
jpeg_abort	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	921;"	d
jpeg_abort_compress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	919;"	d
jpeg_abort_decompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	920;"	d
jpeg_add_quant_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	886;"	d
jpeg_alloc_huff_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	891;"	d
jpeg_alloc_quant_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	890;"	d
jpeg_c_coef_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_coef_controller { long dummy; };$/;"	s
jpeg_c_main_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_main_controller { long dummy; };$/;"	s
jpeg_c_prep_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_c_prep_controller { long dummy; };$/;"	s
jpeg_calc_jpeg_dimensions	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	895;"	d
jpeg_calc_output_dimensions	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	913;"	d
jpeg_color_converter	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_converter { long dummy; };$/;"	s
jpeg_color_deconverter	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_deconverter { long dummy; };$/;"	s
jpeg_color_quantizer	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_color_quantizer { long dummy; };$/;"	s
jpeg_color_space	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_COLOR_SPACE jpeg_color_space; \/* colorspace of JPEG image *\/$/;"	m	struct:jpeg_compress_struct
jpeg_color_space	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_COLOR_SPACE jpeg_color_space; \/* colorspace of JPEG image *\/$/;"	m	struct:jpeg_decompress_struct
jpeg_common_fields	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_common_fields;		\/* Fields common to both master struct types *\/$/;"	m	struct:jpeg_common_struct
jpeg_common_fields	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_common_fields;		\/* Fields shared with jpeg_compress_struct *\/$/;"	m	struct:jpeg_decompress_struct
jpeg_common_fields	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_common_fields;		\/* Fields shared with jpeg_decompress_struct *\/$/;"	m	struct:jpeg_compress_struct
jpeg_common_fields	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	250;"	d
jpeg_common_struct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_common_struct {$/;"	s
jpeg_comp_master	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_comp_master { long dummy; };$/;"	s
jpeg_component_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} jpeg_component_info;$/;"	t	typeref:struct:__anon81
jpeg_compress_struct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_compress_struct {$/;"	s
jpeg_consume_input	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	911;"	d
jpeg_copy_critical_parameters	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	918;"	d
jpeg_core_output_dimensions	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	912;"	d
jpeg_create_compress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	938;"	d
jpeg_create_decompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	941;"	d
jpeg_d_coef_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_coef_controller { long dummy; };$/;"	s
jpeg_d_main_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_main_controller { long dummy; };$/;"	s
jpeg_d_post_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_d_post_controller { long dummy; };$/;"	s
jpeg_decomp_master	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_decomp_master { long dummy; };$/;"	s
jpeg_decompress_struct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_decompress_struct {$/;"	s
jpeg_default_colorspace	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	882;"	d
jpeg_default_qtables	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	885;"	d
jpeg_destination_mgr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_destination_mgr {$/;"	s
jpeg_destroy	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	922;"	d
jpeg_destroy_compress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	874;"	d
jpeg_destroy_decompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	875;"	d
jpeg_downsampler	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_downsampler { long dummy; };$/;"	s
jpeg_entropy_decoder	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_entropy_decoder { long dummy; };$/;"	s
jpeg_entropy_encoder	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_entropy_encoder { long dummy; };$/;"	s
jpeg_error_mgr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_error_mgr {$/;"	s
jpeg_finish_compress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	894;"	d
jpeg_finish_decompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	904;"	d
jpeg_finish_output	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	908;"	d
jpeg_forward_dct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_forward_dct { long dummy; };$/;"	s
jpeg_has_multiple_scans	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	906;"	d
jpeg_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION jpeg_height;	\/* scaled JPEG image height *\/$/;"	m	struct:jpeg_compress_struct
jpeg_input_complete	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	909;"	d
jpeg_input_controller	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_input_controller { long dummy; };$/;"	s
jpeg_inverse_dct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_inverse_dct { long dummy; };$/;"	s
jpeg_marker_reader	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_marker_reader { long dummy; };$/;"	s
jpeg_marker_struct	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_marker_struct {$/;"	s
jpeg_marker_writer	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_marker_writer { long dummy; };$/;"	s
jpeg_mem_dest	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	878;"	d
jpeg_mem_src	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	879;"	d
jpeg_memory_mgr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_memory_mgr {$/;"	s
jpeg_message_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const char * const * jpeg_message_table; \/* Library errors *\/$/;"	m	struct:jpeg_error_mgr
jpeg_new_colormap	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	910;"	d
jpeg_progress_mgr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_progress_mgr {$/;"	s
jpeg_quality_scaling	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	887;"	d
jpeg_read_coefficients	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	916;"	d
jpeg_read_header	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	901;"	d
jpeg_read_raw_data	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	905;"	d
jpeg_read_scanlines	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	903;"	d
jpeg_resync_to_restart	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	923;"	d
jpeg_save_markers	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	914;"	d
jpeg_saved_marker_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jpeg_marker_struct FAR * jpeg_saved_marker_ptr;$/;"	t	typeref:struct:FAR
jpeg_scan_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^} jpeg_scan_info;$/;"	t	typeref:struct:__anon82
jpeg_set_colorspace	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	881;"	d
jpeg_set_defaults	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	880;"	d
jpeg_set_linear_quality	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	884;"	d
jpeg_set_marker_processor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	915;"	d
jpeg_set_quality	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	883;"	d
jpeg_simple_progression	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	888;"	d
jpeg_source_mgr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_source_mgr {$/;"	s
jpeg_start_compress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	892;"	d
jpeg_start_decompress	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	902;"	d
jpeg_start_output	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	907;"	d
jpeg_std_error	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	871;"	d
jpeg_stdio_dest	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	876;"	d
jpeg_stdio_src	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	877;"	d
jpeg_suppress_tables	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	889;"	d
jpeg_upsampler	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jpeg_upsampler { long dummy; };$/;"	s
jpeg_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION jpeg_width;	\/* scaled JPEG image width *\/$/;"	m	struct:jpeg_compress_struct
jpeg_write_coefficients	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	917;"	d
jpeg_write_m_byte	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	899;"	d
jpeg_write_m_header	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	898;"	d
jpeg_write_marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	897;"	d
jpeg_write_raw_data	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	896;"	d
jpeg_write_scanlines	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	893;"	d
jpeg_write_tables	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	900;"	d
json	.\include\sol\Catch\scripts\releaseNotes.py	/^import json$/;"	i
jumponcond	.\dep\Lua\src\lcode.c	/^static int jumponcond (FuncState *fs, expdesc *e, int cond) {$/;"	f	file:
jvirt_barray_control	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jvirt_barray_control { long dummy; };$/;"	s
jvirt_barray_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jvirt_barray_control * jvirt_barray_ptr;$/;"	t	typeref:struct:jvirt_barray_control
jvirt_sarray_control	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^struct jvirt_sarray_control { long dummy; };$/;"	s
jvirt_sarray_ptr	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^typedef struct jvirt_sarray_control * jvirt_sarray_ptr;$/;"	t	typeref:struct:jvirt_sarray_control
k	.\dep\Lua\src\lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	.\dep\Lua\src\lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	.\dep\Lua\src\lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon15::__anon17
k	.\include\lua\lobject.h	/^  TValue *k;  \/* constants used by the function *\/$/;"	m	struct:Proto
k	.\include\lua\lparser.h	/^  expkind k;$/;"	m	struct:expdesc
k	.\include\lua\lstate.h	/^      lua_KFunction k;  \/* continuation in case of yields *\/$/;"	m	struct:CallInfo::__anon166::__anon168
keepAlive	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::keepAlive()$/;"	f	class:sf::Ftp
keepinvariant	.\dep\Lua\src\lgc.h	61;"	d
keepinvariant	.\include\lua\lgc.h	61;"	d
kepler_lua_compat_get_string	.\include\sol\single\sol\sol.hpp	/^inline const char* kepler_lua_compat_get_string(lua_State* L, void* ud, size_t* size) {$/;"	f
kepler_lua_compat_get_string	.\include\sol\sol\compatibility\5.1.0.h	/^inline const char* kepler_lua_compat_get_string(lua_State* L, void* ud, size_t* size) {$/;"	f
kepler_lua_compat_get_string_view	.\include\sol\single\sol\sol.hpp	/^typedef struct kepler_lua_compat_get_string_view {$/;"	s
kepler_lua_compat_get_string_view	.\include\sol\single\sol\sol.hpp	/^} kepler_lua_compat_get_string_view;$/;"	t	typeref:struct:sol::kepler_lua_compat_get_string_view
kepler_lua_compat_get_string_view	.\include\sol\sol\compatibility\5.1.0.h	/^typedef struct kepler_lua_compat_get_string_view {$/;"	s
kepler_lua_compat_get_string_view	.\include\sol\sol\compatibility\5.1.0.h	/^} kepler_lua_compat_get_string_view;$/;"	t	typeref:struct:kepler_lua_compat_get_string_view
key	.\dep\SFML\include\SFML\Window\Event.hpp	/^        KeyEvent              key;               \/\/\/< Key event parameters (Event::KeyPressed, Event::KeyReleased)$/;"	m	union:sf::Event::__anon114
key	.\include\SFML\Window\Event.hpp	/^        KeyEvent              key;               \/\/\/< Key event parameters (Event::KeyPressed, Event::KeyReleased)$/;"	m	union:sf::Event::__anon174
key	.\include\sol\single\sol\sol.hpp	/^		T key;$/;"	m	struct:sol::sol::metatable_registry_key
key	.\include\sol\single\sol\sol.hpp	/^		key_type key;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
key	.\include\sol\sol\proxy.hpp	/^		key_type key;$/;"	m	struct:sol::proxy
key	.\include\sol\sol\types.hpp	/^		T key;$/;"	m	struct:sol::metatable_registry_key
keyEvent	.\src\src\GameWindow.cpp	/^void GameWindow::keyEvent(sf::Event& e) {$/;"	f	class:GameWindow
keyEvent	.\src\src\PauseWindow.cpp	/^void PauseWindow::keyEvent(sf::Event& e) {$/;"	f	class:PauseWindow
keyEvent	.\src\src\SkillTreeWindow.cpp	/^void SkillTreeWindow::keyEvent(sf::Event& e) {$/;"	f	class:SkillTreeWindow
keyEvent	.\src\src\Window.cpp	/^void Window::keyEvent(sf::Event& e) {}$/;"	f	class:Window
key_type	.\include\sol\single\sol\sol.hpp	/^		typedef meta::condition<meta::is_specialization_of<std::tuple, Key>, Key, std::tuple<meta::condition<std::is_array<meta::unqualified_t<Key>>, Key&, meta::unqualified_t<Key>>>> key_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
key_type	.\include\sol\single\sol\sol.hpp	/^		typedef object key_type;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
key_type	.\include\sol\sol\proxy.hpp	/^		typedef meta::condition<meta::is_specialization_of<std::tuple, Key>, Key, std::tuple<meta::condition<std::is_array<meta::unqualified_t<Key>>, Key&, meta::unqualified_t<Key>>>> key_type;$/;"	t	struct:sol::proxy
key_type	.\include\sol\sol\table_iterator.hpp	/^		typedef object key_type;$/;"	t	class:sol::basic_table_iterator
keyfromval	.\dep\Lua\src\ltable.h	31;"	d
keyfromval	.\include\lua\ltable.h	31;"	d
keyidx	.\include\sol\single\sol\sol.hpp	/^		int keyidx = 0;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
keyidx	.\include\sol\sol\table_iterator.hpp	/^		int keyidx = 0;$/;"	m	class:sol::basic_table_iterator
keysymToSF	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    sf::Keyboard::Key keysymToSF(xcb_keysym_t symbol)$/;"	f	namespace:__anon151
kill	.\include\sol\test_usertypes.cpp	/^	static void kill(factory_test& f) {$/;"	f	struct:factory_test
kname	.\dep\Lua\src\ldebug.c	/^static void kname (Proto *p, int pc, int c, const char **name) {$/;"	f	file:
kvp	.\include\sol\single\sol\sol.hpp	/^		std::pair<object, object> kvp;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
kvp	.\include\sol\sol\table_iterator.hpp	/^		std::pair<object, object> kvp;$/;"	m	class:sol::basic_table_iterator
l	.\dep\Lua\src\llimits.h	/^  long l;$/;"	m	union:__anon6
l	.\dep\Lua\src\lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	.\dep\Lua\src\lstate.c	/^  LX l;$/;"	m	struct:LG	file:
l	.\dep\Lua\src\lstate.c	/^  lua_State l;$/;"	m	struct:LX	file:
l	.\dep\Lua\src\lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon15	typeref:struct:CallInfo::__anon15::__anon16
l	.\include\lua\llimits.h	/^  long l;$/;"	m	union:__anon158
l	.\include\lua\lobject.h	/^  LClosure l;$/;"	m	union:Closure
l	.\include\lua\lstate.h	/^    } l;$/;"	m	union:CallInfo::__anon166	typeref:struct:CallInfo::__anon166::__anon167
l	.\include\sol\single\sol\sol.hpp	/^			List l;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::detail::tagged
l	.\include\sol\sol\raii.hpp	/^			List l;$/;"	m	struct:sol::detail::tagged
lW	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long  lW;$/;"	m	struct:vorbis_block
lW	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long lW;$/;"	m	struct:vorbis_dsp_state
l_G	.\dep\Lua\src\lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_G	.\include\lua\lstate.h	/^  global_State *l_G;$/;"	m	struct:lua_State
l_alloc	.\dep\Lua\src\lauxlib.c	/^static void *l_alloc (void *ud, void *ptr, size_t osize, size_t nsize) {$/;"	f	file:
l_castS2U	.\dep\Lua\src\llimits.h	122;"	d
l_castS2U	.\include\lua\llimits.h	122;"	d
l_castU2S	.\dep\Lua\src\llimits.h	131;"	d
l_castU2S	.\include\lua\llimits.h	131;"	d
l_checkmode	.\dep\Lua\src\liolib.c	40;"	d	file:
l_checktime	.\dep\Lua\src\loslib.c	/^static time_t l_checktime (lua_State *L, int arg) {$/;"	f	file:
l_d	.\include\sol\single\sol\sol.hpp	/^union compat52_luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	m	union:sol::compat52_luai_Cast
l_floor	.\dep\Lua\src\luaconf.h	422;"	d
l_floor	.\include\lua\luaconf.h	422;"	d
l_fseek	.\dep\Lua\src\liolib.c	109;"	d	file:
l_fseek	.\dep\Lua\src\liolib.c	117;"	d	file:
l_fseek	.\dep\Lua\src\liolib.c	124;"	d	file:
l_ftell	.\dep\Lua\src\liolib.c	110;"	d	file:
l_ftell	.\dep\Lua\src\liolib.c	118;"	d	file:
l_ftell	.\dep\Lua\src\liolib.c	125;"	d	file:
l_getc	.\dep\Lua\src\liolib.c	85;"	d	file:
l_getc	.\dep\Lua\src\liolib.c	89;"	d	file:
l_gmtime	.\dep\Lua\src\loslib.c	86;"	d	file:
l_gmtime	.\dep\Lua\src\loslib.c	92;"	d	file:
l_hashfloat	.\dep\Lua\src\ltable.c	/^static int l_hashfloat (lua_Number n) {$/;"	f	file:
l_inspectstat	.\dep\Lua\src\lauxlib.c	262;"	d	file:
l_inspectstat	.\dep\Lua\src\lauxlib.c	268;"	d	file:
l_intfitsf	.\dep\Lua\src\lvm.c	59;"	d	file:
l_isfalse	.\dep\Lua\src\lobject.h	181;"	d
l_isfalse	.\include\lua\lobject.h	181;"	d
l_localtime	.\dep\Lua\src\loslib.c	87;"	d	file:
l_localtime	.\dep\Lua\src\loslib.c	93;"	d	file:
l_lockfile	.\dep\Lua\src\liolib.c	86;"	d	file:
l_lockfile	.\dep\Lua\src\liolib.c	90;"	d	file:
l_mathlim	.\dep\Lua\src\luaconf.h	446;"	d
l_mathlim	.\dep\Lua\src\luaconf.h	462;"	d
l_mathlim	.\dep\Lua\src\luaconf.h	477;"	d
l_mathlim	.\include\lua\luaconf.h	446;"	d
l_mathlim	.\include\lua\luaconf.h	462;"	d
l_mathlim	.\include\lua\luaconf.h	477;"	d
l_mathop	.\dep\Lua\src\luaconf.h	453;"	d
l_mathop	.\dep\Lua\src\luaconf.h	469;"	d
l_mathop	.\dep\Lua\src\luaconf.h	484;"	d
l_mathop	.\dep\Lua\src\luaconf.h	626;"	d
l_mathop	.\dep\Lua\src\luaconf.h	628;"	d
l_mathop	.\include\lua\luaconf.h	453;"	d
l_mathop	.\include\lua\luaconf.h	469;"	d
l_mathop	.\include\lua\luaconf.h	484;"	d
l_mathop	.\include\lua\luaconf.h	626;"	d
l_mathop	.\include\lua\luaconf.h	628;"	d
l_mem	.\dep\Lua\src\llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_mem	.\dep\Lua\src\llimits.h	/^typedef long l_mem;$/;"	t
l_mem	.\dep\Lua\src\llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t
l_mem	.\include\lua\llimits.h	/^typedef LUAI_MEM l_mem;$/;"	t
l_mem	.\include\lua\llimits.h	/^typedef long l_mem;$/;"	t
l_mem	.\include\lua\llimits.h	/^typedef ptrdiff_t l_mem;$/;"	t
l_message	.\dep\Lua\src\lua.c	/^static void l_message (const char *pname, const char *msg) {$/;"	f	file:
l_noret	.\dep\Lua\src\llimits.h	139;"	d
l_noret	.\dep\Lua\src\llimits.h	141;"	d
l_noret	.\dep\Lua\src\llimits.h	143;"	d
l_noret	.\include\lua\llimits.h	139;"	d
l_noret	.\include\lua\llimits.h	141;"	d
l_noret	.\include\lua\llimits.h	143;"	d
l_p	.\include\sol\single\sol\sol.hpp	/^union compat52_luai_Cast { double l_d; LUA_INT32 l_p[2]; };$/;"	m	union:sol::compat52_luai_Cast
l_pclose	.\dep\Lua\src\liolib.c	59;"	d	file:
l_pclose	.\dep\Lua\src\liolib.c	64;"	d	file:
l_pclose	.\dep\Lua\src\liolib.c	73;"	d	file:
l_popen	.\dep\Lua\src\liolib.c	58;"	d	file:
l_popen	.\dep\Lua\src\liolib.c	63;"	d	file:
l_popen	.\dep\Lua\src\liolib.c	69;"	d	file:
l_print	.\dep\Lua\src\lua.c	/^static void l_print (lua_State *L) {$/;"	f	file:
l_pushtime	.\dep\Lua\src\loslib.c	67;"	d	file:
l_rand	.\dep\Lua\src\lmathlib.c	28;"	d	file:
l_rand	.\dep\Lua\src\lmathlib.c	32;"	d	file:
l_randomizePivot	.\dep\Lua\src\ltablib.c	/^static unsigned int l_randomizePivot (void) {$/;"	f	file:
l_registry	.\dep\Lua\src\lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_registry	.\include\lua\lstate.h	/^  TValue l_registry;$/;"	m	struct:global_State
l_seeknum	.\dep\Lua\src\liolib.c	111;"	d	file:
l_seeknum	.\dep\Lua\src\liolib.c	119;"	d	file:
l_seeknum	.\dep\Lua\src\liolib.c	126;"	d	file:
l_setbit	.\dep\Lua\src\lgc.h	72;"	d
l_setbit	.\include\lua\lgc.h	72;"	d
l_signalT	.\dep\Lua\src\lstate.h	42;"	d
l_signalT	.\include\lua\lstate.h	42;"	d
l_sprintf	.\dep\Lua\src\luaconf.h	591;"	d
l_sprintf	.\dep\Lua\src\luaconf.h	593;"	d
l_sprintf	.\include\lua\luaconf.h	591;"	d
l_sprintf	.\include\lua\luaconf.h	593;"	d
l_srand	.\dep\Lua\src\lmathlib.c	29;"	d	file:
l_srand	.\dep\Lua\src\lmathlib.c	33;"	d	file:
l_str2d	.\dep\Lua\src\lobject.c	/^static const char *l_str2d (const char *s, lua_Number *result) {$/;"	f	file:
l_str2dloc	.\dep\Lua\src\lobject.c	/^static const char *l_str2dloc (const char *s, lua_Number *result, int mode) {$/;"	f	file:
l_str2int	.\dep\Lua\src\lobject.c	/^static const char *l_str2int (const char *s, lua_Integer *result) {$/;"	f	file:
l_strcmp	.\dep\Lua\src\lvm.c	/^static int l_strcmp (const TString *ls, const TString *rs) {$/;"	f	file:
l_timet	.\dep\Lua\src\loslib.c	66;"	d	file:
l_uacInt	.\dep\Lua\src\llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t
l_uacInt	.\include\lua\llimits.h	/^typedef LUAI_UACINT l_uacInt;$/;"	t
l_uacNumber	.\dep\Lua\src\llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
l_uacNumber	.\include\lua\llimits.h	/^typedef LUAI_UACNUMBER l_uacNumber;$/;"	t
l_unlockfile	.\dep\Lua\src\liolib.c	87;"	d	file:
l_unlockfile	.\dep\Lua\src\liolib.c	91;"	d	file:
label	.\dep\Lua\src\lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
label	.\include\lua\lparser.h	/^  Labellist label;   \/* list of active labels *\/$/;"	m	struct:Dyndata
label	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::string label;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn
labelstat	.\dep\Lua\src\lparser.c	/^static void labelstat (LexState *ls, TString *label, int line) {$/;"	f	file:
lacing_fill	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    lacing_fill;$/;"	m	struct:__anon90
lacing_packet	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    lacing_packet;$/;"	m	struct:__anon90
lacing_returned	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    lacing_returned;$/;"	m	struct:__anon90
lacing_storage	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    lacing_storage;$/;"	m	struct:__anon90
lacing_vals	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int     *lacing_vals;      \/* The values that will go to the segment table *\/$/;"	m	struct:__anon90
laction	.\dep\Lua\src\lua.c	/^static void laction (int i) {$/;"	f	file:
language	.\include\sol\docs\source\conf.py	/^language = None$/;"	v
language_group	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Long    language_group;$/;"	m	struct:PS_PrivateRec_
language_id	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_UShort  language_id;$/;"	m	struct:FT_SfntName_
lapi_c	.\dep\Lua\src\lapi.c	7;"	d	file:
lapi_h	.\dep\Lua\src\lapi.h	8;"	d
lapi_h	.\include\lua\lapi.h	8;"	d
last	.\include\sol\Catch\include\external\clara.h	/^        std::string const& last() const { return lines.back(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text::std
last	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::string const& last() const { return lines.back(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text::std
last	.\include\sol\single\sol\sol.hpp	/^			int last;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::record
last	.\include\sol\sol\stack_core.hpp	/^			int last;$/;"	m	struct:sol::stack::record
lastBlendMode	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache
lastBlendMode	.\include\SFML\Graphics\RenderTarget.hpp	/^        BlendMode lastBlendMode;  \/\/\/< Cached blending mode$/;"	m	struct:sf::RenderTarget::StatesCache
lastTextureId	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache
lastTextureId	.\include\SFML\Graphics\RenderTarget.hpp	/^        Uint64    lastTextureId;  \/\/\/< Cached texture$/;"	m	struct:sf::RenderTarget::StatesCache
last_addon_message	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int last_addon_message;	\/* code for last string in addon table *\/$/;"	m	struct:jpeg_error_mgr
last_char	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    last_char;$/;"	m	struct:FT_WinFNT_HeaderRec_
last_col_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int last_col_width;		\/* # of non-dummy blocks across in last MCU *\/$/;"	m	struct:__anon81
last_jpeg_message	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int last_jpeg_message;    \/* Table contains strings 0..last_jpeg_message *\/$/;"	m	struct:jpeg_error_mgr
last_row_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int last_row_height;		\/* # of non-dummy blocks down in last MCU *\/$/;"	m	struct:__anon81
lastfree	.\dep\Lua\src\lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastfree	.\include\lua\lobject.h	/^  Node *lastfree;  \/* any free position is before this position *\/$/;"	m	struct:Table
lastlevel	.\dep\Lua\src\lauxlib.c	/^static int lastlevel (lua_State *L) {$/;"	f	file:
lastline	.\dep\Lua\src\llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState
lastline	.\include\lua\llex.h	/^  int lastline;  \/* line of last token 'consumed' *\/$/;"	m	struct:LexState
lastlinedefined	.\dep\Lua\src\lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto
lastlinedefined	.\dep\Lua\src\lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlinedefined	.\include\lua\lobject.h	/^  int lastlinedefined;  \/* debug information  *\/$/;"	m	struct:Proto
lastlinedefined	.\include\lua\lua.h	/^  int lastlinedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lastlistfield	.\dep\Lua\src\lparser.c	/^static void lastlistfield (FuncState *fs, struct ConsControl *cc) {$/;"	f	file:
lastmatch	.\dep\Lua\src\lstrlib.c	/^  const char *lastmatch;  \/* end of last match *\/$/;"	m	struct:GMatchState	file:
lasttarget	.\dep\Lua\src\lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
lasttarget	.\include\lua\lparser.h	/^  int lasttarget;   \/* 'label' of last 'jump label' *\/$/;"	m	struct:FuncState
latex_documents	.\include\sol\docs\source\conf.py	/^latex_documents = [$/;"	v
latex_elements	.\include\sol\docs\source\conf.py	/^latex_elements = {$/;"	v
launch	.\dep\SFML\src\SFML\System\Thread.cpp	/^void Thread::launch()$/;"	f	class:sf::Thread
lauxlib_c	.\dep\Lua\src\lauxlib.c	7;"	d	file:
lauxlib_h	.\dep\Lua\src\lauxlib.h	9;"	d
lauxlib_h	.\include\lua\lauxlib.h	9;"	d
lazyPrint	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void lazyPrint() {$/;"	f	struct:Catch::ConsoleReporter
lazyPrintGroupInfo	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void lazyPrintGroupInfo() {$/;"	f	struct:Catch::ConsoleReporter
lazyPrintRunInfo	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void lazyPrintRunInfo() {$/;"	f	struct:Catch::ConsoleReporter
lbaselib_c	.\dep\Lua\src\lbaselib.c	7;"	d	file:
lbitlib_c	.\dep\Lua\src\lbitlib.c	7;"	d	file:
lcaseTags	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::set<std::string> lcaseTags;$/;"	m	struct:Catch::TestCaseInfo
lcode_c	.\dep\Lua\src\lcode.c	7;"	d	file:
lcode_h	.\dep\Lua\src\lcode.h	8;"	d
lcode_h	.\include\lua\lcode.h	8;"	d
lcorolib_c	.\dep\Lua\src\lcorolib.c	7;"	d	file:
lctype_c	.\dep\Lua\src\lctype.c	7;"	d	file:
lctype_h	.\dep\Lua\src\lctype.h	8;"	d
lctype_h	.\include\lua\lctype.h	8;"	d
ldblib_c	.\dep\Lua\src\ldblib.c	7;"	d	file:
ldebug_c	.\dep\Lua\src\ldebug.c	7;"	d	file:
ldebug_h	.\dep\Lua\src\ldebug.h	8;"	d
ldebug_h	.\include\lua\ldebug.h	8;"	d
ldflags	.\include\sol\bootstrap.py	/^ldflags = []$/;"	v
ldo_c	.\dep\Lua\src\ldo.c	7;"	d	file:
ldo_h	.\dep\Lua\src\ldo.h	8;"	d
ldo_h	.\include\lua\ldo.h	8;"	d
ldump_c	.\dep\Lua\src\ldump.c	7;"	d	file:
lead_in	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 lead_in;$/;"	m	struct:__anon53
leaveblock	.\dep\Lua\src\lparser.c	/^static void leaveblock (FuncState *fs) {$/;"	f	file:
leavelevel	.\dep\Lua\src\lparser.c	336;"	d	file:
left	.\dep\Lua\src\lparser.c	/^  lu_byte left;  \/* left priority for each binary operator *\/$/;"	m	struct:__anon10	file:
left	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Char   left;$/;"	m	struct:FTC_SBitRec_
left	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Int       left;$/;"	m	struct:FT_BitmapGlyphRec_
left	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect
left	.\include\SFML\Graphics\Rect.hpp	/^    T left;   \/\/\/< Left coordinate of the rectangle$/;"	m	class:sf::Rect
left	.\src\include\SkillTree.h	/^	SkillNode* left;$/;"	m	class:SkillNode
leftover_count	.\include\sol\single\sol\sol.hpp	/^		int leftover_count() const { return stacktop - (index - 1); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
leftover_count	.\include\sol\sol\variadic_args.hpp	/^		int leftover_count() const { return stacktop - (index - 1); }$/;"	f	struct:sol::variadic_args
leftovers	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        std::vector<Int16>    leftovers;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
len	.\dep\Lua\src\lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata
len	.\dep\Lua\src\lstrlib.c	/^    ptrdiff_t len;$/;"	m	struct:MatchState::__anon18	file:
len	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned short  len;$/;"	m	struct:FT_Span_
len	.\include\lua\lobject.h	/^  size_t len;  \/* number of bytes *\/$/;"	m	struct:Udata
lenIV	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int     lenIV;$/;"	m	struct:PS_PrivateRec_
len_buildchar	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt        len_buildchar;$/;"	m	struct:CID_FaceDictRec_
length	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 length;$/;"	m	struct:__anon49
length	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned length;$/;"	m	struct:__anon57
length	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Int          length;$/;"	m	struct:FT_Data_
length	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32 length;$/;"	m	struct:__anon103
length	.\include\sol\single\sol\sol.hpp	/^		length,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
length	.\include\sol\sol\types.hpp	/^		length,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
length	.\include\sol\test_usertypes.cpp	/^	float length() {$/;"	f	struct:Vec
length	.\src\src\Vector2.cpp	/^float Vector2::length() {$/;"	f	class:Vector2
less_than	.\include\sol\single\sol\sol.hpp	/^		less_than,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
less_than	.\include\sol\sol\types.hpp	/^		less_than,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
less_than_or_equal_to	.\include\sol\single\sol\sol.hpp	/^		less_than_or_equal_to,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
less_than_or_equal_to	.\include\sol\sol\types.hpp	/^		less_than_or_equal_to,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
level	.\dep\Lua\src\lstrlib.c	/^  unsigned char level;  \/* total number of captures (finished or unfinished) *\/$/;"	m	struct:MatchState	file:
levels	.\include\sol\single\sol\sol.hpp	/^			int levels;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::probe
levels	.\include\sol\sol\stack_core.hpp	/^			int levels;$/;"	m	struct:sol::stack::probe
lexerror	.\dep\Lua\src\llex.c	/^static l_noret lexerror (LexState *ls, const char *msg, int token) {$/;"	f	file:
lflags	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int lflags;$/;"	m	struct:__anon108
lfunc_c	.\dep\Lua\src\lfunc.c	7;"	d	file:
lfunc_h	.\dep\Lua\src\lfunc.h	8;"	d
lfunc_h	.\include\lua\lfunc.h	8;"	d
lgc_c	.\dep\Lua\src\lgc.c	7;"	d	file:
lgc_h	.\dep\Lua\src\lgc.h	8;"	d
lgc_h	.\include\lua\lgc.h	8;"	d
lhs	.\include\sol\Catch\include\internal\catch_result_builder.h	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
lhs	.\include\sol\Catch\single_include\catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
lib	.\include\sol\single\sol\sol.hpp	/^	enum class lib : char {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol
lib	.\include\sol\sol\state_view.hpp	/^	enum class lib : char {$/;"	c	namespace:sol
libraries	.\include\sol\bootstrap.py	/^def libraries(l):$/;"	f
library	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Library        library;$/;"	m	struct:FT_GlyphSlotRec_
library	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^  FT_Done_FreeType( FT_Library  library );$/;"	v
library	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Library             library;$/;"	m	struct:FT_GlyphRec_
library	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  FT_Add_Default_Modules( FT_Library  library );$/;"	v
library	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  FT_Done_Library( FT_Library  library );$/;"	v
library	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  FT_Get_TrueType_Engine_Type( FT_Library  library );$/;"	v
library	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^  FT_Reference_Library( FT_Library  library );$/;"	v
library_includes	.\include\sol\bootstrap.py	/^def library_includes(l):$/;"	f
libsize	.\dep\Lua\src\lauxlib.c	/^static int libsize (const luaL_Reg *l) {$/;"	f	file:
lifetime	.\src\include\Particle.h	/^		float lifetime;$/;"	m	struct:ParticleEmitter::Particle
light	.\include\sol\single\sol\sol.hpp	/^		light(L& x) : value(std::addressof(x)) {}$/;"	f	struct:sol::sol::light
light	.\include\sol\single\sol\sol.hpp	/^		light(L* x) : value(x) {}$/;"	f	struct:sol::sol::light
light	.\include\sol\single\sol\sol.hpp	/^		light(void* x) : value(static_cast<L*>(x)) {}$/;"	f	struct:sol::sol::light
light	.\include\sol\single\sol\sol.hpp	/^	struct light {$/;"	s	namespace:sol::sol
light	.\include\sol\sol\types.hpp	/^		light(L& x) : value(std::addressof(x)) {}$/;"	f	struct:sol::light
light	.\include\sol\sol\types.hpp	/^		light(L* x) : value(x) {}$/;"	f	struct:sol::light
light	.\include\sol\sol\types.hpp	/^		light(void* x) : value(static_cast<L*>(x)) {}$/;"	f	struct:sol::light
light	.\include\sol\sol\types.hpp	/^	struct light {$/;"	s	namespace:sol
lightuserdata	.\include\sol\single\sol\sol.hpp	/^		lightuserdata = LUA_TLIGHTUSERDATA,$/;"	m	class:sol::sol::call_syntax::call_status::type
lightuserdata	.\include\sol\sol\types.hpp	/^		lightuserdata = LUA_TLIGHTUSERDATA,$/;"	m	class:sol::call_syntax::call_status::type
lightuserdata_value	.\include\sol\single\sol\sol.hpp	/^		lightuserdata_value(void* data) : value(data) {}$/;"	f	struct:sol::sol::lightuserdata_value
lightuserdata_value	.\include\sol\single\sol\sol.hpp	/^	struct lightuserdata_value {$/;"	s	namespace:sol::sol
lightuserdata_value	.\include\sol\sol\types.hpp	/^		lightuserdata_value(void* data) : value(data) {}$/;"	f	struct:sol::lightuserdata_value
lightuserdata_value	.\include\sol\sol\types.hpp	/^	struct lightuserdata_value {$/;"	s	namespace:sol
lim_Se	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int lim_Se;			\/* min( Se, DCTSIZE2-1 ) *\/$/;"	m	struct:jpeg_compress_struct
lim_Se	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int lim_Se;			\/* min( Se, DCTSIZE2-1 ) for entropy decode *\/$/;"	m	struct:jpeg_decompress_struct
limit	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^    FT_UInt  limit;$/;"	m	struct:FT_Prop_IncreaseXHeight_
limit	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    unsigned char*       limit;$/;"	m	struct:FT_StreamRec_
line	.\dep\Lua\src\lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
line	.\include\lua\lparser.h	/^  int line;  \/* line where it appeared *\/$/;"	m	struct:Labeldesc
line	.\include\sol\Catch\include\internal\catch_common.h	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line	.\include\sol\Catch\single_include\catch.hpp	/^        std::size_t line;$/;"	m	struct:Catch::SourceLineInfo
line0	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon100
line1	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *line0,*line1;$/;"	m	struct:__anon100
line2	.\include\sol\Catch\scripts\releaseNotes.py	/^            line2 = line2 + match.group(1) + issue$/;"	v
line2	.\include\sol\Catch\scripts\releaseNotes.py	/^        line2 = ""$/;"	v
lineInfo	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineInfo	.\include\sol\Catch\include\internal\catch_message.h	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::MessageInfo
lineInfo	.\include\sol\Catch\include\internal\catch_section_info.h	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::SectionInfo
lineInfo	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::TagAlias
lineInfo	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::TestCaseInfo
lineInfo	.\include\sol\Catch\single_include\catch.hpp	/^        SourceLineInfo lineInfo;$/;"	m	struct:Catch::AssertionInfo
lineNumberParser	.\include\sol\Catch\scripts\approvalTests.py	/^lineNumberParser = re.compile( r'(.*)line="[0-9]*"(.*)' )$/;"	v
line_size	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int line_size;$/;"	m	struct:__anon108
line_to	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Outline_LineToFunc   line_to;$/;"	m	struct:FT_Outline_Funcs_
linearHoriAdvance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Fixed          linearHoriAdvance;$/;"	m	struct:FT_GlyphSlotRec_
linearVertAdvance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Fixed          linearVertAdvance;$/;"	m	struct:FT_GlyphSlotRec_
linebuf	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      stbi_uc *linebuf;$/;"	m	struct:__anon98::__anon99
linedefined	.\dep\Lua\src\lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto
linedefined	.\dep\Lua\src\lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
linedefined	.\include\lua\lobject.h	/^  int linedefined;  \/* debug information  *\/$/;"	m	struct:Proto
linedefined	.\include\lua\lua.h	/^  int linedefined;	\/* (S) *\/$/;"	m	struct:lua_Debug
lineinfo	.\dep\Lua\src\lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto
lineinfo	.\include\lua\lobject.h	/^  int *lineinfo;  \/* map from opcodes to source lines (debug information) *\/$/;"	m	struct:Proto
linenumber	.\dep\Lua\src\llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
linenumber	.\include\lua\llex.h	/^  int linenumber;  \/* input line counter *\/$/;"	m	struct:LexState
lines	.\include\sol\Catch\include\external\clara.h	/^        std::vector<std::string> lines;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
lines	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::vector<std::string> lines;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
lines	.\include\sol\Catch\scripts\releaseNotes.py	/^lines = runAndCapture( ['git', 'log', hashes[1] + ".." + hashes[0], catchPath] )$/;"	v
linit_c	.\dep\Lua\src\linit.c	8;"	d	file:
linkgclist	.\dep\Lua\src\lgc.c	113;"	d	file:
links	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int              links;$/;"	m	struct:OggVorbis_File
liolib_c	.\dep\Lua\src\liolib.c	7;"	d	file:
lisdigit	.\dep\Lua\src\lctype.h	59;"	d
lisdigit	.\dep\Lua\src\lctype.h	85;"	d
lisdigit	.\include\lua\lctype.h	59;"	d
lisdigit	.\include\lua\lctype.h	85;"	d
lislalnum	.\dep\Lua\src\lctype.h	58;"	d
lislalnum	.\dep\Lua\src\lctype.h	84;"	d
lislalnum	.\include\lua\lctype.h	58;"	d
lislalnum	.\include\lua\lctype.h	84;"	d
lislalpha	.\dep\Lua\src\lctype.h	57;"	d
lislalpha	.\dep\Lua\src\lctype.h	83;"	d
lislalpha	.\include\lua\lctype.h	57;"	d
lislalpha	.\include\lua\lctype.h	83;"	d
lisprint	.\dep\Lua\src\lctype.h	61;"	d
lisprint	.\dep\Lua\src\lctype.h	87;"	d
lisprint	.\include\lua\lctype.h	61;"	d
lisprint	.\include\lua\lctype.h	87;"	d
lisspace	.\dep\Lua\src\lctype.h	60;"	d
lisspace	.\dep\Lua\src\lctype.h	86;"	d
lisspace	.\include\lua\lctype.h	60;"	d
lisspace	.\include\lua\lctype.h	86;"	d
list	.\include\sol\Catch\include\internal\catch_list.hpp	/^    inline Option<std::size_t> list( Config const& config ) {$/;"	f	namespace:Catch
listReporters	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listReporters() const { return m_data.listReporters; }$/;"	f	class:Catch::Config
listReporters	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listReporters;$/;"	m	struct:Catch::ConfigData
listReporters	.\include\sol\Catch\include\internal\catch_list.hpp	/^    inline std::size_t listReporters( Config const& \/*config*\/ ) {$/;"	f	namespace:Catch
listTags	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTags() const { return m_data.listTags; }$/;"	f	class:Catch::Config
listTags	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTags;$/;"	m	struct:Catch::ConfigData
listTags	.\include\sol\Catch\include\internal\catch_list.hpp	/^    inline std::size_t listTags( Config const& config ) {$/;"	f	namespace:Catch
listTestNamesOnly	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTestNamesOnly() const { return m_data.listTestNamesOnly; }$/;"	f	class:Catch::Config
listTestNamesOnly	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTestNamesOnly;$/;"	m	struct:Catch::ConfigData
listTests	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTests() const { return m_data.listTests; }$/;"	f	class:Catch::Config
listTests	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool listTests;$/;"	m	struct:Catch::ConfigData
listTests	.\include\sol\Catch\include\internal\catch_list.hpp	/^    inline std::size_t listTests( Config const& config ) {$/;"	f	namespace:Catch
listTestsNamesOnly	.\include\sol\Catch\include\internal\catch_list.hpp	/^    inline std::size_t listTestsNamesOnly( Config const& config ) {$/;"	f	namespace:Catch
listen	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^Socket::Status TcpListener::listen(unsigned short port)$/;"	f	class:sf::TcpListener
listenerVolume	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^    float        listenerVolume = 100.f;$/;"	m	namespace:__anon118	file:
listfield	.\dep\Lua\src\lparser.c	/^static void listfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
listing	.\dep\Lua\src\luac.c	/^static int listing=0;			\/* list bytecodes? *\/$/;"	v	file:
lisxdigit	.\dep\Lua\src\lctype.h	62;"	d
lisxdigit	.\dep\Lua\src\lctype.h	88;"	d
lisxdigit	.\include\lua\lctype.h	62;"	d
lisxdigit	.\include\lua\lctype.h	88;"	d
little	.\dep\Lua\src\lstrlib.c	/^  char little;  \/* true iff machine is little endian *\/$/;"	m	union:__anon19	file:
ll_funcs	.\dep\Lua\src\loadlib.c	/^static const luaL_Reg ll_funcs[] = {$/;"	v	file:
ll_loadlib	.\dep\Lua\src\loadlib.c	/^static int ll_loadlib (lua_State *L) {$/;"	f	file:
ll_module	.\dep\Lua\src\loadlib.c	/^static int ll_module (lua_State *L) {$/;"	f	file:
ll_require	.\dep\Lua\src\loadlib.c	/^static int ll_require (lua_State *L) {$/;"	f	file:
ll_searchpath	.\dep\Lua\src\loadlib.c	/^static int ll_searchpath (lua_State *L) {$/;"	f	file:
ll_seeall	.\dep\Lua\src\loadlib.c	/^static int ll_seeall (lua_State *L) {$/;"	f	file:
llex	.\dep\Lua\src\llex.c	/^static int llex (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
llex_c	.\dep\Lua\src\llex.c	7;"	d	file:
llex_h	.\dep\Lua\src\llex.h	8;"	d
llex_h	.\include\lua\llex.h	8;"	d
llimits_h	.\dep\Lua\src\llimits.h	8;"	d
llimits_h	.\include\lua\llimits.h	8;"	d
lmathlib_c	.\dep\Lua\src\lmathlib.c	7;"	d	file:
lmem_c	.\dep\Lua\src\lmem.c	7;"	d	file:
lmem_h	.\dep\Lua\src\lmem.h	8;"	d
lmem_h	.\include\lua\lmem.h	8;"	d
lmemfind	.\dep\Lua\src\lstrlib.c	/^static const char *lmemfind (const char *s1, size_t l1,$/;"	f	file:
lmod	.\dep\Lua\src\lobject.h	514;"	d
lmod	.\include\lua\lobject.h	514;"	d
lnglen	.\dep\Lua\src\lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon7
lnglen	.\include\lua\lobject.h	/^    size_t lnglen;  \/* length for long strings *\/$/;"	m	union:TString::__anon159
load	.\include\sol\sol\state_view.hpp	/^		load_result load(const std::string& code) {$/;"	f	class:sol::state_view
loadFileStream	.\src\src\Logger.cpp	/^FILE* Logger::loadFileStream(FILE* stream, const char* filename) {$/;"	f	class:Logger
loadFromFile	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::loadFromFile(const std::string& filename)$/;"	f	class:sf::SoundBuffer
loadFromFile	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^bool Font::loadFromFile(const std::string& filename)$/;"	f	class:sf::Font
loadFromFile	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^bool Image::loadFromFile(const std::string& filename)$/;"	f	class:sf::Image
loadFromFile	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromFile(const std::string& filename, Type type)$/;"	f	class:sf::Shader
loadFromFile	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromFile(const std::string& vertexShaderFilename, const std::string& fragmentShaderFilename)$/;"	f	class:sf::Shader
loadFromFile	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::loadFromFile(const std::string& filename, const IntRect& area)$/;"	f	class:sf::Texture
loadFromImage	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::loadFromImage(const Image& image, const IntRect& area)$/;"	f	class:sf::Texture
loadFromMemory	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::loadFromMemory(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::SoundBuffer
loadFromMemory	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^bool Font::loadFromMemory(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::Font
loadFromMemory	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^bool Image::loadFromMemory(const void* data, std::size_t size)$/;"	f	class:sf::Image
loadFromMemory	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromMemory(const std::string& shader, Type type)$/;"	f	class:sf::Shader
loadFromMemory	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromMemory(const std::string& vertexShader, const std::string& fragmentShader)$/;"	f	class:sf::Shader
loadFromMemory	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::loadFromMemory(const void* data, std::size_t size, const IntRect& area)$/;"	f	class:sf::Texture
loadFromSamples	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::loadFromSamples(const Int16* samples, Uint64 sampleCount, unsigned int channelCount, unsigned int sampleRate)$/;"	f	class:sf::SoundBuffer
loadFromStream	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::loadFromStream(InputStream& stream)$/;"	f	class:sf::SoundBuffer
loadFromStream	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^bool Font::loadFromStream(InputStream& stream)$/;"	f	class:sf::Font
loadFromStream	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^bool Image::loadFromStream(InputStream& stream)$/;"	f	class:sf::Image
loadFromStream	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromStream(InputStream& stream, Type type)$/;"	f	class:sf::Shader
loadFromStream	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^bool Shader::loadFromStream(InputStream& vertexShaderStream, InputStream& fragmentShaderStream)$/;"	f	class:sf::Shader
loadFromStream	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^bool Texture::loadFromStream(InputStream& stream, const IntRect& area)$/;"	f	class:sf::Texture
loadGlyph	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Glyph Font::loadGlyph(Uint32 codePoint, unsigned int characterSize, bool bold) const$/;"	f	class:sf::Font
loadImageFromFile	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^bool ImageLoader::loadImageFromFile(const std::string& filename, std::vector<Uint8>& pixels, Vector2u& size)$/;"	f	class:sf::priv::ImageLoader
loadImageFromMemory	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^bool ImageLoader::loadImageFromMemory(const void* data, std::size_t dataSize, std::vector<Uint8>& pixels, Vector2u& size)$/;"	f	class:sf::priv::ImageLoader
loadImageFromStream	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^bool ImageLoader::loadImageFromStream(InputStream& stream, std::vector<Uint8>& pixels, Vector2u& size)$/;"	f	class:sf::priv::ImageLoader
loadLibrary	.\dep\SFML\src\SFML\Main\SFMLActivity.cpp	/^void* loadLibrary(const char* libraryName, JNIEnv* lJNIEnv, jobject& ObjectActivityInfo)$/;"	f
loadLua	.\src\src\Enemy.cpp	/^void Enemy::loadLua() {$/;"	f	class:Enemy
loadLua	.\src\src\Object.cpp	/^void Object::loadLua() {$/;"	f	class:Object
loadLua	.\src\src\Perk.cpp	/^void Perk::loadLua() {$/;"	f	class:Perk
loadLua	.\src\src\Projectile.cpp	/^void Projectile::loadLua() {$/;"	f	class:Projectile
loadLua	.\src\src\Tower.cpp	/^void Tower::loadLua() {$/;"	f	class:Tower
loadScript	.\src\src\LuaScript.cpp	/^void LuaScript::loadScript(const std::string& path) {$/;"	f	class:LuaScript
loadTestNamesFromFile	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void loadTestNamesFromFile( ConfigData& config, std::string const& _filename ) {$/;"	f	namespace:Catch
load_aux	.\dep\Lua\src\lbaselib.c	/^static int load_aux (lua_State *L, int status, int envidx) {$/;"	f	file:
load_buffer	.\include\sol\sol\state_view.hpp	/^		load_result load_buffer(const char *buff, size_t size, const char *name, const char* mode = nullptr) {$/;"	f	class:sol::state_view
load_file	.\include\sol\sol\state_view.hpp	/^		load_result load_file(const std::string& filename) {$/;"	f	class:sol::state_view
load_jpeg_image	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *load_jpeg_image(stbi__jpeg *z, int *out_x, int *out_y, int *comp, int req_comp)$/;"	f
load_result	.\include\sol\single\sol\sol.hpp	/^	struct load_result : public proxy_base<load_result> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol
load_result	.\include\sol\sol\load_result.hpp	/^	struct load_result : public proxy_base<load_result> {$/;"	s	namespace:sol
load_status	.\include\sol\single\sol\sol.hpp	/^	enum class load_status : int {$/;"	c	class:sol::sol::call_syntax::call_status
load_status	.\include\sol\sol\types.hpp	/^	enum class load_status : int {$/;"	c	class:sol::call_syntax::call_status
loadedlibs	.\dep\Lua\src\linit.c	/^static const luaL_Reg loadedlibs[] = {$/;"	v	file:
loadfunc	.\dep\Lua\src\loadlib.c	/^static int loadfunc (lua_State *L, const char *filename, const char *modname) {$/;"	f	file:
loadlib_c	.\dep\Lua\src\loadlib.c	11;"	d	file:
loadline	.\dep\Lua\src\lua.c	/^static int loadline (lua_State *L) {$/;"	f	file:
lobject_c	.\dep\Lua\src\lobject.c	7;"	d	file:
lobject_h	.\dep\Lua\src\lobject.h	9;"	d
lobject_h	.\include\lua\lobject.h	9;"	d
local_include	.\include\sol\single.py	/^local_include = re.compile(r'#include "(.*?)"')$/;"	v
localalloc	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long                localalloc;$/;"	m	struct:vorbis_block
localfunc	.\dep\Lua\src\lparser.c	/^static void localfunc (LexState *ls) {$/;"	f	file:
localstat	.\dep\Lua\src\lparser.c	/^static void localstat (LexState *ls) {$/;"	f	file:
localstore	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  void               *localstore;$/;"	m	struct:vorbis_block
localtop	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long                localtop;$/;"	m	struct:vorbis_block
lock	.\dep\SFML\src\SFML\System\Mutex.cpp	/^void Mutex::lock()$/;"	f	class:sf::Mutex
lock	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^void MutexImpl::lock()$/;"	f	class:sf::priv::MutexImpl
lock	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^void MutexImpl::lock()$/;"	f	class:sf::priv::MutexImpl
locvars	.\dep\Lua\src\lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto
locvars	.\include\lua\lobject.h	/^  LocVar *locvars;  \/* information about local variables (debug information) *\/$/;"	m	struct:Proto
log	.\src\src\Logger.cpp	/^void Logger::log(const std::string& tag, const char* funcName,$/;"	f	class:Logger
logcat	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    LogcatStream logcat;$/;"	m	struct:sf::priv::ActivityStates
login	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::login()$/;"	f	class:sf::Ftp
login	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::login(const std::string& name, const std::string& password)$/;"	f	class:sf::Ftp
longName	.\include\sol\Catch\include\external\clara.h	/^        std::string longName;$/;"	m	struct:Clara::OptionArgProperties
long_metrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    void*      long_metrics;$/;"	m	struct:TT_HoriHeader_
long_metrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    void*      long_metrics;$/;"	m	struct:TT_VertHeader_
lookahead	.\dep\Lua\src\llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookahead	.\include\lua\llex.h	/^  Token lookahead;  \/* look ahead token *\/$/;"	m	struct:LexState
lookforfunc	.\dep\Lua\src\loadlib.c	/^static int lookforfunc (lua_State *L, const char *path, const char *sym) {$/;"	f	file:
loop	.\src\src\Game.cpp	/^void Game::loop() {$/;"	f	class:Game
looper	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    ALooper*        looper;$/;"	m	struct:sf::priv::ActivityStates
looper	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^    ALooper* looper;$/;"	m	namespace:__anon137	file:
lopcodes_c	.\dep\Lua\src\lopcodes.c	7;"	d	file:
lopcodes_h	.\dep\Lua\src\lopcodes.h	8;"	d
lopcodes_h	.\include\lua\lopcodes.h	8;"	d
loslib_c	.\dep\Lua\src\loslib.c	7;"	d	file:
low_gravity	.\include\sol\examples\usertype.cpp	/^    bool low_gravity = false;$/;"	m	struct:variables	file:
lpal	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc lpal[256][4];$/;"	m	struct:__anon108
lparser_c	.\dep\Lua\src\lparser.c	7;"	d	file:
lparser_h	.\dep\Lua\src\lparser.h	8;"	d
lparser_h	.\include\lua\lparser.h	8;"	d
lpc	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__Subframe_LPC lpc;$/;"	m	union:__anon35::__anon36
lprefix_h	.\dep\Lua\src\lprefix.h	8;"	d
lprefix_h	.\include\lua\lprefix.h	8;"	d
ls	.\dep\Lua\src\lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
ls	.\include\lua\lparser.h	/^  struct LexState *ls;  \/* lexical state *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::LexState
lsb_delta	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos            lsb_delta;$/;"	m	struct:FT_GlyphSlotRec_
lsizenode	.\dep\Lua\src\lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table
lsizenode	.\include\lua\lobject.h	/^  lu_byte lsizenode;  \/* log2 of size of 'node' array *\/$/;"	m	struct:Table
lstate_c	.\dep\Lua\src\lstate.c	7;"	d	file:
lstate_h	.\dep\Lua\src\lstate.h	8;"	d
lstate_h	.\include\lua\lstate.h	8;"	d
lstop	.\dep\Lua\src\lua.c	/^static void lstop (lua_State *L, lua_Debug *ar) {$/;"	f	file:
lstring_c	.\dep\Lua\src\lstring.c	7;"	d	file:
lstring_h	.\dep\Lua\src\lstring.h	8;"	d
lstring_h	.\include\lua\lstring.h	8;"	d
lstrlib_c	.\dep\Lua\src\lstrlib.c	7;"	d	file:
lsys_load	.\dep\Lua\src\loadlib.c	/^static void *lsys_load (lua_State *L, const char *path, int seeglb) {$/;"	f	file:
lsys_sym	.\dep\Lua\src\loadlib.c	/^static lua_CFunction lsys_sym (lua_State *L, void *lib, const char *sym) {$/;"	f	file:
lsys_unloadlib	.\dep\Lua\src\loadlib.c	/^static void lsys_unloadlib (void *lib) {$/;"	f	file:
ltable_c	.\dep\Lua\src\ltable.c	7;"	d	file:
ltable_h	.\dep\Lua\src\ltable.h	8;"	d
ltable_h	.\include\lua\ltable.h	8;"	d
ltablib_c	.\dep\Lua\src\ltablib.c	7;"	d	file:
ltm_c	.\dep\Lua\src\ltm.c	7;"	d	file:
ltm_h	.\dep\Lua\src\ltm.h	8;"	d
ltm_h	.\include\lua\ltm.h	8;"	d
ltolower	.\dep\Lua\src\lctype.h	67;"	d
ltolower	.\dep\Lua\src\lctype.h	90;"	d
ltolower	.\include\lua\lctype.h	67;"	d
ltolower	.\include\lua\lctype.h	90;"	d
lu_byte	.\dep\Lua\src\llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_byte	.\include\lua\llimits.h	/^typedef unsigned char lu_byte;$/;"	t
lu_mem	.\dep\Lua\src\llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lu_mem	.\dep\Lua\src\llimits.h	/^typedef size_t lu_mem;$/;"	t
lu_mem	.\dep\Lua\src\llimits.h	/^typedef unsigned long lu_mem;$/;"	t
lu_mem	.\include\lua\llimits.h	/^typedef LUAI_UMEM lu_mem;$/;"	t
lu_mem	.\include\lua\llimits.h	/^typedef size_t lu_mem;$/;"	t
lu_mem	.\include\lua\llimits.h	/^typedef unsigned long lu_mem;$/;"	t
lua	.\src\include\LuaScript.h	/^	sol::state lua;$/;"	m	class:LuaScript
luaB_assert	.\dep\Lua\src\lbaselib.c	/^static int luaB_assert (lua_State *L) {$/;"	f	file:
luaB_auxwrap	.\dep\Lua\src\lcorolib.c	/^static int luaB_auxwrap (lua_State *L) {$/;"	f	file:
luaB_cocreate	.\dep\Lua\src\lcorolib.c	/^static int luaB_cocreate (lua_State *L) {$/;"	f	file:
luaB_collectgarbage	.\dep\Lua\src\lbaselib.c	/^static int luaB_collectgarbage (lua_State *L) {$/;"	f	file:
luaB_coresume	.\dep\Lua\src\lcorolib.c	/^static int luaB_coresume (lua_State *L) {$/;"	f	file:
luaB_corunning	.\dep\Lua\src\lcorolib.c	/^static int luaB_corunning (lua_State *L) {$/;"	f	file:
luaB_costatus	.\dep\Lua\src\lcorolib.c	/^static int luaB_costatus (lua_State *L) {$/;"	f	file:
luaB_cowrap	.\dep\Lua\src\lcorolib.c	/^static int luaB_cowrap (lua_State *L) {$/;"	f	file:
luaB_dofile	.\dep\Lua\src\lbaselib.c	/^static int luaB_dofile (lua_State *L) {$/;"	f	file:
luaB_error	.\dep\Lua\src\lbaselib.c	/^static int luaB_error (lua_State *L) {$/;"	f	file:
luaB_getmetatable	.\dep\Lua\src\lbaselib.c	/^static int luaB_getmetatable (lua_State *L) {$/;"	f	file:
luaB_ipairs	.\dep\Lua\src\lbaselib.c	/^static int luaB_ipairs (lua_State *L) {$/;"	f	file:
luaB_load	.\dep\Lua\src\lbaselib.c	/^static int luaB_load (lua_State *L) {$/;"	f	file:
luaB_loadfile	.\dep\Lua\src\lbaselib.c	/^static int luaB_loadfile (lua_State *L) {$/;"	f	file:
luaB_next	.\dep\Lua\src\lbaselib.c	/^static int luaB_next (lua_State *L) {$/;"	f	file:
luaB_pairs	.\dep\Lua\src\lbaselib.c	/^static int luaB_pairs (lua_State *L) {$/;"	f	file:
luaB_pcall	.\dep\Lua\src\lbaselib.c	/^static int luaB_pcall (lua_State *L) {$/;"	f	file:
luaB_print	.\dep\Lua\src\lbaselib.c	/^static int luaB_print (lua_State *L) {$/;"	f	file:
luaB_rawequal	.\dep\Lua\src\lbaselib.c	/^static int luaB_rawequal (lua_State *L) {$/;"	f	file:
luaB_rawget	.\dep\Lua\src\lbaselib.c	/^static int luaB_rawget (lua_State *L) {$/;"	f	file:
luaB_rawlen	.\dep\Lua\src\lbaselib.c	/^static int luaB_rawlen (lua_State *L) {$/;"	f	file:
luaB_rawset	.\dep\Lua\src\lbaselib.c	/^static int luaB_rawset (lua_State *L) {$/;"	f	file:
luaB_select	.\dep\Lua\src\lbaselib.c	/^static int luaB_select (lua_State *L) {$/;"	f	file:
luaB_setmetatable	.\dep\Lua\src\lbaselib.c	/^static int luaB_setmetatable (lua_State *L) {$/;"	f	file:
luaB_tonumber	.\dep\Lua\src\lbaselib.c	/^static int luaB_tonumber (lua_State *L) {$/;"	f	file:
luaB_tostring	.\dep\Lua\src\lbaselib.c	/^static int luaB_tostring (lua_State *L) {$/;"	f	file:
luaB_type	.\dep\Lua\src\lbaselib.c	/^static int luaB_type (lua_State *L) {$/;"	f	file:
luaB_xpcall	.\dep\Lua\src\lbaselib.c	/^static int luaB_xpcall (lua_State *L) {$/;"	f	file:
luaB_yield	.\dep\Lua\src\lcorolib.c	/^static int luaB_yield (lua_State *L) {$/;"	f	file:
luaB_yieldable	.\dep\Lua\src\lcorolib.c	/^static int luaB_yieldable (lua_State *L) {$/;"	f	file:
luaC_barrier	.\dep\Lua\src\lgc.h	118;"	d
luaC_barrier	.\include\lua\lgc.h	118;"	d
luaC_barrier_	.\dep\Lua\src\lgc.c	/^void luaC_barrier_ (lua_State *L, GCObject *o, GCObject *v) {$/;"	f
luaC_barrierback	.\dep\Lua\src\lgc.h	122;"	d
luaC_barrierback	.\include\lua\lgc.h	122;"	d
luaC_barrierback_	.\dep\Lua\src\lgc.c	/^void luaC_barrierback_ (lua_State *L, Table *t) {$/;"	f
luaC_checkGC	.\dep\Lua\src\lgc.h	115;"	d
luaC_checkGC	.\include\lua\lgc.h	115;"	d
luaC_checkfinalizer	.\dep\Lua\src\lgc.c	/^void luaC_checkfinalizer (lua_State *L, GCObject *o, Table *mt) {$/;"	f
luaC_condGC	.\dep\Lua\src\lgc.h	110;"	d
luaC_condGC	.\include\lua\lgc.h	110;"	d
luaC_fix	.\dep\Lua\src\lgc.c	/^void luaC_fix (lua_State *L, GCObject *o) {$/;"	f
luaC_freeallobjects	.\dep\Lua\src\lgc.c	/^void luaC_freeallobjects (lua_State *L) {$/;"	f
luaC_fullgc	.\dep\Lua\src\lgc.c	/^void luaC_fullgc (lua_State *L, int isemergency) {$/;"	f
luaC_newobj	.\dep\Lua\src\lgc.c	/^GCObject *luaC_newobj (lua_State *L, int tt, size_t sz) {$/;"	f
luaC_objbarrier	.\dep\Lua\src\lgc.h	126;"	d
luaC_objbarrier	.\include\lua\lgc.h	126;"	d
luaC_runtilstate	.\dep\Lua\src\lgc.c	/^void luaC_runtilstate (lua_State *L, int statesmask) {$/;"	f
luaC_step	.\dep\Lua\src\lgc.c	/^void luaC_step (lua_State *L) {$/;"	f
luaC_upvalbarrier	.\dep\Lua\src\lgc.h	130;"	d
luaC_upvalbarrier	.\include\lua\lgc.h	130;"	d
luaC_upvalbarrier_	.\dep\Lua\src\lgc.c	/^void luaC_upvalbarrier_ (lua_State *L, UpVal *uv) {$/;"	f
luaC_upvdeccount	.\dep\Lua\src\lgc.c	/^void luaC_upvdeccount (lua_State *L, UpVal *uv) {$/;"	f
luaC_white	.\dep\Lua\src\lgc.h	101;"	d
luaC_white	.\include\lua\lgc.h	101;"	d
luaD_call	.\dep\Lua\src\ldo.c	/^void luaD_call (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_callnoyield	.\dep\Lua\src\ldo.c	/^void luaD_callnoyield (lua_State *L, StkId func, int nResults) {$/;"	f
luaD_checkstack	.\dep\Lua\src\ldo.h	28;"	d
luaD_checkstack	.\include\lua\ldo.h	28;"	d
luaD_checkstackaux	.\dep\Lua\src\ldo.h	23;"	d
luaD_checkstackaux	.\include\lua\ldo.h	23;"	d
luaD_growstack	.\dep\Lua\src\ldo.c	/^void luaD_growstack (lua_State *L, int n) {$/;"	f
luaD_hook	.\dep\Lua\src\ldo.c	/^void luaD_hook (lua_State *L, int event, int line) {$/;"	f
luaD_inctop	.\dep\Lua\src\ldo.c	/^void luaD_inctop (lua_State *L) {$/;"	f
luaD_pcall	.\dep\Lua\src\ldo.c	/^int luaD_pcall (lua_State *L, Pfunc func, void *u,$/;"	f
luaD_poscall	.\dep\Lua\src\ldo.c	/^int luaD_poscall (lua_State *L, CallInfo *ci, StkId firstResult, int nres) {$/;"	f
luaD_precall	.\dep\Lua\src\ldo.c	/^int luaD_precall (lua_State *L, StkId func, int nresults) {$/;"	f
luaD_protectedparser	.\dep\Lua\src\ldo.c	/^int luaD_protectedparser (lua_State *L, ZIO *z, const char *name,$/;"	f
luaD_rawrunprotected	.\dep\Lua\src\ldo.c	/^int luaD_rawrunprotected (lua_State *L, Pfunc f, void *ud) {$/;"	f
luaD_reallocstack	.\dep\Lua\src\ldo.c	/^void luaD_reallocstack (lua_State *L, int newsize) {$/;"	f
luaD_shrinkstack	.\dep\Lua\src\ldo.c	/^void luaD_shrinkstack (lua_State *L) {$/;"	f
luaD_throw	.\dep\Lua\src\ldo.c	/^l_noret luaD_throw (lua_State *L, int errcode) {$/;"	f
luaE_extendCI	.\dep\Lua\src\lstate.c	/^CallInfo *luaE_extendCI (lua_State *L) {$/;"	f
luaE_freeCI	.\dep\Lua\src\lstate.c	/^void luaE_freeCI (lua_State *L) {$/;"	f
luaE_freethread	.\dep\Lua\src\lstate.c	/^void luaE_freethread (lua_State *L, lua_State *L1) {$/;"	f
luaE_setdebt	.\dep\Lua\src\lstate.c	/^void luaE_setdebt (global_State *g, l_mem debt) {$/;"	f
luaE_shrinkCI	.\dep\Lua\src\lstate.c	/^void luaE_shrinkCI (lua_State *L) {$/;"	f
luaF_close	.\dep\Lua\src\lfunc.c	/^void luaF_close (lua_State *L, StkId level) {$/;"	f
luaF_findupval	.\dep\Lua\src\lfunc.c	/^UpVal *luaF_findupval (lua_State *L, StkId level) {$/;"	f
luaF_freeproto	.\dep\Lua\src\lfunc.c	/^void luaF_freeproto (lua_State *L, Proto *f) {$/;"	f
luaF_getlocalname	.\dep\Lua\src\lfunc.c	/^const char *luaF_getlocalname (const Proto *f, int local_number, int pc) {$/;"	f
luaF_initupvals	.\dep\Lua\src\lfunc.c	/^void luaF_initupvals (lua_State *L, LClosure *cl) {$/;"	f
luaF_newCclosure	.\dep\Lua\src\lfunc.c	/^CClosure *luaF_newCclosure (lua_State *L, int n) {$/;"	f
luaF_newLclosure	.\dep\Lua\src\lfunc.c	/^LClosure *luaF_newLclosure (lua_State *L, int n) {$/;"	f
luaF_newproto	.\dep\Lua\src\lfunc.c	/^Proto *luaF_newproto (lua_State *L) {$/;"	f
luaG_addinfo	.\dep\Lua\src\ldebug.c	/^const char *luaG_addinfo (lua_State *L, const char *msg, TString *src,$/;"	f
luaG_concaterror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_concaterror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_errormsg	.\dep\Lua\src\ldebug.c	/^l_noret luaG_errormsg (lua_State *L) {$/;"	f
luaG_opinterror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_opinterror (lua_State *L, const TValue *p1,$/;"	f
luaG_ordererror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_ordererror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_runerror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_runerror (lua_State *L, const char *fmt, ...) {$/;"	f
luaG_tointerror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_tointerror (lua_State *L, const TValue *p1, const TValue *p2) {$/;"	f
luaG_traceexec	.\dep\Lua\src\ldebug.c	/^void luaG_traceexec (lua_State *L) {$/;"	f
luaG_typeerror	.\dep\Lua\src\ldebug.c	/^l_noret luaG_typeerror (lua_State *L, const TValue *o, const char *op) {$/;"	f
luaH_free	.\dep\Lua\src\ltable.c	/^void luaH_free (lua_State *L, Table *t) {$/;"	f
luaH_get	.\dep\Lua\src\ltable.c	/^const TValue *luaH_get (Table *t, const TValue *key) {$/;"	f
luaH_getint	.\dep\Lua\src\ltable.c	/^const TValue *luaH_getint (Table *t, lua_Integer key) {$/;"	f
luaH_getn	.\dep\Lua\src\ltable.c	/^int luaH_getn (Table *t) {$/;"	f
luaH_getshortstr	.\dep\Lua\src\ltable.c	/^const TValue *luaH_getshortstr (Table *t, TString *key) {$/;"	f
luaH_getstr	.\dep\Lua\src\ltable.c	/^const TValue *luaH_getstr (Table *t, TString *key) {$/;"	f
luaH_isdummy	.\dep\Lua\src\ltable.c	/^int luaH_isdummy (Node *n) { return isdummy(n); }$/;"	f
luaH_mainposition	.\dep\Lua\src\ltable.c	/^Node *luaH_mainposition (const Table *t, const TValue *key) {$/;"	f
luaH_new	.\dep\Lua\src\ltable.c	/^Table *luaH_new (lua_State *L) {$/;"	f
luaH_newkey	.\dep\Lua\src\ltable.c	/^TValue *luaH_newkey (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_next	.\dep\Lua\src\ltable.c	/^int luaH_next (lua_State *L, Table *t, StkId key) {$/;"	f
luaH_resize	.\dep\Lua\src\ltable.c	/^void luaH_resize (lua_State *L, Table *t, unsigned int nasize,$/;"	f
luaH_resizearray	.\dep\Lua\src\ltable.c	/^void luaH_resizearray (lua_State *L, Table *t, unsigned int nasize) {$/;"	f
luaH_set	.\dep\Lua\src\ltable.c	/^TValue *luaH_set (lua_State *L, Table *t, const TValue *key) {$/;"	f
luaH_setint	.\dep\Lua\src\ltable.c	/^void luaH_setint (lua_State *L, Table *t, lua_Integer key, TValue *value) {$/;"	f
luaK_checkstack	.\dep\Lua\src\lcode.c	/^void luaK_checkstack (FuncState *fs, int n) {$/;"	f
luaK_code	.\dep\Lua\src\lcode.c	/^static int luaK_code (FuncState *fs, Instruction i) {$/;"	f	file:
luaK_codeABC	.\dep\Lua\src\lcode.c	/^int luaK_codeABC (FuncState *fs, OpCode o, int a, int b, int c) {$/;"	f
luaK_codeABx	.\dep\Lua\src\lcode.c	/^int luaK_codeABx (FuncState *fs, OpCode o, int a, unsigned int bc) {$/;"	f
luaK_codeAsBx	.\dep\Lua\src\lcode.h	46;"	d
luaK_codeAsBx	.\include\lua\lcode.h	46;"	d
luaK_codek	.\dep\Lua\src\lcode.c	/^int luaK_codek (FuncState *fs, int reg, int k) {$/;"	f
luaK_concat	.\dep\Lua\src\lcode.c	/^void luaK_concat (FuncState *fs, int *l1, int l2) {$/;"	f
luaK_dischargevars	.\dep\Lua\src\lcode.c	/^void luaK_dischargevars (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2RK	.\dep\Lua\src\lcode.c	/^int luaK_exp2RK (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyreg	.\dep\Lua\src\lcode.c	/^int luaK_exp2anyreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2anyregup	.\dep\Lua\src\lcode.c	/^void luaK_exp2anyregup (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2nextreg	.\dep\Lua\src\lcode.c	/^void luaK_exp2nextreg (FuncState *fs, expdesc *e) {$/;"	f
luaK_exp2val	.\dep\Lua\src\lcode.c	/^void luaK_exp2val (FuncState *fs, expdesc *e) {$/;"	f
luaK_fixline	.\dep\Lua\src\lcode.c	/^void luaK_fixline (FuncState *fs, int line) {$/;"	f
luaK_getlabel	.\dep\Lua\src\lcode.c	/^int luaK_getlabel (FuncState *fs) {$/;"	f
luaK_goiffalse	.\dep\Lua\src\lcode.c	/^void luaK_goiffalse (FuncState *fs, expdesc *e) {$/;"	f
luaK_goiftrue	.\dep\Lua\src\lcode.c	/^void luaK_goiftrue (FuncState *fs, expdesc *e) {$/;"	f
luaK_indexed	.\dep\Lua\src\lcode.c	/^void luaK_indexed (FuncState *fs, expdesc *t, expdesc *k) {$/;"	f
luaK_infix	.\dep\Lua\src\lcode.c	/^void luaK_infix (FuncState *fs, BinOpr op, expdesc *v) {$/;"	f
luaK_intK	.\dep\Lua\src\lcode.c	/^int luaK_intK (FuncState *fs, lua_Integer n) {$/;"	f
luaK_jump	.\dep\Lua\src\lcode.c	/^int luaK_jump (FuncState *fs) {$/;"	f
luaK_jumpto	.\dep\Lua\src\lcode.h	50;"	d
luaK_jumpto	.\include\lua\lcode.h	50;"	d
luaK_nil	.\dep\Lua\src\lcode.c	/^void luaK_nil (FuncState *fs, int from, int n) {$/;"	f
luaK_numberK	.\dep\Lua\src\lcode.c	/^static int luaK_numberK (FuncState *fs, lua_Number r) {$/;"	f	file:
luaK_patchclose	.\dep\Lua\src\lcode.c	/^void luaK_patchclose (FuncState *fs, int list, int level) {$/;"	f
luaK_patchlist	.\dep\Lua\src\lcode.c	/^void luaK_patchlist (FuncState *fs, int list, int target) {$/;"	f
luaK_patchtohere	.\dep\Lua\src\lcode.c	/^void luaK_patchtohere (FuncState *fs, int list) {$/;"	f
luaK_posfix	.\dep\Lua\src\lcode.c	/^void luaK_posfix (FuncState *fs, BinOpr op,$/;"	f
luaK_prefix	.\dep\Lua\src\lcode.c	/^void luaK_prefix (FuncState *fs, UnOpr op, expdesc *e, int line) {$/;"	f
luaK_reserveregs	.\dep\Lua\src\lcode.c	/^void luaK_reserveregs (FuncState *fs, int n) {$/;"	f
luaK_ret	.\dep\Lua\src\lcode.c	/^void luaK_ret (FuncState *fs, int first, int nret) {$/;"	f
luaK_self	.\dep\Lua\src\lcode.c	/^void luaK_self (FuncState *fs, expdesc *e, expdesc *key) {$/;"	f
luaK_setlist	.\dep\Lua\src\lcode.c	/^void luaK_setlist (FuncState *fs, int base, int nelems, int tostore) {$/;"	f
luaK_setmultret	.\dep\Lua\src\lcode.h	48;"	d
luaK_setmultret	.\include\lua\lcode.h	48;"	d
luaK_setoneret	.\dep\Lua\src\lcode.c	/^void luaK_setoneret (FuncState *fs, expdesc *e) {$/;"	f
luaK_setreturns	.\dep\Lua\src\lcode.c	/^void luaK_setreturns (FuncState *fs, expdesc *e, int nresults) {$/;"	f
luaK_storevar	.\dep\Lua\src\lcode.c	/^void luaK_storevar (FuncState *fs, expdesc *var, expdesc *ex) {$/;"	f
luaK_stringK	.\dep\Lua\src\lcode.c	/^int luaK_stringK (FuncState *fs, TString *s) {$/;"	f
luaL_Buffer	.\dep\Lua\src\lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	.\dep\Lua\src\lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Buffer	.\include\lua\lauxlib.h	/^typedef struct luaL_Buffer {$/;"	s
luaL_Buffer	.\include\lua\lauxlib.h	/^} luaL_Buffer;$/;"	t	typeref:struct:luaL_Buffer
luaL_Buffer	.\include\sol\single\sol\sol.hpp	1900;"	d
luaL_Buffer	.\include\sol\sol\compatibility\5.1.0.h	81;"	d
luaL_Buffer_52	.\include\sol\single\sol\sol.hpp	/^typedef struct luaL_Buffer_52 {$/;"	s
luaL_Buffer_52	.\include\sol\single\sol\sol.hpp	/^} luaL_Buffer_52;$/;"	t	typeref:struct:sol::luaL_Buffer_52
luaL_Buffer_52	.\include\sol\sol\compatibility\5.1.0.h	/^typedef struct luaL_Buffer_52 {$/;"	s
luaL_Buffer_52	.\include\sol\sol\compatibility\5.1.0.h	/^} luaL_Buffer_52;$/;"	t	typeref:struct:luaL_Buffer_52
luaL_Reg	.\dep\Lua\src\lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	.\dep\Lua\src\lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Reg	.\include\lua\lauxlib.h	/^typedef struct luaL_Reg {$/;"	s
luaL_Reg	.\include\lua\lauxlib.h	/^} luaL_Reg;$/;"	t	typeref:struct:luaL_Reg
luaL_Reg	.\include\sol\single\sol\sol.hpp	2002;"	d
luaL_Reg	.\include\sol\sol\compatibility\5.0.0.h	33;"	d
luaL_Stream	.\dep\Lua\src\lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	.\dep\Lua\src\lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_Stream	.\include\lua\lauxlib.h	/^typedef struct luaL_Stream {$/;"	s
luaL_Stream	.\include\lua\lauxlib.h	/^} luaL_Stream;$/;"	t	typeref:struct:luaL_Stream
luaL_addchar	.\dep\Lua\src\lauxlib.h	149;"	d
luaL_addchar	.\include\lua\lauxlib.h	149;"	d
luaL_addchar	.\include\sol\single\sol\sol.hpp	1949;"	d
luaL_addchar	.\include\sol\single\sol\sol.hpp	1950;"	d
luaL_addchar	.\include\sol\single\sol\sol.hpp	2007;"	d
luaL_addchar	.\include\sol\sol\compatibility\5.0.0.h	38;"	d
luaL_addchar	.\include\sol\sol\compatibility\5.1.0.h	130;"	d
luaL_addchar	.\include\sol\sol\compatibility\5.1.0.h	131;"	d
luaL_addlstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_addlstring (luaL_Buffer *B, const char *s, size_t l) {$/;"	f
luaL_addlstring	.\include\sol\single\sol\sol.hpp	/^inline void luaL_addlstring(luaL_Buffer_52 *B, const char *s, size_t l) {$/;"	f
luaL_addlstring	.\include\sol\single\sol\sol.hpp	1932;"	d
luaL_addlstring	.\include\sol\sol\compatibility\5.1.0.h	113;"	d
luaL_addsize	.\dep\Lua\src\lauxlib.h	153;"	d
luaL_addsize	.\include\lua\lauxlib.h	153;"	d
luaL_addsize	.\include\sol\single\sol\sol.hpp	1954;"	d
luaL_addsize	.\include\sol\single\sol\sol.hpp	1955;"	d
luaL_addsize	.\include\sol\sol\compatibility\5.1.0.h	135;"	d
luaL_addsize	.\include\sol\sol\compatibility\5.1.0.h	136;"	d
luaL_addstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_addstring (luaL_Buffer *B, const char *s) {$/;"	f
luaL_addstring	.\include\sol\single\sol\sol.hpp	1958;"	d
luaL_addstring	.\include\sol\single\sol\sol.hpp	1959;"	d
luaL_addstring	.\include\sol\sol\compatibility\5.1.0.h	139;"	d
luaL_addstring	.\include\sol\sol\compatibility\5.1.0.h	140;"	d
luaL_addvalue	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_addvalue (luaL_Buffer *B) {$/;"	f
luaL_addvalue	.\include\sol\single\sol\sol.hpp	/^inline void luaL_addvalue(luaL_Buffer_52 *B) {$/;"	f
luaL_addvalue	.\include\sol\single\sol\sol.hpp	1935;"	d
luaL_addvalue	.\include\sol\sol\compatibility\5.1.0.h	116;"	d
luaL_argcheck	.\dep\Lua\src\lauxlib.h	114;"	d
luaL_argcheck	.\include\lua\lauxlib.h	114;"	d
luaL_argerror	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_argerror (lua_State *L, int arg, const char *extramsg) {$/;"	f
luaL_buffinit	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_buffinit (lua_State *L, luaL_Buffer *B) {$/;"	f
luaL_buffinit	.\include\sol\single\sol\sol.hpp	/^inline void luaL_buffinit(lua_State *L, luaL_Buffer_52 *B) {$/;"	f
luaL_buffinit	.\include\sol\single\sol\sol.hpp	1926;"	d
luaL_buffinit	.\include\sol\sol\compatibility\5.1.0.h	107;"	d
luaL_buffinitsize	.\dep\Lua\src\lauxlib.c	/^LUALIB_API char *luaL_buffinitsize (lua_State *L, luaL_Buffer *B, size_t sz) {$/;"	f
luaL_buffinitsize	.\include\sol\single\sol\sol.hpp	1941;"	d
luaL_buffinitsize	.\include\sol\single\sol\sol.hpp	1942;"	d
luaL_buffinitsize	.\include\sol\sol\compatibility\5.1.0.h	122;"	d
luaL_buffinitsize	.\include\sol\sol\compatibility\5.1.0.h	123;"	d
luaL_callmeta	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_callmeta (lua_State *L, int obj, const char *event) {$/;"	f
luaL_checkany	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_checkany (lua_State *L, int arg) {$/;"	f
luaL_checkint	.\dep\Lua\src\lauxlib.h	243;"	d
luaL_checkint	.\include\lua\lauxlib.h	243;"	d
luaL_checkinteger	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_Integer luaL_checkinteger (lua_State *L, int arg) {$/;"	f
luaL_checklong	.\dep\Lua\src\lauxlib.h	246;"	d
luaL_checklong	.\include\lua\lauxlib.h	246;"	d
luaL_checklstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API const char *luaL_checklstring (lua_State *L, int arg, size_t *len) {$/;"	f
luaL_checknumber	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_Number luaL_checknumber (lua_State *L, int arg) {$/;"	f
luaL_checkoption	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_checkoption (lua_State *L, int arg, const char *def,$/;"	f
luaL_checkstack	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_checkstack (lua_State *L, int space, const char *msg) {$/;"	f
luaL_checkstring	.\dep\Lua\src\lauxlib.h	116;"	d
luaL_checkstring	.\include\lua\lauxlib.h	116;"	d
luaL_checktype	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_checktype (lua_State *L, int arg, int t) {$/;"	f
luaL_checkudata	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void *luaL_checkudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_checkunsigned	.\dep\Lua\src\lauxlib.h	239;"	d
luaL_checkunsigned	.\include\lua\lauxlib.h	239;"	d
luaL_checkunsigned	.\include\sol\single\sol\sol.hpp	/^inline lua_Unsigned luaL_checkunsigned(lua_State *L, int i) {$/;"	f
luaL_checkversion	.\dep\Lua\src\lauxlib.h	32;"	d
luaL_checkversion	.\include\lua\lauxlib.h	32;"	d
luaL_checkversion	.\include\sol\single\sol\sol.hpp	/^inline void luaL_checkversion(lua_State* L) {$/;"	f
luaL_checkversion_	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_checkversion_ (lua_State *L, lua_Number ver, size_t sz) {$/;"	f
luaL_checkversion_	.\include\sol\single\sol\sol.hpp	/^inline static void luaL_checkversion_(lua_State *L, lua_Number ver) {$/;"	f
luaL_dofile	.\dep\Lua\src\lauxlib.h	121;"	d
luaL_dofile	.\include\lua\lauxlib.h	121;"	d
luaL_dostring	.\dep\Lua\src\lauxlib.h	124;"	d
luaL_dostring	.\include\lua\lauxlib.h	124;"	d
luaL_error	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_error (lua_State *L, const char *fmt, ...) {$/;"	f
luaL_execresult	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_execresult (lua_State *L, int stat) {$/;"	f
luaL_fileresult	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_fileresult (lua_State *L, int stat, const char *fname) {$/;"	f
luaL_fileresult	.\include\sol\single\sol\sol.hpp	/^inline int luaL_fileresult(lua_State *L, int stat, const char *fname) {$/;"	f
luaL_findtable	.\dep\Lua\src\lauxlib.c	/^static const char *luaL_findtable (lua_State *L, int idx,$/;"	f	file:
luaL_getmetafield	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_getmetafield (lua_State *L, int obj, const char *event) {$/;"	f
luaL_getmetatable	.\dep\Lua\src\lauxlib.h	127;"	d
luaL_getmetatable	.\include\lua\lauxlib.h	127;"	d
luaL_getsubtable	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_getsubtable (lua_State *L, int idx, const char *fname) {$/;"	f
luaL_getsubtable	.\include\sol\single\sol\sol.hpp	/^inline int luaL_getsubtable(lua_State *L, int i, const char *name) {$/;"	f
luaL_gsub	.\dep\Lua\src\lauxlib.c	/^LUALIB_API const char *luaL_gsub (lua_State *L, const char *s, const char *p,$/;"	f
luaL_len	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_Integer luaL_len (lua_State *L, int idx) {$/;"	f
luaL_len	.\include\sol\single\sol\sol.hpp	/^inline int luaL_len(lua_State *L, int i) {$/;"	f
luaL_loadbuffer	.\dep\Lua\src\lauxlib.h	131;"	d
luaL_loadbuffer	.\include\lua\lauxlib.h	131;"	d
luaL_loadbufferx	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_loadbufferx (lua_State *L, const char *buff, size_t size,$/;"	f
luaL_loadbufferx	.\include\sol\single\sol\sol.hpp	/^inline int luaL_loadbufferx(lua_State* L, const char* buff, size_t size, const char* name, const char*) {$/;"	f
luaL_loadbufferx	.\include\sol\sol\compatibility\5.1.0.h	/^inline int luaL_loadbufferx(lua_State* L, const char* buff, size_t size, const char* name, const char*) {$/;"	f
luaL_loadfile	.\dep\Lua\src\lauxlib.h	78;"	d
luaL_loadfile	.\include\lua\lauxlib.h	78;"	d
luaL_loadfilex	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_loadfilex (lua_State *L, const char *filename,$/;"	f
luaL_loadstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_loadstring (lua_State *L, const char *s) {$/;"	f
luaL_newlib	.\dep\Lua\src\lauxlib.h	111;"	d
luaL_newlib	.\include\lua\lauxlib.h	111;"	d
luaL_newlib	.\include\sol\single\sol\sol.hpp	2030;"	d
luaL_newlib	.\include\sol\sol\compatibility\5.x.x.h	36;"	d
luaL_newlibtable	.\dep\Lua\src\lauxlib.h	108;"	d
luaL_newlibtable	.\include\lua\lauxlib.h	108;"	d
luaL_newmetatable	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_newmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_newstate	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_State *luaL_newstate (void) {$/;"	f
luaL_openlib	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_openlib (lua_State *L, const char *libname,$/;"	f
luaL_openlibs	.\dep\Lua\src\linit.c	/^LUALIB_API void luaL_openlibs (lua_State *L) {$/;"	f
luaL_opt	.\dep\Lua\src\lauxlib.h	129;"	d
luaL_opt	.\include\lua\lauxlib.h	129;"	d
luaL_opt	.\include\sol\single\sol\sol.hpp	2004;"	d
luaL_opt	.\include\sol\sol\compatibility\5.0.0.h	35;"	d
luaL_optint	.\dep\Lua\src\lauxlib.h	244;"	d
luaL_optint	.\include\lua\lauxlib.h	244;"	d
luaL_optinteger	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_Integer luaL_optinteger (lua_State *L, int arg,$/;"	f
luaL_optlong	.\dep\Lua\src\lauxlib.h	247;"	d
luaL_optlong	.\include\lua\lauxlib.h	247;"	d
luaL_optlstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API const char *luaL_optlstring (lua_State *L, int arg,$/;"	f
luaL_optnumber	.\dep\Lua\src\lauxlib.c	/^LUALIB_API lua_Number luaL_optnumber (lua_State *L, int arg, lua_Number def) {$/;"	f
luaL_optstring	.\dep\Lua\src\lauxlib.h	117;"	d
luaL_optstring	.\include\lua\lauxlib.h	117;"	d
luaL_optunsigned	.\dep\Lua\src\lauxlib.h	240;"	d
luaL_optunsigned	.\include\lua\lauxlib.h	240;"	d
luaL_optunsigned	.\include\sol\single\sol\sol.hpp	/^inline lua_Unsigned luaL_optunsigned(lua_State *L, int i, lua_Unsigned def) {$/;"	f
luaL_prepbuffer	.\dep\Lua\src\lauxlib.h	164;"	d
luaL_prepbuffer	.\include\lua\lauxlib.h	164;"	d
luaL_prepbuffer	.\include\sol\single\sol\sol.hpp	1945;"	d
luaL_prepbuffer	.\include\sol\single\sol\sol.hpp	1946;"	d
luaL_prepbuffer	.\include\sol\sol\compatibility\5.1.0.h	126;"	d
luaL_prepbuffer	.\include\sol\sol\compatibility\5.1.0.h	127;"	d
luaL_prepbuffsize	.\dep\Lua\src\lauxlib.c	/^LUALIB_API char *luaL_prepbuffsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_prepbuffsize	.\include\sol\single\sol\sol.hpp	/^inline char *luaL_prepbuffsize(luaL_Buffer_52 *B, size_t s) {$/;"	f
luaL_prepbuffsize	.\include\sol\single\sol\sol.hpp	1929;"	d
luaL_prepbuffsize	.\include\sol\sol\compatibility\5.1.0.h	110;"	d
luaL_pushmodule	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_pushmodule (lua_State *L, const char *modname,$/;"	f
luaL_pushresult	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_pushresult (luaL_Buffer *B) {$/;"	f
luaL_pushresult	.\include\sol\single\sol\sol.hpp	/^inline void luaL_pushresult(luaL_Buffer_52 *B) {$/;"	f
luaL_pushresult	.\include\sol\single\sol\sol.hpp	1938;"	d
luaL_pushresult	.\include\sol\sol\compatibility\5.1.0.h	119;"	d
luaL_pushresultsize	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_pushresultsize (luaL_Buffer *B, size_t sz) {$/;"	f
luaL_pushresultsize	.\include\sol\single\sol\sol.hpp	1962;"	d
luaL_pushresultsize	.\include\sol\single\sol\sol.hpp	1963;"	d
luaL_pushresultsize	.\include\sol\sol\compatibility\5.1.0.h	143;"	d
luaL_pushresultsize	.\include\sol\sol\compatibility\5.1.0.h	144;"	d
luaL_ref	.\dep\Lua\src\lauxlib.c	/^LUALIB_API int luaL_ref (lua_State *L, int t) {$/;"	f
luaL_register	.\dep\Lua\src\lauxlib.h	202;"	d
luaL_register	.\include\lua\lauxlib.h	202;"	d
luaL_requiref	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_requiref (lua_State *L, const char *modname,$/;"	f
luaL_requiref	.\include\sol\single\sol\sol.hpp	/^inline void luaL_requiref(lua_State *L, char const* modname,$/;"	f
luaL_setfuncs	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_setfuncs (lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setfuncs	.\include\sol\single\sol\sol.hpp	/^inline void luaL_setfuncs(lua_State *L, const luaL_Reg *l, int nup) {$/;"	f
luaL_setmetatable	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_setmetatable (lua_State *L, const char *tname) {$/;"	f
luaL_setmetatable	.\include\sol\single\sol\sol.hpp	/^inline void luaL_setmetatable(lua_State *L, const char *tname) {$/;"	f
luaL_testudata	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void *luaL_testudata (lua_State *L, int ud, const char *tname) {$/;"	f
luaL_testudata	.\include\sol\single\sol\sol.hpp	/^inline void *luaL_testudata(lua_State *L, int i, const char *tname) {$/;"	f
luaL_tolstring	.\dep\Lua\src\lauxlib.c	/^LUALIB_API const char *luaL_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
luaL_tolstring	.\include\sol\single\sol\sol.hpp	/^inline const char *luaL_tolstring(lua_State *L, int idx, size_t *len) {$/;"	f
luaL_traceback	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_traceback (lua_State *L, lua_State *L1,$/;"	f
luaL_traceback	.\include\sol\single\sol\sol.hpp	/^inline void luaL_traceback(lua_State *L, lua_State *L1,$/;"	f
luaL_typename	.\dep\Lua\src\lauxlib.h	119;"	d
luaL_typename	.\include\lua\lauxlib.h	119;"	d
luaL_unref	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_unref (lua_State *L, int t, int ref) {$/;"	f
luaL_where	.\dep\Lua\src\lauxlib.c	/^LUALIB_API void luaL_where (lua_State *L, int level) {$/;"	f
luaM_free	.\dep\Lua\src\lmem.h	42;"	d
luaM_free	.\include\lua\lmem.h	42;"	d
luaM_freearray	.\dep\Lua\src\lmem.h	43;"	d
luaM_freearray	.\include\lua\lmem.h	43;"	d
luaM_freemem	.\dep\Lua\src\lmem.h	41;"	d
luaM_freemem	.\include\lua\lmem.h	41;"	d
luaM_growaux_	.\dep\Lua\src\lmem.c	/^void *luaM_growaux_ (lua_State *L, void *block, int *size, size_t size_elems,$/;"	f
luaM_growvector	.\dep\Lua\src\lmem.h	52;"	d
luaM_growvector	.\include\lua\lmem.h	52;"	d
luaM_malloc	.\dep\Lua\src\lmem.h	45;"	d
luaM_malloc	.\include\lua\lmem.h	45;"	d
luaM_new	.\dep\Lua\src\lmem.h	46;"	d
luaM_new	.\include\lua\lmem.h	46;"	d
luaM_newobject	.\dep\Lua\src\lmem.h	50;"	d
luaM_newobject	.\include\lua\lmem.h	50;"	d
luaM_newvector	.\dep\Lua\src\lmem.h	47;"	d
luaM_newvector	.\include\lua\lmem.h	47;"	d
luaM_realloc_	.\dep\Lua\src\lmem.c	/^void *luaM_realloc_ (lua_State *L, void *block, size_t osize, size_t nsize) {$/;"	f
luaM_reallocv	.\dep\Lua\src\lmem.h	30;"	d
luaM_reallocv	.\include\lua\lmem.h	30;"	d
luaM_reallocvchar	.\dep\Lua\src\lmem.h	38;"	d
luaM_reallocvchar	.\include\lua\lmem.h	38;"	d
luaM_reallocvector	.\dep\Lua\src\lmem.h	56;"	d
luaM_reallocvector	.\include\lua\lmem.h	56;"	d
luaM_toobig	.\dep\Lua\src\lmem.c	/^l_noret luaM_toobig (lua_State *L) {$/;"	f
luaO_arith	.\dep\Lua\src\lobject.c	/^void luaO_arith (lua_State *L, int op, const TValue *p1, const TValue *p2,$/;"	f
luaO_ceillog2	.\dep\Lua\src\lobject.c	/^int luaO_ceillog2 (unsigned int x) {$/;"	f
luaO_chunkid	.\dep\Lua\src\lobject.c	/^void luaO_chunkid (char *out, const char *source, size_t bufflen) {$/;"	f
luaO_fb2int	.\dep\Lua\src\lobject.c	/^int luaO_fb2int (int x) {$/;"	f
luaO_hexavalue	.\dep\Lua\src\lobject.c	/^int luaO_hexavalue (int c) {$/;"	f
luaO_int2fb	.\dep\Lua\src\lobject.c	/^int luaO_int2fb (unsigned int x) {$/;"	f
luaO_nilobject	.\dep\Lua\src\lobject.h	525;"	d
luaO_nilobject	.\include\lua\lobject.h	525;"	d
luaO_nilobject_	.\dep\Lua\src\lobject.c	/^LUAI_DDEF const TValue luaO_nilobject_ = {NILCONSTANT};$/;"	v
luaO_nilobject_	.\dep\Lua\src\lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_nilobject_	.\include\lua\lobject.h	/^LUAI_DDEC const TValue luaO_nilobject_;$/;"	v
luaO_pushfstring	.\dep\Lua\src\lobject.c	/^const char *luaO_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
luaO_pushvfstring	.\dep\Lua\src\lobject.c	/^const char *luaO_pushvfstring (lua_State *L, const char *fmt, va_list argp) {$/;"	f
luaO_str2num	.\dep\Lua\src\lobject.c	/^size_t luaO_str2num (const char *s, TValue *o) {$/;"	f
luaO_tostring	.\dep\Lua\src\lobject.c	/^void luaO_tostring (lua_State *L, StkId obj) {$/;"	f
luaO_utf8esc	.\dep\Lua\src\lobject.c	/^int luaO_utf8esc (char *buff, unsigned long x) {$/;"	f
luaP_opmodes	.\dep\Lua\src\lopcodes.c	/^LUAI_DDEF const lu_byte luaP_opmodes[NUM_OPCODES] = {$/;"	v
luaP_opmodes	.\dep\Lua\src\lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opmodes	.\include\lua\lopcodes.h	/^LUAI_DDEC const lu_byte luaP_opmodes[NUM_OPCODES];$/;"	v
luaP_opnames	.\dep\Lua\src\lopcodes.c	/^LUAI_DDEF const char *const luaP_opnames[NUM_OPCODES+1] = {$/;"	v
luaP_opnames	.\dep\Lua\src\lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaP_opnames	.\include\lua\lopcodes.h	/^LUAI_DDEC const char *const luaP_opnames[NUM_OPCODES+1];  \/* opcode names *\/$/;"	v
luaS_clearcache	.\dep\Lua\src\lstring.c	/^void luaS_clearcache (global_State *g) {$/;"	f
luaS_createlngstrobj	.\dep\Lua\src\lstring.c	/^TString *luaS_createlngstrobj (lua_State *L, size_t l) {$/;"	f
luaS_eqlngstr	.\dep\Lua\src\lstring.c	/^int luaS_eqlngstr (TString *a, TString *b) {$/;"	f
luaS_hash	.\dep\Lua\src\lstring.c	/^unsigned int luaS_hash (const char *str, size_t l, unsigned int seed) {$/;"	f
luaS_hashlongstr	.\dep\Lua\src\lstring.c	/^unsigned int luaS_hashlongstr (TString *ts) {$/;"	f
luaS_init	.\dep\Lua\src\lstring.c	/^void luaS_init (lua_State *L) {$/;"	f
luaS_new	.\dep\Lua\src\lstring.c	/^TString *luaS_new (lua_State *L, const char *str) {$/;"	f
luaS_newliteral	.\dep\Lua\src\lstring.h	20;"	d
luaS_newliteral	.\include\lua\lstring.h	20;"	d
luaS_newlstr	.\dep\Lua\src\lstring.c	/^TString *luaS_newlstr (lua_State *L, const char *str, size_t l) {$/;"	f
luaS_newudata	.\dep\Lua\src\lstring.c	/^Udata *luaS_newudata (lua_State *L, size_t s) {$/;"	f
luaS_remove	.\dep\Lua\src\lstring.c	/^void luaS_remove (lua_State *L, TString *ts) {$/;"	f
luaS_resize	.\dep\Lua\src\lstring.c	/^void luaS_resize (lua_State *L, int newsize) {$/;"	f
luaT_callTM	.\dep\Lua\src\ltm.c	/^void luaT_callTM (lua_State *L, const TValue *f, const TValue *p1,$/;"	f
luaT_callbinTM	.\dep\Lua\src\ltm.c	/^int luaT_callbinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_callorderTM	.\dep\Lua\src\ltm.c	/^int luaT_callorderTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_gettm	.\dep\Lua\src\ltm.c	/^const TValue *luaT_gettm (Table *events, TMS event, TString *ename) {$/;"	f
luaT_gettmbyobj	.\dep\Lua\src\ltm.c	/^const TValue *luaT_gettmbyobj (lua_State *L, const TValue *o, TMS event) {$/;"	f
luaT_init	.\dep\Lua\src\ltm.c	/^void luaT_init (lua_State *L) {$/;"	f
luaT_objtypename	.\dep\Lua\src\ltm.c	/^const char *luaT_objtypename (lua_State *L, const TValue *o) {$/;"	f
luaT_trybinTM	.\dep\Lua\src\ltm.c	/^void luaT_trybinTM (lua_State *L, const TValue *p1, const TValue *p2,$/;"	f
luaT_typenames_	.\dep\Lua\src\ltm.c	/^LUAI_DDEF const char *const luaT_typenames_[LUA_TOTALTAGS] = {$/;"	v
luaT_typenames_	.\dep\Lua\src\ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaT_typenames_	.\include\lua\ltm.h	/^LUAI_DDEC const char *const luaT_typenames_[LUA_TOTALTAGS];$/;"	v
luaU_dump	.\dep\Lua\src\ldump.c	/^int luaU_dump(lua_State *L, const Proto *f, lua_Writer w, void *data,$/;"	f
luaU_print	.\dep\Lua\src\luac.c	26;"	d	file:
luaU_undump	.\dep\Lua\src\lundump.c	/^LClosure *luaU_undump(lua_State *L, ZIO *Z, const char *name) {$/;"	f
luaV_concat	.\dep\Lua\src\lvm.c	/^void luaV_concat (lua_State *L, int total) {$/;"	f
luaV_div	.\dep\Lua\src\lvm.c	/^lua_Integer luaV_div (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_equalobj	.\dep\Lua\src\lvm.c	/^int luaV_equalobj (lua_State *L, const TValue *t1, const TValue *t2) {$/;"	f
luaV_execute	.\dep\Lua\src\lvm.c	/^void luaV_execute (lua_State *L) {$/;"	f
luaV_fastget	.\dep\Lua\src\lvm.h	58;"	d
luaV_fastget	.\include\lua\lvm.h	58;"	d
luaV_fastset	.\dep\Lua\src\lvm.h	80;"	d
luaV_fastset	.\include\lua\lvm.h	80;"	d
luaV_finishOp	.\dep\Lua\src\lvm.c	/^void luaV_finishOp (lua_State *L) {$/;"	f
luaV_finishget	.\dep\Lua\src\lvm.c	/^void luaV_finishget (lua_State *L, const TValue *t, TValue *key, StkId val,$/;"	f
luaV_finishset	.\dep\Lua\src\lvm.c	/^void luaV_finishset (lua_State *L, const TValue *t, TValue *key,$/;"	f
luaV_gettable	.\dep\Lua\src\lvm.h	67;"	d
luaV_gettable	.\include\lua\lvm.h	67;"	d
luaV_lessequal	.\dep\Lua\src\lvm.c	/^int luaV_lessequal (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_lessthan	.\dep\Lua\src\lvm.c	/^int luaV_lessthan (lua_State *L, const TValue *l, const TValue *r) {$/;"	f
luaV_mod	.\dep\Lua\src\lvm.c	/^lua_Integer luaV_mod (lua_State *L, lua_Integer m, lua_Integer n) {$/;"	f
luaV_objlen	.\dep\Lua\src\lvm.c	/^void luaV_objlen (lua_State *L, StkId ra, const TValue *rb) {$/;"	f
luaV_rawequalobj	.\dep\Lua\src\lvm.h	48;"	d
luaV_rawequalobj	.\include\lua\lvm.h	48;"	d
luaV_settable	.\dep\Lua\src\lvm.h	90;"	d
luaV_settable	.\include\lua\lvm.h	90;"	d
luaV_shiftl	.\dep\Lua\src\lvm.c	/^lua_Integer luaV_shiftl (lua_Integer x, lua_Integer y) {$/;"	f
luaV_tointeger	.\dep\Lua\src\lvm.c	/^int luaV_tointeger (const TValue *obj, lua_Integer *p, int mode) {$/;"	f
luaV_tonumber_	.\dep\Lua\src\lvm.c	/^int luaV_tonumber_ (const TValue *obj, lua_Number *n) {$/;"	f
luaX_init	.\dep\Lua\src\llex.c	/^void luaX_init (lua_State *L) {$/;"	f
luaX_lookahead	.\dep\Lua\src\llex.c	/^int luaX_lookahead (LexState *ls) {$/;"	f
luaX_newstring	.\dep\Lua\src\llex.c	/^TString *luaX_newstring (LexState *ls, const char *str, size_t l) {$/;"	f
luaX_next	.\dep\Lua\src\llex.c	/^void luaX_next (LexState *ls) {$/;"	f
luaX_setinput	.\dep\Lua\src\llex.c	/^void luaX_setinput (lua_State *L, LexState *ls, ZIO *z, TString *source,$/;"	f
luaX_syntaxerror	.\dep\Lua\src\llex.c	/^l_noret luaX_syntaxerror (LexState *ls, const char *msg) {$/;"	f
luaX_token2str	.\dep\Lua\src\llex.c	/^const char *luaX_token2str (LexState *ls, int token) {$/;"	f
luaX_tokens	.\dep\Lua\src\llex.c	/^static const char *const luaX_tokens [] = {$/;"	v	file:
luaY_parser	.\dep\Lua\src\lparser.c	/^LClosure *luaY_parser (lua_State *L, ZIO *z, Mbuffer *buff,$/;"	f
luaZ_buffer	.\dep\Lua\src\lzio.h	31;"	d
luaZ_buffer	.\include\lua\lzio.h	31;"	d
luaZ_bufflen	.\dep\Lua\src\lzio.h	33;"	d
luaZ_bufflen	.\include\lua\lzio.h	33;"	d
luaZ_buffremove	.\dep\Lua\src\lzio.h	35;"	d
luaZ_buffremove	.\include\lua\lzio.h	35;"	d
luaZ_fill	.\dep\Lua\src\lzio.c	/^int luaZ_fill (ZIO *z) {$/;"	f
luaZ_freebuffer	.\dep\Lua\src\lzio.h	44;"	d
luaZ_freebuffer	.\include\lua\lzio.h	44;"	d
luaZ_init	.\dep\Lua\src\lzio.c	/^void luaZ_init (lua_State *L, ZIO *z, lua_Reader reader, void *data) {$/;"	f
luaZ_initbuffer	.\dep\Lua\src\lzio.h	29;"	d
luaZ_initbuffer	.\include\lua\lzio.h	29;"	d
luaZ_read	.\dep\Lua\src\lzio.c	/^size_t luaZ_read (ZIO *z, void *b, size_t n) {$/;"	f
luaZ_resetbuffer	.\dep\Lua\src\lzio.h	36;"	d
luaZ_resetbuffer	.\include\lua\lzio.h	36;"	d
luaZ_resizebuffer	.\dep\Lua\src\lzio.h	39;"	d
luaZ_resizebuffer	.\include\lua\lzio.h	39;"	d
luaZ_sizebuffer	.\dep\Lua\src\lzio.h	32;"	d
luaZ_sizebuffer	.\include\lua\lzio.h	32;"	d
lua_Alloc	.\dep\Lua\src\lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_Alloc	.\include\lua\lua.h	/^typedef void * (*lua_Alloc) (void *ud, void *ptr, size_t osize, size_t nsize);$/;"	t
lua_CFunction	.\dep\Lua\src\lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_CFunction	.\include\lua\lua.h	/^typedef int (*lua_CFunction) (lua_State *L);$/;"	t
lua_Debug	.\dep\Lua\src\lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	.\dep\Lua\src\lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Debug	.\include\lua\lua.h	/^struct lua_Debug {$/;"	s
lua_Debug	.\include\lua\lua.h	/^typedef struct lua_Debug lua_Debug;  \/* activation record *\/$/;"	t	typeref:struct:lua_Debug
lua_Hook	.\dep\Lua\src\lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Hook	.\include\lua\lua.h	/^typedef void (*lua_Hook) (lua_State *L, lua_Debug *ar);$/;"	t
lua_Integer	.\dep\Lua\src\lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_Integer	.\include\lua\lua.h	/^typedef LUA_INTEGER lua_Integer;$/;"	t
lua_KContext	.\dep\Lua\src\lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KContext	.\include\lua\lua.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KContext	.\include\sol\single\sol\sol.hpp	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KContext	.\include\sol\sol\compatibility\5.1.0.h	/^typedef LUA_KCONTEXT lua_KContext;$/;"	t
lua_KFunction	.\dep\Lua\src\lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_KFunction	.\include\lua\lua.h	/^typedef int (*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_KFunction	.\include\sol\single\sol\sol.hpp	/^typedef int(*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_KFunction	.\include\sol\sol\compatibility\5.1.0.h	/^typedef int(*lua_KFunction) (lua_State *L, int status, lua_KContext ctx);$/;"	t
lua_Number	.\dep\Lua\src\lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Number	.\include\lua\lua.h	/^typedef LUA_NUMBER lua_Number;$/;"	t
lua_Reader	.\dep\Lua\src\lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_Reader	.\include\lua\lua.h	/^typedef const char * (*lua_Reader) (lua_State *L, void *ud, size_t *sz);$/;"	t
lua_State	.\dep\Lua\src\lstate.h	/^struct lua_State {$/;"	s
lua_State	.\dep\Lua\src\lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_State	.\include\lua\lstate.h	/^struct lua_State {$/;"	s
lua_State	.\include\lua\lua.h	/^typedef struct lua_State lua_State;$/;"	t	typeref:struct:lua_State
lua_TValue	.\dep\Lua\src\lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_TValue	.\include\lua\lobject.h	/^typedef struct lua_TValue {$/;"	s
lua_Unsigned	.\dep\Lua\src\lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Unsigned	.\include\lua\lua.h	/^typedef LUA_UNSIGNED lua_Unsigned;$/;"	t
lua_Unsigned	.\include\sol\single\sol\sol.hpp	/^typedef LUAI_UINT32 lua_Unsigned;$/;"	t
lua_Unsigned	.\include\sol\sol\compatibility\5.1.0.h	/^typedef LUAI_UINT32 lua_Unsigned;$/;"	t
lua_Writer	.\dep\Lua\src\lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t
lua_Writer	.\include\lua\lua.h	/^typedef int (*lua_Writer) (lua_State *L, const void *p, size_t sz, void *ud);$/;"	t
lua_absindex	.\dep\Lua\src\lapi.c	/^LUA_API int lua_absindex (lua_State *L, int idx) {$/;"	f
lua_absindex	.\include\sol\single\sol\sol.hpp	/^		stack_reference(lua_State* L, int i) noexcept : L(L), index(lua_absindex(L, i)) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::stack_reference
lua_absindex	.\include\sol\single\sol\sol.hpp	/^inline int lua_absindex(lua_State *L, int i) {$/;"	f
lua_absindex	.\include\sol\sol\stack_reference.hpp	/^		stack_reference(lua_State* L, int i) noexcept : L(L), index(lua_absindex(L, i)) {}$/;"	f	class:sol::stack_reference
lua_arith	.\dep\Lua\src\lapi.c	/^LUA_API void lua_arith (lua_State *L, int op) {$/;"	f
lua_arith	.\include\sol\single\sol\sol.hpp	/^inline void lua_arith(lua_State *L, int op) {$/;"	f
lua_assert	.\dep\Lua\src\llimits.h	89;"	d
lua_assert	.\dep\Lua\src\lualib.h	54;"	d
lua_assert	.\include\lua\llimits.h	89;"	d
lua_assert	.\include\lua\lualib.h	54;"	d
lua_atpanic	.\dep\Lua\src\lapi.c	/^LUA_API lua_CFunction lua_atpanic (lua_State *L, lua_CFunction panicf) {$/;"	f
lua_bind_traits	.\include\sol\single\sol\sol.hpp	/^	struct lua_bind_traits : meta::bind_traits<Signature> {$/;"	s	class:sol::sol::call_syntax::call_status::type
lua_bind_traits	.\include\sol\sol\types.hpp	/^	struct lua_bind_traits : meta::bind_traits<Signature> {$/;"	s	class:sol::call_syntax::call_status::type
lua_c	.\dep\Lua\src\lua.c	7;"	d	file:
lua_call	.\dep\Lua\src\lua.h	274;"	d
lua_call	.\include\lua\lua.h	274;"	d
lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct lua_call_wrapper : agnostic_lua_call_wrapper<F, is_index, is_variable, checked, boost> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
lua_call_wrapper	.\include\sol\single\sol\sol.hpp	/^		struct lua_call_wrapper<T, F, is_index, is_variable, checked, boost, std::enable_if_t<std::is_member_function_pointer<F>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper : agnostic_lua_call_wrapper<F, is_index, is_variable, checked, boost> {};$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, F, false, is_variable, checked, boost, std::enable_if_t<std::is_member_object_pointer<F>::value>> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, F, is_index, is_variable, checked, boost, std::enable_if_t<std::is_member_function_pointer<F>::value>> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, F, true, is_variable, checked, boost, std::enable_if_t<std::is_member_object_pointer<F>::value>> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, overload_set<Fs...>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, protect_t<V>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, sol::constructor_list<Args...>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, sol::constructor_wrapper<Cxs...>, is_index, is_variable, checked, boost, C> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, sol::destructor_wrapper<Fx>, is_index, is_variable, checked, boost, std::enable_if_t<!std::is_void<Fx>::value>> {$/;"	s	namespace:sol::call_detail
lua_call_wrapper	.\include\sol\sol\call.hpp	/^		struct lua_call_wrapper<T, sol::destructor_wrapper<Fx>, is_index, is_variable, checked, boost, std::enable_if_t<std::is_void<Fx>::value>> {$/;"	s	namespace:sol::call_detail
lua_callk	.\dep\Lua\src\lapi.c	/^LUA_API void lua_callk (lua_State *L, int nargs, int nresults,$/;"	f
lua_callk	.\include\sol\single\sol\sol.hpp	/^inline void lua_callk(lua_State *L, int nargs, int nresults, lua_KContext, lua_KFunction) {$/;"	f
lua_callk	.\include\sol\sol\compatibility\5.1.0.h	/^inline void lua_callk(lua_State *L, int nargs, int nresults, lua_KContext, lua_KFunction) {$/;"	f
lua_checkstack	.\dep\Lua\src\lapi.c	/^LUA_API int lua_checkstack (lua_State *L, int n) {$/;"	f
lua_close	.\dep\Lua\src\lstate.c	/^LUA_API void lua_close (lua_State *L) {$/;"	f
lua_compare	.\dep\Lua\src\lapi.c	/^LUA_API int lua_compare (lua_State *L, int index1, int index2, int op) {$/;"	f
lua_compare	.\include\sol\single\sol\sol.hpp	/^inline int lua_compare(lua_State *L, int idx1, int idx2, int op) {$/;"	f
lua_concat	.\dep\Lua\src\lapi.c	/^LUA_API void lua_concat (lua_State *L, int n) {$/;"	f
lua_copy	.\dep\Lua\src\lapi.c	/^LUA_API void lua_copy (lua_State *L, int fromidx, int toidx) {$/;"	f
lua_copy	.\include\sol\single\sol\sol.hpp	/^inline void lua_copy(lua_State *L, int from, int to) {$/;"	f
lua_cpcall	.\dep\Lua\src\luaconf.h	341;"	d
lua_cpcall	.\include\lua\luaconf.h	341;"	d
lua_createtable	.\dep\Lua\src\lapi.c	/^LUA_API void lua_createtable (lua_State *L, int narray, int nrec) {$/;"	f
lua_dump	.\dep\Lua\src\lapi.c	/^LUA_API int lua_dump (lua_State *L, lua_Writer writer, void *data, int strip) {$/;"	f
lua_equal	.\dep\Lua\src\luaconf.h	373;"	d
lua_equal	.\include\lua\luaconf.h	373;"	d
lua_error	.\dep\Lua\src\lapi.c	/^LUA_API int lua_error (lua_State *L) {$/;"	f
lua_freeline	.\dep\Lua\src\lua.c	84;"	d	file:
lua_freeline	.\dep\Lua\src\lua.c	92;"	d	file:
lua_gc	.\dep\Lua\src\lapi.c	/^LUA_API int lua_gc (lua_State *L, int what, int data) {$/;"	f
lua_getallocf	.\dep\Lua\src\lapi.c	/^LUA_API lua_Alloc lua_getallocf (lua_State *L, void **ud) {$/;"	f
lua_getextraspace	.\dep\Lua\src\lua.h	339;"	d
lua_getextraspace	.\include\lua\lua.h	339;"	d
lua_getfield	.\dep\Lua\src\lapi.c	/^LUA_API int lua_getfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_getglobal	.\dep\Lua\src\lapi.c	/^LUA_API int lua_getglobal (lua_State *L, const char *name) {$/;"	f
lua_gethook	.\dep\Lua\src\ldebug.c	/^LUA_API lua_Hook lua_gethook (lua_State *L) {$/;"	f
lua_gethookcount	.\dep\Lua\src\ldebug.c	/^LUA_API int lua_gethookcount (lua_State *L) {$/;"	f
lua_gethookmask	.\dep\Lua\src\ldebug.c	/^LUA_API int lua_gethookmask (lua_State *L) {$/;"	f
lua_geti	.\dep\Lua\src\lapi.c	/^LUA_API int lua_geti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_getinfo	.\dep\Lua\src\ldebug.c	/^LUA_API int lua_getinfo (lua_State *L, const char *what, lua_Debug *ar) {$/;"	f
lua_getlocal	.\dep\Lua\src\ldebug.c	/^LUA_API const char *lua_getlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_getlocaledecpoint	.\dep\Lua\src\luaconf.h	657;"	d
lua_getlocaledecpoint	.\include\lua\luaconf.h	657;"	d
lua_getmetatable	.\dep\Lua\src\lapi.c	/^LUA_API int lua_getmetatable (lua_State *L, int objindex) {$/;"	f
lua_getstack	.\dep\Lua\src\ldebug.c	/^LUA_API int lua_getstack (lua_State *L, int level, lua_Debug *ar) {$/;"	f
lua_gettable	.\dep\Lua\src\lapi.c	/^LUA_API int lua_gettable (lua_State *L, int idx) {$/;"	f
lua_gettop	.\dep\Lua\src\lapi.c	/^LUA_API int lua_gettop (lua_State *L) {$/;"	f
lua_getupvalue	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_getupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_getuservalue	.\dep\Lua\src\lapi.c	/^LUA_API int lua_getuservalue (lua_State *L, int idx) {$/;"	f
lua_getuservalue	.\include\sol\single\sol\sol.hpp	/^inline void lua_getuservalue(lua_State *L, int i) {$/;"	f
lua_h	.\dep\Lua\src\lua.h	10;"	d
lua_h	.\include\lua\lua.h	10;"	d
lua_ident	.\dep\Lua\src\lapi.c	/^const char lua_ident[] =$/;"	v
lua_incl	.\include\sol\bootstrap.py	/^        lua_incl = 'luajit-2.0' # I don't get this..$/;"	v
lua_incl	.\include\sol\bootstrap.py	/^        lua_incl = 'luajit-2.0'$/;"	v
lua_incl	.\include\sol\bootstrap.py	/^        lua_incl = lua_lib$/;"	v
lua_incl	.\include\sol\bootstrap.py	/^        lua_incl = lua_version[:-1] + '.' + lua_version[-1]$/;"	v
lua_insert	.\dep\Lua\src\lua.h	369;"	d
lua_insert	.\include\lua\lua.h	369;"	d
lua_integer2str	.\dep\Lua\src\luaconf.h	514;"	d
lua_integer2str	.\include\lua\luaconf.h	514;"	d
lua_isboolean	.\dep\Lua\src\lua.h	356;"	d
lua_isboolean	.\include\lua\lua.h	356;"	d
lua_iscfunction	.\dep\Lua\src\lapi.c	/^LUA_API int lua_iscfunction (lua_State *L, int idx) {$/;"	f
lua_isfunction	.\dep\Lua\src\lua.h	352;"	d
lua_isfunction	.\include\lua\lua.h	352;"	d
lua_isinteger	.\dep\Lua\src\lapi.c	/^LUA_API int lua_isinteger (lua_State *L, int idx) {$/;"	f
lua_islightuserdata	.\dep\Lua\src\lua.h	354;"	d
lua_islightuserdata	.\include\lua\lua.h	354;"	d
lua_isnil	.\dep\Lua\src\lua.h	355;"	d
lua_isnil	.\include\lua\lua.h	355;"	d
lua_isnone	.\dep\Lua\src\lua.h	358;"	d
lua_isnone	.\include\lua\lua.h	358;"	d
lua_isnoneornil	.\dep\Lua\src\lua.h	359;"	d
lua_isnoneornil	.\include\lua\lua.h	359;"	d
lua_isnumber	.\dep\Lua\src\lapi.c	/^LUA_API int lua_isnumber (lua_State *L, int idx) {$/;"	f
lua_isstring	.\dep\Lua\src\lapi.c	/^LUA_API int lua_isstring (lua_State *L, int idx) {$/;"	f
lua_istable	.\dep\Lua\src\lua.h	353;"	d
lua_istable	.\include\lua\lua.h	353;"	d
lua_isthread	.\dep\Lua\src\lua.h	357;"	d
lua_isthread	.\include\lua\lua.h	357;"	d
lua_isuserdata	.\dep\Lua\src\lapi.c	/^LUA_API int lua_isuserdata (lua_State *L, int idx) {$/;"	f
lua_isyieldable	.\dep\Lua\src\ldo.c	/^LUA_API int lua_isyieldable (lua_State *L) {$/;"	f
lua_len	.\dep\Lua\src\lapi.c	/^LUA_API void lua_len (lua_State *L, int idx) {$/;"	f
lua_len	.\include\sol\single\sol\sol.hpp	/^inline void lua_len(lua_State *L, int i) {$/;"	f
lua_lessthan	.\dep\Lua\src\luaconf.h	374;"	d
lua_lessthan	.\include\lua\luaconf.h	374;"	d
lua_lib	.\include\sol\bootstrap.py	/^        lua_lib = lua_version[:-1] + '.' + lua_version[-1]$/;"	v
lua_lib	.\include\sol\bootstrap.py	/^        lua_lib = lua_version[:-2] + '-' + lua_version[-2] + '.' + lua_version[-1]$/;"	v
lua_lib	.\include\sol\bootstrap.py	/^        lua_lib = lua_version[:-2] + '.' +  lua_version[-2] + '.' + lua_version[-1]$/;"	v
lua_load	.\dep\Lua\src\lapi.c	/^LUA_API int lua_load (lua_State *L, lua_Reader reader, void *data,$/;"	f
lua_lock	.\dep\Lua\src\llimits.h	214;"	d
lua_lock	.\include\lua\llimits.h	214;"	d
lua_longassert	.\dep\Lua\src\llimits.h	87;"	d
lua_longassert	.\dep\Lua\src\llimits.h	91;"	d
lua_longassert	.\include\lua\llimits.h	87;"	d
lua_longassert	.\include\lua\llimits.h	91;"	d
lua_longjmp	.\dep\Lua\src\ldo.c	/^struct lua_longjmp {$/;"	s	file:
lua_newstate	.\dep\Lua\src\lstate.c	/^LUA_API lua_State *lua_newstate (lua_Alloc f, void *ud) {$/;"	f
lua_newtable	.\dep\Lua\src\lua.h	346;"	d
lua_newtable	.\include\lua\lua.h	346;"	d
lua_newthread	.\dep\Lua\src\lstate.c	/^LUA_API lua_State *lua_newthread (lua_State *L) {$/;"	f
lua_newuserdata	.\dep\Lua\src\lapi.c	/^LUA_API void *lua_newuserdata (lua_State *L, size_t size) {$/;"	f
lua_next	.\dep\Lua\src\lapi.c	/^LUA_API int lua_next (lua_State *L, int idx) {$/;"	f
lua_number2int32	.\include\sol\single\sol\sol.hpp	2459;"	d
lua_number2str	.\dep\Lua\src\luaconf.h	424;"	d
lua_number2str	.\include\lua\luaconf.h	424;"	d
lua_number2strx	.\dep\Lua\src\lstrlib.c	/^static int lua_number2strx (lua_State *L, char *buff, int sz,$/;"	f	file:
lua_number2strx	.\dep\Lua\src\luaconf.h	615;"	d
lua_number2strx	.\include\lua\luaconf.h	615;"	d
lua_number2unsigned	.\include\sol\single\sol\sol.hpp	2441;"	d
lua_number2unsigned	.\include\sol\single\sol\sol.hpp	2464;"	d
lua_number2unsigned	.\include\sol\single\sol\sol.hpp	2475;"	d
lua_number2unsigned	.\include\sol\single\sol\sol.hpp	2478;"	d
lua_numbertointeger	.\dep\Lua\src\luaconf.h	434;"	d
lua_numbertointeger	.\include\lua\luaconf.h	434;"	d
lua_objlen	.\dep\Lua\src\luaconf.h	371;"	d
lua_objlen	.\include\lua\luaconf.h	371;"	d
lua_pcall	.\dep\Lua\src\lua.h	278;"	d
lua_pcall	.\include\lua\lua.h	278;"	d
lua_pcallk	.\dep\Lua\src\lapi.c	/^LUA_API int lua_pcallk (lua_State *L, int nargs, int nresults, int errfunc,$/;"	f
lua_pcallk	.\include\sol\single\sol\sol.hpp	/^inline int lua_pcallk(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext, lua_KFunction) {$/;"	f
lua_pcallk	.\include\sol\sol\compatibility\5.1.0.h	/^inline int lua_pcallk(lua_State *L, int nargs, int nresults, int errfunc, lua_KContext, lua_KFunction) {$/;"	f
lua_pop	.\dep\Lua\src\lua.h	344;"	d
lua_pop	.\include\lua\lua.h	344;"	d
lua_pushboolean	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushboolean (lua_State *L, int b) {$/;"	f
lua_pushcclosure	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushcclosure (lua_State *L, lua_CFunction fn, int n) {$/;"	f
lua_pushcfunction	.\dep\Lua\src\lua.h	350;"	d
lua_pushcfunction	.\include\lua\lua.h	350;"	d
lua_pushfstring	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_pushfstring (lua_State *L, const char *fmt, ...) {$/;"	f
lua_pushglobaltable	.\dep\Lua\src\lua.h	363;"	d
lua_pushglobaltable	.\include\lua\lua.h	363;"	d
lua_pushglobaltable	.\include\sol\single\sol\sol.hpp	2027;"	d
lua_pushglobaltable	.\include\sol\sol\compatibility\5.x.x.h	33;"	d
lua_pushinteger	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushinteger (lua_State *L, lua_Integer n) {$/;"	f
lua_pushlightuserdata	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushlightuserdata (lua_State *L, void *p) {$/;"	f
lua_pushliteral	.\dep\Lua\src\lua.h	361;"	d
lua_pushliteral	.\include\lua\lua.h	361;"	d
lua_pushlstring	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_pushlstring (lua_State *L, const char *s, size_t len) {$/;"	f
lua_pushnil	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushnil (lua_State *L) {$/;"	f
lua_pushnumber	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushnumber (lua_State *L, lua_Number n) {$/;"	f
lua_pushstring	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_pushstring (lua_State *L, const char *s) {$/;"	f
lua_pushthread	.\dep\Lua\src\lapi.c	/^LUA_API int lua_pushthread (lua_State *L) {$/;"	f
lua_pushunsigned	.\dep\Lua\src\lua.h	385;"	d
lua_pushunsigned	.\include\lua\lua.h	385;"	d
lua_pushunsigned	.\include\sol\single\sol\sol.hpp	/^inline void lua_pushunsigned(lua_State *L, lua_Unsigned n) {$/;"	f
lua_pushvalue	.\dep\Lua\src\lapi.c	/^LUA_API void lua_pushvalue (lua_State *L, int idx) {$/;"	f
lua_pushvfstring	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_pushvfstring (lua_State *L, const char *fmt,$/;"	f
lua_r_CFunction	.\include\sol\single\sol\sol.hpp	/^	typedef std::remove_pointer_t<lua_CFunction> lua_r_CFunction;$/;"	t	namespace:sol::sol
lua_r_CFunction	.\include\sol\sol\types.hpp	/^	typedef std::remove_pointer_t<lua_CFunction> lua_r_CFunction;$/;"	t	namespace:sol
lua_rawequal	.\dep\Lua\src\lapi.c	/^LUA_API int lua_rawequal (lua_State *L, int index1, int index2) {$/;"	f
lua_rawget	.\dep\Lua\src\lapi.c	/^LUA_API int lua_rawget (lua_State *L, int idx) {$/;"	f
lua_rawgeti	.\dep\Lua\src\lapi.c	/^LUA_API int lua_rawgeti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawgetp	.\dep\Lua\src\lapi.c	/^LUA_API int lua_rawgetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawgetp	.\include\sol\single\sol\sol.hpp	/^inline void lua_rawgetp(lua_State *L, int i, const void *p) {$/;"	f
lua_rawlen	.\dep\Lua\src\lapi.c	/^LUA_API size_t lua_rawlen (lua_State *L, int idx) {$/;"	f
lua_rawlen	.\include\sol\single\sol\sol.hpp	1904;"	d
lua_rawlen	.\include\sol\sol\compatibility\5.1.0.h	85;"	d
lua_rawset	.\dep\Lua\src\lapi.c	/^LUA_API void lua_rawset (lua_State *L, int idx) {$/;"	f
lua_rawseti	.\dep\Lua\src\lapi.c	/^LUA_API void lua_rawseti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_rawsetp	.\dep\Lua\src\lapi.c	/^LUA_API void lua_rawsetp (lua_State *L, int idx, const void *p) {$/;"	f
lua_rawsetp	.\include\sol\single\sol\sol.hpp	/^inline void lua_rawsetp(lua_State *L, int i, const void *p) {$/;"	f
lua_readline	.\dep\Lua\src\lua.c	82;"	d	file:
lua_readline	.\dep\Lua\src\lua.c	88;"	d	file:
lua_register	.\dep\Lua\src\lua.h	348;"	d
lua_register	.\include\lua\lua.h	348;"	d
lua_remove	.\dep\Lua\src\lua.h	371;"	d
lua_remove	.\include\lua\lua.h	371;"	d
lua_replace	.\dep\Lua\src\lua.h	373;"	d
lua_replace	.\include\lua\lua.h	373;"	d
lua_resume	.\dep\Lua\src\ldo.c	/^LUA_API int lua_resume (lua_State *L, lua_State *from, int nargs) {$/;"	f
lua_rotate	.\dep\Lua\src\lapi.c	/^LUA_API void lua_rotate (lua_State *L, int idx, int n) {$/;"	f
lua_saveline	.\dep\Lua\src\lua.c	83;"	d	file:
lua_saveline	.\dep\Lua\src\lua.c	91;"	d	file:
lua_setallocf	.\dep\Lua\src\lapi.c	/^LUA_API void lua_setallocf (lua_State *L, lua_Alloc f, void *ud) {$/;"	f
lua_setfield	.\dep\Lua\src\lapi.c	/^LUA_API void lua_setfield (lua_State *L, int idx, const char *k) {$/;"	f
lua_setglobal	.\dep\Lua\src\lapi.c	/^LUA_API void lua_setglobal (lua_State *L, const char *name) {$/;"	f
lua_sethook	.\dep\Lua\src\ldebug.c	/^LUA_API void lua_sethook (lua_State *L, lua_Hook func, int mask, int count) {$/;"	f
lua_seti	.\dep\Lua\src\lapi.c	/^LUA_API void lua_seti (lua_State *L, int idx, lua_Integer n) {$/;"	f
lua_setlocal	.\dep\Lua\src\ldebug.c	/^LUA_API const char *lua_setlocal (lua_State *L, const lua_Debug *ar, int n) {$/;"	f
lua_setmetatable	.\dep\Lua\src\lapi.c	/^LUA_API int lua_setmetatable (lua_State *L, int objindex) {$/;"	f
lua_settable	.\dep\Lua\src\lapi.c	/^LUA_API void lua_settable (lua_State *L, int idx) {$/;"	f
lua_settop	.\dep\Lua\src\lapi.c	/^LUA_API void lua_settop (lua_State *L, int idx) {$/;"	f
lua_setupvalue	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_setupvalue (lua_State *L, int funcindex, int n) {$/;"	f
lua_setuservalue	.\dep\Lua\src\lapi.c	/^LUA_API void lua_setuservalue (lua_State *L, int idx) {$/;"	f
lua_setuservalue	.\include\sol\single\sol\sol.hpp	/^inline void lua_setuservalue(lua_State *L, int i) {$/;"	f
lua_size	.\include\sol\single\sol\sol.hpp	/^	struct lua_size : std::integral_constant<int, 1> { };$/;"	s	class:sol::sol::call_syntax::call_status::type
lua_size	.\include\sol\single\sol\sol.hpp	/^	struct lua_size<std::pair<A, B>> : std::integral_constant<int, lua_size<A>::value + lua_size<B>::value> { };$/;"	s	class:sol::sol::call_syntax::call_status::type
lua_size	.\include\sol\single\sol\sol.hpp	/^	struct lua_size<std::tuple<Args...>> : std::integral_constant<int, detail::accumulate<int, 0, lua_size, Args...>::value> { };$/;"	s	class:sol::sol::call_syntax::call_status::type
lua_size	.\include\sol\sol\types.hpp	/^	struct lua_size : std::integral_constant<int, 1> { };$/;"	s	class:sol::call_syntax::call_status::type
lua_size	.\include\sol\sol\types.hpp	/^	struct lua_size<std::pair<A, B>> : std::integral_constant<int, lua_size<A>::value + lua_size<B>::value> { };$/;"	s	class:sol::call_syntax::call_status::type
lua_size	.\include\sol\sol\types.hpp	/^	struct lua_size<std::tuple<Args...>> : std::integral_constant<int, detail::accumulate<int, 0, lua_size, Args...>::value> { };$/;"	s	class:sol::call_syntax::call_status::type
lua_size	.\include\sol\test_customizations.cpp	/^	struct lua_size<two_things> : std::integral_constant<int, 2> {};$/;"	s	namespace:sol	file:
lua_state	.\include\sol\single\sol\sol.hpp	/^		lua_State* lua_state() const { return L; }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
lua_state	.\include\sol\single\sol\sol.hpp	/^		lua_State* lua_state() const { return L; };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
lua_state	.\include\sol\single\sol\sol.hpp	/^		lua_State* lua_state() const { return L; };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
lua_state	.\include\sol\sol\function_result.hpp	/^		lua_State* lua_state() const { return L; };$/;"	f	struct:sol::function_result
lua_state	.\include\sol\sol\stack_proxy.hpp	/^		lua_State* lua_state() const { return L; }$/;"	f	struct:sol::stack_proxy
lua_state	.\include\sol\sol\state_view.hpp	/^		lua_State* lua_state() const {$/;"	f	class:sol::state_view
lua_state	.\include\sol\sol\variadic_args.hpp	/^		lua_State* lua_state() const { return L; };$/;"	f	struct:sol::variadic_args
lua_status	.\dep\Lua\src\lapi.c	/^LUA_API int lua_status (lua_State *L) {$/;"	f
lua_stdin_is_tty	.\dep\Lua\src\lua.c	53;"	d	file:
lua_stdin_is_tty	.\dep\Lua\src\lua.c	58;"	d	file:
lua_stdin_is_tty	.\dep\Lua\src\lua.c	63;"	d	file:
lua_str2number	.\dep\Lua\src\luaconf.h	455;"	d
lua_str2number	.\dep\Lua\src\luaconf.h	471;"	d
lua_str2number	.\dep\Lua\src\luaconf.h	486;"	d
lua_str2number	.\dep\Lua\src\luaconf.h	627;"	d
lua_str2number	.\dep\Lua\src\luaconf.h	629;"	d
lua_str2number	.\include\lua\luaconf.h	455;"	d
lua_str2number	.\include\lua\luaconf.h	471;"	d
lua_str2number	.\include\lua\luaconf.h	486;"	d
lua_str2number	.\include\lua\luaconf.h	627;"	d
lua_str2number	.\include\lua\luaconf.h	629;"	d
lua_stringtonumber	.\dep\Lua\src\lapi.c	/^LUA_API size_t lua_stringtonumber (lua_State *L, const char *s) {$/;"	f
lua_strlen	.\dep\Lua\src\luaconf.h	369;"	d
lua_strlen	.\include\lua\luaconf.h	369;"	d
lua_strx2number	.\dep\Lua\src\lobject.c	/^static lua_Number lua_strx2number (const char *s, char **endptr) {$/;"	f	file:
lua_strx2number	.\dep\Lua\src\luaconf.h	604;"	d
lua_strx2number	.\include\lua\luaconf.h	604;"	d
lua_tmpnam	.\dep\Lua\src\loslib.c	121;"	d	file:
lua_tmpnam	.\dep\Lua\src\loslib.c	131;"	d	file:
lua_toboolean	.\dep\Lua\src\lapi.c	/^LUA_API int lua_toboolean (lua_State *L, int idx) {$/;"	f
lua_tocfunction	.\dep\Lua\src\lapi.c	/^LUA_API lua_CFunction lua_tocfunction (lua_State *L, int idx) {$/;"	f
lua_tointeger	.\dep\Lua\src\lua.h	342;"	d
lua_tointeger	.\include\lua\lua.h	342;"	d
lua_tointegerx	.\dep\Lua\src\lapi.c	/^LUA_API lua_Integer lua_tointegerx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_tointegerx	.\include\sol\single\sol\sol.hpp	/^inline lua_Integer lua_tointegerx(lua_State *L, int i, int *isnum) {$/;"	f
lua_tolstring	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_tolstring (lua_State *L, int idx, size_t *len) {$/;"	f
lua_tonumber	.\dep\Lua\src\lua.h	341;"	d
lua_tonumber	.\include\lua\lua.h	341;"	d
lua_tonumberx	.\dep\Lua\src\lapi.c	/^LUA_API lua_Number lua_tonumberx (lua_State *L, int idx, int *pisnum) {$/;"	f
lua_tonumberx	.\include\sol\single\sol\sol.hpp	/^inline lua_Number lua_tonumberx(lua_State *L, int i, int *isnum) {$/;"	f
lua_topointer	.\dep\Lua\src\lapi.c	/^LUA_API const void *lua_topointer (lua_State *L, int idx) {$/;"	f
lua_tostring	.\dep\Lua\src\lua.h	366;"	d
lua_tostring	.\include\lua\lua.h	366;"	d
lua_tothread	.\dep\Lua\src\lapi.c	/^LUA_API lua_State *lua_tothread (lua_State *L, int idx) {$/;"	f
lua_tounsigned	.\dep\Lua\src\lua.h	387;"	d
lua_tounsigned	.\include\lua\lua.h	387;"	d
lua_tounsigned	.\include\sol\single\sol\sol.hpp	1902;"	d
lua_tounsigned	.\include\sol\sol\compatibility\5.1.0.h	83;"	d
lua_tounsignedx	.\dep\Lua\src\lua.h	386;"	d
lua_tounsignedx	.\include\lua\lua.h	386;"	d
lua_tounsignedx	.\include\sol\single\sol\sol.hpp	/^inline lua_Unsigned lua_tounsignedx(lua_State *L, int i, int *isnum) {$/;"	f
lua_touserdata	.\dep\Lua\src\lapi.c	/^LUA_API void *lua_touserdata (lua_State *L, int idx) {$/;"	f
lua_type	.\dep\Lua\src\lapi.c	/^LUA_API int lua_type (lua_State *L, int idx) {$/;"	f
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<T*> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<T, std::enable_if_t<$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<T, std::enable_if_t<std::is_arithmetic<T>::value>> : std::integral_constant<type, type::number> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<T, std::enable_if_t<std::is_enum<T>::value>> : std::integral_constant<type, type::number> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_function<Base>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_lightuserdata<Base>> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_object<Base>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_protected_function<Base>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_table_core<b, Base>> : std::integral_constant<type, type::table> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<basic_userdata<Base>> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<bool> : std::integral_constant<type, type::boolean> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char16_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char16_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char32_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char32_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<char[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<const char*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<const char16_t*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<const char32_t*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<coroutine> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<light<T>> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<lightuserdata_value> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<lua_CFunction> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<meta_function> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<nil_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<nullopt_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<optional<T>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<reference> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<sol::error> : std::integral_constant<type, type::string> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<stack_reference> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::function<Signature>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::nullptr_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::pair<A, B>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::remove_pointer_t<lua_CFunction>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::tuple<Args...>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::u16string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::u32string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<std::wstring> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<string_detail::string_shim> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<this_state> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<thread> : std::integral_constant<type, type::thread> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<type> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<user<T>> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<userdata_value> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<variadic_args> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<wchar_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^		struct lua_type_of<wchar_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\single\sol\sol.hpp	/^	struct lua_type_of : detail::lua_type_of<T> {};$/;"	s	class:sol::sol::call_syntax::call_status::type
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<T*> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<T, std::enable_if_t<$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<T, std::enable_if_t<std::is_arithmetic<T>::value>> : std::integral_constant<type, type::number> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<T, std::enable_if_t<std::is_enum<T>::value>> : std::integral_constant<type, type::number> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_function<Base>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_lightuserdata<Base>> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_object<Base>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_protected_function<Base>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_table_core<b, Base>> : std::integral_constant<type, type::table> { };$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<basic_userdata<Base>> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<bool> : std::integral_constant<type, type::boolean> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char16_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char16_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char32_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char32_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<char[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<const char*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<const char16_t*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<const char32_t*> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<coroutine> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<light<T>> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<lightuserdata_value> : std::integral_constant<type, type::lightuserdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<lua_CFunction> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<meta_function> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<nil_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<nullopt_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<optional<T>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<reference> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<sol::error> : std::integral_constant<type, type::string> { };$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<stack_reference> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::function<Signature>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::nullptr_t> : std::integral_constant<type, type::nil> { };$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::pair<A, B>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::remove_pointer_t<lua_CFunction>> : std::integral_constant<type, type::function> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::tuple<Args...>> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::u16string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::u32string> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<std::wstring> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<string_detail::string_shim> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<this_state> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<thread> : std::integral_constant<type, type::thread> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<type> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<user<T>> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<userdata_value> : std::integral_constant<type, type::userdata> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<variadic_args> : std::integral_constant<type, type::poly> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<wchar_t> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^		struct lua_type_of<wchar_t[N]> : std::integral_constant<type, type::string> {};$/;"	s	namespace:sol::call_syntax::call_status::type::detail
lua_type_of	.\include\sol\sol\types.hpp	/^	struct lua_type_of : detail::lua_type_of<T> {};$/;"	s	class:sol::call_syntax::call_status::type
lua_typename	.\dep\Lua\src\lapi.c	/^LUA_API const char *lua_typename (lua_State *L, int t) {$/;"	f
lua_unlock	.\dep\Lua\src\llimits.h	215;"	d
lua_unlock	.\include\lua\llimits.h	215;"	d
lua_unsigned2number	.\include\sol\single\sol\sol.hpp	2485;"	d
lua_upvalueid	.\dep\Lua\src\lapi.c	/^LUA_API void *lua_upvalueid (lua_State *L, int fidx, int n) {$/;"	f
lua_upvalueindex	.\dep\Lua\src\lua.h	43;"	d
lua_upvalueindex	.\include\lua\lua.h	43;"	d
lua_upvaluejoin	.\dep\Lua\src\lapi.c	/^LUA_API void lua_upvaluejoin (lua_State *L, int fidx1, int n1,$/;"	f
lua_version	.\dep\Lua\src\lapi.c	/^LUA_API const lua_Number *lua_version (lua_State *L) {$/;"	f
lua_version	.\include\sol\bootstrap.py	/^    lua_version = os.environ.get('LUA_VERSION', 'lua53')$/;"	v
lua_version	.\include\sol\single\sol\sol.hpp	/^inline const lua_Number *lua_version(lua_State *L) {$/;"	f
lua_writeline	.\dep\Lua\src\lauxlib.h	220;"	d
lua_writeline	.\include\lua\lauxlib.h	220;"	d
lua_writestring	.\dep\Lua\src\lauxlib.h	215;"	d
lua_writestring	.\include\lua\lauxlib.h	215;"	d
lua_writestringerror	.\dep\Lua\src\lauxlib.h	225;"	d
lua_writestringerror	.\include\lua\lauxlib.h	225;"	d
lua_xmove	.\dep\Lua\src\lapi.c	/^LUA_API void lua_xmove (lua_State *from, lua_State *to, int n) {$/;"	f
lua_yield	.\dep\Lua\src\lua.h	295;"	d
lua_yield	.\include\lua\lua.h	295;"	d
lua_yieldk	.\dep\Lua\src\ldo.c	/^LUA_API int lua_yieldk (lua_State *L, int nresults, lua_KContext ctx,$/;"	f
luac_c	.\dep\Lua\src\luac.c	217;"	d	file:
luac_c	.\dep\Lua\src\luac.c	7;"	d	file:
luacall	.\include\sol\single\sol\sol.hpp	/^		int luacall(std::ptrdiff_t argcount, std::ptrdiff_t resultcount, handler& h) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
luacall	.\include\sol\single\sol\sol.hpp	/^		void luacall(std::ptrdiff_t argcount, std::ptrdiff_t resultcount) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
luacall	.\include\sol\single\sol\sol.hpp	/^		void luacall(std::ptrdiff_t argcount, std::ptrdiff_t) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
luacall	.\include\sol\sol\coroutine.hpp	/^		void luacall(std::ptrdiff_t argcount, std::ptrdiff_t) {$/;"	f	class:sol::coroutine
luacall	.\include\sol\sol\function.hpp	/^		void luacall(std::ptrdiff_t argcount, std::ptrdiff_t resultcount) const {$/;"	f	class:sol::basic_function
luacall	.\include\sol\sol\protected_function.hpp	/^		int luacall(std::ptrdiff_t argcount, std::ptrdiff_t resultcount, handler& h) const {$/;"	f	class:sol::basic_protected_function
luaconf_h	.\dep\Lua\src\luaconf.h	9;"	d
luaconf_h	.\include\lua\luaconf.h	9;"	d
luai_apicheck	.\dep\Lua\src\llimits.h	98;"	d
luai_apicheck	.\dep\Lua\src\luaconf.h	685;"	d
luai_apicheck	.\include\lua\llimits.h	98;"	d
luai_apicheck	.\include\lua\luaconf.h	685;"	d
luai_ctype_	.\dep\Lua\src\lctype.c	/^LUAI_DDEF const lu_byte luai_ctype_[UCHAR_MAX + 2] = {$/;"	v
luai_ctype_	.\dep\Lua\src\lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_ctype_	.\include\lua\lctype.h	/^LUAI_DDEC const lu_byte luai_ctype_[UCHAR_MAX + 2];$/;"	v
luai_jmpbuf	.\dep\Lua\src\ldo.c	61;"	d	file:
luai_jmpbuf	.\dep\Lua\src\ldo.c	68;"	d	file:
luai_jmpbuf	.\dep\Lua\src\ldo.c	75;"	d	file:
luai_makeseed	.\dep\Lua\src\lstate.c	46;"	d	file:
luai_numadd	.\dep\Lua\src\llimits.h	291;"	d
luai_numadd	.\include\lua\llimits.h	291;"	d
luai_numdiv	.\dep\Lua\src\llimits.h	269;"	d
luai_numdiv	.\include\lua\llimits.h	269;"	d
luai_numeq	.\dep\Lua\src\llimits.h	295;"	d
luai_numeq	.\include\lua\llimits.h	295;"	d
luai_numidiv	.\dep\Lua\src\llimits.h	264;"	d
luai_numidiv	.\include\lua\llimits.h	264;"	d
luai_numisnan	.\dep\Lua\src\llimits.h	298;"	d
luai_numisnan	.\include\lua\llimits.h	298;"	d
luai_numle	.\dep\Lua\src\llimits.h	297;"	d
luai_numle	.\include\lua\llimits.h	297;"	d
luai_numlt	.\dep\Lua\src\llimits.h	296;"	d
luai_numlt	.\include\lua\llimits.h	296;"	d
luai_nummod	.\dep\Lua\src\llimits.h	280;"	d
luai_nummod	.\include\lua\llimits.h	280;"	d
luai_nummul	.\dep\Lua\src\llimits.h	293;"	d
luai_nummul	.\include\lua\llimits.h	293;"	d
luai_numpow	.\dep\Lua\src\llimits.h	286;"	d
luai_numpow	.\include\lua\llimits.h	286;"	d
luai_numsub	.\dep\Lua\src\llimits.h	292;"	d
luai_numsub	.\include\lua\llimits.h	292;"	d
luai_numunm	.\dep\Lua\src\llimits.h	294;"	d
luai_numunm	.\include\lua\llimits.h	294;"	d
luai_threadyield	.\dep\Lua\src\llimits.h	223;"	d
luai_threadyield	.\include\lua\llimits.h	223;"	d
luai_userstateclose	.\dep\Lua\src\llimits.h	237;"	d
luai_userstateclose	.\include\lua\llimits.h	237;"	d
luai_userstatefree	.\dep\Lua\src\llimits.h	245;"	d
luai_userstatefree	.\include\lua\llimits.h	245;"	d
luai_userstateopen	.\dep\Lua\src\llimits.h	233;"	d
luai_userstateopen	.\include\lua\llimits.h	233;"	d
luai_userstateresume	.\dep\Lua\src\llimits.h	249;"	d
luai_userstateresume	.\include\lua\llimits.h	249;"	d
luai_userstatethread	.\dep\Lua\src\llimits.h	241;"	d
luai_userstatethread	.\include\lua\llimits.h	241;"	d
luai_userstateyield	.\dep\Lua\src\llimits.h	253;"	d
luai_userstateyield	.\include\lua\llimits.h	253;"	d
luai_verifycode	.\dep\Lua\src\lundump.c	28;"	d	file:
luajit_exception_handler	.\include\sol\single\sol\sol.hpp	/^		inline void luajit_exception_handler(lua_State* L, int(*handler)(lua_State*, lua_CFunction) = detail::c_trampoline) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
luajit_exception_handler	.\include\sol\sol\stack.hpp	/^		inline void luajit_exception_handler(lua_State* L, int(*handler)(lua_State*, lua_CFunction) = detail::c_trampoline) {$/;"	f	namespace:sol::stack
luajit_exception_off	.\include\sol\single\sol\sol.hpp	/^		inline void luajit_exception_off(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
luajit_exception_off	.\include\sol\sol\stack.hpp	/^		inline void luajit_exception_off(lua_State* L) {$/;"	f	namespace:sol::stack
lualib_h	.\dep\Lua\src\lualib.h	9;"	d
lualib_h	.\include\lua\lualib.h	9;"	d
luaopen_base	.\dep\Lua\src\lbaselib.c	/^LUAMOD_API int luaopen_base (lua_State *L) {$/;"	f
luaopen_bit32	.\dep\Lua\src\lbitlib.c	/^LUAMOD_API int luaopen_bit32 (lua_State *L) {$/;"	f
luaopen_coroutine	.\dep\Lua\src\lcorolib.c	/^LUAMOD_API int luaopen_coroutine (lua_State *L) {$/;"	f
luaopen_debug	.\dep\Lua\src\ldblib.c	/^LUAMOD_API int luaopen_debug (lua_State *L) {$/;"	f
luaopen_io	.\dep\Lua\src\liolib.c	/^LUAMOD_API int luaopen_io (lua_State *L) {$/;"	f
luaopen_math	.\dep\Lua\src\lmathlib.c	/^LUAMOD_API int luaopen_math (lua_State *L) {$/;"	f
luaopen_os	.\dep\Lua\src\loslib.c	/^LUAMOD_API int luaopen_os (lua_State *L) {$/;"	f
luaopen_package	.\dep\Lua\src\loadlib.c	/^LUAMOD_API int luaopen_package (lua_State *L) {$/;"	f
luaopen_string	.\dep\Lua\src\lstrlib.c	/^LUAMOD_API int luaopen_string (lua_State *L) {$/;"	f
luaopen_table	.\dep\Lua\src\ltablib.c	/^LUAMOD_API int luaopen_table (lua_State *L) {$/;"	f
luaopen_utf8	.\dep\Lua\src\lutf8lib.c	/^LUAMOD_API int luaopen_utf8 (lua_State *L) {$/;"	f
lundump_c	.\dep\Lua\src\lundump.c	7;"	d	file:
lundump_h	.\dep\Lua\src\lundump.h	8;"	d
lundump_h	.\include\lua\lundump.h	8;"	d
lutf8lib_c	.\dep\Lua\src\lutf8lib.c	7;"	d	file:
lvm_c	.\dep\Lua\src\lvm.c	7;"	d	file:
lvm_h	.\dep\Lua\src\lvm.h	8;"	d
lvm_h	.\include\lua\lvm.h	8;"	d
lzio_c	.\dep\Lua\src\lzio.c	7;"	d	file:
lzio_h	.\dep\Lua\src\lzio.h	9;"	d
lzio_h	.\include\lua\lzio.h	9;"	d
m	.\include\sol\Optional\test_optional.cpp	/^  int m = 0;$/;"	m	struct:Combined	file:
m	.\include\sol\Optional\test_optional.cpp	/^  int m = 0;$/;"	m	struct:Nasty	file:
m_a	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^    int m_a;$/;"	m	struct:Fixture	file:
m_activeSections	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::vector<ITracker*> m_activeSections;$/;"	m	class:Catch::RunContext
m_activeTestCase	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        TestCase const* m_activeTestCase;$/;"	m	class:Catch::RunContext
m_actualSize	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size because of padding)$/;"	m	class:sf::Texture
m_actualSize	.\include\SFML\Graphics\Texture.hpp	/^    Vector2u     m_actualSize;    \/\/\/< Actual texture size (can be greater than public size because of padding)$/;"	m	class:sf::Texture
m_address	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress
m_address	.\include\SFML\Network\IpAddress.hpp	/^    Uint32 m_address; \/\/\/< Address stored as an unsigned 32 bits integer$/;"	m	class:sf::IpAddress
m_arg	.\include\sol\Catch\include\external\clara.h	/^            Arg* m_arg;$/;"	m	class:Clara::CommandLine::ArgBuilder
m_arg	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        std::string m_arg;$/;"	m	class:Catch::TestSpecParser
m_assertionInfo	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_assertionInfo	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionInfo m_assertionInfo;$/;"	m	class:Catch::ResultBuilder
m_assertions	.\include\sol\Catch\include\internal\catch_section.h	/^        Counts m_assertions;$/;"	m	class:Catch::Section
m_assertions	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<AssertionStats> m_assertions;$/;"	m	struct:Catch::CumulativeReporterBase
m_axis	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    AxisMap                  m_axis;           \/\/\/< Axis (IOHIDElementRef) connected to the joystick$/;"	m	class:sf::priv::JoystickImpl
m_backingScale	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^    float             m_backingScale;   \/\/\/< Converts from points to pixels and vice versa$/;"	m	class:sf::priv::WindowImplUIKit
m_body	.\dep\SFML\include\SFML\Network\Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request
m_body	.\dep\SFML\include\SFML\Network\Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response
m_body	.\include\SFML\Network\Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the request$/;"	m	class:sf::Http::Request
m_body	.\include\SFML\Network\Http.hpp	/^        std::string  m_body;         \/\/\/< Body of the response$/;"	m	class:sf::Http::Response
m_boundProcessName	.\include\sol\Catch\include\external\clara.h	/^        Detail::BoundArgFunction<ConfigT> m_boundProcessName;$/;"	m	class:Clara::CommandLine
m_bounds	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + fill)$/;"	m	class:sf::Shape
m_bounds	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    mutable FloatRect   m_bounds;             \/\/\/< Bounding rectangle of the text (in local coordinates)$/;"	m	class:sf::Text
m_bounds	.\include\SFML\Graphics\Shape.hpp	/^    FloatRect      m_bounds;           \/\/\/< Bounding rectangle of the whole shape (outline + fill)$/;"	m	class:sf::Shape
m_bounds	.\include\SFML\Graphics\Text.hpp	/^    mutable FloatRect   m_bounds;             \/\/\/< Bounding rectangle of the text (in local coordinates)$/;"	m	class:sf::Text
m_buffer	.\dep\SFML\include\SFML\Audio\Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound
m_buffer	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer
m_buffer	.\dep\SFML\include\SFML\Audio\SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_buffer	.\dep\SFML\include\SFML\Network\UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Packet)$/;"	m	class:sf::UdpSocket
m_buffer	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    std::vector<char>        m_buffer;         \/\/\/< USB HID buffer$/;"	m	class:sf::priv::JoystickImpl
m_buffer	.\include\SFML\Audio\Sound.hpp	/^    const SoundBuffer* m_buffer; \/\/\/< Sound buffer bound to the source$/;"	m	class:sf::Sound
m_buffer	.\include\SFML\Audio\SoundBuffer.hpp	/^    unsigned int       m_buffer;   \/\/\/< OpenAL buffer identifier$/;"	m	class:sf::SoundBuffer
m_buffer	.\include\SFML\Audio\SoundBufferRecorder.hpp	/^    SoundBuffer        m_buffer;  \/\/\/< Sound buffer that will contain the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_buffer	.\include\SFML\Network\UdpSocket.hpp	/^    std::vector<char> m_buffer; \/\/\/< Temporary buffer holding the received data in Receive(Packet)$/;"	m	class:sf::UdpSocket
m_buffers	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];    \/\/\/< Sound buffers used to store temporary audio data$/;"	m	class:sf::SoundStream
m_buffers	.\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_buffers[BufferCount];    \/\/\/< Sound buffers used to store temporary audio data$/;"	m	class:sf::SoundStream
m_buttons	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    ButtonsVector            m_buttons;        \/\/\/< Buttons (IOHIDElementRef) connected to the joystick$/;"	m	class:sf::priv::JoystickImpl
m_bytesPerSample	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^    unsigned int m_bytesPerSample; \/\/\/< Size of a sample, in bytes$/;"	m	class:sf::priv::SoundFileReaderWav
m_cache	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget
m_cache	.\include\SFML\Graphics\RenderTarget.hpp	/^    StatesCache m_cache;       \/\/\/< Render states cache$/;"	m	class:sf::RenderTarget
m_cacheId	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the render target's cache$/;"	m	class:sf::Texture
m_cacheId	.\include\SFML\Graphics\Texture.hpp	/^    Uint64       m_cacheId;       \/\/\/< Unique number that identifies the texture to the render target's cache$/;"	m	class:sf::Texture
m_callback	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    LONG_PTR m_callback;         \/\/\/< Stores the original event callback function of the control$/;"	m	class:sf::priv::WindowImplWin32
m_caps	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^    JOYCAPS                  m_caps;           \/\/\/< Joystick capabilities$/;"	m	class:sf::priv::JoystickImpl
m_caseSensitivity	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CaseSensitive::Choice m_caseSensitivity;$/;"	m	struct:Catch::Matchers::Impl::StdString::CasedString
m_caseSensitivity	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        CaseSensitive::Choice m_caseSensitivity;$/;"	m	class:Catch::WildcardPattern
m_caseSensitivity	.\include\sol\Catch\single_include\catch.hpp	/^            CaseSensitive::Choice m_caseSensitivity;$/;"	m	struct:Catch::Matchers::Impl::StdString::CasedString
m_center	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View
m_center	.\include\SFML\Graphics\View.hpp	/^    Vector2f          m_center;              \/\/\/< Center of the view, in scene coordinates$/;"	m	class:sf::View
m_channelCount	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    unsigned int     m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::InputSoundFile
m_channelCount	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_channelCount;            \/\/\/< Number of channels (1 = mono, 2 = stereo, ...)$/;"	m	class:sf::SoundStream
m_channelCount	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	/^    unsigned int   m_channelCount; \/\/ number of channels of the open sound file$/;"	m	class:sf::priv::SoundFileReaderOgg
m_channelCount	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^    unsigned int         m_channelCount; \/\/\/< Number of channels$/;"	m	class:sf::priv::SoundFileWriterFlac
m_channelCount	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^    unsigned int     m_channelCount; \/\/ channel count of the sound being written$/;"	m	class:sf::priv::SoundFileWriterOgg
m_channelCount	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^    unsigned int  m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::priv::SoundFileWriterWav
m_channelCount	.\include\SFML\Audio\InputSoundFile.hpp	/^    unsigned int     m_channelCount; \/\/\/< Number of channels of the sound$/;"	m	class:sf::InputSoundFile
m_channelCount	.\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_channelCount;            \/\/\/< Number of channels (1 = mono, 2 = stereo, ...)$/;"	m	class:sf::SoundStream
m_characterSize	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    unsigned int        m_characterSize;      \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text
m_characterSize	.\include\SFML\Graphics\Text.hpp	/^    unsigned int        m_characterSize;      \/\/\/< Base size of characters, in pixels$/;"	m	class:sf::Text
m_children	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        Children m_children;$/;"	m	class:Catch::TestCaseTracking::TrackerBase
m_cli	.\include\sol\Catch\include\catch_session.hpp	/^        Clara::CommandLine<ConfigData> m_cli;$/;"	m	class:Catch::Session
m_clientData	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^    ClientData           m_clientData; \/\/\/< Structure passed to the decoder callbacks$/;"	m	class:sf::priv::SoundFileReaderFlac
m_clock	.\dep\SFML\include\SFML\Window\Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between frames$/;"	m	class:sf::Window
m_clock	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    Clock m_clock;          \/\/\/< Measures the elapsed time for the fake v-sync implementation$/;"	m	class:sf::priv::EaglContext
m_clock	.\include\SFML\Window\Window.hpp	/^    Clock             m_clock;          \/\/\/< Clock for measuring the elapsed time between frames$/;"	m	class:sf::Window
m_cls	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        Class m_cls;$/;"	m	class:Catch::OcMethod
m_color	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    Color               m_color;              \/\/\/< Text color$/;"	m	class:sf::Text
m_color	.\include\SFML\Graphics\Text.hpp	/^    Color               m_color;              \/\/\/< Text color$/;"	m	class:sf::Text
m_colorbuffer	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    GLuint m_colorbuffer;   \/\/\/< Color render buffer$/;"	m	class:sf::priv::EaglContext
m_commandSocket	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^    TcpSocket m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp
m_commandSocket	.\include\SFML\Network\Ftp.hpp	/^    TcpSocket m_commandSocket; \/\/\/< Socket holding the control connection with the server$/;"	m	class:sf::Ftp
m_composed	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    std::vector<const IGenerator<T>*> m_composed;$/;"	m	class:Catch::CompositeGenerator
m_config	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^    EGLConfig   m_config;  \/\/\/< The internal EGL config$/;"	m	class:sf::priv::EglContext
m_config	.\include\sol\Catch\include\catch_session.hpp	/^        Ptr<Config> m_config;$/;"	m	class:Catch::Session
m_config	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	class:Catch::Context
m_config	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	class:Catch::RunContext
m_config	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	struct:Catch::CumulativeReporterBase
m_config	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        Ptr<IConfig const> m_config;$/;"	m	struct:Catch::StreamingReporterBase
m_configData	.\include\sol\Catch\include\catch_session.hpp	/^        ConfigData m_configData;$/;"	m	class:Catch::Session
m_connection	.\dep\SFML\include\SFML\Network\Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http
m_connection	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^    xcb_connection_t* m_connection; \/\/\/< Pointer to the xcb connection$/;"	m	class:sf::priv::GlxContext
m_connection	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    xcb_connection_t*                 m_connection;      \/\/\/< Pointer to the xcb connection$/;"	m	class:sf::priv::WindowImplX11
m_connection	.\include\SFML\Network\Http.hpp	/^    TcpSocket      m_connection; \/\/\/< Connection to the host$/;"	m	class:sf::Http
m_context	.\dep\SFML\include\SFML\Window\Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context
m_context	.\dep\SFML\include\SFML\Window\Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL context$/;"	m	class:sf::Window
m_context	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^    Context*     m_context; \/\/\/< P-Buffer based context$/;"	m	class:sf::priv::RenderTextureImplDefault
m_context	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^    Context*     m_context;     \/\/\/< Needs a separate OpenGL context for not messing up the other ones$/;"	m	class:sf::priv::RenderTextureImplFBO
m_context	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^    EGLContext  m_context; \/\/\/< The internal EGL context$/;"	m	class:sf::priv::EglContext
m_context	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^    NSOpenGLContextRef    m_context;       \/\/\/< OpenGL context.$/;"	m	class:sf::priv::SFContext
m_context	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^    GLXContext        m_context;    \/\/\/< OpenGL context$/;"	m	class:sf::priv::GlxContext
m_context	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^    HGLRC m_context;       \/\/\/< OpenGL context$/;"	m	class:sf::priv::WglContext
m_context	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    EAGLContext* m_context; \/\/\/< The internal context$/;"	m	class:sf::priv::EaglContext
m_context	.\include\SFML\Window\Context.hpp	/^    priv::GlContext* m_context; \/\/\/< Internal OpenGL context$/;"	m	class:sf::Context
m_context	.\include\SFML\Window\Window.hpp	/^    priv::GlContext*  m_context;        \/\/\/< Platform-specific implementation of the OpenGL context$/;"	m	class:sf::Window
m_context	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        IMutableContext& m_context;$/;"	m	class:Catch::RunContext
m_count	.\include\sol\Catch\include\internal\catch_common.h	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_count	.\include\sol\Catch\single_include\catch.hpp	/^        std::size_t m_count;$/;"	m	struct:Catch::pluralise
m_ctx	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        TrackerContext& m_ctx;$/;"	m	class:Catch::TestCaseTracking::TrackerBase
m_currentFilter	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        TestSpec::Filter m_currentFilter;$/;"	m	class:Catch::TestSpecParser
m_currentIndex	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        std::size_t m_currentIndex;$/;"	m	struct:Catch::GeneratorInfo
m_currentSectionTracker	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        ITracker* m_currentSectionTracker;$/;"	m	class:Catch::RunContext
m_currentSortOrder	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        mutable RunTests::InWhatOrder m_currentSortOrder;$/;"	m	class:Catch::TestRegistry
m_currentTexture	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader
m_currentTexture	.\include\SFML\Graphics\Shader.hpp	/^    int          m_currentTexture; \/\/\/< Location of the current texture in the shader$/;"	m	class:sf::Shader
m_currentTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        ITracker* m_currentTracker;$/;"	m	class:Catch::TestCaseTracking::TrackerContext
m_cursor	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    HCURSOR  m_cursor;           \/\/\/< The system cursor to display into the window$/;"	m	class:sf::priv::WindowImplWin32
m_data	.\dep\SFML\include\SFML\Network\Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet
m_data	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream
m_data	.\include\SFML\Network\Packet.hpp	/^    std::vector<char> m_data;    \/\/\/< Data stored in the packet$/;"	m	class:sf::Packet
m_data	.\include\SFML\System\MemoryInputStream.hpp	/^    const char* m_data;   \/\/\/< Pointer to the data in memory$/;"	m	class:sf::MemoryInputStream
m_data	.\include\sol\Catch\include\internal\catch_config.hpp	/^        ConfigData m_data;$/;"	m	class:Catch::Config
m_data	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::Contains
m_data	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::EndsWith
m_data	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::Equals
m_data	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::StartsWith
m_data	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_data	.\include\sol\Catch\single_include\catch.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::Contains
m_data	.\include\sol\Catch\single_include\catch.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::EndsWith
m_data	.\include\sol\Catch\single_include\catch.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::Equals
m_data	.\include\sol\Catch\single_include\catch.hpp	/^            CasedString m_data;$/;"	m	struct:Catch::Matchers::Impl::StdString::StartsWith
m_data	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionResultData m_data;$/;"	m	class:Catch::ResultBuilder
m_dataSocket	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^    TcpSocket m_dataSocket; \/\/\/< Socket used for data transfers$/;"	m	class:sf::Ftp::DataChannel	file:
m_dataStart	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^    Uint64       m_dataStart;      \/\/\/< Starting position of the audio data in the open file$/;"	m	class:sf::priv::SoundFileReaderWav
m_decoder	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^    FLAC__StreamDecoder* m_decoder;    \/\/\/< FLAC decoder$/;"	m	class:sf::priv::SoundFileReaderFlac
m_deepestSection	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        Ptr<SectionNode> m_deepestSection;$/;"	m	struct:Catch::CumulativeReporterBase
m_defaultView	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget
m_defaultView	.\include\SFML\Graphics\RenderTarget.hpp	/^    View        m_defaultView; \/\/\/< Default view$/;"	m	class:sf::RenderTarget
m_delegate	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^    WindowImplDelegateRef m_delegate;   \/\/\/< Implementation in Obj-C.$/;"	m	class:sf::priv::WindowImplCocoa
m_delegate	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        id<iTchRunnerDelegate> m_delegate;$/;"	m	class:Catch::iTchRunnerReporter
m_depthBuffer	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^    unsigned int m_depthBuffer; \/\/\/< Optional depth buffer attached to the frame buffer$/;"	m	class:sf::priv::RenderTextureImplFBO
m_depthbuffer	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    GLuint m_depthbuffer;   \/\/\/< Depth render buffer$/;"	m	class:sf::priv::EaglContext
m_desc	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    report_desc_t            m_desc;           \/\/\/< USB report descriptor$/;"	m	class:sf::priv::JoystickImpl
m_deviceContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^    HDC   m_deviceContext; \/\/\/< Device context associated to the context$/;"	m	class:sf::priv::WglContext
m_deviceName	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    std::string        m_deviceName;         \/\/\/< Name of the audio capture device$/;"	m	class:sf::SoundRecorder
m_deviceName	.\include\SFML\Audio\SoundRecorder.hpp	/^    std::string        m_deviceName;         \/\/\/< Name of the audio capture device$/;"	m	class:sf::SoundRecorder
m_directory	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse
m_directory	.\include\SFML\Network\Ftp.hpp	/^        std::string m_directory; \/\/\/< Directory extracted from the response message$/;"	m	class:sf::Ftp::DirectoryResponse
m_display	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^    EGLDisplay  m_display; \/\/\/< The internal EGL display$/;"	m	class:sf::priv::EglContext
m_display	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^        ::Display* m_display;$/;"	m	class:__anon145::GlxErrorHandler	file:
m_display	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^    ::Display*        m_display;    \/\/\/< Connection to the X server$/;"	m	class:sf::priv::GlxContext
m_display	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    ::Display*                        m_display;         \/\/\/< Pointer to the display$/;"	m	class:sf::priv::WindowImplX11
m_duration	.\dep\SFML\include\SFML\Audio\Music.hpp	/^    Time               m_duration; \/\/\/< Music duration$/;"	m	class:sf::Music
m_duration	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer
m_duration	.\include\SFML\Audio\Music.hpp	/^    Time               m_duration; \/\/\/< Music duration$/;"	m	class:sf::Music
m_duration	.\include\SFML\Audio\SoundBuffer.hpp	/^    Time               m_duration; \/\/\/< Sound duration$/;"	m	class:sf::SoundBuffer
m_enabled	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	/^    bool m_enabled;        \/\/\/< Enable state of the sensor$/;"	m	class:sf::priv::SensorImpl
m_encoder	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^    FLAC__StreamEncoder* m_encoder;      \/\/\/< FLAC stream encoder$/;"	m	class:sf::priv::SoundFileWriterFlac
m_endBuffers	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    bool          m_endBuffers[BufferCount]; \/\/\/< Each buffer is marked as "end buffer" or not, for proper duration calculation$/;"	m	class:sf::SoundStream
m_endBuffers	.\include\SFML\Audio\SoundStream.hpp	/^    bool          m_endBuffers[BufferCount]; \/\/\/< Each buffer is marked as "end buffer" or not, for proper duration calculation$/;"	m	class:sf::SoundStream
m_entryPoint	.\dep\SFML\include\SFML\System\Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread
m_entryPoint	.\include\SFML\System\Thread.hpp	/^    priv::ThreadFunc* m_entryPoint; \/\/\/< Abstraction of the function to run$/;"	m	class:sf::Thread
m_epsilon	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        double m_epsilon;$/;"	m	class:Catch::Detail::Approx
m_events	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^    std::queue<Event> m_events;                          \/\/\/< Queue of available events$/;"	m	class:sf::priv::WindowImpl
m_exceptionTranslatorRegistry	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^            ExceptionTranslatorRegistry m_exceptionTranslatorRegistry;$/;"	m	class:Catch::__anon180::RegistryHub
m_exclusion	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        bool m_exclusion;$/;"	m	class:Catch::TestSpecParser
m_exprComponents	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        } m_exprComponents;$/;"	m	class:Catch::ResultBuilder	typeref:struct:Catch::ResultBuilder::ExprComponents
m_exprComponents	.\include\sol\Catch\single_include\catch.hpp	/^        } m_exprComponents;$/;"	m	class:Catch::ResultBuilder	typeref:struct:Catch::ResultBuilder::ExprComponents
m_face	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_face	.\include\SFML\Graphics\Font.hpp	/^    void*                      m_face;        \/\/\/< Pointer to the internal font face (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_factories	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^        FactoryMap m_factories;$/;"	m	class:Catch::ReporterRegistry
m_fboAttachment	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    bool         m_fboAttachment; \/\/\/< Is this texture owned by a framebuffer object?$/;"	m	class:sf::Texture
m_fboAttachment	.\include\SFML\Graphics\Texture.hpp	/^    bool         m_fboAttachment; \/\/\/< Is this texture owned by a framebuffer object?$/;"	m	class:sf::Texture
m_fields	.\dep\SFML\include\SFML\Network\Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request
m_fields	.\dep\SFML\include\SFML\Network\Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response
m_fields	.\include\SFML\Network\Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header associated to their value$/;"	m	class:sf::Http::Request
m_fields	.\include\SFML\Network\Http.hpp	/^        FieldTable   m_fields;       \/\/\/< Fields of the header$/;"	m	class:sf::Http::Response
m_file	.\dep\SFML\include\SFML\Audio\Music.hpp	/^    InputSoundFile     m_file;     \/\/\/< The streamed music file$/;"	m	class:sf::Music
m_file	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream
m_file	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^    std::FILE* m_file; \/\/\/< stdio file stream$/;"	m	class:sf::FileInputStream
m_file	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^    std::ofstream    m_file;         \/\/ output file$/;"	m	class:sf::priv::SoundFileWriterOgg
m_file	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^    std::ofstream m_file;         \/\/\/< File stream to write to$/;"	m	class:sf::priv::SoundFileWriterWav
m_file	.\dep\SFML\src\SFML\System\Android\ResourceStream.hpp	/^    AAsset* m_file; \/\/\/< The asset file to read$/;"	m	class:sf::priv::ResourceStream
m_file	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    int                      m_file;           \/\/\/< File descriptor of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_file	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^    int                          m_file;                 \/\/\/< File descriptor of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_file	.\include\SFML\Audio\Music.hpp	/^    InputSoundFile     m_file;     \/\/\/< The streamed music file$/;"	m	class:sf::Music
m_file	.\include\SFML\System\FileInputStream.hpp	/^    priv::ResourceStream* m_file;$/;"	m	class:sf::FileInputStream
m_file	.\include\SFML\System\FileInputStream.hpp	/^    std::FILE* m_file; \/\/\/< stdio file stream$/;"	m	class:sf::FileInputStream
m_fileInfo	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    std::string m_fileInfo;$/;"	m	class:Catch::CompositeGenerator
m_fillColor	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape
m_fillColor	.\include\SFML\Graphics\Shape.hpp	/^    Color          m_fillColor;        \/\/\/< Fill color$/;"	m	class:sf::Shape
m_filters	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        std::vector<Filter> m_filters;$/;"	m	class:Catch::TestSpec
m_floatingArg	.\include\sol\Catch\include\external\clara.h	/^        ArgAutoPtr m_floatingArg;$/;"	m	class:Clara::CommandLine
m_font	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    const Font*         m_font;               \/\/\/< Font used to display the string$/;"	m	class:sf::Text
m_font	.\include\SFML\Graphics\Text.hpp	/^    const Font*         m_font;               \/\/\/< Font used to display the string$/;"	m	class:sf::Text
m_forWhat	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        ForWhat m_forWhat;$/;"	m	class:Catch::XmlEncode
m_format	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    Uint32        m_format;                  \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream
m_format	.\include\SFML\Audio\SoundStream.hpp	/^    Uint32        m_format;                  \/\/\/< Format of the internal sound buffers$/;"	m	class:sf::SoundStream
m_frameBuffer	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^    unsigned int m_frameBuffer; \/\/\/< OpenGL frame buffer object$/;"	m	class:sf::priv::RenderTextureImplFBO
m_frameTimeLimit	.\dep\SFML\include\SFML\Window\Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window
m_frameTimeLimit	.\include\SFML\Window\Window.hpp	/^    Time              m_frameTimeLimit; \/\/\/< Current framerate limit$/;"	m	class:sf::Window
m_framebuffer	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    GLuint m_framebuffer;   \/\/\/< Frame buffer associated to the context$/;"	m	class:sf::priv::EaglContext
m_from	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    T m_from;$/;"	m	class:Catch::BetweenGenerator
m_ftp	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^    Ftp&      m_ftp;        \/\/\/< Reference to the owner Ftp instance$/;"	m	class:sf::Ftp::DataChannel	file:
m_fullConfig	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Ptr<IConfig const> m_fullConfig;$/;"	m	struct:Catch::ReporterConfig
m_fullscreen	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    bool                              m_fullscreen;      \/\/\/< Is window in fullscreen?$/;"	m	class:sf::priv::WindowImplX11
m_fun	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        TestFunction m_fun;$/;"	m	class:Catch::FreeFunctionTestCase
m_functions	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        std::vector<TestCase> m_functions;$/;"	m	class:Catch::TestRegistry
m_generatorsByName	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        std::map<std::string, IGeneratorInfo*> m_generatorsByName;$/;"	m	class:Catch::GeneratorsForTest
m_generatorsByTestName	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        std::map<std::string, IGeneratorsForTest*> m_generatorsByTestName;$/;"	m	class:Catch::Context
m_generatorsInOrder	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        std::vector<IGeneratorInfo*> m_generatorsInOrder;$/;"	m	class:Catch::GeneratorsForTest
m_geometryNeedUpdate	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    mutable bool        m_geometryNeedUpdate; \/\/\/< Does the geometry need to be recomputed?$/;"	m	class:sf::Text
m_geometryNeedUpdate	.\include\SFML\Graphics\Text.hpp	/^    mutable bool        m_geometryNeedUpdate; \/\/\/< Does the geometry need to be recomputed?$/;"	m	class:sf::Text
m_handle	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    HWND     m_handle;           \/\/\/< Win32 handle of the window$/;"	m	class:sf::priv::WindowImplWin32
m_hasFocus	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^    bool m_hasFocus;$/;"	m	class:sf::priv::WindowImplAndroid
m_hasFocus	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^    bool              m_hasFocus;       \/\/\/< Current focus state of the window$/;"	m	class:sf::priv::WindowImplUIKit
m_headerPrinted	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        bool m_headerPrinted;$/;"	m	struct:Catch::ConsoleReporter
m_headerPrintedForThisSection	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        bool m_headerPrintedForThisSection;$/;"	m	struct:Catch::TeamCityReporter
m_height	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^    unsigned int m_height;  \/\/\/< Height of the P-Buffer$/;"	m	class:sf::priv::RenderTextureImplDefault
m_hiddenCursor	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    Cursor                            m_hiddenCursor;    \/\/\/< As X11 doesn't provide cursor hidding, we must create a transparent one$/;"	m	class:sf::priv::WindowImplX11
m_highestSpecifiedArgPosition	.\include\sol\Catch\include\external\clara.h	/^        int m_highestSpecifiedArgPosition;$/;"	m	class:Clara::CommandLine
m_host	.\dep\SFML\include\SFML\Network\Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http
m_host	.\include\SFML\Network\Http.hpp	/^    IpAddress      m_host;       \/\/\/< Web host address$/;"	m	class:sf::Http
m_hostName	.\dep\SFML\include\SFML\Network\Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http
m_hostName	.\include\SFML\Network\Http.hpp	/^    std::string    m_hostName;   \/\/\/< Web host name$/;"	m	class:sf::Http
m_icon	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    HICON    m_icon;             \/\/\/< Custom icon assigned to the window$/;"	m	class:sf::priv::WindowImplWin32
m_id	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    int                      m_id;             \/\/\/< USB id$/;"	m	class:sf::priv::JoystickImpl
m_identification	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	/^    Joystick::Identification m_identification; \/\/\/< Joystick identification$/;"	m	class:sf::priv::JoystickImpl
m_identification	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    Joystick::Identification m_identification; \/\/\/< Joystick identification$/;"	m	class:sf::priv::JoystickImpl
m_identification	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    Joystick::Identification m_identification; \/\/\/< Joystick identification$/;"	m	class:sf::priv::JoystickImpl
m_identification	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^    sf::Joystick::Identification m_identification;       \/\/\/< Identification of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_identification	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^    Joystick::Identification m_identification; \/\/\/< Joystick identification$/;"	m	class:sf::priv::JoystickImpl
m_impl	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture
m_impl	.\dep\SFML\include\SFML\Network\SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-specific types)$/;"	m	class:sf::SocketSelector
m_impl	.\dep\SFML\include\SFML\System\Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread
m_impl	.\dep\SFML\include\SFML\System\ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal
m_impl	.\dep\SFML\include\SFML\Window\Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window
m_impl	.\include\SFML\Graphics\RenderTexture.hpp	/^    priv::RenderTextureImpl* m_impl;    \/\/\/< Platform\/hardware specific implementation$/;"	m	class:sf::RenderTexture
m_impl	.\include\SFML\Network\SocketSelector.hpp	/^    SocketSelectorImpl* m_impl; \/\/\/< Opaque pointer to the implementation (which requires OS-specific types)$/;"	m	class:sf::SocketSelector
m_impl	.\include\SFML\System\Thread.hpp	/^    priv::ThreadImpl* m_impl;       \/\/\/< OS-specific implementation of the thread$/;"	m	class:sf::Thread
m_impl	.\include\SFML\System\ThreadLocal.hpp	/^    priv::ThreadLocalImpl* m_impl; \/\/\/< Pointer to the OS specific implementation$/;"	m	class:sf::ThreadLocal
m_impl	.\include\SFML\Window\Window.hpp	/^    priv::WindowImpl* m_impl;           \/\/\/< Platform-specific implementation of the window$/;"	m	class:sf::Window
m_indent	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        std::string m_indent;$/;"	m	class:Catch::XmlWriter
m_index	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.hpp	/^    DWORD m_index; \/\/\/< Index of our thread-local storage slot$/;"	m	class:sf::priv::ThreadLocalImpl
m_index	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	/^    int m_index;                               \/\/\/< Index of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_index	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	/^    unsigned int   m_index;  \/\/\/< Index of the sensor$/;"	m	class:sf::priv::SensorImpl
m_index	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    unsigned int             m_index;          \/\/\/< SFML index$/;"	m	class:sf::priv::JoystickImpl
m_index	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^    unsigned int             m_index;          \/\/\/< Index of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_index	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        int m_index;$/;"	m	class:Catch::TestCaseTracking::IndexTracker
m_info	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    Info                       m_info;        \/\/\/< Information about the font$/;"	m	class:sf::Font
m_info	.\include\SFML\Graphics\Font.hpp	/^    Info                       m_info;        \/\/\/< Information about the font$/;"	m	class:sf::Font
m_info	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_info	.\include\sol\Catch\include\internal\catch_message.h	/^        MessageInfo m_info;$/;"	m	class:Catch::ScopedMessage
m_info	.\include\sol\Catch\include\internal\catch_message.h	/^        MessageInfo m_info;$/;"	m	struct:Catch::MessageBuilder
m_info	.\include\sol\Catch\include\internal\catch_section.h	/^        SectionInfo m_info;$/;"	m	class:Catch::Section
m_info	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionInfo m_info;$/;"	m	class:Catch::AssertionResult
m_inputContext	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    XIC                               m_inputContext;    \/\/\/< Input context used to get unicode input in our window$/;"	m	class:sf::priv::WindowImplX11
m_inputMethod	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    XIM                               m_inputMethod;     \/\/\/< Input method linked to the X display$/;"	m	class:sf::priv::WindowImplX11
m_insideBounds	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape
m_insideBounds	.\include\SFML\Graphics\Shape.hpp	/^    FloatRect      m_insideBounds;     \/\/\/< Bounding rectangle of the inside (fill)$/;"	m	class:sf::Shape
m_invTransformUpdated	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse transform needs to be updated$/;"	m	class:sf::View
m_invTransformUpdated	.\include\SFML\Graphics\View.hpp	/^    mutable bool      m_invTransformUpdated; \/\/\/< Internal state telling if the inverse transform needs to be updated$/;"	m	class:sf::View
m_inverseTransform	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_inverseTransform	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform corresponding to the view$/;"	m	class:sf::View
m_inverseTransform	.\include\SFML\Graphics\Transformable.hpp	/^    mutable Transform m_inverseTransform;           \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_inverseTransform	.\include\SFML\Graphics\View.hpp	/^    mutable Transform m_inverseTransform;    \/\/\/< Precomputed inverse projection transform corresponding to the view$/;"	m	class:sf::View
m_inverseTransformNeedUpdate	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_inverseTransformNeedUpdate	.\include\SFML\Graphics\Transformable.hpp	/^    mutable bool      m_inverseTransformNeedUpdate; \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_isActive	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	/^    bool      m_isActive; \/\/\/< Thread state (active or inactive)$/;"	m	class:sf::priv::ThreadImpl
m_isBlocking	.\dep\SFML\include\SFML\Network\Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket
m_isBlocking	.\include\SFML\Network\Socket.hpp	/^    bool         m_isBlocking; \/\/\/< Current blocking mode of the socket$/;"	m	class:sf::Socket
m_isCapturing	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    bool               m_isCapturing;        \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder
m_isCapturing	.\include\SFML\Audio\SoundRecorder.hpp	/^    bool               m_isCapturing;        \/\/\/< Capturing state$/;"	m	class:sf::SoundRecorder
m_isExternal	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    bool                              m_isExternal;      \/\/\/< Tell whether the window has been created externally or by SFML$/;"	m	class:sf::priv::WindowImplX11
m_isRepeated	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture
m_isRepeated	.\include\SFML\Graphics\Texture.hpp	/^    bool         m_isRepeated;    \/\/\/< Is the texture in repeat mode?$/;"	m	class:sf::Texture
m_isSmooth	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture
m_isSmooth	.\include\SFML\Graphics\Texture.hpp	/^    bool         m_isSmooth;      \/\/\/< Status of the smooth filter$/;"	m	class:sf::Texture
m_isStreaming	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    bool          m_isStreaming;             \/\/\/< Streaming state (true = playing, false = stopped)$/;"	m	class:sf::SoundStream
m_isStreaming	.\include\SFML\Audio\SoundStream.hpp	/^    bool          m_isStreaming;             \/\/\/< Streaming state (true = playing, false = stopped)$/;"	m	class:sf::SoundStream
m_isValid	.\dep\SFML\include\SFML\Network\Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet
m_isValid	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^    bool              m_isValid;                    \/\/\/< If any error occurs this variable is false$/;"	m	class:sf::priv::HIDInputManager
m_isValid	.\include\SFML\Network\Packet.hpp	/^    bool              m_isValid; \/\/\/< Reading state of the packet$/;"	m	class:sf::Packet
m_joystickCount	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	/^    unsigned int    m_joystickCount;\/\/\/< Number of joysticks currently connected$/;"	m	class:sf::priv::HIDJoystickManager
m_joystickStates	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^    JoystickState     m_joystickStates[Joystick::Count]; \/\/\/< Previous state of the joysticks$/;"	m	class:sf::priv::WindowImpl
m_joystickThreshold	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^    float             m_joystickThreshold;               \/\/\/< Joystick threshold (minimum motion for "move" event to be generated)$/;"	m	class:sf::priv::WindowImpl
m_joysticks	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^    Item m_joysticks[Joystick::Count]; \/\/\/< Joysticks information and state$/;"	m	class:sf::priv::JoystickManager
m_key	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.hpp	/^    pthread_key_t m_key; \/\/\/< Index of our thread-local storage slot$/;"	m	class:sf::priv::ThreadLocalImpl
m_keyRepeat	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    bool                              m_keyRepeat;       \/\/\/< Is the KeyRepeat feature enabled?$/;"	m	class:sf::priv::WindowImplX11
m_keyRepeatEnabled	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    bool     m_keyRepeatEnabled; \/\/\/< Automatic key-repeat state for keydown events$/;"	m	class:sf::priv::WindowImplWin32
m_keys	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^    IOHIDElements     m_keys[Keyboard::KeyCount];   \/\/\/< All the keys on any connected keyboard$/;"	m	class:sf::priv::HIDInputManager
m_label	.\include\sol\Catch\include\internal\catch_common.h	/^        std::string m_label;$/;"	m	struct:Catch::pluralise
m_label	.\include\sol\Catch\single_include\catch.hpp	/^        std::string m_label;$/;"	m	struct:Catch::pluralise
m_lastAssertionInfo	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        AssertionInfo m_lastAssertionInfo;$/;"	m	class:Catch::RunContext
m_lastResult	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        AssertionResult m_lastResult;$/;"	m	class:Catch::RunContext
m_lastSize	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    Vector2u m_lastSize;         \/\/\/< The last handled size of the window$/;"	m	class:sf::priv::WindowImplWin32
m_layout	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^    UCKeyboardLayout* m_layout;                     \/\/\/< Current Keyboard Layout$/;"	m	class:sf::priv::HIDInputManager
m_layoutData	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^    CFDataRef         m_layoutData;                 \/\/\/< CFData containing the layout$/;"	m	class:sf::priv::HIDInputManager
m_legacyReporter	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.h	/^        Ptr<IReporter> m_legacyReporter;$/;"	m	class:Catch::LegacyReporterAdapter
m_length	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    int                      m_length;         \/\/\/< Buffer length$/;"	m	class:sf::priv::JoystickImpl
m_lhs	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    T m_lhs;$/;"	m	class:Catch::ExpressionLhs
m_library	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_library	.\include\SFML\Graphics\Font.hpp	/^    void*                      m_library;     \/\/\/< Pointer to the internal library interface (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_lineInfo	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_lineInfo	.\include\sol\Catch\single_include\catch.hpp	/^        SourceLineInfo m_lineInfo;$/;"	m	class:Catch::NotImplementedException
m_listeners	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^        Listeners m_listeners;$/;"	m	class:Catch::ReporterRegistry
m_listing	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the data$/;"	m	class:sf::Ftp::ListingResponse
m_listing	.\include\SFML\Network\Ftp.hpp	/^        std::vector<std::string> m_listing; \/\/\/< Directory\/file names extracted from the data$/;"	m	class:sf::Ftp::ListingResponse
m_locationIDs	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^JoystickImpl::Location JoystickImpl::m_locationIDs[sf::Joystick::Count] = { 0 };$/;"	m	class:sf::priv::JoystickImpl	file:
m_locationIDs	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^    static Location m_locationIDs[sf::Joystick::Count]; \/\/\/< Global Joystick register$/;"	m	class:sf::priv::JoystickImpl
m_lock	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^        sf::Lock   m_lock;$/;"	m	class:__anon145::GlxErrorHandler	file:
m_loop	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    bool          m_loop;                    \/\/\/< Loop flag (true to loop, false to play once)$/;"	m	class:sf::SoundStream
m_loop	.\include\SFML\Audio\SoundStream.hpp	/^    bool          m_loop;                    \/\/\/< Loop flag (true to loop, false to play once)$/;"	m	class:sf::SoundStream
m_majorVersion	.\dep\SFML\include\SFML\Network\Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request
m_majorVersion	.\dep\SFML\include\SFML\Network\Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response
m_majorVersion	.\include\SFML\Network\Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Request
m_majorVersion	.\include\SFML\Network\Http.hpp	/^        unsigned int m_majorVersion; \/\/\/< Major HTTP version$/;"	m	class:sf::Http::Response
m_manager	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^    IOHIDManagerRef   m_manager;                    \/\/\/< HID Manager$/;"	m	class:sf::priv::HIDInputManager
m_manager	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	/^    IOHIDManagerRef m_manager;      \/\/\/< HID Manager$/;"	m	class:sf::priv::HIDJoystickManager
m_mapping	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^    char                         m_mapping[ABS_MAX + 1]; \/\/\/< Axes mapping (index to axis id)$/;"	m	class:sf::priv::JoystickImpl
m_matcher	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            Ptr< Matcher<ExpressionT> > m_matcher;$/;"	m	class:Catch::Matchers::Impl::Generic::Not
m_matcher	.\include\sol\Catch\single_include\catch.hpp	/^            Ptr< Matcher<ExpressionT> > m_matcher;$/;"	m	class:Catch::Matchers::Impl::Generic::Not
m_matchers	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AllOf
m_matchers	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AnyOf
m_matchers	.\include\sol\Catch\single_include\catch.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AllOf
m_matchers	.\include\sol\Catch\single_include\catch.hpp	/^            std::vector<Ptr<Matcher<ExpressionT> > > m_matchers;$/;"	m	class:Catch::Matchers::Impl::Generic::AnyOf
m_matrix	.\dep\SFML\include\SFML\Graphics\Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform
m_matrix	.\include\SFML\Graphics\Transform.hpp	/^    float m_matrix[16]; \/\/\/< 4x4 matrix defining the transformation$/;"	m	class:sf::Transform
m_message	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response
m_message	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    std::string m_message;$/;"	m	class:LogcatStream
m_message	.\include\SFML\Network\Ftp.hpp	/^        std::string m_message; \/\/\/< Last message received from the server$/;"	m	class:sf::Ftp::Response
m_messages	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::vector<MessageInfo> m_messages;$/;"	m	class:Catch::RunContext
m_method	.\dep\SFML\include\SFML\Network\Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request
m_method	.\include\SFML\Network\Http.hpp	/^        Method       m_method;       \/\/\/< Method to use for the request$/;"	m	class:sf::Http::Request
m_method	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_method	.\include\sol\Catch\single_include\catch.hpp	/^    void (C::*m_method)();$/;"	m	class:Catch::MethodTestCase
m_microseconds	.\dep\SFML\include\SFML\System\Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time
m_microseconds	.\include\SFML\System\Time.hpp	/^    Int64 m_microseconds; \/\/\/< Time value stored as microseconds$/;"	m	class:sf::Time
m_minorVersion	.\dep\SFML\include\SFML\Network\Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request
m_minorVersion	.\dep\SFML\include\SFML\Network\Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response
m_minorVersion	.\include\SFML\Network\Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Request
m_minorVersion	.\include\SFML\Network\Http.hpp	/^        unsigned int m_minorVersion; \/\/\/< Minor HTTP version$/;"	m	class:sf::Http::Response
m_mode	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        Mode m_mode;$/;"	m	class:Catch::TestSpecParser
m_mouseInside	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    bool     m_mouseInside;      \/\/\/< Mouse is inside the window?$/;"	m	class:sf::priv::WindowImplWin32
m_moved	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^        bool m_moved;$/;"	m	struct:Catch::Colour
m_msg	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    std::string m_msg;$/;"	m	class:CustomException	file:
m_msg	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    std::string m_msg;$/;"	m	class:CustomStdException	file:
m_mutex	.\dep\SFML\include\SFML\Audio\Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music
m_mutex	.\dep\SFML\include\SFML\System\Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock
m_mutex	.\dep\SFML\src\SFML\System\Unix\MutexImpl.hpp	/^    pthread_mutex_t m_mutex; \/\/\/< pthread handle of the mutex$/;"	m	class:sf::priv::MutexImpl
m_mutex	.\dep\SFML\src\SFML\System\Win32\MutexImpl.hpp	/^    CRITICAL_SECTION m_mutex; \/\/\/< Win32 handle of the mutex$/;"	m	class:sf::priv::MutexImpl
m_mutex	.\include\SFML\Audio\Music.hpp	/^    Mutex              m_mutex;    \/\/\/< Mutex protecting the data$/;"	m	class:sf::Music
m_mutex	.\include\SFML\System\Lock.hpp	/^    Mutex& m_mutex; \/\/\/< Mutex to lock \/ unlock$/;"	m	class:sf::Lock
m_mutexImpl	.\dep\SFML\include\SFML\System\Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex
m_mutexImpl	.\include\SFML\System\Mutex.hpp	/^    priv::MutexImpl* m_mutexImpl; \/\/\/< OS-specific implementation$/;"	m	class:sf::Mutex
m_name	.\include\sol\Catch\include\internal\catch_section.h	/^        std::string m_name;$/;"	m	class:Catch::Section
m_name	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        std::string m_name;$/;"	m	class:Catch::RunningSection
m_name	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            std::string m_name;$/;"	m	class:Catch::TestCaseTracking::TrackerBase::TrackerHasName
m_name	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        std::string m_name;$/;"	m	class:Catch::TestCaseTracking::TrackerBase
m_needsNewline	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        bool m_needsNewline;$/;"	m	class:Catch::XmlWriter
m_num	.\include\sol\test_usertypes.cpp	/^	int m_num;$/;"	m	class:Base	file:
m_offset	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream
m_offset	.\include\SFML\System\MemoryInputStream.hpp	/^    Int64       m_offset; \/\/\/< Current reading position$/;"	m	class:sf::MemoryInputStream
m_ofs	.\include\sol\Catch\include\internal\catch_stream.h	/^        mutable std::ofstream m_ofs;$/;"	m	class:Catch::FileStream
m_ogg	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^    ogg_stream_state m_ogg;          \/\/ ogg stream$/;"	m	class:sf::priv::SoundFileWriterOgg
m_oldVideoMode	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    xcb_randr_get_screen_info_reply_t m_oldVideoMode;    \/\/\/< Video mode in use before we switch to fullscreen$/;"	m	class:sf::priv::WindowImplX11
m_options	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Arg> m_options;$/;"	m	class:Clara::CommandLine
m_origin	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/scaling of the object$/;"	m	class:sf::Transformable
m_origin	.\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_origin;                     \/\/\/< Origin of translation\/rotation\/scaling of the object$/;"	m	class:sf::Transformable
m_os	.\include\sol\Catch\include\internal\catch_stream.h	/^        mutable std::ostream m_os;$/;"	m	class:Catch::CoutStream
m_os	.\include\sol\Catch\include\internal\catch_stream.h	/^        mutable std::ostream m_os;$/;"	m	class:Catch::DebugOutStream
m_os	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        std::ostream* m_os;$/;"	m	class:Catch::XmlWriter
m_oss	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::ostringstream m_oss;$/;"	m	class:Catch::StreamRedirect
m_ostreamInit	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        std::ios_base::Init m_ostreamInit; \/\/ Forces cout\/ cerr to be initialised$/;"	m	class:Catch::TestRegistry
m_other	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            SectionInfo const& m_other;$/;"	m	struct:Catch::CumulativeReporterBase::BySectionInfo
m_outlineColor	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape
m_outlineColor	.\include\SFML\Graphics\Shape.hpp	/^    Color          m_outlineColor;     \/\/\/< Outline color$/;"	m	class:sf::Shape
m_outlineThickness	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape
m_outlineThickness	.\include\SFML\Graphics\Shape.hpp	/^    float          m_outlineThickness; \/\/\/< Thickness of the shape's outline$/;"	m	class:sf::Shape
m_outlineVertices	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape
m_outlineVertices	.\include\SFML\Graphics\Shape.hpp	/^    VertexArray    m_outlineVertices;  \/\/\/< Vertex array containing the outline geometry$/;"	m	class:sf::Shape
m_ownsWindow	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^    bool              m_ownsWindow; \/\/\/< Do we own the window associated to the context?$/;"	m	class:sf::priv::GlxContext
m_ownsWindow	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^    bool  m_ownsWindow;    \/\/\/< Do we own the target window?$/;"	m	class:sf::priv::WglContext
m_p	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr
m_p	.\include\sol\Catch\single_include\catch.hpp	/^        T* m_p;$/;"	m	class:Catch::Ptr
m_pLogFile	.\src\include\Logger.h	/^	FILE* m_pLogFile;$/;"	m	class:Logger
m_pages	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by character size$/;"	m	class:sf::Font
m_pages	.\include\SFML\Graphics\Font.hpp	/^    mutable PageTable          m_pages;       \/\/\/< Table containing the glyphs pages by character size$/;"	m	class:sf::Font
m_params	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    ParamTable   m_params;         \/\/\/< Parameters location cache$/;"	m	class:sf::Shader
m_params	.\include\SFML\Graphics\Shader.hpp	/^    ParamTable   m_params;         \/\/\/< Parameters location cache$/;"	m	class:sf::Shader
m_parent	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        RunningSection* m_parent;$/;"	m	class:Catch::RunningSection
m_parent	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        ITracker* m_parent;$/;"	m	class:Catch::TestCaseTracking::TrackerBase
m_pattern	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        std::string m_pattern;$/;"	m	class:Catch::WildcardPattern
m_patterns	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            std::vector<Ptr<Pattern> > m_patterns;$/;"	m	struct:Catch::TestSpec::Filter
m_pendingPacket	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket
m_pendingPacket	.\include\SFML\Network\TcpSocket.hpp	/^    PendingPacket m_pendingPacket; \/\/\/< Temporary data of the packet currently being received$/;"	m	class:sf::TcpSocket
m_pixelBuffer	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels before being written to the texture$/;"	m	class:sf::Font
m_pixelBuffer	.\include\SFML\Graphics\Font.hpp	/^    mutable std::vector<Uint8> m_pixelBuffer; \/\/\/< Pixel buffer holding a glyph's pixels before being written to the texture$/;"	m	class:sf::Font
m_pixels	.\dep\SFML\include\SFML\Graphics\Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image
m_pixels	.\include\SFML\Graphics\Image.hpp	/^    std::vector<Uint8> m_pixels; \/\/\/< Pixels of the image$/;"	m	class:sf::Image
m_pixelsFlipped	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture
m_pixelsFlipped	.\include\SFML\Graphics\Texture.hpp	/^    mutable bool m_pixelsFlipped; \/\/\/< To work around the inconsistency in Y orientation$/;"	m	class:sf::Texture
m_pointCount	.\dep\SFML\include\SFML\Graphics\CircleShape.hpp	/^    std::size_t m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape
m_pointCount	.\include\SFML\Graphics\CircleShape.hpp	/^    std::size_t m_pointCount; \/\/\/< Number of points composing the circle$/;"	m	class:sf::CircleShape
m_pointer	.\dep\SFML\src\SFML\Window\Unix\ScopedXcbPtr.hpp	/^    T* m_pointer; \/\/\/< Stored pointer$/;"	m	class:sf::priv::ScopedXcbPtr
m_points	.\dep\SFML\include\SFML\Graphics\ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape
m_points	.\include\SFML\Graphics\ConvexShape.hpp	/^    std::vector<Vector2f> m_points; \/\/\/< Points composing the convex polygon$/;"	m	class:sf::ConvexShape
m_port	.\dep\SFML\include\SFML\Network\Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http
m_port	.\include\SFML\Network\Http.hpp	/^    unsigned short m_port;       \/\/\/< Port used for connection with host$/;"	m	class:sf::Http
m_pos	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        std::size_t m_start, m_pos;$/;"	m	class:Catch::TestSpecParser
m_position	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D world$/;"	m	class:sf::Transformable
m_position	.\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_position;                   \/\/\/< Position of the object in the 2D world$/;"	m	class:sf::Transformable
m_positionalArgs	.\include\sol\Catch\include\external\clara.h	/^        std::map<int, Arg> m_positionalArgs;$/;"	m	class:Clara::CommandLine
m_prevBuf	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::streambuf* m_prevBuf;$/;"	m	class:Catch::StreamRedirect
m_previousHandler	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^        int      (*m_previousHandler)(::Display*, XErrorEvent*);$/;"	m	class:__anon145::GlxErrorHandler	file:
m_previousSize	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    Vector2i                          m_previousSize;    \/\/\/< Previous size of the window, to find if a ConfigureNotify event is a resize event (could be a move event only)$/;"	m	class:sf::priv::WindowImplX11
m_primitiveType	.\dep\SFML\include\SFML\Graphics\VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray
m_primitiveType	.\include\SFML\Graphics\VertexArray.hpp	/^    PrimitiveType       m_primitiveType; \/\/\/< Type of primitives to draw$/;"	m	class:sf::VertexArray
m_processingInterval	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    Time               m_processingInterval; \/\/\/< Time period between calls to onProcessSamples$/;"	m	class:sf::SoundRecorder
m_processingInterval	.\include\SFML\Audio\SoundRecorder.hpp	/^    Time               m_processingInterval; \/\/\/< Time period between calls to onProcessSamples$/;"	m	class:sf::SoundRecorder
m_radius	.\dep\SFML\include\SFML\Graphics\CircleShape.hpp	/^    float       m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape
m_radius	.\include\SFML\Graphics\CircleShape.hpp	/^    float       m_radius;     \/\/\/< Radius of the circle$/;"	m	class:sf::CircleShape
m_rb	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& m_rb;$/;"	m	class:Catch::ExpressionLhs
m_rc	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_rc	.\include\sol\Catch\single_include\catch.hpp	/^        mutable unsigned int m_rc;$/;"	m	struct:Catch::SharedImpl
m_readPos	.\dep\SFML\include\SFML\Network\Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet
m_readPos	.\include\SFML\Network\Packet.hpp	/^    std::size_t       m_readPos; \/\/\/< Current reading position in the packet$/;"	m	class:sf::Packet
m_reader	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    SoundFileReader* m_reader;       \/\/\/< Reader that handles I\/O on the file's format$/;"	m	class:sf::InputSoundFile
m_reader	.\include\SFML\Audio\InputSoundFile.hpp	/^    SoundFileReader* m_reader;       \/\/\/< Reader that handles I\/O on the file's format$/;"	m	class:sf::InputSoundFile
m_refCount	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font
m_refCount	.\include\SFML\Graphics\Font.hpp	/^    int*                       m_refCount;    \/\/\/< Reference counter used by implicit sharing$/;"	m	class:sf::Font
m_registry	.\include\sol\Catch\include\internal\catch_tag_alias_registry.h	/^        std::map<std::string, TagAlias> m_registry;$/;"	m	class:Catch::TagAliasRegistry
m_reporter	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        Ptr<IStreamingReporter> m_reporter;$/;"	m	class:Catch::RunContext
m_reporterPrefs	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        ReporterPreferences m_reporterPrefs;$/;"	m	struct:Catch::CumulativeReporterBase
m_reporterPrefs	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        ReporterPreferences m_reporterPrefs;$/;"	m	struct:Catch::StreamingReporterBase
m_reporterRegistry	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^            ReporterRegistry m_reporterRegistry;$/;"	m	class:Catch::__anon180::RegistryHub
m_reporters	.\include\sol\Catch\include\reporters\catch_reporter_multi.hpp	/^    Reporters m_reporters;$/;"	m	class:Catch::MultipleReporters
m_resizing	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    bool     m_resizing;         \/\/\/< Is the window being resized?$/;"	m	class:sf::priv::WindowImplWin32
m_resultCapture	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        IResultCapture* m_resultCapture;$/;"	m	class:Catch::Context
m_resultData	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_resultData	.\include\sol\Catch\single_include\catch.hpp	/^        AssertionResultData m_resultData;$/;"	m	class:Catch::AssertionResult
m_rootSection	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        Ptr<SectionNode> m_rootSection;$/;"	m	struct:Catch::CumulativeReporterBase
m_rootTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        Ptr<ITracker> m_rootTracker;$/;"	m	class:Catch::TestCaseTracking::TrackerContext
m_rotation	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degrees$/;"	m	class:sf::Transformable
m_rotation	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in degrees$/;"	m	class:sf::View
m_rotation	.\include\SFML\Graphics\Transformable.hpp	/^    float             m_rotation;                   \/\/\/< Orientation of the object, in degrees$/;"	m	class:sf::Transformable
m_rotation	.\include\SFML\Graphics\View.hpp	/^    float             m_rotation;            \/\/\/< Angle of rotation of the view rectangle, in degrees$/;"	m	class:sf::View
m_runInfo	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        TestRunInfo m_runInfo;$/;"	m	class:Catch::RunContext
m_runState	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        CycleState m_runState;$/;"	m	class:Catch::TestCaseTracking::TrackerBase
m_runState	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        RunState m_runState;$/;"	m	class:Catch::TestCaseTracking::TrackerContext
m_runner	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        IRunner* m_runner;$/;"	m	class:Catch::Context
m_sampleCount	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    Uint64           m_sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	class:sf::InputSoundFile
m_sampleCount	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^    Uint64        m_sampleCount;  \/\/\/< Total number of samples written to the file$/;"	m	class:sf::priv::SoundFileWriterWav
m_sampleCount	.\include\SFML\Audio\InputSoundFile.hpp	/^    Uint64           m_sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	class:sf::InputSoundFile
m_sampleRate	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    unsigned int     m_sampleRate;   \/\/\/< Number of samples per second$/;"	m	class:sf::InputSoundFile
m_sampleRate	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    unsigned int       m_sampleRate;         \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder
m_sampleRate	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_sampleRate;              \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream
m_sampleRate	.\include\SFML\Audio\InputSoundFile.hpp	/^    unsigned int     m_sampleRate;   \/\/\/< Number of samples per second$/;"	m	class:sf::InputSoundFile
m_sampleRate	.\include\SFML\Audio\SoundRecorder.hpp	/^    unsigned int       m_sampleRate;         \/\/\/< Sample rate$/;"	m	class:sf::SoundRecorder
m_sampleRate	.\include\SFML\Audio\SoundStream.hpp	/^    unsigned int  m_sampleRate;              \/\/\/< Frequency (samples \/ second)$/;"	m	class:sf::SoundStream
m_samples	.\dep\SFML\include\SFML\Audio\Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music
m_samples	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer
m_samples	.\dep\SFML\include\SFML\Audio\SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_samples	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    std::vector<Int16> m_samples;            \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder
m_samples	.\include\SFML\Audio\Music.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Temporary buffer of samples$/;"	m	class:sf::Music
m_samples	.\include\SFML\Audio\SoundBuffer.hpp	/^    std::vector<Int16> m_samples;  \/\/\/< Samples buffer$/;"	m	class:sf::SoundBuffer
m_samples	.\include\SFML\Audio\SoundBufferRecorder.hpp	/^    std::vector<Int16> m_samples; \/\/\/< Temporary sample buffer to hold the recorded data$/;"	m	class:sf::SoundBufferRecorder
m_samples	.\include\SFML\Audio\SoundRecorder.hpp	/^    std::vector<Int16> m_samples;            \/\/\/< Buffer to store captured samples$/;"	m	class:sf::SoundRecorder
m_samples32	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^    std::vector<Int32>   m_samples32;    \/\/\/< Conversion buffer$/;"	m	class:sf::priv::SoundFileWriterFlac
m_samplesProcessed	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    Uint64        m_samplesProcessed;        \/\/\/< Number of buffers processed since beginning of the stream$/;"	m	class:sf::SoundStream
m_samplesProcessed	.\include\SFML\Audio\SoundStream.hpp	/^    Uint64        m_samplesProcessed;        \/\/\/< Number of buffers processed since beginning of the stream$/;"	m	class:sf::SoundStream
m_scale	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable
m_scale	.\include\SFML\Graphics\Transformable.hpp	/^    Vector2f          m_scale;                      \/\/\/< Scale of the object$/;"	m	class:sf::Transformable
m_scale	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        double m_scale;$/;"	m	class:Catch::Detail::Approx
m_screen	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    xcb_screen_t*                     m_screen;          \/\/\/< Screen identifier$/;"	m	class:sf::priv::WindowImplX11
m_sectionDepth	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        int m_sectionDepth;$/;"	m	class:Catch::XmlReporter
m_sectionIncluded	.\include\sol\Catch\include\internal\catch_section.h	/^        bool m_sectionIncluded;$/;"	m	class:Catch::Section
m_sectionStack	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<Ptr<SectionNode> > m_sectionStack;$/;"	m	struct:Catch::CumulativeReporterBase
m_sectionStack	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<SectionInfo> m_sectionStack;$/;"	m	struct:Catch::StreamingReporterBase
m_sections	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<std::vector<Ptr<SectionNode> > > m_sections;$/;"	m	struct:Catch::CumulativeReporterBase
m_sel	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        SEL m_sel;$/;"	m	class:Catch::OcMethod
m_sendPos	.\dep\SFML\include\SFML\Network\Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling partial sends)$/;"	m	class:sf::Packet
m_sendPos	.\include\SFML\Network\Packet.hpp	/^    std::size_t       m_sendPos; \/\/\/< Current send position in the packet (for handling partial sends)$/;"	m	class:sf::Packet
m_sensor	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	/^    const ASensor* m_sensor; \/\/\/< Android sensor structure$/;"	m	class:sf::priv::SensorImpl
m_sensor	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	/^    Sensor::Type m_sensor; \/\/\/< Type of the sensor$/;"	m	class:sf::priv::SensorImpl
m_sensorValue	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^    Vector3f          m_sensorValue[Sensor::Count];      \/\/\/< Previous value of the sensors$/;"	m	class:sf::priv::WindowImpl
m_sensors	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^    Item m_sensors[Sensor::Count]; \/\/\/< Sensors information and state$/;"	m	class:sf::priv::SensorManager
m_settings	.\dep\SFML\src\SFML\Window\GlContext.hpp	/^    ContextSettings m_settings; \/\/\/< Creation settings of the context$/;"	m	class:sf::priv::GlContext
m_shaderProgram	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader
m_shaderProgram	.\include\SFML\Graphics\Shader.hpp	/^    unsigned int m_shaderProgram;  \/\/\/< OpenGL identifier for the program$/;"	m	class:sf::Shader
m_shouldDebugBreak	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldDebugBreak	.\include\sol\Catch\single_include\catch.hpp	/^        bool m_shouldDebugBreak;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_shouldThrow	.\include\sol\Catch\single_include\catch.hpp	/^        bool m_shouldThrow;$/;"	m	class:Catch::ResultBuilder
m_showCursor	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^    bool                  m_showCursor; \/\/\/< Is the cursor displayed or hidden?$/;"	m	class:sf::priv::WindowImplCocoa
m_size	.\dep\SFML\include\SFML\Graphics\Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image
m_size	.\dep\SFML\include\SFML\Graphics\RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape
m_size	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture
m_size	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View
m_size	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream
m_size	.\dep\SFML\include\SFML\Window\Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window
m_size	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^    Vector2u m_size;$/;"	m	class:sf::priv::WindowImplAndroid
m_size	.\include\SFML\Graphics\Image.hpp	/^    Vector2u           m_size;   \/\/\/< Image size$/;"	m	class:sf::Image
m_size	.\include\SFML\Graphics\RectangleShape.hpp	/^    Vector2f m_size; \/\/\/< Size of the rectangle$/;"	m	class:sf::RectangleShape
m_size	.\include\SFML\Graphics\Texture.hpp	/^    Vector2u     m_size;          \/\/\/< Public texture size$/;"	m	class:sf::Texture
m_size	.\include\SFML\Graphics\View.hpp	/^    Vector2f          m_size;                \/\/\/< Size of the view, in scene coordinates$/;"	m	class:sf::View
m_size	.\include\SFML\System\MemoryInputStream.hpp	/^    Int64       m_size;   \/\/\/< Total size of the data$/;"	m	class:sf::MemoryInputStream
m_size	.\include\SFML\Window\Window.hpp	/^    Vector2u          m_size;           \/\/\/< Current size of the window$/;"	m	class:sf::Window
m_size	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        std::size_t m_size;$/;"	m	struct:Catch::GeneratorInfo
m_size	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        int m_size;$/;"	m	class:Catch::TestCaseTracking::IndexTracker
m_socket	.\dep\SFML\include\SFML\Network\Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket
m_socket	.\include\SFML\Network\Socket.hpp	/^    SocketHandle m_socket;     \/\/\/< Socket descriptor$/;"	m	class:sf::Socket
m_sortedFunctions	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        mutable std::vector<TestCase> m_sortedFunctions;$/;"	m	class:Catch::TestRegistry
m_sounds	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer
m_sounds	.\include\SFML\Audio\SoundBuffer.hpp	/^    mutable SoundList  m_sounds;   \/\/\/< List of sounds that are using this buffer$/;"	m	class:sf::SoundBuffer
m_source	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource
m_source	.\include\SFML\Audio\SoundSource.hpp	/^    unsigned int m_source; \/\/\/< OpenAL source identifier$/;"	m	class:sf::SoundSource
m_start	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        std::size_t m_start, m_pos;$/;"	m	class:Catch::TestSpecParser
m_startTime	.\dep\SFML\include\SFML\System\Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock
m_startTime	.\include\SFML\System\Clock.hpp	/^    Time m_startTime; \/\/\/< Time of last reset, in microseconds$/;"	m	class:sf::Clock
m_state	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^    vorbis_dsp_state m_state;        \/\/ current encoding state$/;"	m	class:sf::priv::SoundFileWriterOgg
m_state	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^    JoystickState            m_state;          \/\/\/< Current state of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_state	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^    JoystickState                m_state;                \/\/\/< Current state of the joystick$/;"	m	class:sf::priv::JoystickImpl
m_state	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        State m_state;$/;"	m	class:Catch::RunningSection
m_status	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response
m_status	.\dep\SFML\include\SFML\Network\Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response
m_status	.\include\SFML\Network\Ftp.hpp	/^        Status      m_status;  \/\/\/< Status code returned from the server$/;"	m	class:sf::Ftp::Response
m_status	.\include\SFML\Network\Http.hpp	/^        Status       m_status;       \/\/\/< Status code$/;"	m	class:sf::Http::Response
m_str	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            std::string m_str;$/;"	m	struct:Catch::Matchers::Impl::StdString::CasedString
m_str	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        std::string m_str;$/;"	m	class:Catch::XmlEncode
m_str	.\include\sol\Catch\single_include\catch.hpp	/^            std::string m_str;$/;"	m	struct:Catch::Matchers::Impl::StdString::CasedString
m_stream	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    InputStream*     m_stream;       \/\/\/< Input stream used to access the file's data$/;"	m	class:sf::InputSoundFile
m_stream	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    void*                      m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Font
m_stream	.\dep\SFML\include\SFML\Graphics\Image.hpp	/^    void*              m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Image
m_stream	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^    InputStream* m_stream;         \/\/\/< Source stream to read from$/;"	m	class:sf::priv::SoundFileReaderWav
m_stream	.\include\SFML\Audio\InputSoundFile.hpp	/^    InputStream*     m_stream;       \/\/\/< Input stream used to access the file's data$/;"	m	class:sf::InputSoundFile
m_stream	.\include\SFML\Graphics\Font.hpp	/^    void*                      m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Font
m_stream	.\include\SFML\Graphics\Image.hpp	/^    void*              m_stream; \/\/\/< Asset file streamer (if loaded from file)$/;"	m	class:sf::Image
m_stream	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::auto_ptr<IStream const> m_stream;$/;"	m	class:Catch::Config
m_stream	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::ostream* m_stream;$/;"	m	struct:Catch::ReporterConfig
m_stream	.\include\sol\Catch\include\internal\catch_message.h	/^        std::ostringstream m_stream;$/;"	m	struct:Catch::MessageBuilder
m_stream	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder
m_stream	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::ostream& m_stream;$/;"	m	class:Catch::StreamRedirect
m_stream	.\include\sol\Catch\single_include\catch.hpp	/^        CopyableStream m_stream;$/;"	m	class:Catch::ResultBuilder
m_streamBuf	.\include\sol\Catch\include\internal\catch_stream.h	/^        std::auto_ptr<StreamBufBase> m_streamBuf;$/;"	m	class:Catch::DebugOutStream
m_streamOwned	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^    bool             m_streamOwned;  \/\/\/< Is the stream internal or external?$/;"	m	class:sf::InputSoundFile
m_streamOwned	.\include\SFML\Audio\InputSoundFile.hpp	/^    bool             m_streamOwned;  \/\/\/< Is the stream internal or external?$/;"	m	class:sf::InputSoundFile
m_streamRec	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_streamRec	.\include\SFML\Graphics\Font.hpp	/^    void*                      m_streamRec;   \/\/\/< Pointer to the stream rec instance (it is typeless to avoid exposing implementation details)$/;"	m	class:sf::Font
m_string	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    String              m_string;             \/\/\/< String to display$/;"	m	class:sf::Text
m_string	.\dep\SFML\include\SFML\System\String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String
m_string	.\include\SFML\Graphics\Text.hpp	/^    String              m_string;             \/\/\/< String to display$/;"	m	class:sf::Text
m_string	.\include\SFML\System\String.hpp	/^    std::basic_string<Uint32> m_string; \/\/\/< Internal string of UTF-32 characters$/;"	m	class:sf::String
m_style	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    Uint32              m_style;              \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text
m_style	.\include\SFML\Graphics\Text.hpp	/^    Uint32              m_style;              \/\/\/< Text style (see Style enum)$/;"	m	class:sf::Text
m_subSections	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        SubSections m_subSections;$/;"	m	class:Catch::RunningSection
m_substr	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                NSString* m_substr;$/;"	m	struct:Catch::Matchers::Impl::NSStringMatchers::StringHolder
m_surface	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^    EGLSurface  m_surface; \/\/\/< The internal EGL surface$/;"	m	class:sf::priv::EglContext
m_surrogate	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^    Uint16   m_surrogate;        \/\/\/< First half of the surrogate pair, in case we're receiving a Unicode character in two events$/;"	m	class:sf::priv::WindowImplWin32
m_tag	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            std::string m_tag;$/;"	m	class:Catch::TestSpec::TagPattern
m_tagAliases	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        ITagAliasRegistry const* m_tagAliases;$/;"	m	class:Catch::TestSpecParser
m_tagIsOpen	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        bool m_tagIsOpen;$/;"	m	class:Catch::XmlWriter
m_tags	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        std::vector<std::string> m_tags;$/;"	m	class:Catch::XmlWriter
m_targetString	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::string& m_targetString;$/;"	m	class:Catch::StreamRedirect
m_testCaseRegistry	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^            TestRegistry m_testCaseRegistry;$/;"	m	class:Catch::__anon180::RegistryHub
m_testCaseTimer	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        Timer m_testCaseTimer;$/;"	m	class:Catch::XmlReporter
m_testCaseTracker	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        ITracker* m_testCaseTracker;$/;"	m	class:Catch::RunContext
m_testCases	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<Ptr<TestCaseNode> > m_testCases;$/;"	m	struct:Catch::CumulativeReporterBase
m_testGroups	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<Ptr<TestGroupNode> > m_testGroups;$/;"	m	struct:Catch::CumulativeReporterBase
m_testRuns	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::vector<Ptr<TestRunNode> > m_testRuns;$/;"	m	struct:Catch::CumulativeReporterBase
m_testSpec	.\include\sol\Catch\include\internal\catch_config.hpp	/^        TestSpec m_testSpec;$/;"	m	class:Catch::Config
m_testSpec	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        TestSpec m_testSpec;$/;"	m	class:Catch::TestSpecParser
m_texture	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture
m_texture	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape
m_texture	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite
m_texture	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture
m_texture	.\include\SFML\Graphics\RenderTexture.hpp	/^    Texture                  m_texture; \/\/\/< Target texture to draw on$/;"	m	class:sf::RenderTexture
m_texture	.\include\SFML\Graphics\Shape.hpp	/^    const Texture* m_texture;          \/\/\/< Texture of the shape$/;"	m	class:sf::Shape
m_texture	.\include\SFML\Graphics\Sprite.hpp	/^    const Texture* m_texture;     \/\/\/< Texture of the sprite$/;"	m	class:sf::Sprite
m_texture	.\include\SFML\Graphics\Texture.hpp	/^    unsigned int m_texture;       \/\/\/< Internal texture identifier$/;"	m	class:sf::Texture
m_textureBinding	.\dep\SFML\src\SFML\Graphics\TextureSaver.hpp	/^    GLint m_textureBinding; \/\/\/< Texture binding to restore$/;"	m	class:sf::priv::TextureSaver
m_textureRect	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Shape
m_textureRect	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Sprite
m_textureRect	.\include\SFML\Graphics\Shape.hpp	/^    IntRect        m_textureRect;      \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Shape
m_textureRect	.\include\SFML\Graphics\Sprite.hpp	/^    IntRect        m_textureRect; \/\/\/< Rectangle defining the area of the source texture to display$/;"	m	class:sf::Sprite
m_textures	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their location$/;"	m	class:sf::Shader
m_textures	.\include\SFML\Graphics\Shader.hpp	/^    TextureTable m_textures;       \/\/\/< Texture variables in the shader, mapped to their location$/;"	m	class:sf::Shader
m_thread	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^    Thread             m_thread;             \/\/\/< Thread running the background recording task$/;"	m	class:sf::SoundRecorder
m_thread	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    Thread        m_thread;                  \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream
m_thread	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	/^    pthread_t m_thread;   \/\/\/< pthread thread instance$/;"	m	class:sf::priv::ThreadImpl
m_thread	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	/^    HANDLE m_thread; \/\/\/< Win32 thread handle$/;"	m	class:sf::priv::ThreadImpl
m_thread	.\include\SFML\Audio\SoundRecorder.hpp	/^    Thread             m_thread;             \/\/\/< Thread running the background recording task$/;"	m	class:sf::SoundRecorder
m_thread	.\include\SFML\Audio\SoundStream.hpp	/^    Thread        m_thread;                  \/\/\/< Thread running the background tasks$/;"	m	class:sf::SoundStream
m_threadId	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	/^    unsigned int m_threadId; \/\/\/< Win32 thread identifier$/;"	m	class:sf::priv::ThreadImpl
m_threadMutex	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    mutable Mutex m_threadMutex;             \/\/\/< Thread mutex$/;"	m	class:sf::SoundStream
m_threadMutex	.\include\SFML\Audio\SoundStream.hpp	/^    mutable Mutex m_threadMutex;             \/\/\/< Thread mutex$/;"	m	class:sf::SoundStream
m_threadStartState	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^    Status        m_threadStartState;        \/\/\/< State the thread starts in (Playing, Paused, Stopped)$/;"	m	class:sf::SoundStream
m_threadStartState	.\include\SFML\Audio\SoundStream.hpp	/^    Status        m_threadStartState;        \/\/\/< State the thread starts in (Playing, Paused, Stopped)$/;"	m	class:sf::SoundStream
m_throwOnUnrecognisedTokens	.\include\sol\Catch\include\external\clara.h	/^        bool m_throwOnUnrecognisedTokens;$/;"	m	class:Clara::CommandLine
m_ticks	.\include\sol\Catch\include\internal\catch_timer.h	/^        uint64_t m_ticks;$/;"	m	class:Catch::Timer
m_timer	.\include\sol\Catch\include\internal\catch_section.h	/^        Timer m_timer;$/;"	m	class:Catch::Section
m_to	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    T m_to;$/;"	m	class:Catch::BetweenGenerator
m_totalSize	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    size_t m_totalSize;$/;"	m	class:Catch::CompositeGenerator
m_totals	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        Totals m_totals;$/;"	m	class:Catch::RunContext
m_totals	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        Totals m_totals;$/;"	m	class:Catch::iTchRunnerReporter
m_trackerContext	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        TrackerContext m_trackerContext;$/;"	m	class:Catch::RunContext
m_transform	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_transform	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform corresponding to the view$/;"	m	class:sf::View
m_transform	.\include\SFML\Graphics\Transformable.hpp	/^    mutable Transform m_transform;                  \/\/\/< Combined transformation of the object$/;"	m	class:sf::Transformable
m_transform	.\include\SFML\Graphics\View.hpp	/^    mutable Transform m_transform;           \/\/\/< Precomputed projection transform corresponding to the view$/;"	m	class:sf::View
m_transformNeedUpdate	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_transformNeedUpdate	.\include\SFML\Graphics\Transformable.hpp	/^    mutable bool      m_transformNeedUpdate;        \/\/\/< Does the transform need to be recomputed?$/;"	m	class:sf::Transformable
m_transformUpdated	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform needs to be updated$/;"	m	class:sf::View
m_transformUpdated	.\include\SFML\Graphics\View.hpp	/^    mutable bool      m_transformUpdated;    \/\/\/< Internal state telling if the transform needs to be updated$/;"	m	class:sf::View
m_translateFunction	.\include\sol\Catch\include\internal\catch_interfaces_exception.h	/^            std::string(*m_translateFunction)( T& );$/;"	m	class:Catch::ExceptionTranslatorRegistrar::ExceptionTranslator::std
m_translators	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^        std::vector<const IExceptionTranslator*> m_translators;$/;"	m	class:Catch::ExceptionTranslatorRegistry
m_type	.\dep\SFML\include\SFML\Network\Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket
m_type	.\include\SFML\Network\Socket.hpp	/^    Type         m_type;       \/\/\/< Type of the socket (TCP or UDP)$/;"	m	class:sf::Socket
m_underlyingPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            Ptr<Pattern> m_underlyingPattern;$/;"	m	class:Catch::TestSpec::ExcludedPattern
m_unfinishedSections	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        std::vector<SectionEndInfo> m_unfinishedSections;$/;"	m	class:Catch::RunContext
m_unnamedCount	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        size_t m_unnamedCount;$/;"	m	class:Catch::TestRegistry
m_unusedTokens	.\include\sol\Catch\include\catch_session.hpp	/^        std::vector<Clara::Parser::Token> m_unusedTokens;$/;"	m	class:Catch::Session
m_uri	.\dep\SFML\include\SFML\Network\Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request
m_uri	.\include\SFML\Network\Http.hpp	/^        std::string  m_uri;          \/\/\/< Target URI of the request$/;"	m	class:sf::Http::Request
m_useSizeHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    bool                              m_useSizeHints;    \/\/\/< Is the size of the window fixed with size hints?$/;"	m	class:sf::priv::WindowImplX11
m_value	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        double m_value;$/;"	m	class:Catch::Detail::Approx
m_value	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        unsigned int m_value;$/;"	m	struct:ObjectWithNonConstEqualityOperator::Test	file:
m_value	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    bool m_value;$/;"	m	struct:Boolable	file:
m_values	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    std::vector<T> m_values;$/;"	m	class:Catch::ValuesGenerator
m_vertices	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape
m_vertices	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite
m_vertices	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^    mutable VertexArray m_vertices;           \/\/\/< Vertex array containing the text's geometry$/;"	m	class:sf::Text
m_vertices	.\dep\SFML\include\SFML\Graphics\VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray
m_vertices	.\include\SFML\Graphics\Shape.hpp	/^    VertexArray    m_vertices;         \/\/\/< Vertex array containing the fill geometry$/;"	m	class:sf::Shape
m_vertices	.\include\SFML\Graphics\Sprite.hpp	/^    Vertex         m_vertices[4]; \/\/\/< Vertices defining the sprite's geometry$/;"	m	class:sf::Sprite
m_vertices	.\include\SFML\Graphics\Text.hpp	/^    mutable VertexArray m_vertices;           \/\/\/< Vertex array containing the text's geometry$/;"	m	class:sf::Text
m_vertices	.\include\SFML\Graphics\VertexArray.hpp	/^    std::vector<Vertex> m_vertices;      \/\/\/< Vertices contained in the array$/;"	m	class:sf::VertexArray
m_view	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget
m_view	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^    NSOpenGLViewRef       m_view;          \/\/\/< Only for offscreen context.$/;"	m	class:sf::priv::SFContext
m_view	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^    SFView*           m_view;           \/\/\/< OpenGL view of the window$/;"	m	class:sf::priv::WindowImplUIKit
m_view	.\include\SFML\Graphics\RenderTarget.hpp	/^    View        m_view;        \/\/\/< Current view$/;"	m	class:sf::RenderTarget
m_viewController	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^    SFViewController* m_viewController; \/\/\/< Controller attached to the view$/;"	m	class:sf::priv::WindowImplUIKit
m_viewport	.\dep\SFML\include\SFML\Graphics\View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor of the render-target's size$/;"	m	class:sf::View
m_viewport	.\include\SFML\Graphics\View.hpp	/^    FloatRect         m_viewport;            \/\/\/< Viewport rectangle, expressed as a factor of the render-target's size$/;"	m	class:sf::View
m_vorbis	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	/^    OggVorbis_File m_vorbis;       \/\/ ogg\/vorbis file handle$/;"	m	class:sf::priv::SoundFileReaderOgg
m_vorbis	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^    vorbis_info      m_vorbis;       \/\/ vorbis handle$/;"	m	class:sf::priv::SoundFileWriterOgg
m_vsyncEnabled	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^    bool m_vsyncEnabled;    \/\/\/< Vertical sync activation flag$/;"	m	class:sf::priv::EaglContext
m_what	.\include\sol\Catch\include\internal\catch_notimplemented_exception.h	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException
m_what	.\include\sol\Catch\single_include\catch.hpp	/^        std::string m_what;$/;"	m	class:Catch::NotImplementedException
m_width	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^    unsigned int m_width;   \/\/\/< Width of the P-Buffer$/;"	m	class:sf::priv::RenderTextureImplDefault
m_wildcard	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        WildcardPosition m_wildcard;$/;"	m	class:Catch::WildcardPattern
m_wildcardPattern	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            WildcardPattern m_wildcardPattern;$/;"	m	class:Catch::TestSpec::NamePattern
m_window	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^    NSWindowRef           m_window;        \/\/\/< Only for offscreen context.$/;"	m	class:sf::priv::SFContext
m_window	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^    ::Window          m_window;     \/\/\/< Window to which the context is attached$/;"	m	class:sf::priv::GlxContext
m_window	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^    xcb_window_t                      m_window;          \/\/\/< xcb identifier defining our window$/;"	m	class:sf::priv::WindowImplX11
m_window	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^    HWND  m_window;        \/\/\/< Window to which the context is attached$/;"	m	class:sf::priv::WglContext
m_window	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^    UIWindow*         m_window;         \/\/\/< Pointer to the internal UIKit window$/;"	m	class:sf::priv::WindowImplUIKit
m_windowBeingCreated	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^    bool m_windowBeingCreated;$/;"	m	class:sf::priv::WindowImplAndroid
m_windowBeingDestroyed	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^    bool m_windowBeingDestroyed;$/;"	m	class:sf::priv::WindowImplAndroid
m_writer	.\dep\SFML\include\SFML\Audio\OutputSoundFile.hpp	/^    SoundFileWriter* m_writer; \/\/\/< Writer that handles I\/O on the file's format$/;"	m	class:sf::OutputSoundFile
m_writer	.\include\SFML\Audio\OutputSoundFile.hpp	/^    SoundFileWriter* m_writer; \/\/\/< Writer that handles I\/O on the file's format$/;"	m	class:sf::OutputSoundFile
m_writer	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        WriterF m_writer;$/;"	m	class:Catch::StreamBufImpl
m_writer	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            mutable XmlWriter* m_writer;$/;"	m	class:Catch::XmlWriter::ScopedElement
m_xml	.\include\sol\Catch\include\reporters\catch_reporter_xml.hpp	/^        XmlWriter m_xml;$/;"	m	class:Catch::XmlReporter
macroName	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        std::string macroName;$/;"	m	struct:Catch::AssertionInfo
macroName	.\include\sol\Catch\include\internal\catch_message.h	/^        std::string macroName;$/;"	m	struct:Catch::MessageInfo
macroName	.\include\sol\Catch\single_include\catch.hpp	/^        std::string macroName;$/;"	m	struct:Catch::AssertionInfo
magenta	.\src\src\Colors.cpp	/^	const char magenta[] = { 0x1b, '[', '0', '3', '5', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
main	.\dep\Lua\src\lua.c	/^int main (int argc, char **argv) {$/;"	f
main	.\dep\Lua\src\luac.c	/^int main(int argc, char* argv[])$/;"	f
main	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
main	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^void main() {}$/;"	f
main	.\dep\SFML-build\CMakeFiles\CheckTypeSize\SIZEOF_VOID_PTR.c	/^int main(argc, argv) int argc; char *argv[];$/;"	f
main	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_c_main_controller * main;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_c_main_controller
main	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_d_main_controller * main;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_d_main_controller
main	.\dep\SFML\include\SFML\Main.hpp	38;"	d
main	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^void* main(ActivityStates* states)$/;"	f	namespace:sf::priv
main	.\include\SFML\Main.hpp	38;"	d
main	.\include\sol\Catch\include\internal\catch_default_main.hpp	/^int main (int argc, char * argv[]) {$/;"	f
main	.\include\sol\Catch\include\internal\catch_default_main.hpp	/^int main (int argc, char * const argv[]) {$/;"	f
main	.\include\sol\Catch\projects\VS2008\TestCatch\TestCatch\TestCatch.cpp	/^int main(int argc, char* argv[])$/;"	f
main	.\include\sol\Optional\test_type_traits.cpp	/^int main() { }$/;"	f
main	.\include\sol\examples\basic.cpp	/^int main() {$/;"	f
main	.\include\sol\examples\config.cpp	/^int main() {$/;"	f
main	.\include\sol\examples\functions.cpp	/^int main() {$/;"	f
main	.\include\sol\examples\tables.cpp	/^int main() {$/;"	f
main	.\include\sol\examples\usertype.cpp	/^int main() {$/;"	f
main	.\include\sol\examples\variables.cpp	/^int main() {$/;"	f
main	.\src\src\main.cpp	/^int main(int argc, char* argv[]) {$/;"	f
mainChunkSize	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^    const sf::Uint64 mainChunkSize = 12;$/;"	m	namespace:__anon122	file:
mainOver	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool mainOver;$/;"	m	struct:sf::priv::ActivityStates
mainfunc	.\dep\Lua\src\lparser.c	/^static void mainfunc (LexState *ls, FuncState *fs) {$/;"	f	file:
mainposition	.\dep\Lua\src\ltable.c	/^static Node *mainposition (const Table *t, const TValue *key) {$/;"	f	file:
mainthread	.\dep\Lua\src\lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
mainthread	.\include\lua\lstate.h	/^  struct lua_State *mainthread;$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
majorVersion	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings
majorVersion	.\include\SFML\Window\ContextSettings.hpp	/^    unsigned int majorVersion;      \/\/\/< Major number of the context version to create$/;"	m	struct:sf::ContextSettings
majorVersion	.\include\sol\Catch\include\internal\catch_version.h	/^        unsigned int const majorVersion;$/;"	m	struct:Catch::Version
make	.\include\sol\test_usertypes.cpp	/^	static std::unique_ptr<factory_test, deleter> make() {$/;"	f	struct:factory_test
makeCommandLineParser	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline Clara::CommandLine<ConfigData> makeCommandLineParser() {$/;"	f	namespace:Catch
makeCurrent	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^bool EglContext::makeCurrent()$/;"	f	class:sf::priv::EglContext
makeCurrent	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^bool GlxContext::makeCurrent()$/;"	f	class:sf::priv::GlxContext
makeCurrent	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^bool WglContext::makeCurrent()$/;"	f	class:sf::priv::WglContext
makeRatio	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        static std::size_t makeRatio( std::size_t number, std::size_t total ) {$/;"	f	struct:Catch::ConsoleReporter
makeReporter	.\include\sol\Catch\include\catch_session.hpp	/^    Ptr<IStreamingReporter> makeReporter( Ptr<Config> const& config ) {$/;"	f	namespace:Catch
makeSafe	.\include\sol\Catch\include\internal\catch_common.h	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool
makeSafe	.\include\sol\Catch\single_include\catch.hpp	/^        static type makeSafe( bool value ) {$/;"	f	class:Catch::SafeBool
makeString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        inline std::string makeString( const char* str ) { return str ? std::string( str ) : std::string(); }$/;"	f	namespace:Catch::Matchers::Impl::StdString
makeString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        inline std::string makeString( std::string const& str ) { return str; }$/;"	f	namespace:Catch::Matchers::Impl::StdString
makeString	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline const char* makeString( bool makeNull )$/;"	f
makeString	.\include\sol\Catch\single_include\catch.hpp	/^        inline std::string makeString( const char* str ) { return str ? std::string( str ) : std::string(); }$/;"	f	namespace:Catch::Matchers::Impl::StdString
makeString	.\include\sol\Catch\single_include\catch.hpp	/^        inline std::string makeString( std::string const& str ) { return str; }$/;"	f	namespace:Catch::Matchers::Impl::StdString
makeTestCase	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCase makeTestCase(  ITestCase* _testCase,$/;"	f	namespace:Catch
makeUnexpectedResultBuilder	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        ResultBuilder makeUnexpectedResultBuilder() const {$/;"	f	class:Catch::RunContext
make_cleanup	.\include\sol\single\sol\sol.hpp	/^			static umt_t& make_cleanup(lua_State* L, umt_t&& umx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
make_cleanup	.\include\sol\sol\usertype_metatable.hpp	/^			static umt_t& make_cleanup(lua_State* L, umt_t&& umx) {$/;"	f	struct:sol::stack::pusher
make_closure	.\include\sol\single\sol\sol.hpp	/^	closure<Args...> make_closure(lua_CFunction f, Args&&... args) {$/;"	f	namespace:sol::sol
make_closure	.\include\sol\sol\types.hpp	/^	closure<Args...> make_closure(lua_CFunction f, Args&&... args) {$/;"	f	namespace:sol
make_func	.\include\sol\single\sol\sol.hpp	/^		inline lua_CFunction make_func() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
make_func	.\include\sol\sol\usertype_metatable.hpp	/^		inline lua_CFunction make_func() {$/;"	f	struct:sol::usertype_metatable
make_light	.\include\sol\single\sol\sol.hpp	/^	auto make_light(T& l) {$/;"	f	namespace:sol::sol
make_light	.\include\sol\sol\types.hpp	/^	auto make_light(T& l) {$/;"	f	namespace:sol
make_object	.\include\sol\single\sol\sol.hpp	/^	object make_object(lua_State* L, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
make_object	.\include\sol\single\sol\sol.hpp	/^	object make_object(lua_State* L, T&& value) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
make_object	.\include\sol\sol\object.hpp	/^	object make_object(lua_State* L, Args&&... args) {$/;"	f	namespace:sol
make_object	.\include\sol\sol\object.hpp	/^	object make_object(lua_State* L, T&& value) {$/;"	f	namespace:sol
make_optional	.\include\sol\Optional\optional.hpp	/^constexpr optional<X&> make_optional(::std::reference_wrapper<X> v)$/;"	f	namespace:sol
make_optional	.\include\sol\Optional\optional.hpp	/^constexpr optional<typename ::std::decay<T>::type> make_optional(T&& v)$/;"	f	namespace:sol
make_reference	.\include\sol\single\sol\sol.hpp	/^	R make_reference(lua_State* L, T&& value) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
make_reference	.\include\sol\single\sol\sol.hpp	/^	object make_reference(lua_State* L, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
make_reference	.\include\sol\sol\object.hpp	/^	R make_reference(lua_State* L, T&& value) {$/;"	f	namespace:sol
make_reference	.\include\sol\sol\object.hpp	/^	object make_reference(lua_State* L, Args&&... args) {$/;"	f	namespace:sol
make_reg	.\include\sol\single\sol\sol.hpp	/^		inline luaL_Reg make_reg(N&& n, lua_CFunction f) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
make_reg	.\include\sol\sol\usertype_metatable.hpp	/^		inline luaL_Reg make_reg(N&& n, lua_CFunction f) {$/;"	f	namespace:sol::usertype_detail
make_regs	.\include\sol\single\sol\sol.hpp	/^		void make_regs(regs_t& l, int& index, N&& n, F&&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
make_regs	.\include\sol\single\sol\sol.hpp	/^		void make_regs(regs_t&, int&, base_classes_tag, bases<Bases...>) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
make_regs	.\include\sol\single\sol\sol.hpp	/^		void make_regs(regs_t&, int&, call_construction, F&&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
make_regs	.\include\sol\sol\usertype_metatable.hpp	/^		void make_regs(regs_t& l, int& index, N&& n, F&&) {$/;"	f	struct:sol::usertype_metatable
make_regs	.\include\sol\sol\usertype_metatable.hpp	/^		void make_regs(regs_t&, int&, base_classes_tag, bases<Bases...>) {$/;"	f	struct:sol::usertype_metatable
make_regs	.\include\sol\sol\usertype_metatable.hpp	/^		void make_regs(regs_t&, int&, call_construction, F&&) {$/;"	f	struct:sol::usertype_metatable
make_shim	.\include\sol\single\sol\sol.hpp	/^		inline auto make_shim(base_classes_tag) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
make_shim	.\include\sol\single\sol\sol.hpp	/^		inline auto make_shim(call_construction) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
make_shim	.\include\sol\single\sol\sol.hpp	/^		inline auto make_shim(meta_function mf) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
make_shim	.\include\sol\single\sol\sol.hpp	/^		inline auto make_shim(string_detail::string_shim s) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
make_shim	.\include\sol\sol\usertype_metatable.hpp	/^		inline auto make_shim(base_classes_tag) {$/;"	f	namespace:sol::usertype_detail
make_shim	.\include\sol\sol\usertype_metatable.hpp	/^		inline auto make_shim(call_construction) {$/;"	f	namespace:sol::usertype_detail
make_shim	.\include\sol\sol\usertype_metatable.hpp	/^		inline auto make_shim(meta_function mf) {$/;"	f	namespace:sol::usertype_detail
make_shim	.\include\sol\sol\usertype_metatable.hpp	/^		inline auto make_shim(string_detail::string_shim s) {$/;"	f	namespace:sol::usertype_detail
make_string	.\include\sol\examples\functions.cpp	/^inline std::string make_string( std::string input ) { $/;"	f
make_unique_deleter	.\include\sol\single\sol\sol.hpp	/^		inline std::unique_ptr<T, Dx> make_unique_deleter(Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
make_unique_deleter	.\include\sol\sol\raii.hpp	/^		inline std::unique_ptr<T, Dx> make_unique_deleter(Args&&... args) {$/;"	f	namespace:sol::detail
make_user	.\include\sol\single\sol\sol.hpp	/^	auto make_user(T&& u) {$/;"	f	namespace:sol::sol
make_user	.\include\sol\sol\types.hpp	/^	auto make_user(T&& u) {$/;"	f	namespace:sol
makefn	.\include\sol\test_functions.cpp	/^std::function<int()> makefn() {$/;"	f
makemask	.\dep\Lua\src\ldblib.c	/^static int makemask (const char *smask, int count) {$/;"	f	file:
makeseed	.\dep\Lua\src\lstate.c	/^static unsigned int makeseed (lua_State *L) {$/;"	f	file:
makewhite	.\dep\Lua\src\lgc.c	67;"	d	file:
man_pages	.\include\sol\docs\source\conf.py	/^man_pages = [$/;"	v
management_active	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  int    management_active; \/**< nonzero if bitrate management is active *\/$/;"	m	struct:ovectl_ratemanage2_arg
management_active	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^  int    management_active; \/**< nonzero if bitrate management is active*\/$/;"	m	struct:ovectl_ratemanage_arg
manager	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  FTC_Manager_Done( FTC_Manager  manager );$/;"	v
manager	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^  FTC_Manager_Reset( FTC_Manager  manager );$/;"	v
manuallyRegisteredTestFunction	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^inline void manuallyRegisteredTestFunction() {$/;"	f
map	.\dep\SFML\extlibs\headers\freetype2\ftautoh.h	/^    FT_Byte*  map;$/;"	m	struct:FT_Prop_GlyphToScriptMap_
mapCoordsToPixel	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^Vector2i RenderTarget::mapCoordsToPixel(const Vector2f& point) const$/;"	f	class:sf::RenderTarget
mapCoordsToPixel	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^Vector2i RenderTarget::mapCoordsToPixel(const Vector2f& point, const View& view) const$/;"	f	class:sf::RenderTarget
mapPixelToCoords	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^Vector2f RenderTarget::mapPixelToCoords(const Vector2i& point) const$/;"	f	class:sf::RenderTarget
mapPixelToCoords	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^Vector2f RenderTarget::mapPixelToCoords(const Vector2i& point, const View& view) const$/;"	f	class:sf::RenderTarget
mapped_type	.\include\sol\single\sol\sol.hpp	/^		typedef object mapped_type;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
mapped_type	.\include\sol\sol\table_iterator.hpp	/^		typedef object mapped_type;$/;"	t	class:sol::basic_table_iterator
markbeingfnz	.\dep\Lua\src\lgc.c	/^static void markbeingfnz (global_State *g) {$/;"	f	file:
marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT8 marker;			\/* marker code: JPEG_COM, or JPEG_APP0+n *\/$/;"	m	struct:jpeg_marker_struct
marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_marker_reader * marker;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_marker_reader
marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_marker_writer * marker;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_marker_writer
marker	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   unsigned char  marker;      \/\/ marker seen while filling entropy buffer$/;"	m	struct:__anon98
marker_list	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_saved_marker_ptr marker_list; \/* Head of list of saved markers *\/$/;"	m	struct:jpeg_decompress_struct
marklen	.\dep\Lua\src\lua.c	281;"	d	file:
markmt	.\dep\Lua\src\lgc.c	/^static void markmt (global_State *g) {$/;"	f	file:
markobject	.\dep\Lua\src\lgc.c	86;"	d	file:
markobjectN	.\dep\Lua\src\lgc.c	92;"	d	file:
markupval	.\dep\Lua\src\lparser.c	/^static void markupval (FuncState *fs, int level) {$/;"	f	file:
markvalue	.\dep\Lua\src\lgc.c	83;"	d	file:
mask	.\dep\Lua\src\lbitlib.c	45;"	d	file:
maskcolors	.\dep\Lua\src\lgc.c	66;"	d	file:
master	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_comp_master * master;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_comp_master
master	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_decomp_master * master;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_decomp_master
master_doc	.\include\sol\docs\source\conf.py	/^master_doc = 'index'$/;"	v
match	.\dep\Lua\src\lstrlib.c	/^static const char *match (MatchState *ms, const char *s, const char *p) {$/;"	f	file:
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
match	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
match	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains
match	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith
match	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals
match	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual bool match( ExpressionType const& str ) const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith
match	.\include\sol\Catch\scripts\releaseNotes.py	/^            match = issueNumberRe.match( match.group(3) )$/;"	v
match	.\include\sol\Catch\scripts\releaseNotes.py	/^        match = issueNumberRe.match( line )$/;"	v
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( ExpressionT const& expr ) const$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
match	.\include\sol\Catch\single_include\catch.hpp	/^            virtual bool match( std::string const& expr ) const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
matchTest	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    bool matchTest( TestCase const& testCase, TestSpec const& testSpec, IConfig const& config ) {$/;"	f	namespace:Catch
match_capture	.\dep\Lua\src\lstrlib.c	/^static const char *match_capture (MatchState *ms, const char *s, int l) {$/;"	f	file:
match_class	.\dep\Lua\src\lstrlib.c	/^static int match_class (int c, int cl) {$/;"	f	file:
matchbalance	.\dep\Lua\src\lstrlib.c	/^static const char *matchbalance (MatchState *ms, const char *s,$/;"	f	file:
matchbracketclass	.\dep\Lua\src\lstrlib.c	/^static int matchbracketclass (int c, const char *p, const char *ec) {$/;"	f	file:
matchdepth	.\dep\Lua\src\lstrlib.c	/^  int matchdepth;  \/* control for recursive depth (to avoid C stack overflow) *\/$/;"	m	struct:MatchState	file:
matches	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            bool matches( TestCaseInfo const& testCase ) const {$/;"	f	struct:Catch::TestSpec::Filter
matches	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const { return !m_underlyingPattern->matches( testCase ); }$/;"	f	class:Catch::TestSpec::ExcludedPattern
matches	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec::NamePattern
matches	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^            virtual bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec::TagPattern
matches	.\include\sol\Catch\include\internal\catch_test_spec.hpp	/^        bool matches( TestCaseInfo const& testCase ) const {$/;"	f	class:Catch::TestSpec
matches	.\include\sol\Catch\include\internal\catch_wildcard_pattern.hpp	/^        virtual bool matches( std::string const& str ) const {$/;"	f	class:Catch::WildcardPattern
math	.\include\sol\single\sol\sol.hpp	/^		math,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
math	.\include\sol\sol\state_view.hpp	/^		math,$/;"	m	class:sol::lib
math_abs	.\dep\Lua\src\lmathlib.c	/^static int math_abs (lua_State *L) {$/;"	f	file:
math_acos	.\dep\Lua\src\lmathlib.c	/^static int math_acos (lua_State *L) {$/;"	f	file:
math_asin	.\dep\Lua\src\lmathlib.c	/^static int math_asin (lua_State *L) {$/;"	f	file:
math_atan	.\dep\Lua\src\lmathlib.c	/^static int math_atan (lua_State *L) {$/;"	f	file:
math_ceil	.\dep\Lua\src\lmathlib.c	/^static int math_ceil (lua_State *L) {$/;"	f	file:
math_cos	.\dep\Lua\src\lmathlib.c	/^static int math_cos (lua_State *L) {$/;"	f	file:
math_cosh	.\dep\Lua\src\lmathlib.c	/^static int math_cosh (lua_State *L) {$/;"	f	file:
math_deg	.\dep\Lua\src\lmathlib.c	/^static int math_deg (lua_State *L) {$/;"	f	file:
math_exp	.\dep\Lua\src\lmathlib.c	/^static int math_exp (lua_State *L) {$/;"	f	file:
math_floor	.\dep\Lua\src\lmathlib.c	/^static int math_floor (lua_State *L) {$/;"	f	file:
math_fmod	.\dep\Lua\src\lmathlib.c	/^static int math_fmod (lua_State *L) {$/;"	f	file:
math_frexp	.\dep\Lua\src\lmathlib.c	/^static int math_frexp (lua_State *L) {$/;"	f	file:
math_ldexp	.\dep\Lua\src\lmathlib.c	/^static int math_ldexp (lua_State *L) {$/;"	f	file:
math_log	.\dep\Lua\src\lmathlib.c	/^static int math_log (lua_State *L) {$/;"	f	file:
math_log10	.\dep\Lua\src\lmathlib.c	/^static int math_log10 (lua_State *L) {$/;"	f	file:
math_max	.\dep\Lua\src\lmathlib.c	/^static int math_max (lua_State *L) {$/;"	f	file:
math_min	.\dep\Lua\src\lmathlib.c	/^static int math_min (lua_State *L) {$/;"	f	file:
math_modf	.\dep\Lua\src\lmathlib.c	/^static int math_modf (lua_State *L) {$/;"	f	file:
math_pow	.\dep\Lua\src\lmathlib.c	/^static int math_pow (lua_State *L) {$/;"	f	file:
math_rad	.\dep\Lua\src\lmathlib.c	/^static int math_rad (lua_State *L) {$/;"	f	file:
math_random	.\dep\Lua\src\lmathlib.c	/^static int math_random (lua_State *L) {$/;"	f	file:
math_randomseed	.\dep\Lua\src\lmathlib.c	/^static int math_randomseed (lua_State *L) {$/;"	f	file:
math_sin	.\dep\Lua\src\lmathlib.c	/^static int math_sin (lua_State *L) {$/;"	f	file:
math_sinh	.\dep\Lua\src\lmathlib.c	/^static int math_sinh (lua_State *L) {$/;"	f	file:
math_sqrt	.\dep\Lua\src\lmathlib.c	/^static int math_sqrt (lua_State *L) {$/;"	f	file:
math_tan	.\dep\Lua\src\lmathlib.c	/^static int math_tan (lua_State *L) {$/;"	f	file:
math_tanh	.\dep\Lua\src\lmathlib.c	/^static int math_tanh (lua_State *L) {$/;"	f	file:
math_toint	.\dep\Lua\src\lmathlib.c	/^static int math_toint (lua_State *L) {$/;"	f	file:
math_type	.\dep\Lua\src\lmathlib.c	/^static int math_type (lua_State *L) {$/;"	f	file:
math_ult	.\dep\Lua\src\lmathlib.c	/^static int math_ult (lua_State *L) {$/;"	f	file:
mathlib	.\dep\Lua\src\lmathlib.c	/^static const luaL_Reg mathlib[] = {$/;"	v	file:
matrix	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^  FT_Matrix_Invert( FT_Matrix*  matrix );$/;"	v
maxComponentDepth	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxComponentDepth;$/;"	m	struct:TT_MaxProfile_
maxComponentElements	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxComponentElements;$/;"	m	struct:TT_MaxProfile_
maxCompositeContours	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxCompositeContours;$/;"	m	struct:TT_MaxProfile_
maxCompositePoints	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxCompositePoints;$/;"	m	struct:TT_MaxProfile_
maxContours	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxContours;$/;"	m	struct:TT_MaxProfile_
maxDepth	.\src\src\SkillTree.cpp	/^const int SkillTree::maxDepth(const SkillNode* node) {$/;"	f	class:SkillTree
maxFunctionDefs	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxFunctionDefs;$/;"	m	struct:TT_MaxProfile_
maxHeight	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int XOrigin, YOrigin, maxHeight, maxWidth;$/;"	m	struct:__anon149
maxInstructionDefs	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxInstructionDefs;$/;"	m	struct:TT_MaxProfile_
maxMemType1	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong  maxMemType1;$/;"	m	struct:TT_Postscript_
maxMemType42	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong  maxMemType42;$/;"	m	struct:TT_Postscript_
maxPoints	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxPoints;$/;"	m	struct:TT_MaxProfile_
maxPoints	.\src\include\SkillTree.h	/^	int maxPoints; \/\/ Max points in a Node$/;"	m	class:SkillNode
maxSizeOfInstructions	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxSizeOfInstructions;$/;"	m	struct:TT_MaxProfile_
maxSocket	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^    int    maxSocket;    \/\/\/< Maximum socket handle$/;"	m	struct:sf::SocketSelector::SocketSelectorImpl	file:
maxStackElements	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxStackElements;$/;"	m	struct:TT_MaxProfile_
maxStorage	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxStorage;$/;"	m	struct:TT_MaxProfile_
maxTwilightPoints	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxTwilightPoints;$/;"	m	struct:TT_MaxProfile_
maxWidth	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int XOrigin, YOrigin, maxHeight, maxWidth;$/;"	m	struct:__anon149
maxZones	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  maxZones;$/;"	m	struct:TT_MaxProfile_
max_advance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos     max_advance; \/* max horizontal advance, in 26.6 pixels *\/$/;"	m	struct:FT_Size_Metrics_
max_advance_height	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          max_advance_height;$/;"	m	struct:FT_FaceRec_
max_advance_width	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          max_advance_width;$/;"	m	struct:FT_FaceRec_
max_alloc_chunk	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  long max_alloc_chunk;$/;"	m	struct:jpeg_memory_mgr
max_aspect_den	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  max_aspect_num, max_aspect_den;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
max_aspect_num	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  max_aspect_num, max_aspect_den;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
max_blocksize	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned min_blocksize, max_blocksize;$/;"	m	struct:__anon44
max_expand	.\dep\Lua\src\lstrlib.c	/^static const char *max_expand (MatchState *ms, const char *s,$/;"	f	file:
max_framesize	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned min_framesize, max_framesize;$/;"	m	struct:__anon44
max_grays	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Byte   max_grays;$/;"	m	struct:FTC_SBitRec_
max_h_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int max_h_samp_factor;	\/* largest h_samp_factor *\/$/;"	m	struct:jpeg_compress_struct
max_h_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int max_h_samp_factor;	\/* largest h_samp_factor *\/$/;"	m	struct:jpeg_decompress_struct
max_height	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  max_width, max_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
max_memory_to_use	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  long max_memory_to_use;$/;"	m	struct:jpeg_memory_mgr
max_v_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int max_v_samp_factor;	\/* largest v_samp_factor *\/$/;"	m	struct:jpeg_compress_struct
max_v_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int max_v_samp_factor;	\/* largest v_samp_factor *\/$/;"	m	struct:jpeg_decompress_struct
max_width	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  max_width;$/;"	m	struct:FT_WinFNT_HeaderRec_
max_width	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  max_width, max_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
max_x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon108
max_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int max_x, max_y;$/;"	m	struct:__anon108
maxalign	.\dep\Lua\src\lstrlib.c	/^  int maxalign;$/;"	m	struct:Header	file:
maxcode	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int maxcode[17];$/;"	m	struct:__anon101
maxcode	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   unsigned int maxcode[18];$/;"	m	struct:__anon97
maximum	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Fixed    maximum;$/;"	m	struct:FT_Var_Axis_
maximum	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Long     maximum;$/;"	m	struct:FT_MM_Axis_
maxn	.\dep\Lua\src\ltablib.c	/^static int maxn (lua_State *L) {$/;"	f	file:
maxstacksize	.\dep\Lua\src\lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto
maxstacksize	.\include\lua\lobject.h	/^  lu_byte maxstacksize;  \/* number of registers needed by this function *\/$/;"	m	struct:Proto
maybe_indexable	.\include\sol\single\sol\sol.hpp	/^		inline bool maybe_indexable(lua_State* L, int index = -1) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
maybe_indexable	.\include\sol\sol\stack_core.hpp	/^		inline bool maybe_indexable(lua_State* L, int index = -1) {$/;"	f	namespace:sol::stack
md5sum	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte md5sum[16];$/;"	m	struct:__anon44
media_catalog_number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	char media_catalog_number[129];$/;"	m	struct:__anon53
member	.\include\sol\Catch\include\external\clara.h	/^            M C::* member;$/;"	m	class:Clara::Detail::BoundDataMember::C
member	.\include\sol\Catch\include\external\clara.h	/^            void (C::*member)( M );$/;"	m	struct:Clara::Detail::BoundUnaryMethod
member	.\include\sol\Catch\include\external\clara.h	/^            void (C::*member)();$/;"	m	struct:Clara::Detail::BoundNullaryMethod
member	.\include\sol\single\sol\sol.hpp	/^			T member;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
member	.\include\sol\single\sol\sol.hpp	/^			T member;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
member	.\include\sol\sol\function_types_stateful.hpp	/^			T member;$/;"	m	struct:sol::function_detail::member_function
member	.\include\sol\sol\function_types_stateful.hpp	/^			T member;$/;"	m	struct:sol::function_detail::member_variable
member_function	.\include\sol\single\sol\sol.hpp	/^			member_function(function_type f, Args&&... args) : invocation(std::move(f)), member(std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
member_function	.\include\sol\single\sol\sol.hpp	/^		struct member_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
member_function	.\include\sol\sol\function_types_stateful.hpp	/^			member_function(function_type f, Args&&... args) : invocation(std::move(f)), member(std::forward<Args>(args)...) {}$/;"	f	struct:sol::function_detail::member_function
member_function	.\include\sol\sol\function_types_stateful.hpp	/^		struct member_function {$/;"	s	namespace:sol::function_detail
member_function_wrapper	.\include\sol\single\sol\sol.hpp	/^	struct member_function_wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
member_function_wrapper	.\include\sol\sol\wrapper.hpp	/^	struct member_function_wrapper {$/;"	s	namespace:sol
member_variable	.\include\sol\single\sol\sol.hpp	/^			member_variable(function_type v, Args&&... args) : var(std::move(v)), member(std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
member_variable	.\include\sol\single\sol\sol.hpp	/^		struct member_variable {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
member_variable	.\include\sol\sol\function_types_stateful.hpp	/^			member_variable(function_type v, Args&&... args) : var(std::move(v)), member(std::forward<Args>(args)...) {}$/;"	f	struct:sol::function_detail::member_variable
member_variable	.\include\sol\sol\function_types_stateful.hpp	/^		struct member_variable {$/;"	s	namespace:sol::function_detail
memerrmsg	.\dep\Lua\src\lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
memerrmsg	.\include\lua\lstate.h	/^  TString *memerrmsg;  \/* memory-error message *\/$/;"	m	struct:global_State
memory	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Memory         memory;$/;"	m	struct:FT_FaceRec_
memory	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Memory            memory;$/;"	m	struct:FT_StreamRec_
memory	.\include\sol\single\sol\sol.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::sol::call_syntax::call_status
memory	.\include\sol\single\sol\sol.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::sol::call_syntax::call_status::load_status
memory	.\include\sol\single\sol\sol.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
memory	.\include\sol\sol\types.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::call_syntax::call_status
memory	.\include\sol\sol\types.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::call_syntax::call_status::load_status
memory	.\include\sol\sol\types.hpp	/^		memory = LUA_ERRMEM,$/;"	m	class:sol::call_syntax::call_status::thread_status
memory_base	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    const FT_Byte*  memory_base;$/;"	m	struct:FT_Open_Args_
memory_size	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long         memory_size;$/;"	m	struct:FT_Open_Args_
meow	.\include\sol\test_usertypes.cpp	/^	const int meow = 56;$/;"	m	struct:ext_getset	file:
message	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData
message	.\include\sol\Catch\include\internal\catch_message.h	/^        std::string message;$/;"	m	struct:Catch::MessageInfo
message	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::string message;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
message	.\include\sol\Catch\single_include\catch.hpp	/^        std::string message;$/;"	m	struct:Catch::AssertionResultData
messageLabel	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::string messageLabel;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
messages	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            std::vector<MessageInfo> messages;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
messages	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::vector<MessageInfo> messages;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
messages	.\include\sol\Catch\scripts\releaseNotes.py	/^messages = []$/;"	v
meta	.\include\sol\single\sol\sol.hpp	/^	namespace meta {$/;"	n	namespace:sol
meta	.\include\sol\sol\bind_traits.hpp	/^	namespace meta {$/;"	n	namespace:sol
meta	.\include\sol\sol\traits.hpp	/^	namespace meta {$/;"	n	namespace:sol
meta	.\include\sol\sol\tuple.hpp	/^	namespace meta {$/;"	n	namespace:sol
meta_detail	.\include\sol\single\sol\sol.hpp	/^		namespace meta_detail {$/;"	n	namespace:sol::meta
meta_detail	.\include\sol\sol\bind_traits.hpp	/^		namespace meta_detail {$/;"	n	namespace:sol::meta
meta_detail	.\include\sol\sol\traits.hpp	/^		namespace meta_detail {$/;"	n	namespace:sol::meta
meta_function	.\include\sol\single\sol\sol.hpp	/^	enum class meta_function {$/;"	c	class:sol::sol::call_syntax::call_status::type
meta_function	.\include\sol\sol\types.hpp	/^	enum class meta_function {$/;"	c	class:sol::call_syntax::call_status::type
meta_function_names	.\include\sol\single\sol\sol.hpp	/^	const std::array<std::string, 21> meta_function_names = { {$/;"	m	class:sol::sol::call_syntax::call_status::type
meta_function_names	.\include\sol\sol\types.hpp	/^	const std::array<std::string, 21> meta_function_names = { {$/;"	m	class:sol::call_syntax::call_status::type
meta_method	.\include\sol\single\sol\sol.hpp	/^	typedef meta_function meta_method;$/;"	t	class:sol::sol::call_syntax::call_status::type
meta_method	.\include\sol\sol\types.hpp	/^	typedef meta_function meta_method;$/;"	t	class:sol::call_syntax::call_status::type
meta_registry_key	.\include\sol\single\sol\sol.hpp	/^	auto meta_registry_key(T&& key) {$/;"	f	namespace:sol::sol
meta_registry_key	.\include\sol\sol\types.hpp	/^	auto meta_registry_key(T&& key) {$/;"	f	namespace:sol
meta_variable_names	.\include\sol\single\sol\sol.hpp	/^	const std::array<std::string, 2> meta_variable_names = { {$/;"	m	class:sol::sol::call_syntax::call_status::type
meta_variable_names	.\include\sol\sol\types.hpp	/^	const std::array<std::string, 2> meta_variable_names = { {$/;"	m	class:sol::call_syntax::call_status::type
metatable	.\dep\Lua\src\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
metatable	.\dep\Lua\src\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Udata::Table
metatable	.\include\lua\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Table	typeref:struct:Table::Table
metatable	.\include\lua\lobject.h	/^  struct Table *metatable;$/;"	m	struct:Udata	typeref:struct:Udata::Table
metatable	.\include\sol\single\sol\sol.hpp	/^		metatable,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
metatable	.\include\sol\single\sol\sol.hpp	/^		static const std::string metatable;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::usertype_traits
metatable	.\include\sol\single\sol\sol.hpp	/^	const std::string usertype_traits<T>::metatable = std::string("sol.").append(detail::demangle<T>());$/;"	m	class:sol::sol::call_syntax::call_status::sol::usertype_traits
metatable	.\include\sol\sol\types.hpp	/^		metatable,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
metatable	.\include\sol\sol\usertype_traits.hpp	/^		static const std::string metatable;$/;"	m	struct:sol::usertype_traits
metatable	.\include\sol\sol\usertype_traits.hpp	/^	const std::string usertype_traits<T>::metatable = std::string("sol.").append(detail::demangle<T>());$/;"	m	class:sol::usertype_traits
metatable_key	.\include\sol\single\sol\sol.hpp	/^	const metatable_key_t metatable_key = {};$/;"	m	namespace:sol::sol
metatable_key	.\include\sol\sol\types.hpp	/^	const metatable_key_t metatable_key = {};$/;"	m	namespace:sol
metatable_key_t	.\include\sol\single\sol\sol.hpp	/^	struct metatable_key_t {};$/;"	s	namespace:sol::sol
metatable_key_t	.\include\sol\sol\types.hpp	/^	struct metatable_key_t {};$/;"	s	namespace:sol
metatable_registry_key	.\include\sol\single\sol\sol.hpp	/^		metatable_registry_key(T key) : key(std::forward<T>(key)) {}$/;"	f	struct:sol::sol::metatable_registry_key
metatable_registry_key	.\include\sol\single\sol\sol.hpp	/^	struct metatable_registry_key {$/;"	s	namespace:sol::sol
metatable_registry_key	.\include\sol\sol\types.hpp	/^		metatable_registry_key(T key) : key(std::forward<T>(key)) {}$/;"	f	struct:sol::metatable_registry_key
metatable_registry_key	.\include\sol\sol\types.hpp	/^	struct metatable_registry_key {$/;"	s	namespace:sol
metatableregister	.\include\sol\single\sol\sol.hpp	/^		std::unique_ptr<usertype_detail::registrar, detail::deleter> metatableregister;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
metatableregister	.\include\sol\sol\usertype.hpp	/^		std::unique_ptr<usertype_detail::registrar, detail::deleter> metatableregister;$/;"	m	class:sol::usertype
metric_Data_Format	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   metric_Data_Format;$/;"	m	struct:TT_HoriHeader_
metric_Data_Format	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   metric_Data_Format;$/;"	m	struct:TT_VertHeader_
metrics	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Glyph_Metrics  metrics;$/;"	m	struct:FT_GlyphSlotRec_
metrics	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Size_Metrics   metrics;   \/* size metrics                    *\/$/;"	m	struct:FT_SizeRec_
microseconds	.\dep\SFML\src\SFML\System\Time.cpp	/^Time microseconds(Int64 amount)$/;"	f	namespace:sf
milliseconds	.\dep\SFML\src\SFML\System\Time.cpp	/^Time milliseconds(Int32 amount)$/;"	f	namespace:sf
mime_type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	char *mime_type;$/;"	m	struct:__anon55
minMemType1	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong  minMemType1;$/;"	m	struct:TT_Postscript_
minMemType42	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong  minMemType42;$/;"	m	struct:TT_Postscript_
min_Bottom_Side_Bearing	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   min_Bottom_Side_Bearing; \/* minimum right-sb or bottom-sb   *\/$/;"	m	struct:TT_VertHeader_
min_DCT_h_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int min_DCT_h_scaled_size;	\/* smallest DCT_h_scaled_size of any component *\/$/;"	m	struct:jpeg_compress_struct
min_DCT_h_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int min_DCT_h_scaled_size;	\/* smallest DCT_h_scaled_size of any component *\/$/;"	m	struct:jpeg_decompress_struct
min_DCT_v_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int min_DCT_v_scaled_size;	\/* smallest DCT_v_scaled_size of any component *\/$/;"	m	struct:jpeg_compress_struct
min_DCT_v_scaled_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int min_DCT_v_scaled_size;	\/* smallest DCT_v_scaled_size of any component *\/$/;"	m	struct:jpeg_decompress_struct
min_Left_Side_Bearing	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   min_Left_Side_Bearing;  \/* minimum left-sb       *\/$/;"	m	struct:TT_HoriHeader_
min_Right_Side_Bearing	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   min_Right_Side_Bearing; \/* minimum right-sb      *\/$/;"	m	struct:TT_HoriHeader_
min_Top_Side_Bearing	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   min_Top_Side_Bearing;    \/* minimum left-sb or top-sb       *\/$/;"	m	struct:TT_VertHeader_
min_aspect_den	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  min_aspect_num, min_aspect_den;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
min_aspect_num	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  min_aspect_num, min_aspect_den;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
min_blocksize	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned min_blocksize, max_blocksize;$/;"	m	struct:__anon44
min_expand	.\dep\Lua\src\lstrlib.c	/^static const char *min_expand (MatchState *ms, const char *s,$/;"	f	file:
min_feature	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   min_feature[2];$/;"	m	struct:PS_PrivateRec_
min_framesize	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned min_framesize, max_framesize;$/;"	m	struct:__anon44
min_height	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  min_width, min_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
min_width	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  min_width, min_height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
minimal_allocator	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^    struct minimal_allocator {$/;"	s	namespace:__anon187	file:
minimum	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Fixed    minimum;$/;"	m	struct:FT_Var_Axis_
minimum	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Long     minimum;$/;"	m	struct:FT_MM_Axis_
minorVersion	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings
minorVersion	.\include\SFML\Window\ContextSettings.hpp	/^    unsigned int minorVersion;      \/\/\/< Minor number of the context version to create$/;"	m	struct:sf::ContextSettings
minorVersion	.\include\sol\Catch\include\internal\catch_version.h	/^        unsigned int const minorVersion;$/;"	m	struct:Catch::Version
missingAssertions	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool missingAssertions;$/;"	m	struct:Catch::SectionStats
mode	.\dep\Lua\src\ldo.c	/^  const char *mode;$/;"	m	struct:SParser	file:
mode	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int   mode;$/;"	m	struct:vorbis_block
mode	.\include\sol\single\sol\sol.hpp	/^		mode,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
mode	.\include\sol\sol\types.hpp	/^		mode,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
modeBitsPerPixel	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^size_t modeBitsPerPixel(CGDisplayModeRef mode)$/;"	f	namespace:sf::priv
modinit	.\dep\Lua\src\loadlib.c	/^static void modinit (lua_State *L, const char *modname) {$/;"	f	file:
module_done	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Module_Destructor   module_done;$/;"	m	struct:FT_Module_Class_
module_flags	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_ULong               module_flags;$/;"	m	struct:FT_Module_Class_
module_init	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Module_Constructor  module_init;$/;"	m	struct:FT_Module_Class_
module_interface	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    const void*            module_interface;$/;"	m	struct:FT_Module_Class_
module_name	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    const FT_String*       module_name;$/;"	m	struct:FT_Module_Class_
module_path	.\include\sol\single.py	/^module_path = os.path.join(script_path)$/;"	v
module_requires	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Fixed               module_requires;$/;"	m	struct:FT_Module_Class_
module_size	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Long                module_size;$/;"	m	struct:FT_Module_Class_
module_version	.\dep\SFML\extlibs\headers\freetype2\ftmodapi.h	/^    FT_Fixed               module_version;$/;"	m	struct:FT_Module_Class_
modulus	.\include\sol\single\sol\sol.hpp	/^		modulus,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
modulus	.\include\sol\sol\types.hpp	/^		modulus,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
motionManager	.\dep\SFML\src\SFML\Window\iOS\SFAppDelegate.hpp	/^@property (readonly, nonatomic) CMMotionManager* motionManager; \/\/\/< Instance of the motion manager$/;"	v
mouseButton	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseButtonEvent      mouseButton;       \/\/\/< Mouse button event parameters (Event::MouseButtonPressed, Event::MouseButtonReleased)$/;"	m	union:sf::Event::__anon114
mouseButton	.\include\SFML\Window\Event.hpp	/^        MouseButtonEvent      mouseButton;       \/\/\/< Mouse button event parameters (Event::MouseButtonPressed, Event::MouseButtonReleased)$/;"	m	union:sf::Event::__anon174
mouseEvent	.\src\src\GameWindow.cpp	/^void GameWindow::mouseEvent(sf::Event& e) {$/;"	f	class:GameWindow
mouseEvent	.\src\src\SkillTreeWindow.cpp	/^void SkillTreeWindow::mouseEvent(sf::Event& e) {$/;"	f	class:SkillTreeWindow
mouseEvent	.\src\src\Window.cpp	/^void Window::mouseEvent(sf::Event& e) {}$/;"	f	class:Window
mouseMove	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseMoveEvent        mouseMove;         \/\/\/< Mouse move event parameters (Event::MouseMoved)$/;"	m	union:sf::Event::__anon114
mouseMove	.\include\SFML\Window\Event.hpp	/^        MouseMoveEvent        mouseMove;         \/\/\/< Mouse move event parameters (Event::MouseMoved)$/;"	m	union:sf::Event::__anon174
mousePosition	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    Vector2i mousePosition;$/;"	m	struct:sf::priv::ActivityStates
mouseWheel	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseWheelEvent       mouseWheel;        \/\/\/< Mouse wheel event parameters (Event::MouseWheelMoved) (deprecated)$/;"	m	union:sf::Event::__anon114
mouseWheel	.\include\SFML\Window\Event.hpp	/^        MouseWheelEvent       mouseWheel;        \/\/\/< Mouse wheel event parameters (Event::MouseWheelMoved) (deprecated)$/;"	m	union:sf::Event::__anon174
mouseWheelScroll	.\dep\SFML\include\SFML\Window\Event.hpp	/^        MouseWheelScrollEvent mouseWheelScroll;  \/\/\/< Mouse wheel event parameters (Event::MouseWheelScrolled)$/;"	m	union:sf::Event::__anon114
mouseWheelScroll	.\include\SFML\Window\Event.hpp	/^        MouseWheelScrollEvent mouseWheelScroll;  \/\/\/< Mouse wheel event parameters (Event::MouseWheelScrolled)$/;"	m	union:sf::Event::__anon174
move	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::move(const Vector2f& offset)$/;"	f	class:sf::Transformable
move	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::move(float offsetX, float offsetY)$/;"	f	class:sf::Transformable
move	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::move(const Vector2f& offset)$/;"	f	class:sf::View
move	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::move(float offsetX, float offsetY)$/;"	f	class:sf::View
move	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    void move( CompositeGenerator& other ) {$/;"	f	class:Catch::CompositeGenerator
move	.\src\src\Object.cpp	/^void Object::move(int diff) {$/;"	f	class:Object
move	.\src\src\Projectile.cpp	/^void Projectile::move(int diff) {$/;"	f	class:Projectile
moveNext	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        bool moveNext() {$/;"	f	class:Catch::GeneratorsForTest
moveNext	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        bool moveNext() {$/;"	f	struct:Catch::GeneratorInfo
moveNext	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void moveNext() {$/;"	f	class:Catch::TestCaseTracking::IndexTracker
moveRelative	.\src\src\Object.cpp	/^void Object::moveRelative(float dx, float dy) {$/;"	f	class:Object
moveToParent	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void moveToParent() {$/;"	f	class:Catch::TestCaseTracking::TrackerBase
moveToThis	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void moveToThis() {$/;"	f	class:Catch::TestCaseTracking::TrackerBase
move_to	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Outline_MoveToFunc   move_to;$/;"	m	struct:FT_Outline_Funcs_
moved	.\include\sol\Optional\test_optional.cpp	/^  bool moved;$/;"	m	struct:MoveAware	file:
movegotosout	.\dep\Lua\src\lparser.c	/^static void movegotosout (FuncState *fs, BlockCnt *bl) {$/;"	f	file:
moveresults	.\dep\Lua\src\ldo.c	/^static int moveresults (lua_State *L, const TValue *firstResult, StkId res,$/;"	f	file:
ms	.\dep\Lua\src\lstrlib.c	/^  MatchState ms;  \/* match state *\/$/;"	m	struct:GMatchState	file:
msg_code	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int msg_code;$/;"	m	struct:jpeg_error_mgr
msg_parm	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  } msg_parm;$/;"	m	struct:jpeg_error_mgr	typeref:union:jpeg_error_mgr::__anon86
msghandler	.\dep\Lua\src\lua.c	/^static int msghandler (lua_State *L) {$/;"	f	file:
mt	.\dep\Lua\src\lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
mt	.\include\lua\lstate.h	/^  struct Table *mt[LUA_NUMTAGS];  \/* metatables for basic types *\/$/;"	m	struct:global_State	typeref:struct:global_State::Table
multi_check	.\include\sol\single\sol\sol.hpp	/^		bool multi_check(lua_State* L, int index) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_check	.\include\sol\single\sol\sol.hpp	/^		bool multi_check(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_check	.\include\sol\single\sol\sol.hpp	/^		bool multi_check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_check	.\include\sol\sol\stack_core.hpp	/^		bool multi_check(lua_State* L, int index) {$/;"	f	namespace:sol::stack
multi_check	.\include\sol\sol\stack_core.hpp	/^		bool multi_check(lua_State* L, int index, Handler&& handler) {$/;"	f	namespace:sol::stack
multi_check	.\include\sol\sol\stack_core.hpp	/^		bool multi_check(lua_State* L, int index, Handler&& handler, record& tracking) {$/;"	f	namespace:sol::stack
multi_push	.\include\sol\single\sol\sol.hpp	/^		inline int multi_push(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_push	.\include\sol\single\sol\sol.hpp	/^		inline int multi_push(lua_State*) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_push	.\include\sol\sol\stack_core.hpp	/^		inline int multi_push(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::stack
multi_push	.\include\sol\sol\stack_core.hpp	/^		inline int multi_push(lua_State*) {$/;"	f	namespace:sol::stack
multi_push_reference	.\include\sol\single\sol\sol.hpp	/^		inline int multi_push_reference(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_push_reference	.\include\sol\single\sol\sol.hpp	/^		inline int multi_push_reference(lua_State*) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
multi_push_reference	.\include\sol\sol\stack_core.hpp	/^		inline int multi_push_reference(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::stack
multi_push_reference	.\include\sol\sol\stack_core.hpp	/^		inline int multi_push_reference(lua_State*) {$/;"	f	namespace:sol::stack
multiline	.\dep\Lua\src\lua.c	/^static int multiline (lua_State *L) {$/;"	f	file:
multiplication	.\include\sol\single\sol\sol.hpp	/^		multiplication,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
multiplication	.\include\sol\sol\types.hpp	/^		multiplication,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
multiplier	.\include\sol\examples\functions.cpp	/^struct multiplier {$/;"	s	file:
multiply	.\include\sol\Catch\projects\SelfTest\GeneratorTests.cpp	/^inline int multiply( int a, int b )$/;"	f
mustindex	.\include\sol\single\sol\sol.hpp	/^		bool mustindex;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
mustindex	.\include\sol\sol\usertype_metatable.hpp	/^		bool mustindex;$/;"	m	struct:sol::usertype_metatable
mutex	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^    sf::Mutex mutex;$/;"	m	namespace:__anon117	file:
mutex	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^    sf::Mutex mutex;$/;"	m	namespace:__anon128	file:
mutex	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^    sf::Mutex mutex;$/;"	m	namespace:__anon130	file:
mutex	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    Mutex mutex;$/;"	m	struct:sf::priv::ActivityStates
mutex	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    sf::Mutex mutex;$/;"	m	namespace:__anon140	file:
mutex	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^    sf::Mutex mutex;$/;"	m	namespace:__anon141	file:
my_add	.\include\sol\examples\functions.cpp	/^inline int my_add(int x, int y) {$/;"	f
n	.\dep\Lua\src\lauxlib.c	/^  int n;  \/* number of pre-read characters *\/$/;"	m	struct:LoadF	file:
n	.\dep\Lua\src\lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	.\dep\Lua\src\liolib.c	/^  int n;  \/* number of elements in buffer 'buff' *\/$/;"	m	struct:__anon4	file:
n	.\dep\Lua\src\llimits.h	/^  lua_Number n;$/;"	m	union:__anon6
n	.\dep\Lua\src\lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value
n	.\dep\Lua\src\lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon14
n	.\dep\Lua\src\lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	.\dep\Lua\src\lstrlib.c	/^  lua_Number n;$/;"	m	union:Ftypes	file:
n	.\dep\Lua\src\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon20	file:
n	.\dep\Lua\src\lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	.\dep\Lua\src\lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
n	.\include\lua\lauxlib.h	/^  size_t n;  \/* number of characters in buffer *\/$/;"	m	struct:luaL_Buffer
n	.\include\lua\llimits.h	/^  lua_Number n;$/;"	m	union:__anon158
n	.\include\lua\lobject.h	/^  lua_Number n;    \/* float numbers *\/$/;"	m	union:Value
n	.\include\lua\lparser.h	/^    int n;$/;"	m	struct:Dyndata::__anon165
n	.\include\lua\lparser.h	/^  int n;  \/* number of entries in use *\/$/;"	m	struct:Labellist
n	.\include\lua\lzio.h	/^  size_t n;			\/* bytes still unread *\/$/;"	m	struct:Zio
n	.\include\lua\lzio.h	/^  size_t n;$/;"	m	struct:Mbuffer
n	.\include\sol\Optional\test_optional.cpp	/^  int n = 1;$/;"	m	struct:Combined	file:
n	.\include\sol\Optional\test_optional.cpp	/^  int n = 1;$/;"	m	struct:Nasty	file:
n	.\include\sol\single\sol\sol.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::ref_clean
n	.\include\sol\sol\table_core.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	m	struct:sol::detail::ref_clean
nCcalls	.\dep\Lua\src\lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
nCcalls	.\include\lua\lstate.h	/^  unsigned short nCcalls;  \/* number of nested C calls *\/$/;"	m	struct:lua_State
nW	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long  nW;$/;"	m	struct:vorbis_block
nW	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long nW;$/;"	m	struct:vorbis_dsp_state
n_contours	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    short       n_contours;      \/* number of contours in glyph        *\/$/;"	m	struct:FT_Outline_
n_points	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    short       n_points;        \/* number of points in the glyph      *\/$/;"	m	struct:FT_Outline_
na	.\dep\Lua\src\lparser.c	/^  int na;  \/* total number of array elements *\/$/;"	m	struct:ConsControl	file:
nactvar	.\dep\Lua\src\lparser.c	/^  lu_byte nactvar;  \/* # active locals outside the block *\/$/;"	m	struct:BlockCnt	file:
nactvar	.\dep\Lua\src\lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	.\dep\Lua\src\lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
nactvar	.\include\lua\lparser.h	/^  lu_byte nactvar;  \/* local level where it appears in current block *\/$/;"	m	struct:Labeldesc
nactvar	.\include\lua\lparser.h	/^  lu_byte nactvar;  \/* number of active local variables *\/$/;"	m	struct:FuncState
name	.\dep\Lua\src\lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	.\dep\Lua\src\ldo.c	/^  const char *name;$/;"	m	struct:SParser	file:
name	.\dep\Lua\src\lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	.\dep\Lua\src\lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	.\dep\Lua\src\lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	.\dep\Lua\src\lundump.c	/^  const char *name;$/;"	m	struct:__anon22	file:
name	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_String*  name;$/;"	m	struct:FT_MM_Axis_
name	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_String*  name;$/;"	m	struct:FT_Var_Axis_
name	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        String       name;      \/\/\/< Name of the joystick$/;"	m	struct:sf::Joystick::Identification
name	.\include\SFML\Window\Joystick.hpp	/^        String       name;      \/\/\/< Name of the joystick$/;"	m	struct:sf::Joystick::Identification
name	.\include\lua\lauxlib.h	/^  const char *name;$/;"	m	struct:luaL_Reg
name	.\include\lua\lobject.h	/^  TString *name;  \/* upvalue name (for debug information) *\/$/;"	m	struct:Upvaldesc
name	.\include\lua\lparser.h	/^  TString *name;  \/* label identifier *\/$/;"	m	struct:Labeldesc
name	.\include\lua\lua.h	/^  const char *name;	\/* (n) *\/$/;"	m	struct:lua_Debug
name	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::string name;$/;"	m	struct:Catch::ConfigData
name	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual std::string name() const        { return m_data.name.empty() ? m_data.processName : m_data.name; }$/;"	f	class:Catch::Config
name	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::string name;$/;"	m	struct:Catch::GroupInfo
name	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::string name;$/;"	m	struct:Catch::TestRunInfo
name	.\include\sol\Catch\include\internal\catch_section_info.h	/^        std::string name;$/;"	m	struct:Catch::SectionInfo
name	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::string name;$/;"	m	struct:Catch::TestCaseInfo
name	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc
name	.\include\sol\Catch\single_include\catch.hpp	/^    const char* name;$/;"	m	struct:Catch::NameAndDesc
name	.\include\sol\examples\config.cpp	/^    std::string name;$/;"	m	struct:config	file:
name	.\include\sol\examples\usertype.cpp	/^    std::string name;$/;"	m	struct:foo	file:
name	.\include\sol\single\sol\sol.hpp	/^		static const std::string name;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::usertype_traits
name	.\include\sol\single\sol\sol.hpp	/^	const std::string usertype_traits<T>::name = detail::short_demangle<T>();$/;"	m	class:sol::sol::call_syntax::call_status::sol::usertype_traits
name	.\include\sol\sol\usertype_traits.hpp	/^		static const std::string name;$/;"	m	struct:sol::usertype_traits
name	.\include\sol\sol\usertype_traits.hpp	/^	const std::string usertype_traits<T>::name = detail::short_demangle<T>();$/;"	m	class:sol::usertype_traits
name	.\src\include\SkillTree.h	/^	std::string name() { return perk->getName(); }$/;"	f	class:SkillNode
name_id	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_UShort  name_id;$/;"	m	struct:FT_SfntName_
name_of	.\include\sol\single\sol\sol.hpp	/^	inline const std::string& name_of(meta_function mf) {$/;"	f	class:sol::sol::call_syntax::call_status::type
name_of	.\include\sol\sol\types.hpp	/^	inline const std::string& name_of(meta_function mf) {$/;"	f	class:sol::call_syntax::call_status::type
namedstyle	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_Var_Named_Style*  namedstyle;$/;"	m	struct:FT_MM_Var_
namewhat	.\dep\Lua\src\lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
namewhat	.\include\lua\lua.h	/^  const char *namewhat;	\/* (n) 'global', 'local', 'field', 'method' *\/$/;"	m	struct:lua_Debug
nat	.\include\sol\single\sol\sol.hpp	/^				static auto test(...)->nat;$/;"	m	struct:sol::meta::meta_detail::check_deducible_signature
nat	.\include\sol\single\sol\sol.hpp	/^				struct nat {};$/;"	s	struct:sol::meta::meta_detail::check_deducible_signature
nat	.\include\sol\sol\bind_traits.hpp	/^				static auto test(...)->nat;$/;"	m	struct:sol::meta::meta_detail::check_deducible_signature
nat	.\include\sol\sol\bind_traits.hpp	/^				struct nat {};$/;"	s	struct:sol::meta::meta_detail::check_deducible_signature
nativeendian	.\dep\Lua\src\lstrlib.c	/^} nativeendian = {1};$/;"	v	typeref:union:__anon19	file:
natural_order	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const int * natural_order;	\/* natural-order position array *\/$/;"	m	struct:jpeg_compress_struct
natural_order	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const int * natural_order; \/* natural-order position array for entropy decode *\/$/;"	m	struct:jpeg_decompress_struct
nci	.\dep\Lua\src\lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State
nci	.\include\lua\lstate.h	/^  unsigned short nci;  \/* number of items in 'ci' list *\/$/;"	m	struct:lua_State
need_value	.\dep\Lua\src\lcode.c	/^static int need_value (FuncState *fs, int list) {$/;"	f	file:
negatecondition	.\dep\Lua\src\lcode.c	/^static void negatecondition (FuncState *fs, expdesc *e) {$/;"	f	file:
nelems	.\include\sol\single\sol\sol.hpp	/^    size_t nelems;$/;"	m	struct:sol::luaL_Buffer_52
nelems	.\include\sol\sol\compatibility\5.1.0.h	/^    size_t nelems;$/;"	m	struct:luaL_Buffer_52
networkId	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int     networkId;$/;"	m	struct:__anon146
new_enum	.\include\sol\sol\state_view.hpp	/^		state_view& new_enum(const std::string& name, Args&&... args) {$/;"	f	class:sol::state_view
new_enum	.\include\sol\sol\table_core.hpp	/^		basic_table_core& new_enum(const std::string& name, Args&&... args) {$/;"	f	class:sol::basic_table_core
new_index	.\include\sol\single\sol\sol.hpp	/^		new_index,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
new_index	.\include\sol\sol\types.hpp	/^		new_index,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
new_index_call	.\include\sol\single\sol\sol.hpp	/^		static int new_index_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
new_index_call	.\include\sol\sol\usertype_metatable.hpp	/^		static int new_index_call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
new_localvar	.\dep\Lua\src\lparser.c	/^static void new_localvar (LexState *ls, TString *name) {$/;"	f	file:
new_localvarliteral	.\dep\Lua\src\lparser.c	191;"	d	file:
new_localvarliteral_	.\dep\Lua\src\lparser.c	/^static void new_localvarliteral_ (LexState *ls, const char *name, size_t sz) {$/;"	f	file:
new_simple_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& new_simple_usertype(const std::string& name, Args&&... args) {$/;"	f	class:sol::state_view
new_simple_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& new_simple_usertype(const std::string& name, constructors<CArgs...> ctor, Args&&... args) {$/;"	f	class:sol::state_view
new_simple_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& new_simple_usertype(const std::string& name, Args&&... args) {$/;"	f	class:sol::basic_table_core
new_simple_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& new_simple_usertype(const std::string& name, constructors<CArgs...> ctor, Args&&... args) {$/;"	f	class:sol::basic_table_core
new_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& new_usertype(const std::string& name, Args&&... args) {$/;"	f	class:sol::state_view
new_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& new_usertype(const std::string& name, constructors<CArgs...> ctor, Args&&... args) {$/;"	f	class:sol::state_view
new_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& new_usertype(const std::string& name, Args&&... args) {$/;"	f	class:sol::basic_table_core
new_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& new_usertype(const std::string& name, constructors<CArgs...> ctor, Args&&... args) {$/;"	f	class:sol::basic_table_core
newbox	.\dep\Lua\src\lauxlib.c	/^static void *newbox (lua_State *L, size_t newsize) {$/;"	f	file:
newfile	.\dep\Lua\src\liolib.c	/^static LStream *newfile (lua_State *L) {$/;"	f	file:
newindexfunc	.\include\sol\single\sol\sol.hpp	/^		lua_CFunction newindexfunc;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
newindexfunc	.\include\sol\sol\usertype_metatable.hpp	/^		lua_CFunction newindexfunc;$/;"	m	struct:sol::usertype_metatable
newlabelentry	.\dep\Lua\src\lparser.c	/^static int newlabelentry (LexState *ls, Labellist *l, TString *name,$/;"	f	file:
newline	.\include\sol\ninja_syntax.py	/^    def newline(self):$/;"	m	class:Writer
newlineIfNecessary	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        void newlineIfNecessary() {$/;"	f	class:Catch::XmlWriter
newprefile	.\dep\Lua\src\liolib.c	/^static LStream *newprefile (lua_State *L) {$/;"	f	file:
newupvalue	.\dep\Lua\src\lparser.c	/^static int newupvalue (FuncState *fs, TString *name, expdesc *v) {$/;"	f	file:
next	.\dep\Lua\src\lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon2::__anon3
next	.\dep\Lua\src\llex.c	32;"	d	file:
next	.\dep\Lua\src\lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anon8
next	.\dep\Lua\src\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
next	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_GlyphSlot      next;$/;"	m	struct:FT_GlyphSlotRec_
next	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_ListNode  next;$/;"	m	struct:FT_ListNodeRec_
next	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_saved_marker_ptr next;	\/* next in list, or NULL *\/$/;"	m	struct:jpeg_marker_struct
next	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  struct alloc_chain *next;$/;"	m	struct:alloc_chain	typeref:struct:alloc_chain::alloc_chain
next	.\include\lua\lfunc.h	/^      UpVal *next;  \/* linked list *\/$/;"	m	struct:UpVal::__anon155::__anon156
next	.\include\lua\lobject.h	/^    int next;  \/* for chaining (offset for next node) *\/$/;"	m	struct:TKey::__anon160
next	.\include\lua\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::
nextRow	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page
nextRow	.\include\SFML\Graphics\Font.hpp	/^        unsigned int     nextRow; \/\/\/< Y position of the next new row in the texture$/;"	m	struct:sf::Font::Page
next_ci	.\dep\Lua\src\ldo.c	326;"	d	file:
next_input_byte	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const JOCTET * next_input_byte; \/* => next byte to read from buffer *\/$/;"	m	struct:jpeg_source_mgr
next_output_byte	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JOCTET * next_output_byte;	\/* => next byte to write in buffer *\/$/;"	m	struct:jpeg_destination_mgr
next_scanline	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION next_scanline;	\/* 0 .. image_height-1  *\/$/;"	m	struct:jpeg_compress_struct
nextc	.\dep\Lua\src\liolib.c	/^static int nextc (RN *rn) {$/;"	f	file:
nh	.\dep\Lua\src\lparser.c	/^  int nh;  \/* total number of 'record' elements *\/$/;"	m	struct:ConsControl	file:
nil	.\include\sol\single\sol\sol.hpp	/^		nil = LUA_TNIL,$/;"	m	class:sol::sol::call_syntax::call_status::type
nil	.\include\sol\sol\types.hpp	/^		nil = LUA_TNIL,$/;"	m	class:sol::call_syntax::call_status::type
nilK	.\dep\Lua\src\lcode.c	/^static int nilK (FuncState *fs) {$/;"	f	file:
nil_t	.\include\sol\single\sol\sol.hpp	/^	struct nil_t {};$/;"	s	namespace:sol::sol
nil_t	.\include\sol\sol\types.hpp	/^	struct nil_t {};$/;"	s	namespace:sol
ninja	.\include\sol\bootstrap.py	/^ninja = ninja_syntax.Writer(open('build.ninja', 'w'))$/;"	v
ninja_syntax	.\include\sol\bootstrap.py	/^import ninja_syntax$/;"	i
nk	.\dep\Lua\src\lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon8
nk	.\dep\Lua\src\lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState
nk	.\include\lua\lobject.h	/^  } nk;$/;"	m	union:TKey	typeref:struct:TKey::__anon160
nk	.\include\lua\lparser.h	/^  int nk;  \/* number of elements in 'k' *\/$/;"	m	struct:FuncState
nlocvars	.\dep\Lua\src\lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nlocvars	.\include\lua\lparser.h	/^  short nlocvars;  \/* number of elements in 'f->locvars' *\/$/;"	m	struct:FuncState
nny	.\dep\Lua\src\lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
nny	.\include\lua\lstate.h	/^  unsigned short nny;  \/* number of non-yieldable calls in stack *\/$/;"	m	struct:lua_State
noLuaClosure	.\dep\Lua\src\ldebug.c	34;"	d	file:
noMatchingTestCases	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::noMatchingTestCases( std::string const& ) {}$/;"	f	class:Catch::LegacyReporterAdapter
noMatchingTestCases	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        virtual void noMatchingTestCases( std::string const& spec ) {$/;"	f	struct:Catch::CompactReporter
noThrow	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool noThrow;$/;"	m	struct:Catch::ConfigData
no_construction	.\include\sol\single\sol\sol.hpp	/^	struct no_construction {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
no_construction	.\include\sol\sol\raii.hpp	/^	struct no_construction {};$/;"	s	namespace:sol
no_constructor	.\include\sol\single\sol\sol.hpp	/^	const auto no_constructor = no_construction{};$/;"	m	namespace:sol::sol::call_syntax::call_status::sol
no_constructor	.\include\sol\sol\raii.hpp	/^	const auto no_constructor = no_construction{};$/;"	m	namespace:sol
no_metatable	.\include\sol\single\sol\sol.hpp	/^	const no_metatable_t no_metatable = {};$/;"	m	namespace:sol::sol
no_metatable	.\include\sol\sol\types.hpp	/^	const no_metatable_t no_metatable = {};$/;"	m	namespace:sol
no_metatable_t	.\include\sol\single\sol\sol.hpp	/^	struct no_metatable_t {};$/;"	s	namespace:sol::sol
no_metatable_t	.\include\sol\sol\types.hpp	/^	struct no_metatable_t {};$/;"	s	namespace:sol
no_prop	.\include\sol\single\sol\sol.hpp	/^	struct no_prop { };$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
no_prop	.\include\sol\sol\property.hpp	/^	struct no_prop { };$/;"	s	namespace:sol
node	.\dep\Lua\src\lobject.h	/^  Node *node;$/;"	m	struct:Table
node	.\include\lua\lobject.h	/^  Node *node;$/;"	m	struct:Table
nodeHeight	.\src\include\SkillTree.h	/^    int nodeHeight;$/;"	m	class:SkillTree
nodePrereq	.\src\include\SkillTree.h	/^	SkillNode* nodePrereq; \/\/ Node we must have to have this perk, parent Node$/;"	m	class:SkillNode
nodeWidth	.\src\include\SkillTree.h	/^    int nodeWidth;$/;"	m	class:SkillTree
nodesOnDepth	.\src\src\SkillTree.cpp	/^const int SkillTree::nodesOnDepth(const SkillNode* node, int depth) {$/;"	f	class:SkillTree
noenv	.\dep\Lua\src\loadlib.c	/^static int noenv (lua_State *L) {$/;"	f	file:
noexcept	.\include\sol\Optional\optional.hpp	/^    constexpr constexpr_optional_base() noexcept : init_(false), storage_(trivial_init) {};$/;"	m	struct:sol::constexpr_optional_base
noexcept	.\include\sol\Optional\optional.hpp	/^    constexpr optional_base() noexcept : init_(false), storage_(trivial_init) {};$/;"	m	struct:sol::optional_base
noexcept	.\include\sol\Optional\optional.hpp	/^  noexcept(::std::is_nothrow_move_assignable<T>::value && ::std::is_nothrow_move_constructible<T>::value)$/;"	f	class:sol::optional
noexcept	.\include\sol\Optional\optional.hpp	/^  optional(optional&& rhs) noexcept(::std::is_nothrow_move_constructible<T>::value)$/;"	f	class:sol::optional
noexcept	.\include\sol\Optional\optional.hpp	/^  void initialize(::std::initializer_list<U> il, Args&&... args) noexcept(noexcept(T(il, ::std::forward<Args>(args)...)))$/;"	f	class:sol::optional
noexcept	.\include\sol\Optional\optional.hpp	/^  void initialize(Args&&... args) noexcept(noexcept(T(::std::forward<Args>(args)...)))$/;"	f	class:sol::optional
noexcept	.\include\sol\Optional\optional.hpp	/^  void swap(optional<T>& rhs) noexcept(::std::is_nothrow_move_constructible<T>::value && noexcept(swap(::std::declval<T&>(), ::std::declval<T&>())))$/;"	f	class:sol::optional
noexcept	.\include\sol\Optional\optional.hpp	/^void swap(optional<T>& x, optional<T>& y) noexcept(noexcept(x.swap(y)))$/;"	f	namespace:sol
noexcept	.\include\sol\Optional\test_optional.cpp	/^  NothrowAssign(NothrowAssign&&) noexcept(false) {};$/;"	f	struct:NothrowAssign
noexcept	.\include\sol\Optional\test_optional.cpp	/^  NothrowBoth(NothrowBoth&&) noexcept(true) {};$/;"	f	struct:NothrowBoth
noexcept	.\include\sol\Optional\test_optional.cpp	/^  NothrowCtor(NothrowCtor&&) noexcept(true) {};$/;"	f	struct:NothrowCtor
noexcept	.\include\sol\Optional\test_optional.cpp	/^  NothrowNone(NothrowNone&&) noexcept(false) {};$/;"	f	struct:NothrowNone
noexcept	.\include\sol\Optional\test_optional.cpp	/^  void operator=(NothrowAssign&&) noexcept(true) {};$/;"	f	struct:NothrowAssign
noexcept	.\include\sol\Optional\test_optional.cpp	/^  void operator=(NothrowBoth&&) noexcept(true) {};$/;"	f	struct:NothrowBoth
noexcept	.\include\sol\Optional\test_optional.cpp	/^  void operator=(NothrowCtor&&) noexcept(false) {};$/;"	f	struct:NothrowCtor
noexcept	.\include\sol\Optional\test_optional.cpp	/^  void operator=(NothrowNone&&) noexcept(false) {};$/;"	f	struct:NothrowNone
noexcept	.\include\sol\Optional\test_type_traits.cpp	/^  Val & operator=( Val && ) noexcept = delete;$/;"	m	struct:std::experimental::Val	file:
noexcept	.\include\sol\Optional\test_type_traits.cpp	/^  VoidNothrowBoth(VoidNothrowBoth&&) noexcept(true) {};$/;"	f	struct:std::experimental::VoidNothrowBoth
noexcept	.\include\sol\Optional\test_type_traits.cpp	/^  void operator=(VoidNothrowBoth&&) noexcept(true) {}; \/\/ note void return type$/;"	f	struct:std::experimental::VoidNothrowBoth
noexcept	.\include\sol\single\sol\sol.hpp	/^		basic_lightuserdata() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::basic_lightuserdata
noexcept	.\include\sol\single\sol\sol.hpp	/^		basic_object() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_object
noexcept	.\include\sol\single\sol\sol.hpp	/^		basic_userdata() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::basic_userdata
noexcept	.\include\sol\single\sol\sol.hpp	/^		coroutine& operator=(const coroutine&) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
noexcept	.\include\sol\single\sol\sol.hpp	/^		coroutine() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
noexcept	.\include\sol\single\sol\sol.hpp	/^		coroutine(const coroutine&) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
noexcept	.\include\sol\single\sol\sol.hpp	/^		reference() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		stack_reference& operator=(const stack_reference&) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		stack_reference& operator=(stack_reference&&) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		stack_reference() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		stack_reference(const stack_reference&) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		stack_reference(stack_reference&& o) noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::stack_reference
noexcept	.\include\sol\single\sol\sol.hpp	/^		thread() noexcept = default;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
noexcept	.\include\sol\sol\coroutine.hpp	/^		coroutine& operator=(const coroutine&) noexcept = default;$/;"	m	class:sol::coroutine
noexcept	.\include\sol\sol\coroutine.hpp	/^		coroutine() noexcept = default;$/;"	m	class:sol::coroutine
noexcept	.\include\sol\sol\coroutine.hpp	/^		coroutine(const coroutine&) noexcept = default;$/;"	m	class:sol::coroutine
noexcept	.\include\sol\sol\load_result.hpp	/^		load_result(load_result&& o) noexcept : L(o.L), index(o.index), returncount(o.returncount), popcount(o.popcount), err(o.err) {$/;"	m	struct:sol::load_result
noexcept	.\include\sol\sol\load_result.hpp	/^		load_result(lua_State* L, int index = -1, int returncount = 0, int popcount = 0, load_status err = load_status::ok) noexcept : L(L), index(index), returncount(returncount), popcount(popcount), err(err) {$/;"	m	struct:sol::load_result
noexcept	.\include\sol\sol\object.hpp	/^		basic_object() noexcept = default;$/;"	m	class:sol::basic_object
noexcept	.\include\sol\sol\protected_function_result.hpp	/^		protected_function_result(lua_State* L, int index = -1, int returncount = 0, int popcount = 0, call_status err = call_status::ok) noexcept : L(L), index(index), returncount(returncount), popcount(popcount), err(err) {$/;"	m	struct:sol::protected_function_result
noexcept	.\include\sol\sol\protected_function_result.hpp	/^		protected_function_result(protected_function_result&& o) noexcept : L(o.L), index(o.index), returncount(o.returncount), popcount(o.popcount), err(o.err) {$/;"	m	struct:sol::protected_function_result
noexcept	.\include\sol\sol\reference.hpp	/^		reference() noexcept = default;$/;"	m	class:sol::reference
noexcept	.\include\sol\sol\stack_reference.hpp	/^		stack_reference& operator=(const stack_reference&) noexcept = default;$/;"	m	class:sol::stack_reference
noexcept	.\include\sol\sol\stack_reference.hpp	/^		stack_reference& operator=(stack_reference&&) noexcept = default;$/;"	m	class:sol::stack_reference
noexcept	.\include\sol\sol\stack_reference.hpp	/^		stack_reference() noexcept = default;$/;"	m	class:sol::stack_reference
noexcept	.\include\sol\sol\stack_reference.hpp	/^		stack_reference(const stack_reference&) noexcept = default;$/;"	m	class:sol::stack_reference
noexcept	.\include\sol\sol\stack_reference.hpp	/^		stack_reference(stack_reference&& o) noexcept = default;$/;"	m	class:sol::stack_reference
noexcept	.\include\sol\sol\thread.hpp	/^		thread() noexcept = default;$/;"	m	class:sol::thread
noexcept	.\include\sol\sol\userdata.hpp	/^		basic_lightuserdata() noexcept = default;$/;"	m	class:sol::basic_lightuserdata
noexcept	.\include\sol\sol\userdata.hpp	/^		basic_userdata() noexcept = default;$/;"	m	class:sol::basic_userdata
nominal_point_size	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  nominal_point_size;$/;"	m	struct:FT_WinFNT_HeaderRec_
nomore	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            nomore;      \/\/ flag if we saw a marker so must stop$/;"	m	struct:__anon98
nonDevelopRelease	.\include\sol\Catch\scripts\releaseCommon.py	/^    def nonDevelopRelease(self):$/;"	m	class:Version
non_null	.\include\sol\single\sol\sol.hpp	/^	struct non_null {};$/;"	s	namespace:sol::sol
non_null	.\include\sol\sol\types.hpp	/^	struct non_null {};$/;"	s	namespace:sol
non_overloaded	.\include\sol\test_functions.cpp	/^int non_overloaded(int x, int y, int z) {$/;"	f
none	.\include\sol\Catch\include\internal\catch_option.hpp	/^        bool none() const { return nullableValue == CATCH_NULL; }$/;"	f	class:Catch::Option
none	.\include\sol\single\sol\sol.hpp	/^		none = LUA_TNONE,$/;"	m	class:sol::sol::call_syntax::call_status::type
none	.\include\sol\sol\types.hpp	/^		none = LUA_TNONE,$/;"	m	class:sol::call_syntax::call_status::type
normalize	.\src\src\Vector2.cpp	/^Vector2 Vector2::normalize() {$/;"	f	class:Vector2
normalized	.\include\sol\test_usertypes.cpp	/^	Vec normalized() {$/;"	f	struct:Vec
nospecials	.\dep\Lua\src\lstrlib.c	/^static int nospecials (const char *p, size_t l) {$/;"	f	file:
notice	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*  notice;$/;"	m	struct:PS_FontInfoRec_
novariant	.\dep\Lua\src\lobject.h	130;"	d
novariant	.\include\lua\lobject.h	130;"	d
np	.\dep\Lua\src\lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState
np	.\include\lua\lparser.h	/^  int np;  \/* number of elements in 'p' *\/$/;"	m	struct:FuncState
nparams	.\dep\Lua\src\lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
nparams	.\include\lua\lua.h	/^  unsigned char nparams;\/* (u) number of parameters *\/$/;"	m	struct:lua_Debug
nresults	.\dep\Lua\src\lapi.c	/^  int nresults;$/;"	m	struct:CallS	file:
nresults	.\dep\Lua\src\lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
nresults	.\include\lua\lstate.h	/^  short nresults;  \/* expected number of results from this function *\/$/;"	m	struct:CallInfo
nullableValue	.\include\sol\Catch\include\internal\catch_option.hpp	/^        T* nullableValue;$/;"	m	class:Catch::Option
nullopt_t	.\include\sol\Optional\optional.hpp	/^  constexpr explicit nullopt_t(init){}$/;"	f	struct:sol::nullopt_t
nullopt_t	.\include\sol\Optional\optional.hpp	/^struct nullopt_t$/;"	s	namespace:sol
num2straux	.\dep\Lua\src\lstrlib.c	/^static int num2straux (char *buff, int sz, lua_Number x) {$/;"	f	file:
numGlyphs	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  numGlyphs;$/;"	m	struct:TT_MaxProfile_
num_axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt              num_axis;$/;"	m	struct:FT_MM_Var_
num_axis	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt     num_axis;$/;"	m	struct:FT_Multi_Master_
num_axis	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt          num_axis;$/;"	m	struct:PS_BlendRec_
num_bits	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int num_bits;$/;"	m	struct:__anon102
num_blue_values	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_blue_values;$/;"	m	struct:PS_PrivateRec_
num_charmaps	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Int            num_charmaps;$/;"	m	struct:FT_FaceRec_
num_comments	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 num_comments;$/;"	m	struct:__anon50
num_components	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int num_components;		\/* # of color components in JPEG image *\/$/;"	m	struct:jpeg_compress_struct
num_components	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int num_components;		\/* # of color components in JPEG image *\/$/;"	m	struct:jpeg_decompress_struct
num_default_design_vector	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt          num_default_design_vector;$/;"	m	struct:PS_BlendRec_
num_designs	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt              num_designs;$/;"	m	struct:FT_MM_Var_
num_designs	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt     num_designs;$/;"	m	struct:FT_Multi_Master_
num_designs	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt          num_designs;$/;"	m	struct:PS_BlendRec_
num_dicts	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          num_dicts;$/;"	m	struct:CID_FaceInfoRec_
num_faces	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long           num_faces;$/;"	m	struct:FT_FaceRec_
num_family_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_family_blues;$/;"	m	struct:PS_PrivateRec_
num_family_other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_family_other_blues;$/;"	m	struct:PS_PrivateRec_
num_fixed_sizes	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Int            num_fixed_sizes;$/;"	m	struct:FT_FaceRec_
num_glyphs	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long           num_glyphs;$/;"	m	struct:FT_FaceRec_
num_grays	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned short  num_grays;$/;"	m	struct:FT_Bitmap_
num_indices	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte num_indices;$/;"	m	struct:__anon52
num_killed	.\include\sol\test_usertypes.cpp	/^	static int num_killed;$/;"	m	struct:factory_test	file:
num_killed	.\include\sol\test_usertypes.cpp	/^int factory_test::num_killed = 0;$/;"	m	class:factory_test	file:
num_namedstyles	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt              num_namedstyles;$/;"	m	struct:FT_MM_Var_
num_other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_other_blues;$/;"	m	struct:PS_PrivateRec_
num_params	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Int          num_params;$/;"	m	struct:FT_Open_Args_
num_points	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned num_points;$/;"	m	struct:__anon48
num_points	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_points;$/;"	m	struct:PS_DesignMap_
num_saved	.\include\sol\test_usertypes.cpp	/^	static int num_saved;$/;"	m	struct:factory_test	file:
num_saved	.\include\sol\test_usertypes.cpp	/^int factory_test::num_saved = 0;$/;"	m	class:factory_test	file:
num_scans	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int num_scans;		\/* # of entries in scan_info array *\/$/;"	m	struct:jpeg_compress_struct
num_snap_heights	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_snap_heights;$/;"	m	struct:PS_PrivateRec_
num_snap_widths	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte    num_snap_widths;$/;"	m	struct:PS_PrivateRec_
num_subglyphs	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UInt           num_subglyphs;$/;"	m	struct:FT_GlyphSlotRec_
num_subrs	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UInt        num_subrs;$/;"	m	struct:CID_FaceDictRec_
num_tracks	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned num_tracks;$/;"	m	struct:__anon53
num_warnings	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  long num_warnings;		\/* number of corrupt-data warnings *\/$/;"	m	struct:jpeg_error_mgr
num_xuid	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          num_xuid;$/;"	m	struct:CID_FaceInfoRec_
numarith	.\dep\Lua\src\lobject.c	/^static lua_Number numarith (lua_State *L, int op, lua_Number v1,$/;"	f	file:
number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte number;$/;"	m	struct:__anon51
number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__byte number;$/;"	m	struct:__anon52
number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	} number;$/;"	m	struct:__anon39	typeref:union:__anon39::__anon40
number	.\include\sol\single\sol\sol.hpp	/^		number = LUA_TNUMBER,$/;"	m	class:sol::sol::call_syntax::call_status::type
number	.\include\sol\sol\types.hpp	/^		number = LUA_TNUMBER,$/;"	m	class:sol::call_syntax::call_status::type
number_Of_HMetrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  number_Of_HMetrics;$/;"	m	struct:TT_HoriHeader_
number_Of_VMetrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  number_Of_VMetrics;$/;"	m	struct:TT_VertHeader_
number_type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__FrameNumberType number_type;$/;"	m	struct:__anon39
numparams	.\dep\Lua\src\lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto
numparams	.\include\lua\lobject.h	/^  lu_byte numparams;  \/* number of fixed parameters *\/$/;"	m	struct:Proto
numusearray	.\dep\Lua\src\ltable.c	/^static unsigned int numusearray (const Table *t, unsigned int *nums) {$/;"	f	file:
numusehash	.\dep\Lua\src\ltable.c	/^static int numusehash (const Table *t, unsigned int *nums, unsigned int *pna) {$/;"	f	file:
nups	.\dep\Lua\src\lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	.\dep\Lua\src\lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nups	.\include\lua\lparser.h	/^  lu_byte nups;  \/* number of upvalues *\/$/;"	m	struct:FuncState
nups	.\include\lua\lua.h	/^  unsigned char nups;	\/* (u) number of upvalues *\/$/;"	m	struct:lua_Debug
nuse	.\dep\Lua\src\lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nuse	.\include\lua\lstate.h	/^  int nuse;  \/* number of elements *\/$/;"	m	struct:stringtable
nval	.\dep\Lua\src\lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon12
nval	.\include\lua\lparser.h	/^    lua_Number nval;  \/* for VKFLT *\/$/;"	m	union:expdesc::__anon163
nvalue	.\dep\Lua\src\lobject.h	165;"	d
nvalue	.\include\lua\lobject.h	165;"	d
obj	.\include\sol\bootstrap.py	/^    obj = object_file(f)$/;"	v
obj	.\include\sol\single\sol\sol.hpp	/^			T* obj;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::constructor_match
obj	.\include\sol\sol\call.hpp	/^			T* obj;$/;"	m	struct:sol::call_detail::constructor_match
obj2gco	.\dep\Lua\src\lstate.h	219;"	d
obj2gco	.\include\lua\lstate.h	219;"	d
objdir	.\include\sol\bootstrap.py	/^objdir = 'obj'$/;"	v
object	.\dep\SFML\extlibs\headers\freetype2\ftincrem.h	/^    FT_Incremental                  object;$/;"	m	struct:FT_Incremental_InterfaceRec_
object	.\include\sol\test_tables.cpp	/^struct object {$/;"	s	file:
object_file	.\include\sol\bootstrap.py	/^def object_file(f):$/;"	f
object_type	.\include\sol\single\sol\sol.hpp	/^				typedef T object_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
object_type	.\include\sol\single\sol\sol.hpp	/^				typedef T object_type;$/;"	t	struct:sol::meta::meta_detail::callable_traits
object_type	.\include\sol\single\sol\sol.hpp	/^			typedef typename wrap::object_type object_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper
object_type	.\include\sol\single\sol\sol.hpp	/^		typedef O object_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
object_type	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::object_type object_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
object_type	.\include\sol\sol\bind_traits.hpp	/^				typedef T object_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
object_type	.\include\sol\sol\bind_traits.hpp	/^				typedef T object_type;$/;"	t	struct:sol::meta::meta_detail::callable_traits
object_type	.\include\sol\sol\call.hpp	/^			typedef typename wrap::object_type object_type;$/;"	t	struct:sol::call_detail::lua_call_wrapper
object_type	.\include\sol\sol\wrapper.hpp	/^		typedef O object_type;$/;"	t	struct:sol::member_function_wrapper
object_type	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::object_type object_type;$/;"	t	struct:sol::wrapper
objects	.\src\include\Map.h	/^	std::vector<Object*> objects;$/;"	m	class:Map
offset	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 offset;$/;"	m	struct:__anon51
offset	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 offset;$/;"	m	struct:__anon52
offset	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t      offset;$/;"	m	struct:OggVorbis_File
offsets	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t     *offsets;$/;"	m	struct:OggVorbis_File
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\config_types.h	/^typedef int16_t ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef __int16 ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef int16_t ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef short ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef SInt16 ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef int16_t ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef short ogg_int16_t;$/;"	t
ogg_int16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef signed short ogg_int16_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\config_types.h	/^typedef int32_t ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef __int32 ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef int ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef int32_t ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef SInt32 ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef int ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef int32_t ogg_int32_t;$/;"	t
ogg_int32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef signed int ogg_int32_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\config_types.h	/^typedef int64_t ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef __int64 ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef int64_t ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef long long ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef SInt64 ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef int64_t ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef long long int ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef long long ogg_int64_t;$/;"	t
ogg_int64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef long ogg_int64_t;$/;"	t
ogg_iovec_t	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} ogg_iovec_t;$/;"	t	typeref:struct:__anon87
ogg_packet	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} ogg_packet;$/;"	t	typeref:struct:__anon91
ogg_page	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} ogg_page;$/;"	t	typeref:struct:__anon89
ogg_stream_state	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} ogg_stream_state;$/;"	t	typeref:struct:__anon90
ogg_sync_state	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} ogg_sync_state;$/;"	t	typeref:struct:__anon92
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\config_types.h	/^typedef uint16_t ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef uint16_t ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef unsigned __int16 ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef unsigned short ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef UInt16 ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef uint16_t ogg_uint16_t;$/;"	t
ogg_uint16_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef unsigned short ogg_uint16_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\config_types.h	/^typedef uint32_t ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef uint32_t ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef unsigned __int32 ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef unsigned int ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef UInt32 ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef uint32_t ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef unsigned int ogg_uint32_t;$/;"	t
ogg_uint32_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^   typedef unsigned ogg_uint32_t;$/;"	t
ogg_uint64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef uint64_t ogg_uint64_t;$/;"	t
ogg_uint64_t	.\dep\SFML\extlibs\headers\ogg\os_types.h	/^     typedef unsigned long long ogg_uint64_t;$/;"	t
oggpack_buffer	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^} oggpack_buffer;$/;"	t	typeref:struct:__anon88
ok	.\include\sol\single\sol\sol.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::sol::call_syntax::call_status
ok	.\include\sol\single\sol\sol.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::sol::call_syntax::call_status::load_status
ok	.\include\sol\single\sol\sol.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
ok	.\include\sol\sol\types.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::call_syntax::call_status
ok	.\include\sol\sol\types.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::call_syntax::call_status::load_status
ok	.\include\sol\sol\types.hpp	/^		ok = LUA_OK,$/;"	m	class:sol::call_syntax::call_status::thread_status
okToFail	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCaseInfo::okToFail() const {$/;"	f	class:Catch::TestCaseInfo
old_errfunc	.\dep\Lua\src\lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon15::__anon17
old_errfunc	.\include\lua\lstate.h	/^      ptrdiff_t old_errfunc;$/;"	m	struct:CallInfo::__anon166::__anon168
oldpc	.\dep\Lua\src\lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
oldpc	.\include\lua\lstate.h	/^  const Instruction *oldpc;  \/* last pc traced *\/$/;"	m	struct:lua_State
onApply	.\src\src\Perk.cpp	/^void Perk::onApply(Object* obj) {$/;"	f	class:Perk
onCollision	.\src\src\Object.cpp	/^void Object::onCollision(Object* o) {$/;"	f	class:Object
onCollision	.\src\src\Projectile.cpp	/^void Projectile::onCollision(Object* o) {$/;"	f	class:Projectile
onConfigurationChanged	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onConfigurationChanged(ANativeActivity* activity)$/;"	f	file:
onContentRectChanged	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onContentRectChanged(ANativeActivity* activity, const ARect* rect)$/;"	f	file:
onCreate	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^void RenderWindow::onCreate()$/;"	f	class:sf::RenderWindow
onCreate	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::onCreate()$/;"	f	class:sf::Window
onDamageDealt	.\lua\A.lua	/^function onDamageDealt(dmg, hit)$/;"	f
onDamageDealt	.\lua\B.lua	/^function onDamageDealt(dmg, hit)$/;"	f
onDamageDealt	.\lua\tower.lua	/^function onDamageDealt(dmg, hit)$/;"	f
onDamageDealt	.\src\src\Object.cpp	/^void Object::onDamageDealt(int dmg, Object* hit) {$/;"	f	class:Object
onDamageDealt	.\src\src\Perk.cpp	/^void Perk::onDamageDealt(int dmg, Object* hit) {$/;"	f	class:Perk
onDamageTaken	.\lua\enemy.lua	/^function onDamageTaken(dmg, who)$/;"	f
onDamageTaken	.\src\src\Enemy.cpp	/^void Enemy::onDamageTaken(int dmg, Object* who) {$/;"	f	class:Enemy
onDamageTaken	.\src\src\Object.cpp	/^void Object::onDamageTaken(int dmg, Object* o) {$/;"	f	class:Object
onDamageTaken	.\src\src\Perk.cpp	/^void Perk::onDamageTaken(int dmg, Object* attacker) {$/;"	f	class:Perk
onDeath	.\src\src\Enemy.cpp	/^void Enemy::onDeath() {$/;"	f	class:Enemy
onDeath	.\src\src\Object.cpp	/^void Object::onDeath() {$/;"	f	class:Object
onDeath	.\src\src\Perk.cpp	/^void Perk::onDeath() {$/;"	f	class:Perk
onDestroy	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onDestroy(ANativeActivity* activity)$/;"	f	file:
onGetData	.\dep\SFML\src\SFML\Audio\Music.cpp	/^bool Music::onGetData(SoundStream::Chunk& data)$/;"	f	class:sf::Music
onInputQueueCreated	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onInputQueueCreated(ANativeActivity* activity, AInputQueue* queue)$/;"	f	file:
onInputQueueDestroyed	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onInputQueueDestroyed(ANativeActivity* activity, AInputQueue* queue)$/;"	f	file:
onLowMemory	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onLowMemory(ANativeActivity* activity)$/;"	f	file:
onMove	.\src\src\Object.cpp	/^void Object::onMove(int diff) {$/;"	f	class:Object
onMove	.\src\src\Perk.cpp	/^void Perk::onMove(int diff) {$/;"	f	class:Perk
onNativeWindowCreated	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onNativeWindowCreated(ANativeActivity* activity, ANativeWindow* window)$/;"	f	file:
onNativeWindowDestroyed	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onNativeWindowDestroyed(ANativeActivity* activity, ANativeWindow* window)$/;"	f	file:
onNativeWindowRedrawNeeded	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onNativeWindowRedrawNeeded(ANativeActivity* activity, ANativeWindow* window)$/;"	f	file:
onNativeWindowResized	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onNativeWindowResized(ANativeActivity* activity, ANativeWindow* window)$/;"	f	file:
onPause	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onPause(ANativeActivity* activity)$/;"	f	file:
onProcessSamples	.\dep\SFML\src\SFML\Audio\SoundBufferRecorder.cpp	/^bool SoundBufferRecorder::onProcessSamples(const Int16* samples, std::size_t sampleCount)$/;"	f	class:sf::SoundBufferRecorder
onReceive	.\dep\SFML\src\SFML\Network\Packet.cpp	/^void Packet::onReceive(const void* data, std::size_t size)$/;"	f	class:sf::Packet
onResize	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^void RenderWindow::onResize()$/;"	f	class:sf::RenderWindow
onResize	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::onResize()$/;"	f	class:sf::Window
onResume	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onResume(ANativeActivity* activity)$/;"	f	file:
onSaveInstanceState	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void* onSaveInstanceState(ANativeActivity* activity, size_t* outLen)$/;"	f	file:
onSeek	.\dep\SFML\src\SFML\Audio\Music.cpp	/^void Music::onSeek(Time timeOffset)$/;"	f	class:sf::Music
onSend	.\dep\SFML\src\SFML\Network\Packet.cpp	/^const void* Packet::onSend(std::size_t& size)$/;"	f	class:sf::Packet
onShoot	.\lua\A.lua	/^function onShoot(target)$/;"	f
onShoot	.\lua\B.lua	/^function onShoot(target)$/;"	f
onShoot	.\lua\tower.lua	/^function onShoot(target)$/;"	f
onShoot	.\src\src\Object.cpp	/^void Object::onShoot(Object* target) {$/;"	f	class:Object
onShoot	.\src\src\Perk.cpp	/^void Perk::onShoot(Object* target) {$/;"	f	class:Perk
onStart	.\dep\SFML\src\SFML\Audio\SoundBufferRecorder.cpp	/^bool SoundBufferRecorder::onStart()$/;"	f	class:sf::SoundBufferRecorder
onStart	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^bool SoundRecorder::onStart()$/;"	f	class:sf::SoundRecorder
onStart	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onStart(ANativeActivity* activity)$/;"	f	file:
onStop	.\dep\SFML\src\SFML\Audio\SoundBufferRecorder.cpp	/^void SoundBufferRecorder::onStop()$/;"	f	class:sf::SoundBufferRecorder
onStop	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::onStop()$/;"	f	class:sf::SoundRecorder
onStop	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onStop(ANativeActivity* activity)$/;"	f	file:
onUpdate	.\lua\A.lua	/^function onUpdate(diff)$/;"	f
onUpdate	.\lua\B.lua	/^function onUpdate(diff)$/;"	f
onUpdate	.\lua\enemy.lua	/^function onUpdate(diff)$/;"	f
onUpdate	.\lua\test.lua	/^function onUpdate(diff)$/;"	f
onUpdate	.\lua\tower.lua	/^function onUpdate(diff)$/;"	f
onUpdate	.\src\src\Enemy.cpp	/^void Enemy::onUpdate(int diff) {$/;"	f	class:Enemy
onUpdate	.\src\src\Object.cpp	/^void Object::onUpdate(int diff) {$/;"	f	class:Object
onUpdate	.\src\src\Perk.cpp	/^void Perk::onUpdate(int diff) {$/;"	f	class:Perk
onWindowFocusChanged	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void onWindowFocusChanged(ANativeActivity* activity, int focused)$/;"	f	file:
on_match	.\include\sol\sol\call.hpp	/^			struct on_match {$/;"	s	struct:sol::call_detail::lua_call_wrapper
on_mismatch	.\include\sol\sol\stack_guard.hpp	/^		std::function<void(int, int)> on_mismatch;$/;"	m	struct:sol::stack_guard
onmatch	.\include\sol\sol\call.hpp	/^			struct onmatch {$/;"	s	struct:sol::call_detail::lua_call_wrapper
op	.\include\sol\Catch\include\internal\catch_result_builder.h	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
op	.\include\sol\Catch\single_include\catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
opCast	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    inline T& opCast(T const& t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal
opCast	.\include\sol\Catch\include\internal\catch_evaluate.hpp	/^    inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal
opCast	.\include\sol\Catch\single_include\catch.hpp	/^    inline T& opCast(T const& t) { return const_cast<T&>(t); }$/;"	f	namespace:Catch::Internal
opCast	.\include\sol\Catch\single_include\catch.hpp	/^    inline std::nullptr_t opCast(std::nullptr_t) { return nullptr; }$/;"	f	namespace:Catch::Internal
opb	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  oggpack_buffer opb;$/;"	m	struct:vorbis_block
open	.\dep\Lua\src\lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon2	typeref:struct:UpVal::__anon2::__anon3
open	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^bool SoundFileReaderFlac::open(InputStream& stream, Info& info)$/;"	f	class:sf::priv::SoundFileReaderFlac
open	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^bool SoundFileReaderOgg::open(InputStream& stream, Info& info)$/;"	f	class:sf::priv::SoundFileReaderOgg
open	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^bool SoundFileReaderWav::open(InputStream& stream, Info& info)$/;"	f	class:sf::priv::SoundFileReaderWav
open	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^bool SoundFileWriterFlac::open(const std::string& filename, unsigned int sampleRate, unsigned int channelCount)$/;"	f	class:sf::priv::SoundFileWriterFlac
open	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^bool SoundFileWriterOgg::open(const std::string& filename, unsigned int sampleRate, unsigned int channelCount)$/;"	f	class:sf::priv::SoundFileWriterOgg
open	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^bool SoundFileWriterWav::open(const std::string& filename, unsigned int sampleRate, unsigned int channelCount)$/;"	f	class:sf::priv::SoundFileWriterWav
open	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::DataChannel::open(Ftp::TransferMode mode)$/;"	f	class:sf::Ftp::DataChannel
open	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^bool FileInputStream::open(const std::string& filename)$/;"	f	class:sf::FileInputStream
open	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^void MemoryInputStream::open(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::MemoryInputStream
open	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^bool JoystickImpl::open(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
open	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^bool SensorImpl::open(Sensor::Type sensor)$/;"	f	class:sf::priv::SensorImpl
open	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^bool JoystickImpl::open(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
open	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^bool JoystickImpl::open(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
open	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^bool SensorImpl::open(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
open	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^bool JoystickImpl::open(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
open	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^bool SensorImpl::open(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
open	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^bool JoystickImpl::open(unsigned int index)$/;"	f	class:sf::priv::JoystickImpl
open	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^bool SensorImpl::open(Sensor::Type \/*sensor*\/)$/;"	f	class:sf::priv::SensorImpl
open	.\include\lua\lfunc.h	/^    } open;$/;"	m	union:UpVal::__anon155	typeref:struct:UpVal::__anon155::__anon156
open	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void open() {$/;"	f	class:Catch::TestCaseTracking::TrackerBase
openFromFile	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^bool InputSoundFile::openFromFile(const std::string& filename)$/;"	f	class:sf::InputSoundFile
openFromFile	.\dep\SFML\src\SFML\Audio\Music.cpp	/^bool Music::openFromFile(const std::string& filename)$/;"	f	class:sf::Music
openFromFile	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^bool OutputSoundFile::openFromFile(const std::string& filename, unsigned int sampleRate, unsigned int channelCount)$/;"	f	class:sf::OutputSoundFile
openFromMemory	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^bool InputSoundFile::openFromMemory(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::InputSoundFile
openFromMemory	.\dep\SFML\src\SFML\Audio\Music.cpp	/^bool Music::openFromMemory(const void* data, std::size_t sizeInBytes)$/;"	f	class:sf::Music
openFromStream	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^bool InputSoundFile::openFromStream(InputStream& stream)$/;"	f	class:sf::InputSoundFile
openFromStream	.\dep\SFML\src\SFML\Audio\Music.cpp	/^bool Music::openFromStream(InputStream& stream)$/;"	f	class:sf::Music
openStream	.\include\sol\Catch\include\internal\catch_config.hpp	/^        IStream const* openStream() {$/;"	f	class:Catch::Config
open_func	.\dep\Lua\src\lparser.c	/^static void open_func (LexState *ls, FuncState *fs, BlockCnt *bl) {$/;"	f	file:
open_libraries	.\include\sol\sol\state_view.hpp	/^		void open_libraries(Args&&... args) {$/;"	f	class:sol::state_view
opencheck	.\dep\Lua\src\liolib.c	/^static void opencheck (lua_State *L, const char *fname, const char *mode) {$/;"	f	file:
openupval	.\dep\Lua\src\lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
openupval	.\include\lua\lstate.h	/^  UpVal *openupval;  \/* list of open upvalues in this stack *\/$/;"	m	struct:lua_State
operator !	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    Generic::Not<ExpressionT> Matcher<ExpressionT>::operator ! () const {$/;"	f	class:Catch::Matchers::Impl::Matcher
operator !	.\include\sol\Catch\include\internal\catch_option.hpp	/^        bool operator !() const { return nullableValue == CATCH_NULL; }$/;"	f	class:Catch::Option
operator !	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        bool operator !() const { return m_p == CATCH_NULL; }$/;"	f	class:Catch::Ptr
operator !	.\include\sol\Catch\single_include\catch.hpp	/^        bool operator !() const { return m_p == CATCH_NULL; }$/;"	f	class:Catch::Ptr
operator !	.\include\sol\Catch\single_include\catch.hpp	/^    Generic::Not<ExpressionT> Matcher<ExpressionT>::operator ! () const {$/;"	f	class:Catch::Matchers::Impl::Matcher
operator !=	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^bool operator !=(const BlendMode& left, const BlendMode& right)$/;"	f	namespace:sf
operator !=	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^bool operator !=(const Color& left, const Color& right)$/;"	f	namespace:sf
operator !=	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator !=(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator !=	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator !=(const String& left, const String& right)$/;"	f	namespace:sf
operator !=	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator !=(Time left, Time right)$/;"	f	namespace:sf
operator !=	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator !=(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator !=	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        friend bool operator != ( Approx const& lhs, double rhs ) {$/;"	f	class:Catch::Detail::Approx
operator !=	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        friend bool operator != ( double lhs, Approx const& rhs ) {$/;"	f	class:Catch::Detail::Approx
operator !=	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator != ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator !=	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator != ( bool rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator !=	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        bool operator!=( const minimal_allocator<U>& ) const { return false; }$/;"	f	struct:__anon187::minimal_allocator
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator!=(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator !=	.\include\sol\Optional\test_optional.cpp	/^bool operator!=( Oracle const& a, Oracle const& b ) { return a.val.i != b.val.i; }$/;"	f
operator !=	.\include\sol\single\sol\sol.hpp	/^			bool operator!=(const char* r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator !=	.\include\sol\single\sol\sol.hpp	/^			bool operator!=(const std::string& r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator !=	.\include\sol\single\sol\sol.hpp	/^			bool operator!=(const string_shim& r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator !=	.\include\sol\single\sol\sol.hpp	/^		bool operator != (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator !=	.\include\sol\single\sol\sol.hpp	/^		bool operator!= (const basic_table_iterator& right) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!= (const reference& l, const reference& r) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!= (const stack_reference& l, const stack_reference& r) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(T&& left, const proxy<Table, Key>& right) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(const nil_t&, const object& rhs) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(const object& lhs, const nil_t&) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(const proxy<Table, Key>& right, T&& left) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(const proxy<Table, Key>& right, nil_t) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(nil_t, const proxy<Table, Key>& right) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator !=	.\include\sol\single\sol\sol.hpp	/^	inline bool operator!=(nil_t, nil_t) { return false; }$/;"	f	namespace:sol::sol
operator !=	.\include\sol\sol\object.hpp	/^	inline bool operator!=(const nil_t&, const object& rhs) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\object.hpp	/^	inline bool operator!=(const object& lhs, const nil_t&) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\proxy.hpp	/^	inline bool operator!=(T&& left, const proxy<Table, Key>& right) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\proxy.hpp	/^	inline bool operator!=(const proxy<Table, Key>& right, T&& left) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\proxy.hpp	/^	inline bool operator!=(const proxy<Table, Key>& right, nil_t) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\proxy.hpp	/^	inline bool operator!=(nil_t, const proxy<Table, Key>& right) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\reference.hpp	/^	inline bool operator!= (const reference& l, const reference& r) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\stack_reference.hpp	/^	inline bool operator!= (const stack_reference& l, const stack_reference& r) {$/;"	f	namespace:sol
operator !=	.\include\sol\sol\string_shim.hpp	/^			bool operator!=(const char* r) const {$/;"	f	struct:sol::string_detail::string_shim
operator !=	.\include\sol\sol\string_shim.hpp	/^			bool operator!=(const std::string& r) const {$/;"	f	struct:sol::string_detail::string_shim
operator !=	.\include\sol\sol\string_shim.hpp	/^			bool operator!=(const string_shim& r) const {$/;"	f	struct:sol::string_detail::string_shim
operator !=	.\include\sol\sol\table_iterator.hpp	/^		bool operator!= (const basic_table_iterator& right) const {$/;"	f	class:sol::basic_table_iterator
operator !=	.\include\sol\sol\types.hpp	/^	inline bool operator!=(nil_t, nil_t) { return false; }$/;"	f	namespace:sol
operator !=	.\include\sol\sol\variadic_args.hpp	/^		bool operator != (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator %	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator %(Time left, Time right)$/;"	f	namespace:sf
operator %=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator %=(Time& left, Time right)$/;"	f	namespace:sf
operator &	.\include\sol\Optional\test_optional.cpp	/^  int operator&() const { return n; }$/;"	f	struct:Nasty
operator &	.\include\sol\Optional\test_optional.cpp	/^  int operator&() { return n; }$/;"	f	struct:Nasty
operator &&	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AllOf operator && ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
operator &&	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    Generic::AllOf<ExpressionT> Matcher<ExpressionT>::operator && ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Matcher
operator &&	.\include\sol\Catch\single_include\catch.hpp	/^            AllOf operator && ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
operator &&	.\include\sol\Catch\single_include\catch.hpp	/^    Generic::AllOf<ExpressionT> Matcher<ExpressionT>::operator && ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Matcher
operator ()	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        Approx operator()( double value ) {$/;"	f	class:Catch::Detail::Approx
operator ()	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        void operator()( std::string const&str ) {$/;"	f	struct:Catch::OutputDebugWriter
operator ()	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        bool operator() (TestCase i,TestCase j) const { return (i<j);}$/;"	f	struct:Catch::LexSort
operator ()	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        int operator()( int n ) const { return std::rand() % n; }$/;"	f	struct:Catch::RandomNumberGenerator
operator ()	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^            bool operator ()( Ptr<ITracker> const& tracker ) {$/;"	f	class:Catch::TestCaseTracking::TrackerBase::TrackerHasName
operator ()	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            bool operator() ( Ptr<SectionNode> const& node ) const {$/;"	f	struct:Catch::CumulativeReporterBase::BySectionInfo
operator ()	.\include\sol\Catch\projects\SelfTest\PartTrackerTests.cpp	/^        TrackerContext& operator()() const {$/;"	f	class:Catch::LocalContext
operator ()	.\include\sol\Optional\optional.hpp	/^    constexpr result_type operator()(argument_type const& arg) const {$/;"	f	struct:std::hash
operator ()	.\include\sol\examples\functions.cpp	/^    int operator()(int x) {$/;"	f	struct:multiplier
operator ()	.\include\sol\single\sol\sol.hpp	/^			decltype(auto) operator()(Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper::invoker
operator ()	.\include\sol\single\sol\sol.hpp	/^			decltype(auto) operator()(F& fx, Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper::caller
operator ()	.\include\sol\single\sol\sol.hpp	/^			decltype(auto) operator()(Fx&& fx, O& mem, Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper::caller
operator ()	.\include\sol\single\sol\sol.hpp	/^			decltype(auto) operator()(Fx&& fx, object_type& mem, Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::wrapper::caller
operator ()	.\include\sol\single\sol\sol.hpp	/^			decltype(auto) operator()(O& mem, Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper::invoker
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_free_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_variable
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_function
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_variable
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(types<Fx>, index_value<I>, types<R...> r, types<Args...> a, lua_State* L, int, int start) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::constructor_match
operator ()	.\include\sol\single\sol\sol.hpp	/^			int operator()(types<Fx>, index_value<I>, types<R>, types<Args...>, lua_State* L, int, int) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::c_call_matcher
operator ()	.\include\sol\single\sol\sol.hpp	/^			void operator()(T&& obj) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::default_destruct
operator ()	.\include\sol\single\sol\sol.hpp	/^			void operator()(T&& obj, Args&&... args) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::default_construct
operator ()	.\include\sol\single\sol\sol.hpp	/^			void operator()(T* p) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::deleter
operator ()	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) operator()(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
operator ()	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) operator()(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
operator ()	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) operator()(types<Ret...>, Args&&... args) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
operator ()	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) operator()(types<Ret...>, Args&&... args) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
operator ()	.\include\sol\single\sol\sol.hpp	/^		function_result operator()(Args&&... args) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::basic_function
operator ()	.\include\sol\single\sol\sol.hpp	/^		protected_function_result operator()(Args&&... args) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
operator ()	.\include\sol\sol\call.hpp	/^				int operator()(types<Fx>, index_value<I>, types<R...> r, types<Args...> a, lua_State* L, int, int start, F& f) {$/;"	f	struct:sol::call_detail::lua_call_wrapper::onmatch
operator ()	.\include\sol\sol\call.hpp	/^				int operator()(types<Fx>, index_value<I>, types<R...>, types<Args...>, lua_State* L, int, int, F& fx) {$/;"	f	struct:sol::call_detail::lua_call_wrapper::on_match
operator ()	.\include\sol\sol\call.hpp	/^			int operator()(types<Fx>, index_value<I>, types<R...> r, types<Args...> a, lua_State* L, int, int start) const {$/;"	f	struct:sol::call_detail::constructor_match
operator ()	.\include\sol\sol\coroutine.hpp	/^		decltype(auto) operator()(types<Ret...>, Args&&... args) {$/;"	f	class:sol::coroutine
operator ()	.\include\sol\sol\coroutine.hpp	/^		protected_function_result operator()(Args&&... args) {$/;"	f	class:sol::coroutine
operator ()	.\include\sol\sol\function.hpp	/^		decltype(auto) operator()(types<Ret...>, Args&&... args) const {$/;"	f	class:sol::basic_function
operator ()	.\include\sol\sol\function.hpp	/^		function_result operator()(Args&&... args) const {$/;"	f	class:sol::basic_function
operator ()	.\include\sol\sol\function_types_overloaded.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::overloaded_function
operator ()	.\include\sol\sol\function_types_stateful.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::functor_function
operator ()	.\include\sol\sol\function_types_stateful.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::member_function
operator ()	.\include\sol\sol\function_types_stateful.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::member_variable
operator ()	.\include\sol\sol\function_types_stateless.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_free_function
operator ()	.\include\sol\sol\function_types_stateless.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_function
operator ()	.\include\sol\sol\function_types_stateless.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_variable
operator ()	.\include\sol\sol\function_types_stateless.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_function
operator ()	.\include\sol\sol\function_types_stateless.hpp	/^			int operator()(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_variable
operator ()	.\include\sol\sol\function_types_templated.hpp	/^			int operator()(types<Fx>, index_value<I>, types<R>, types<Args...>, lua_State* L, int, int) const {$/;"	f	struct:sol::function_detail::c_call_matcher
operator ()	.\include\sol\sol\load_result.hpp	/^		decltype(auto) operator()(Args&&... args) {$/;"	f	struct:sol::load_result
operator ()	.\include\sol\sol\protected_function.hpp	/^		decltype(auto) operator()(types<Ret...>, Args&&... args) const {$/;"	f	class:sol::basic_protected_function
operator ()	.\include\sol\sol\protected_function.hpp	/^		protected_function_result operator()(Args&&... args) const {$/;"	f	class:sol::basic_protected_function
operator ()	.\include\sol\sol\proxy.hpp	/^		decltype(auto) operator()(Args&&... args) {$/;"	f	struct:sol::proxy
operator ()	.\include\sol\sol\raii.hpp	/^			void operator()(T&& obj) const {$/;"	f	struct:sol::detail::default_destruct
operator ()	.\include\sol\sol\raii.hpp	/^			void operator()(T&& obj, Args&&... args) const {$/;"	f	struct:sol::detail::default_construct
operator ()	.\include\sol\sol\raii.hpp	/^			void operator()(T* p) const {$/;"	f	struct:sol::detail::deleter
operator ()	.\include\sol\sol\stack_proxy.hpp	/^		decltype(auto) operator()(Args&&... args) {$/;"	f	struct:sol::stack_proxy
operator ()	.\include\sol\sol\wrapper.hpp	/^			decltype(auto) operator()(Args&&... args) const {$/;"	f	struct:sol::wrapper::invoker
operator ()	.\include\sol\sol\wrapper.hpp	/^			decltype(auto) operator()(F& fx, Args&&... args) const {$/;"	f	struct:sol::wrapper::caller
operator ()	.\include\sol\sol\wrapper.hpp	/^			decltype(auto) operator()(Fx&& fx, O& mem, Args&&... args) const {$/;"	f	struct:sol::member_function_wrapper::caller
operator ()	.\include\sol\sol\wrapper.hpp	/^			decltype(auto) operator()(Fx&& fx, object_type& mem, Args&&... args) const {$/;"	f	struct:sol::wrapper::caller
operator ()	.\include\sol\sol\wrapper.hpp	/^			decltype(auto) operator()(O& mem, Args&&... args) const {$/;"	f	struct:sol::member_function_wrapper::invoker
operator ()	.\include\sol\test_tables.cpp	/^	std::string operator() () {$/;"	f	struct:object
operator ()	.\include\sol\test_usertypes.cpp	/^		void operator()(factory_test* f) {$/;"	f	struct:factory_test::deleter
operator *	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color operator *(const Color& left, const Color& right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform operator *(const Transform& left, const Transform& right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Vector2f operator *(const Transform& left, const Vector2f& right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator *(Int64 left, Time right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator *(Time left, Int64 right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator *(Time left, float right)$/;"	f	namespace:sf
operator *	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator *(float left, Time right)$/;"	f	namespace:sf
operator *	.\include\sol\Catch\include\internal\catch_option.hpp	/^        T const& operator*() const { return *nullableValue; }$/;"	f	class:Catch::Option
operator *	.\include\sol\Catch\include\internal\catch_option.hpp	/^        T& operator*() { return *nullableValue; }$/;"	f	class:Catch::Option
operator *	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr
operator *	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    T operator * ( const T& ) const { return T(); }$/;"	f	struct:Ex
operator *	.\include\sol\Catch\single_include\catch.hpp	/^        T& operator*() const { return *m_p; }$/;"	f	class:Catch::Ptr
operator *	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T& operator *() & {$/;"	f	class:sol::optional
operator *	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T&& operator *() && {$/;"	f	class:sol::optional
operator *	.\include\sol\Optional\optional.hpp	/^  T& operator *() {$/;"	f	class:sol::optional
operator *	.\include\sol\Optional\optional.hpp	/^  constexpr T const& operator *() const {$/;"	f	class:sol::optional
operator *	.\include\sol\Optional\optional.hpp	/^  constexpr T const& operator *() const& {$/;"	f	class:sol::optional
operator *	.\include\sol\Optional\optional.hpp	/^  constexpr T& operator*() const {$/;"	f	class:sol::optional
operator *	.\include\sol\single\sol\sol.hpp	/^		const_reference operator*() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator *	.\include\sol\single\sol\sol.hpp	/^		reference operator*() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator *	.\include\sol\single\sol\sol.hpp	/^		reference operator*() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator *	.\include\sol\sol\table_iterator.hpp	/^		const_reference operator*() const {$/;"	f	class:sol::basic_table_iterator
operator *	.\include\sol\sol\table_iterator.hpp	/^		reference operator*() {$/;"	f	class:sol::basic_table_iterator
operator *	.\include\sol\sol\variadic_args.hpp	/^		reference operator*() {$/;"	f	struct:sol::va_iterator
operator *	.\src\include\Vector2.h	/^	friend Vector2 operator * (const Vector2& v, const float f) {$/;"	f	class:Vector2
operator *	.\src\include\Vector2.h	/^	friend Vector2 operator * (const Vector2& v1, const Vector2& v2) {$/;"	f	class:Vector2
operator *	.\src\include\Vector2.h	/^	friend Vector2 operator * (const float f, const Vector2& v) {$/;"	f	class:Vector2
operator *	.\src\src\Stats.cpp	/^Stats Stats::operator* (float m) const {$/;"	f	class:Stats
operator *=	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color& operator *=(Color& left, const Color& right)$/;"	f	namespace:sf
operator *=	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& operator *=(Transform& left, const Transform& right)$/;"	f	namespace:sf
operator *=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator *=(Time& left, Int64 right)$/;"	f	namespace:sf
operator *=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator *=(Time& left, float right)$/;"	f	namespace:sf
operator *=	.\src\include\Vector2.h	/^	void operator *= (Vector2* a_V) {$/;"	f	class:Vector2
operator *=	.\src\include\Vector2.h	/^	void operator *= (const Vector2& a_V) {$/;"	f	class:Vector2
operator *=	.\src\include\Vector2.h	/^	void operator *= (const float f) {$/;"	f	class:Vector2
operator +	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color operator +(const Color& left, const Color& right)$/;"	f	namespace:sf
operator +	.\dep\SFML\src\SFML\System\String.cpp	/^String operator +(const String& left, const String& right)$/;"	f	namespace:sf
operator +	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator +(Time left, Time right)$/;"	f	namespace:sf
operator +	.\include\sol\Catch\include\internal\catch_common.h	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	.\include\sol\Catch\include\internal\catch_common.h	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    TestDef& operator + ( const std::string& ) {$/;"	f	struct:TestDef
operator +	.\include\sol\Catch\single_include\catch.hpp	/^        std::string operator+() {$/;"	f	struct:Catch::StreamEndStop
operator +	.\include\sol\Catch\single_include\catch.hpp	/^    T const& operator + ( T const& value, StreamEndStop ) {$/;"	f	namespace:Catch
operator +	.\include\sol\single\sol\sol.hpp	/^		va_iterator operator+ (difference_type idx) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator +	.\include\sol\single\sol\sol.hpp	/^	inline va_iterator<is_const> operator+(typename va_iterator<is_const>::difference_type n, const va_iterator<is_const>& r) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator +	.\include\sol\sol\variadic_args.hpp	/^		va_iterator operator+ (difference_type idx) const {$/;"	f	struct:sol::va_iterator
operator +	.\include\sol\sol\variadic_args.hpp	/^	inline va_iterator<is_const> operator+(typename va_iterator<is_const>::difference_type n, const va_iterator<is_const>& r) {$/;"	f	namespace:sol
operator +	.\src\include\Vector2.h	/^	friend Vector2 operator + (const Vector2& v1, Vector2* v2) {$/;"	f	class:Vector2
operator +	.\src\include\Vector2.h	/^	friend Vector2 operator + (const Vector2& v1, const Vector2& v2) {$/;"	f	class:Vector2
operator +	.\src\src\Stats.cpp	/^Stats Stats::operator+ (const Stats& o) const {$/;"	f	class:Stats
operator ++	.\include\sol\single\sol\sol.hpp	/^		basic_table_iterator operator++(int) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator ++	.\include\sol\single\sol\sol.hpp	/^		basic_table_iterator& operator++() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator ++	.\include\sol\single\sol\sol.hpp	/^		va_iterator operator++ (int) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator ++	.\include\sol\single\sol\sol.hpp	/^		va_iterator& operator++ () {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator ++	.\include\sol\sol\table_iterator.hpp	/^		basic_table_iterator operator++(int) {$/;"	f	class:sol::basic_table_iterator
operator ++	.\include\sol\sol\table_iterator.hpp	/^		basic_table_iterator& operator++() {$/;"	f	class:sol::basic_table_iterator
operator ++	.\include\sol\sol\variadic_args.hpp	/^		va_iterator operator++ (int) {$/;"	f	struct:sol::va_iterator
operator ++	.\include\sol\sol\variadic_args.hpp	/^		va_iterator& operator++ () {$/;"	f	struct:sol::va_iterator
operator +=	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color& operator +=(Color& left, const Color& right)$/;"	f	namespace:sf
operator +=	.\dep\SFML\src\SFML\System\String.cpp	/^String& String::operator +=(const String& right)$/;"	f	class:sf::String
operator +=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator +=(Time& left, Time right)$/;"	f	namespace:sf
operator +=	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Counts& operator += ( Counts const& other ) {$/;"	f	struct:Catch::Counts
operator +=	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Totals& operator += ( Totals const& other ) {$/;"	f	struct:Catch::Totals
operator +=	.\include\sol\single\sol\sol.hpp	/^		va_iterator& operator+= (difference_type idx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator +=	.\include\sol\sol\variadic_args.hpp	/^		va_iterator& operator+= (difference_type idx) {$/;"	f	struct:sol::va_iterator
operator +=	.\src\include\Vector2.h	/^	void operator += (Vector2* a_V) {$/;"	f	class:Vector2
operator +=	.\src\include\Vector2.h	/^	void operator += (const Vector2& a_V) {$/;"	f	class:Vector2
operator +=	.\src\src\Stats.cpp	/^void Stats::operator+= (const Stats& o) {$/;"	f	class:Stats
operator -	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color operator -(const Color& left, const Color& right)$/;"	f	namespace:sf
operator -	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator -(Time left, Time right)$/;"	f	namespace:sf
operator -	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator -(Time right)$/;"	f	namespace:sf
operator -	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Counts operator - ( Counts const& other ) const {$/;"	f	struct:Catch::Counts
operator -	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Totals operator - ( Totals const& other ) const {$/;"	f	struct:Catch::Totals
operator -	.\include\sol\single\sol\sol.hpp	/^		difference_type operator- (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator -	.\include\sol\sol\variadic_args.hpp	/^		difference_type operator- (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator -	.\src\include\Vector2.h	/^	Vector2 operator- () const {$/;"	f	class:Vector2
operator -	.\src\include\Vector2.h	/^	friend Vector2 operator - (const Vector2& v1, Vector2* v2) {$/;"	f	class:Vector2
operator -	.\src\include\Vector2.h	/^	friend Vector2 operator - (const Vector2& v1, const Vector2& v2) {$/;"	f	class:Vector2
operator -	.\src\include\Vector2.h	/^	friend Vector2 operator - (const Vector2* v1, Vector2& v2) {$/;"	f	class:Vector2
operator -	.\src\src\Stats.cpp	/^Stats Stats::operator- () const {$/;"	f	class:Stats
operator --	.\include\sol\single\sol\sol.hpp	/^		va_iterator operator-- (int) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator --	.\include\sol\single\sol\sol.hpp	/^		va_iterator& operator-- () {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator --	.\include\sol\sol\variadic_args.hpp	/^		va_iterator operator-- (int) {$/;"	f	struct:sol::va_iterator
operator --	.\include\sol\sol\variadic_args.hpp	/^		va_iterator& operator-- () {$/;"	f	struct:sol::va_iterator
operator -=	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Color& operator -=(Color& left, const Color& right)$/;"	f	namespace:sf
operator -=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator -=(Time& left, Time right)$/;"	f	namespace:sf
operator -=	.\include\sol\single\sol\sol.hpp	/^		va_iterator& operator-= (difference_type idx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator -=	.\include\sol\sol\variadic_args.hpp	/^		va_iterator& operator-= (difference_type idx) {$/;"	f	struct:sol::va_iterator
operator -=	.\src\include\Vector2.h	/^	void operator -= (Vector2* a_V) {$/;"	f	class:Vector2
operator -=	.\src\include\Vector2.h	/^	void operator -= (const Vector2& a_V) {$/;"	f	class:Vector2
operator ->	.\include\sol\Catch\include\internal\catch_option.hpp	/^        T* operator->() { return nullableValue; }$/;"	f	class:Catch::Option
operator ->	.\include\sol\Catch\include\internal\catch_option.hpp	/^        const T* operator->() const { return nullableValue; }$/;"	f	class:Catch::Option
operator ->	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr
operator ->	.\include\sol\Catch\single_include\catch.hpp	/^        T* operator->() const { return m_p; }$/;"	f	class:Catch::Ptr
operator ->	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T* operator ->() {$/;"	f	class:sol::optional
operator ->	.\include\sol\Optional\optional.hpp	/^  T* operator ->() {$/;"	f	class:sol::optional
operator ->	.\include\sol\Optional\optional.hpp	/^  constexpr T const* operator ->() const {$/;"	f	class:sol::optional
operator ->	.\include\sol\Optional\optional.hpp	/^  constexpr T* operator->() const {$/;"	f	class:sol::optional
operator ->	.\include\sol\single\sol\sol.hpp	/^		lua_State* operator-> () const {$/;"	f	struct:sol::sol::this_state
operator ->	.\include\sol\single\sol\sol.hpp	/^		pointer operator->() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator ->	.\include\sol\sol\types.hpp	/^		lua_State* operator-> () const {$/;"	f	struct:sol::this_state
operator ->	.\include\sol\sol\variadic_args.hpp	/^		pointer operator->() {$/;"	f	struct:sol::va_iterator
operator /	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator \/(Time left, Int64 right)$/;"	f	namespace:sf
operator /	.\dep\SFML\src\SFML\System\Time.cpp	/^Time operator \/(Time left, float right)$/;"	f	namespace:sf
operator /	.\dep\SFML\src\SFML\System\Time.cpp	/^float operator \/(Time left, Time right)$/;"	f	namespace:sf
operator /	.\src\include\Vector2.h	/^	friend Vector2 operator \/ (const Vector2& v, const float f) {$/;"	f	class:Vector2
operator /	.\src\include\Vector2.h	/^	friend Vector2 operator \/ (const Vector2& v1, const Vector2& v2) {$/;"	f	class:Vector2
operator /	.\src\include\Vector2.h	/^	friend Vector2 operator \/ (const float f, const Vector2& v) {$/;"	f	class:Vector2
operator /=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator \/=(Time& left, Int64 right)$/;"	f	namespace:sf
operator /=	.\dep\SFML\src\SFML\System\Time.cpp	/^Time& operator \/=(Time& left, float right)$/;"	f	namespace:sf
operator <	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator <(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator <	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator <(const String& left, const String& right)$/;"	f	namespace:sf
operator <	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator <(Time left, Time right)$/;"	f	namespace:sf
operator <	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator <(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator <	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool SourceLineInfo::operator < ( SourceLineInfo const& other ) const {$/;"	f	class:Catch::SourceLineInfo
operator <	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator < ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator <	.\include\sol\Catch\include\internal\catch_message.h	/^        bool operator < ( MessageInfo const& other ) const {$/;"	f	struct:Catch::MessageInfo
operator <	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCase::operator < ( TestCase const& other ) const {$/;"	f	class:Catch::TestCase
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator <	.\include\sol\Optional\test_optional.cpp	/^constexpr bool operator<(BadRelops a, BadRelops b) { return a.i < b.i; }$/;"	f
operator <	.\include\sol\single\sol\sol.hpp	/^		bool operator < (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator <	.\include\sol\sol\variadic_args.hpp	/^		bool operator < (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator <<	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^std::ostream& operator <<(std::ostream& stream, const IpAddress& address)$/;"	f	namespace:sf
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Int16 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Int32 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Int64 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Int8 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Uint16 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Uint32 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Uint64 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(Uint8 data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(bool data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(const String& data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(const char* data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(const std::string& data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(const std::wstring& data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(const wchar_t* data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(double data)$/;"	f	class:sf::Packet
operator <<	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator <<(float data)$/;"	f	class:sf::Packet
operator <<	.\include\sol\Catch\include\external\clara.h	/^        inline friend std::ostream& operator << ( std::ostream& _stream, Text const& _text ) {$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
operator <<	.\include\sol\Catch\include\external\tbc_text_format.h	/^        inline friend std::ostream& operator << ( std::ostream& _stream, Text const& _text ) {$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
operator <<	.\include\sol\Catch\include\internal\catch_common.hpp	/^    std::ostream& operator << ( std::ostream& os, SourceLineInfo const& info ) {$/;"	f	namespace:Catch
operator <<	.\include\sol\Catch\include\internal\catch_common.hpp	/^    std::ostream& operator << ( std::ostream& os, pluralise const& pluraliser ) {$/;"	f	namespace:Catch
operator <<	.\include\sol\Catch\include\internal\catch_console_colour.hpp	/^    inline std::ostream& operator << ( std::ostream& os, Colour const& ) { return os; }$/;"	f	namespace:Catch
operator <<	.\include\sol\Catch\include\internal\catch_message.h	/^        MessageBuilder& operator << ( T const& value ) {$/;"	f	struct:Catch::MessageBuilder
operator <<	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder
operator <<	.\include\sol\Catch\include\internal\catch_version.hpp	/^    std::ostream& operator << ( std::ostream& os, Version const& version ) {$/;"	f	namespace:Catch
operator <<	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        friend std::ostream& operator << ( std::ostream& os, XmlEncode const& xmlEncode ) {$/;"	f	class:Catch::XmlEncode
operator <<	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^inline std::ostream& operator<<( std::ostream& os, Enum2 v ) {$/;"	f
operator <<	.\include\sol\Catch\projects\SelfTest\EnumToString.cpp	/^inline std::ostream& operator<<( std::ostream& os, EnumClass2 e2 ) {$/;"	f
operator <<	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    friend std::ostream& operator << ( std::ostream& _stream, ColourString const& _colourString ) {$/;"	f	class:ColourString
operator <<	.\include\sol\Catch\single_include\catch.hpp	/^        ResultBuilder& operator << ( T const& value ) {$/;"	f	class:Catch::ResultBuilder
operator <<	.\src\include\trmclr.hpp	/^std::ostream& operator<< (std::ostream& os, const Style& style)$/;"	f	namespace:trmclr
operator <=	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator <=(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator <=	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator <=(const String& left, const String& right)$/;"	f	namespace:sf
operator <=	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator <=(Time left, Time right)$/;"	f	namespace:sf
operator <=	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator <=(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator <=	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator <= ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator <=	.\include\sol\Catch\include\internal\catch_result_builder.h	/^    inline ExpressionLhs<T const&> ResultBuilder::operator <= ( T const& operand ) {$/;"	f	class:Catch::ResultBuilder
operator <=	.\include\sol\Catch\include\internal\catch_result_builder.h	/^    inline ExpressionLhs<bool> ResultBuilder::operator <= ( bool value ) {$/;"	f	class:Catch::ResultBuilder
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator <=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator<=(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator <=	.\include\sol\single\sol\sol.hpp	/^		bool operator <= (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator <=	.\include\sol\sol\variadic_args.hpp	/^		bool operator <= (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator =	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound& Sound::operator =(const Sound& right)$/;"	f	class:sf::Sound
operator =	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^SoundBuffer& SoundBuffer::operator =(const SoundBuffer& right)$/;"	f	class:sf::SoundBuffer
operator =	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Font& Font::operator =(const Font& right)$/;"	f	class:sf::Font
operator =	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Texture& Texture::operator =(const Texture& right)$/;"	f	class:sf::Texture
operator =	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^SocketSelector& SocketSelector::operator =(const SocketSelector& right)$/;"	f	class:sf::SocketSelector
operator =	.\dep\SFML\src\SFML\System\String.cpp	/^String& String::operator =(const String& right)$/;"	f	class:sf::String
operator =	.\include\sol\Catch\include\external\clara.h	/^            BoundArgFunction& operator = ( BoundArgFunction const& other ) {$/;"	f	class:Clara::Detail::BoundArgFunction
operator =	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        LazyStat& operator=( T const& _value ) {$/;"	f	struct:Catch::LazyStat
operator =	.\include\sol\Catch\include\internal\catch_option.hpp	/^        Option& operator = ( T const& _value ) {$/;"	f	class:Catch::Option
operator =	.\include\sol\Catch\include\internal\catch_option.hpp	/^        Option& operator= ( Option const& _other ) {$/;"	f	class:Catch::Option
operator =	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr
operator =	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr
operator =	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
operator =	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCase& TestCase::operator = ( TestCase const& other ) {$/;"	f	class:Catch::TestCase
operator =	.\include\sol\Catch\single_include\catch.hpp	/^        CopyableStream& operator=( CopyableStream const& other ) {$/;"	f	struct:Catch::CopyableStream
operator =	.\include\sol\Catch\single_include\catch.hpp	/^        Ptr& operator = ( Ptr const& other ){$/;"	f	class:Catch::Ptr
operator =	.\include\sol\Catch\single_include\catch.hpp	/^        Ptr& operator = ( T* p ){$/;"	f	class:Catch::Ptr
operator =	.\include\sol\Optional\optional.hpp	/^  optional& operator=(const optional& rhs)$/;"	f	class:sol::optional
operator =	.\include\sol\Optional\test_optional.cpp	/^    Date& operator=(Date&& d) { i = d.i; d.i = 0; return *this;};$/;"	f	struct:Date
operator =	.\include\sol\Optional\test_optional.cpp	/^    Oracle& operator=(Oracle&& o) { s = sMoveConstructed; val = std::move(o.val); o.s = sMovedFrom; return *this; }$/;"	f	struct:Oracle
operator =	.\include\sol\Optional\test_optional.cpp	/^    Oracle& operator=(OracleVal&& v) { s = sValueMoveConstructed; val = std::move(v); v.s = sMovedFrom; return *this; }$/;"	f	struct:Oracle
operator =	.\include\sol\Optional\test_optional.cpp	/^    Oracle& operator=(const Oracle& o) { s = sCopyConstructed; val = o.val; return *this; }$/;"	f	struct:Oracle
operator =	.\include\sol\Optional\test_optional.cpp	/^    Oracle& operator=(const OracleVal& v) { s = sValueCopyConstructed; val = v; return *this; }$/;"	f	struct:Oracle
operator =	.\include\sol\Optional\test_optional.cpp	/^  MoveAware& operator=(MoveAware&& rhs) {$/;"	f	struct:MoveAware
operator =	.\include\sol\Optional\test_type_traits.cpp	/^  Safe & operator=( Safe const & ){ return *this; }$/;"	f	struct:std::experimental::Safe
operator =	.\include\sol\Optional\test_type_traits.cpp	/^  Unsafe & operator=( Unsafe && ) { return *this; }$/;"	f	struct:std::experimental::Unsafe
operator =	.\include\sol\Optional\test_type_traits.cpp	/^  Unsafe & operator=( Unsafe const & ){ return *this; }$/;"	f	struct:std::experimental::Unsafe
operator =	.\include\sol\single\sol\sol.hpp	/^		function_result& operator=(function_result&& o) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
operator =	.\include\sol\single\sol\sol.hpp	/^		proxy& operator=(U&& other) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
operator =	.\include\sol\single\sol\sol.hpp	/^		tie_t& operator= (T&& value) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::tie_t
operator =	.\include\sol\single\sol\sol.hpp	/^		variadic_args& operator=(variadic_args&& o) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
operator =	.\include\sol\sol\function_result.hpp	/^		function_result& operator=(function_result&& o) {$/;"	f	struct:sol::function_result
operator =	.\include\sol\sol\proxy.hpp	/^		proxy& operator=(U&& other) {$/;"	f	struct:sol::proxy
operator =	.\include\sol\sol\tie.hpp	/^		tie_t& operator= (T&& value) {$/;"	f	struct:sol::tie_t
operator =	.\include\sol\sol\variadic_args.hpp	/^		variadic_args& operator=(variadic_args&& o) {$/;"	f	struct:sol::variadic_args
operator =	.\src\include\Vector2.h	/^	void operator = (const Vector2& a_V) {$/;"	f	class:Vector2
operator ==	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^bool operator ==(const BlendMode& left, const BlendMode& right)$/;"	f	namespace:sf
operator ==	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^bool operator ==(const Color& left, const Color& right)$/;"	f	namespace:sf
operator ==	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator ==(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator ==	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator ==(const String& left, const String& right)$/;"	f	namespace:sf
operator ==	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator ==(Time left, Time right)$/;"	f	namespace:sf
operator ==	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator ==(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator ==	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        friend bool operator == ( Approx const& lhs, double rhs ) {$/;"	f	class:Catch::Detail::Approx
operator ==	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        friend bool operator == ( double lhs, Approx const& rhs ) {$/;"	f	class:Catch::Detail::Approx
operator ==	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool SourceLineInfo::operator == ( SourceLineInfo const& other ) const {$/;"	f	class:Catch::SourceLineInfo
operator ==	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator == ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator ==	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator == ( bool rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator ==	.\include\sol\Catch\include\internal\catch_message.h	/^        bool operator == ( MessageInfo const& other ) const {$/;"	f	struct:Catch::MessageInfo
operator ==	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCase::operator == ( TestCase const& other ) const {$/;"	f	class:Catch::TestCase
operator ==	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            bool operator == ( Ptr<SectionNode> const& other ) const {$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode
operator ==	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            bool operator == ( SectionNode const& other ) const {$/;"	f	struct:Catch::CumulativeReporterBase::SectionNode
operator ==	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    bool operator == ( const T& ) const { return true; }$/;"	f	struct:Ex
operator ==	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        bool operator==( const minimal_allocator<U>& ) const { return true; }$/;"	f	struct:__anon187::minimal_allocator
operator ==	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        bool operator==( const Test&rhs ) const$/;"	f	struct:ObjectWithNonConstEqualityOperator::Test
operator ==	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        bool operator==( const Test&rhs )$/;"	f	struct:ObjectWithNonConstEqualityOperator::Test
operator ==	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    bool operator ==( const Opaque& o ) const$/;"	f	struct:Opaque
operator ==	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^inline bool operator==(const A::X& lhs, const B::Y& rhs)$/;"	f
operator ==	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^inline bool operator==(const B::Y& lhs, const A::X& rhs)$/;"	f
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator==(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator ==	.\include\sol\Optional\test_optional.cpp	/^bool operator==( Oracle const& a, Oracle const& b ) { return a.val.i == b.val.i; }$/;"	f
operator ==	.\include\sol\single\sol\sol.hpp	/^			bool operator==(const char* r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator ==	.\include\sol\single\sol\sol.hpp	/^			bool operator==(const std::string& r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator ==	.\include\sol\single\sol\sol.hpp	/^			bool operator==(const string_shim& r) const {$/;"	f	struct:sol::sol::string_detail::string_shim
operator ==	.\include\sol\single\sol\sol.hpp	/^		bool operator== (const basic_table_iterator& right) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
operator ==	.\include\sol\single\sol\sol.hpp	/^		bool operator==(const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator== (const reference& l, const reference& r) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator== (const stack_reference& l, const stack_reference& r) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(T&& left, const proxy<Table, Key>& right) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(const nil_t&, const object& rhs) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(const object& lhs, const nil_t&) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(const proxy<Table, Key>& right, T&& left) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(const proxy<Table, Key>& right, nil_t) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(nil_t, const proxy<Table, Key>& right) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
operator ==	.\include\sol\single\sol\sol.hpp	/^	inline bool operator==(nil_t, nil_t) { return true; }$/;"	f	namespace:sol::sol
operator ==	.\include\sol\sol\object.hpp	/^	inline bool operator==(const nil_t&, const object& rhs) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\object.hpp	/^	inline bool operator==(const object& lhs, const nil_t&) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\proxy.hpp	/^	inline bool operator==(T&& left, const proxy<Table, Key>& right) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\proxy.hpp	/^	inline bool operator==(const proxy<Table, Key>& right, T&& left) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\proxy.hpp	/^	inline bool operator==(const proxy<Table, Key>& right, nil_t) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\proxy.hpp	/^	inline bool operator==(nil_t, const proxy<Table, Key>& right) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\reference.hpp	/^	inline bool operator== (const reference& l, const reference& r) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\stack_reference.hpp	/^	inline bool operator== (const stack_reference& l, const stack_reference& r) {$/;"	f	namespace:sol
operator ==	.\include\sol\sol\string_shim.hpp	/^			bool operator==(const char* r) const {$/;"	f	struct:sol::string_detail::string_shim
operator ==	.\include\sol\sol\string_shim.hpp	/^			bool operator==(const std::string& r) const {$/;"	f	struct:sol::string_detail::string_shim
operator ==	.\include\sol\sol\string_shim.hpp	/^			bool operator==(const string_shim& r) const {$/;"	f	struct:sol::string_detail::string_shim
operator ==	.\include\sol\sol\table_iterator.hpp	/^		bool operator== (const basic_table_iterator& right) const {$/;"	f	class:sol::basic_table_iterator
operator ==	.\include\sol\sol\types.hpp	/^	inline bool operator==(nil_t, nil_t) { return true; }$/;"	f	namespace:sol
operator ==	.\include\sol\sol\variadic_args.hpp	/^		bool operator==(const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator >	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator >(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator >	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator >(const String& left, const String& right)$/;"	f	namespace:sf
operator >	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator >(Time left, Time right)$/;"	f	namespace:sf
operator >	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator >(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator >	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator > ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator >	.\include\sol\Optional\test_optional.cpp	/^constexpr bool operator>(BadRelops a, BadRelops b) { return a.i < b.i; } \/\/ intentional error!$/;"	f
operator >	.\include\sol\single\sol\sol.hpp	/^		bool operator > (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator >	.\include\sol\sol\variadic_args.hpp	/^		bool operator > (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator >=	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^bool operator >=(const IpAddress& left, const IpAddress& right)$/;"	f	namespace:sf
operator >=	.\dep\SFML\src\SFML\System\String.cpp	/^bool operator >=(const String& left, const String& right)$/;"	f	namespace:sf
operator >=	.\dep\SFML\src\SFML\System\Time.cpp	/^bool operator >=(Time left, Time right)$/;"	f	namespace:sf
operator >=	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^bool operator >=(const VideoMode& left, const VideoMode& right)$/;"	f	namespace:sf
operator >=	.\include\sol\Catch\include\internal\catch_expression_lhs.hpp	/^    ResultBuilder& operator >= ( RhsT const& rhs ) {$/;"	f	class:Catch::ExpressionLhs
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const T& v, const optional<T&>& x)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const T& v, const optional<T>& x)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const T& v, const optional<const T&>& x)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const optional<T&>& x, const T& v)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const optional<T>& x, const T& v)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const optional<T>& x, const optional<T>& y)$/;"	f	namespace:sol
operator >=	.\include\sol\Optional\optional.hpp	/^template <class T> constexpr bool operator>=(const optional<const T&>& x, const T& v)$/;"	f	namespace:sol
operator >=	.\include\sol\single\sol\sol.hpp	/^		bool operator >= (const va_iterator& r) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator >=	.\include\sol\sol\variadic_args.hpp	/^		bool operator >= (const va_iterator& r) const {$/;"	f	struct:sol::va_iterator
operator >>	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^std::istream& operator >>(std::istream& stream, IpAddress& address)$/;"	f	namespace:sf
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Int16& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Int32& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Int64& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Int8& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(String& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Uint16& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Uint32& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Uint64& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(Uint8& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(bool& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(char* data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(double& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(float& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(std::string& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(std::wstring& data)$/;"	f	class:sf::Packet
operator >>	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet& Packet::operator >>(wchar_t* data)$/;"	f	class:sf::Packet
operator BoolType	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet::operator BoolType() const$/;"	f	class:sf::Packet
operator Catch::SafeBool::type	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    operator Catch::SafeBool::type() const {$/;"	f	struct:Boolable
operator L&	.\include\sol\single\sol\sol.hpp	/^		operator L& () const { return *value; }$/;"	f	struct:sol::sol::light
operator L&	.\include\sol\sol\types.hpp	/^		operator L& () const { return *value; }$/;"	f	struct:sol::light
operator L*	.\include\sol\single\sol\sol.hpp	/^		operator L* () const { return value; }$/;"	f	struct:sol::sol::light
operator L*	.\include\sol\sol\types.hpp	/^		operator L* () const { return value; }$/;"	f	struct:sol::light
operator SafeBool::type	.\include\sol\Catch\include\internal\catch_option.hpp	/^        operator SafeBool::type() const {$/;"	f	class:Catch::Option
operator SafeBool::type	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        operator SafeBool::type() const { return SafeBool::makeSafe( m_p != CATCH_NULL ); }$/;"	f	class:Catch::Ptr
operator SafeBool::type	.\include\sol\Catch\single_include\catch.hpp	/^        operator SafeBool::type() const { return SafeBool::makeSafe( m_p != CATCH_NULL ); }$/;"	f	class:Catch::Ptr
operator T	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    operator T () const {$/;"	f	class:Catch::CompositeGenerator
operator T	.\include\sol\single\sol\sol.hpp	/^		operator T () const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::proxy_base
operator T	.\include\sol\sol\proxy_base.hpp	/^		operator T () const {$/;"	f	struct:sol::proxy_base
operator T&	.\include\sol\single\sol\sol.hpp	/^			operator T& () {$/;"	f	struct:sol::sol::detail::implicit_wrapper
operator T&	.\include\sol\single\sol\sol.hpp	/^		operator T& () const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::proxy_base
operator T&	.\include\sol\sol\proxy_base.hpp	/^		operator T& () const {$/;"	f	struct:sol::proxy_base
operator T&	.\include\sol\sol\types.hpp	/^			operator T& () {$/;"	f	struct:sol::detail::implicit_wrapper
operator T*	.\include\sol\single\sol\sol.hpp	/^			operator T* () {$/;"	f	struct:sol::sol::detail::implicit_wrapper
operator T*	.\include\sol\sol\types.hpp	/^			operator T* () {$/;"	f	struct:sol::detail::implicit_wrapper
operator U&	.\include\sol\single\sol\sol.hpp	/^		operator U& () { return value; }$/;"	f	struct:sol::sol::user
operator U&	.\include\sol\sol\types.hpp	/^		operator U& () { return value; }$/;"	f	struct:sol::user
operator U*	.\include\sol\single\sol\sol.hpp	/^		operator U* () { return std::addressof(value); }$/;"	f	struct:sol::sol::user
operator U*	.\include\sol\sol\types.hpp	/^		operator U* () { return std::addressof(value); }$/;"	f	struct:sol::user
operator []	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^Vertex& VertexArray::operator [](std::size_t index)$/;"	f	class:sf::VertexArray
operator []	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^const Vertex& VertexArray::operator [](std::size_t index) const$/;"	f	class:sf::VertexArray
operator []	.\dep\SFML\src\SFML\System\String.cpp	/^Uint32 String::operator [](std::size_t index) const$/;"	f	class:sf::String
operator []	.\dep\SFML\src\SFML\System\String.cpp	/^Uint32& String::operator [](std::size_t index)$/;"	f	class:sf::String
operator []	.\include\sol\Catch\include\external\clara.h	/^            OptBuilder& operator[]( std::string const& optName ) {$/;"	f	class:Clara::CommandLine::OptBuilder
operator []	.\include\sol\Catch\include\external\clara.h	/^        ArgBuilder operator[]( UnpositionalTag ) {$/;"	f	class:Clara::CommandLine
operator []	.\include\sol\Catch\include\external\clara.h	/^        ArgBuilder operator[]( int position ) {$/;"	f	class:Clara::CommandLine
operator []	.\include\sol\Catch\include\external\clara.h	/^        OptBuilder operator[]( std::string const& optName ) {$/;"	f	class:Clara::CommandLine
operator []	.\include\sol\Catch\include\external\clara.h	/^        std::string const& operator[]( std::size_t _index ) const { return lines[_index]; }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text::std
operator []	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::string const& operator[]( std::size_t _index ) const { return lines[_index]; }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text::std
operator []	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    TestDef& operator[]( const std::string& ) {$/;"	f	struct:TestDef
operator []	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) operator[](K&& k) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
operator []	.\include\sol\single\sol\sol.hpp	/^		reference operator[](difference_type idx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
operator []	.\include\sol\single\sol\sol.hpp	/^		stack_proxy operator[](difference_type start) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
operator []	.\include\sol\sol\proxy.hpp	/^		decltype(auto) operator[](K&& k) const {$/;"	f	struct:sol::proxy
operator []	.\include\sol\sol\state_view.hpp	/^		proxy<const global_table&, T> operator[](T&& key) const {$/;"	f	class:sol::state_view
operator []	.\include\sol\sol\state_view.hpp	/^		proxy<global_table&, T> operator[](T&& key) {$/;"	f	class:sol::state_view
operator []	.\include\sol\sol\table_core.hpp	/^		proxy<basic_table_core&, T> operator[](T&& key) & {$/;"	f	class:sol::basic_table_core
operator []	.\include\sol\sol\table_core.hpp	/^		proxy<basic_table_core, T> operator[](T&& key) && {$/;"	f	class:sol::basic_table_core
operator []	.\include\sol\sol\table_core.hpp	/^		proxy<const basic_table_core&, T> operator[](T&& key) const & {$/;"	f	class:sol::basic_table_core
operator []	.\include\sol\sol\variadic_args.hpp	/^		reference operator[](difference_type idx) {$/;"	f	struct:sol::va_iterator
operator []	.\include\sol\sol\variadic_args.hpp	/^		stack_proxy operator[](difference_type start) const {$/;"	f	struct:sol::variadic_args
operator []	.\src\src\Stats.cpp	/^float Stats::operator[](std::string s) const {$/;"	f	class:Stats
operator []	.\src\src\Stats.cpp	/^float& Stats::operator[](std::string s) {$/;"	f	class:Stats
operator bool	.\include\sol\Catch\include\internal\catch_section.hpp	/^    Section::operator bool() const {$/;"	f	class:Catch::Section
operator bool	.\include\sol\single\sol\sol.hpp	/^			operator bool() const { return success; };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe
operator bool	.\include\sol\sol\stack_core.hpp	/^			operator bool() const { return success; };$/;"	f	struct:sol::stack::probe
operator const U&	.\include\sol\single\sol\sol.hpp	/^		operator const U& () const { return value; }$/;"	f	struct:sol::sol::user
operator const U&	.\include\sol\sol\types.hpp	/^		operator const U& () const { return value; }$/;"	f	struct:sol::user
operator int	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    operator int() const { return 7; }$/;"	f	struct:Awkward
operator int	.\include\sol\single\sol\sol.hpp	/^		operator int() const { return index; }$/;"	f	struct:sol::sol::absolute_index
operator int	.\include\sol\single\sol\sol.hpp	/^		operator int() const { return index; }$/;"	f	struct:sol::sol::upvalue_index
operator int	.\include\sol\sol\types.hpp	/^		operator int() const { return index; }$/;"	f	struct:sol::absolute_index
operator int	.\include\sol\sol\types.hpp	/^		operator int() const { return index; }$/;"	f	struct:sol::upvalue_index
operator lua_State*	.\include\sol\single\sol\sol.hpp	/^		operator lua_State* () const {$/;"	f	struct:sol::sol::this_state
operator lua_State*	.\include\sol\sol\state_view.hpp	/^		operator lua_State* () const {$/;"	f	class:sol::state_view
operator lua_State*	.\include\sol\sol\types.hpp	/^		operator lua_State* () const {$/;"	f	struct:sol::this_state
operator std::string	.\dep\SFML\src\SFML\System\String.cpp	/^String::operator std::string() const$/;"	f	class:sf::String
operator std::string	.\include\sol\single\sol\sol.hpp	/^		operator std::string() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::proxy_base
operator std::string	.\include\sol\sol\proxy_base.hpp	/^		operator std::string() const {$/;"	f	struct:sol::proxy_base
operator std::wstring	.\dep\SFML\src\SFML\System\String.cpp	/^String::operator std::wstring() const$/;"	f	class:sf::String
operator uint32_t	.\src\include\trmclr.hpp	/^    operator uint32_t() const { return _value; }$/;"	f	struct:trmclr::Style
operator unsigned int	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^        operator unsigned int() {return 0xc0000000;}$/;"	f	struct:ObjectWithConversions::Object
operator void*	.\include\sol\single\sol\sol.hpp	/^		operator void*() const { return value; }$/;"	f	struct:sol::sol::lightuserdata_value
operator void*	.\include\sol\single\sol\sol.hpp	/^		operator void*() const { return value; }$/;"	f	struct:sol::sol::userdata_value
operator void*	.\include\sol\sol\types.hpp	/^		operator void*() const { return value; }$/;"	f	struct:sol::lightuserdata_value
operator void*	.\include\sol\sol\types.hpp	/^		operator void*() const { return value; }$/;"	f	struct:sol::userdata_value
operator |	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {$/;"	f	namespace:Catch
operator |	.\include\sol\Catch\single_include\catch.hpp	/^    inline ResultDisposition::Flags operator | ( ResultDisposition::Flags lhs, ResultDisposition::Flags rhs ) {$/;"	f	namespace:Catch
operator ||	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            AnyOf operator || ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
operator ||	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^    Generic::AnyOf<ExpressionT> Matcher<ExpressionT>::operator || ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Matcher
operator ||	.\include\sol\Catch\single_include\catch.hpp	/^            AnyOf operator || ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
operator ||	.\include\sol\Catch\single_include\catch.hpp	/^    Generic::AnyOf<ExpressionT> Matcher<ExpressionT>::operator || ( Matcher<ExpressionT> const& other ) const {$/;"	f	class:Catch::Matchers::Impl::Matcher
opmode	.\dep\Lua\src\lopcodes.c	72;"	d	file:
optUsage	.\include\sol\Catch\include\external\clara.h	/^        std::string optUsage() const {$/;"	f	class:Clara::CommandLine
optUsage	.\include\sol\Catch\include\external\clara.h	/^        void optUsage( std::ostream& os, std::size_t indent = 0, std::size_t width = Detail::consoleWidth ) const {$/;"	f	class:Clara::CommandLine
optimize_coding	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean optimize_coding;	\/* TRUE=optimize entropy encoding parms *\/$/;"	m	struct:jpeg_compress_struct
optional	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_CONSTEXPR_INIT_LIST explicit optional(in_place_t, ::std::initializer_list<U> il, Args&&... args)$/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^  constexpr optional(T&& v) : OptionalBase<T>(constexpr_move(v)) {}$/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^  constexpr optional(const T& v) : OptionalBase<T>(v) {}$/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^  explicit constexpr optional(in_place_t, Args&&... args)$/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^  optional(const optional& rhs)$/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^  optional(const optional<T&>& rhs) : optional() $/;"	f	class:sol::optional
optional	.\include\sol\Optional\optional.hpp	/^class optional : private OptionalBase<T>$/;"	c	namespace:sol
optional	.\include\sol\Optional\optional.hpp	/^class optional<T&&>$/;"	c	namespace:sol
optional	.\include\sol\Optional\optional.hpp	/^class optional<T&>$/;"	c	namespace:sol
optional_base	.\include\sol\Optional\optional.hpp	/^    explicit constexpr optional_base(T&& v) : init_(true), storage_(constexpr_move(v)) {}$/;"	f	struct:sol::optional_base
optional_base	.\include\sol\Optional\optional.hpp	/^    explicit constexpr optional_base(const T& v) : init_(true), storage_(v) {}$/;"	f	struct:sol::optional_base
optional_base	.\include\sol\Optional\optional.hpp	/^    explicit optional_base(in_place_t, ::std::initializer_list<U> il, Args&&... args)$/;"	f	struct:sol::optional_base
optional_base	.\include\sol\Optional\optional.hpp	/^    template <class... Args> explicit optional_base(in_place_t, Args&&... args)$/;"	f	struct:sol::optional_base
optional_base	.\include\sol\Optional\optional.hpp	/^struct optional_base$/;"	s	namespace:sol
options	.\src\include\Menu.h	/^	std::map<std::string, Menu*> options;$/;"	m	class:Menu
order	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned order;$/;"	m	struct:__anon27
order	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned order;$/;"	m	struct:__anon33
order	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned order;$/;"	m	struct:__anon34
order	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon98
ordering	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*      ordering;$/;"	m	struct:CID_FaceInfoRec_
orientationCanChange	.\dep\SFML\src\SFML\Window\iOS\SFViewController.hpp	/^@property (nonatomic) bool orientationCanChange; \/\/\/< Tells whether the controller's view can rotate or not$/;"	v
originalBackgroundAttributes	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        WORD originalBackgroundAttributes;$/;"	m	class:Catch::__anon178::Win32ColourImpl
originalForegroundAttributes	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        WORD originalForegroundAttributes;$/;"	m	class:Catch::__anon178::Win32ColourImpl
original_length	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int original_length;	\/* # bytes of data in the file *\/$/;"	m	struct:jpeg_marker_struct
os	.\.ycm_extra_conf.py	/^import os$/;"	i
os	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_stream_state os; \/* take physical pages, weld into a logical$/;"	m	struct:OggVorbis_File
os	.\include\sol\Catch\scripts\approvalTests.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\approve.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\generateSingleHeader.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\releaseCommon.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\releaseNotes.py	/^import os$/;"	i
os	.\include\sol\Catch\scripts\scriptCommon.py	/^import os$/;"	i
os	.\include\sol\bootstrap.py	/^import os, sys, glob, re$/;"	i
os	.\include\sol\docs\source\conf.py	/^import os$/;"	i
os	.\include\sol\single.py	/^import os, sys$/;"	i
os	.\include\sol\single\sol\sol.hpp	/^		os,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
os	.\include\sol\sol\state_view.hpp	/^		os,$/;"	m	class:sol::lib
os_clock	.\dep\Lua\src\loslib.c	/^static int os_clock (lua_State *L) {$/;"	f	file:
os_date	.\dep\Lua\src\loslib.c	/^static int os_date (lua_State *L) {$/;"	f	file:
os_difftime	.\dep\Lua\src\loslib.c	/^static int os_difftime (lua_State *L) {$/;"	f	file:
os_execute	.\dep\Lua\src\loslib.c	/^static int os_execute (lua_State *L) {$/;"	f	file:
os_exit	.\dep\Lua\src\loslib.c	/^static int os_exit (lua_State *L) {$/;"	f	file:
os_getenv	.\dep\Lua\src\loslib.c	/^static int os_getenv (lua_State *L) {$/;"	f	file:
os_remove	.\dep\Lua\src\loslib.c	/^static int os_remove (lua_State *L) {$/;"	f	file:
os_rename	.\dep\Lua\src\loslib.c	/^static int os_rename (lua_State *L) {$/;"	f	file:
os_setlocale	.\dep\Lua\src\loslib.c	/^static int os_setlocale (lua_State *L) {$/;"	f	file:
os_time	.\dep\Lua\src\loslib.c	/^static int os_time (lua_State *L) {$/;"	f	file:
os_tmpname	.\dep\Lua\src\loslib.c	/^static int os_tmpname (lua_State *L) {$/;"	f	file:
oss	.\include\sol\Catch\include\internal\catch_result_builder.h	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
oss	.\include\sol\Catch\single_include\catch.hpp	/^        std::ostringstream oss;$/;"	m	struct:Catch::CopyableStream
other	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    void*             other;$/;"	m	struct:FT_GlyphSlotRec_
other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   other_blues[10];$/;"	m	struct:PS_PrivateRec_
otherwhite	.\dep\Lua\src\lgc.h	94;"	d
otherwhite	.\include\lua\lgc.h	94;"	d
out	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *idata, *expanded, *out;$/;"	m	struct:__anon104
out	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *out;                 \/\/ output buffer (always 4 components)$/;"	m	struct:__anon108
out	.\include\sol\Catch\scripts\generateSingleHeader.py	/^out = open( outputPath, 'w' )$/;"	v
out_color_components	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int out_color_components;	\/* # of color components in out_color_space *\/$/;"	m	struct:jpeg_decompress_struct
out_color_space	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  J_COLOR_SPACE out_color_space; \/* colorspace for output *\/$/;"	m	struct:jpeg_decompress_struct
outfile	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static int outfile(char const *filename, int rgb_dir, int vdir, int x, int y, int comp, int expand_mono, void *data, int alpha, int pad, const char *fmt, ...)$/;"	f
outline	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Outline        outline;$/;"	m	struct:FT_GlyphSlotRec_
outline	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Outline   outline;$/;"	m	struct:FT_OutlineGlyphRec_
outline	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^  FT_Outline_Check( FT_Outline*  outline );$/;"	v
outline	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^  FT_Outline_Get_Orientation( FT_Outline*  outline );$/;"	v
outline	.\dep\SFML\extlibs\headers\freetype2\ftoutln.h	/^  FT_Outline_Reverse( FT_Outline*  outline );$/;"	v
outline	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  FT_Outline_GetInsideBorder( FT_Outline*  outline );$/;"	v
outline	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  FT_Outline_GetOutsideBorder( FT_Outline*  outline );$/;"	v
output	.\dep\Lua\src\luac.c	/^static const char* output=Output;	\/* actual output file name *\/$/;"	v	file:
outputFilename	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::string outputFilename;$/;"	m	struct:Catch::ConfigData
outputPath	.\include\sol\Catch\scripts\generateSingleHeader.py	/^outputPath = os.path.join( catchPath, 'single_include\/catch.hpp' )$/;"	v
output_components	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int output_components;	\/* # of color components returned *\/$/;"	m	struct:jpeg_decompress_struct
output_gamma	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  double output_gamma;		\/* image gamma wanted in output *\/$/;"	m	struct:jpeg_decompress_struct
output_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION output_height;	\/* scaled image height *\/$/;"	m	struct:jpeg_decompress_struct
output_iMCU_row	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION output_iMCU_row;	\/* Number of iMCU rows read *\/$/;"	m	struct:jpeg_decompress_struct
output_scan_number	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int output_scan_number;	\/* Nominal scan number being displayed *\/$/;"	m	struct:jpeg_decompress_struct
output_scanline	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION output_scanline;	\/* 0 .. output_height-1  *\/$/;"	m	struct:jpeg_decompress_struct
output_width	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION output_width;	\/* scaled image width *\/$/;"	m	struct:jpeg_decompress_struct
ov_callbacks	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^} ov_callbacks;$/;"	t	typeref:struct:__anon109
ovectl_ratemanage2_arg	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^struct ovectl_ratemanage2_arg {$/;"	s
ovectl_ratemanage_arg	.\dep\SFML\extlibs\headers\vorbis\vorbisenc.h	/^struct ovectl_ratemanage_arg {$/;"	s
overallResult	.\include\sol\Catch\scripts\approvalTests.py	/^overallResult = 0$/;"	v
overflow	.\dep\SFML\src\SFML\System\Android\Activity.cpp	/^std::streambuf::int_type LogcatStream::overflow (std::streambuf::int_type c)$/;"	f	class:LogcatStream
overflow	.\dep\SFML\src\SFML\System\Err.cpp	/^    virtual int overflow(int character)$/;"	f	class:__anon135::DefaultErrStreamBuf	file:
overflow	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        int overflow( int c ) {$/;"	f	class:Catch::StreamBufImpl
overload_detail	.\include\sol\single\sol\sol.hpp	/^		namespace overload_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail
overload_detail	.\include\sol\sol\call.hpp	/^		namespace overload_detail {$/;"	n	namespace:sol::call_detail
overload_list	.\include\sol\single\sol\sol.hpp	/^			typedef std::tuple<Functions...> overload_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
overload_list	.\include\sol\sol\function_types_overloaded.hpp	/^			typedef std::tuple<Functions...> overload_list;$/;"	t	struct:sol::function_detail::overloaded_function
overload_match	.\include\sol\single\sol\sol.hpp	/^		inline int overload_match(Match&& matchfx, lua_State* L, int start, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
overload_match	.\include\sol\sol\call.hpp	/^		inline int overload_match(Match&& matchfx, lua_State* L, int start, Args&&... args) {$/;"	f	namespace:sol::call_detail
overload_match_arity	.\include\sol\single\sol\sol.hpp	/^			inline int overload_match_arity(sol::types<>, std::index_sequence<>, std::index_sequence<M...>, Match&&, lua_State* L, int, int, Args&&...) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::overload_detail
overload_match_arity	.\include\sol\single\sol\sol.hpp	/^			inline int overload_match_arity(sol::types<Fx, Fxs...>, std::index_sequence<I, In...>, std::index_sequence<M...>, Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::overload_detail
overload_match_arity	.\include\sol\single\sol\sol.hpp	/^		inline int overload_match_arity(Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
overload_match_arity	.\include\sol\sol\call.hpp	/^			inline int overload_match_arity(sol::types<>, std::index_sequence<>, std::index_sequence<M...>, Match&&, lua_State* L, int, int, Args&&...) {$/;"	f	namespace:sol::call_detail::overload_detail
overload_match_arity	.\include\sol\sol\call.hpp	/^			inline int overload_match_arity(sol::types<Fx, Fxs...>, std::index_sequence<I, In...>, std::index_sequence<M...>, Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::call_detail::overload_detail
overload_match_arity	.\include\sol\sol\call.hpp	/^		inline int overload_match_arity(Match&& matchfx, lua_State* L, int fxarity, int start, Args&&... args) {$/;"	f	namespace:sol::call_detail
overload_set	.\include\sol\single\sol\sol.hpp	/^        overload_set (Arg&& arg, Args&&... args) : set(std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::overload_set
overload_set	.\include\sol\single\sol\sol.hpp	/^    struct overload_set {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
overload_set	.\include\sol\sol\overload.hpp	/^        overload_set (Arg&& arg, Args&&... args) : set(std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::overload_set
overload_set	.\include\sol\sol\overload.hpp	/^    struct overload_set {$/;"	s	namespace:sol
overloaded	.\include\sol\test_functions.cpp	/^int overloaded(int x) {$/;"	f
overloaded	.\include\sol\test_functions.cpp	/^int overloaded(int x, int y) {$/;"	f
overloaded	.\include\sol\test_functions.cpp	/^int overloaded(int x, int y, int z) {$/;"	f
overloaded_function	.\include\sol\single\sol\sol.hpp	/^			overloaded_function(Functions... fxs)$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
overloaded_function	.\include\sol\single\sol\sol.hpp	/^			overloaded_function(overload_list set)$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
overloaded_function	.\include\sol\single\sol\sol.hpp	/^		struct overloaded_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
overloaded_function	.\include\sol\sol\function_types_overloaded.hpp	/^			overloaded_function(Functions... fxs)$/;"	f	struct:sol::function_detail::overloaded_function
overloaded_function	.\include\sol\sol\function_types_overloaded.hpp	/^			overloaded_function(overload_list set)$/;"	f	struct:sol::function_detail::overloaded_function
overloaded_function	.\include\sol\sol\function_types_overloaded.hpp	/^		struct overloaded_function {$/;"	s	namespace:sol::function_detail
overloads	.\include\sol\single\sol\sol.hpp	/^			overload_list overloads;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::overloaded_function
overloads	.\include\sol\sol\function_types_overloaded.hpp	/^			overload_list overloads;$/;"	m	struct:sol::function_detail::overloaded_function
oy	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_sync_state   oy;$/;"	m	struct:OggVorbis_File
p	.\dep\Lua\src\lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	.\dep\Lua\src\lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	.\dep\Lua\src\lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	.\dep\Lua\src\lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Proto
p	.\dep\Lua\src\lstrlib.c	/^  const char *p;  \/* pattern *\/$/;"	m	struct:GMatchState	file:
p	.\dep\Lua\src\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	union:cD::__anon20	file:
p	.\dep\Lua\src\lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p	.\include\lua\lobject.h	/^  struct Proto **p;  \/* functions defined inside the function *\/$/;"	m	struct:Proto	typeref:struct:Proto::Proto
p	.\include\lua\lobject.h	/^  struct Proto *p;$/;"	m	struct:LClosure	typeref:struct:LClosure::Proto
p	.\include\lua\lobject.h	/^  void *p;         \/* light userdata *\/$/;"	m	union:Value
p	.\include\lua\lstate.h	/^  struct Proto p;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Proto
p	.\include\lua\lzio.h	/^  const char *p;		\/* current position in buffer *\/$/;"	m	struct:Zio
p	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    int p;$/;"	m	struct:Obj	file:
p	.\include\sol\single\sol\sol.hpp	/^			const char* p;$/;"	m	struct:sol::sol::string_detail::string_shim
p	.\include\sol\sol\string_shim.hpp	/^			const char* p;$/;"	m	struct:sol::string_detail::string_shim
p_end	.\dep\Lua\src\lstrlib.c	/^  const char *p_end;  \/* end ('\\0') of pattern *\/$/;"	m	struct:MatchState	file:
pack	.\dep\Lua\src\ltablib.c	/^static int pack (lua_State *L) {$/;"	f	file:
package	.\include\sol\single\sol\sol.hpp	/^		package,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
package	.\include\sol\sol\state_view.hpp	/^		package,$/;"	m	class:sol::lib
packet	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *packet;$/;"	m	struct:__anon91
packetno	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  ogg_int64_t  packetno;     \/* sequence number for decode; the framing$/;"	m	struct:__anon91
packetno	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  ogg_int64_t  packetno;  \/* sequence number for decode; the framing$/;"	m	struct:__anon90
packint	.\dep\Lua\src\lstrlib.c	/^static void packint (luaL_Buffer *b, lua_Unsigned n,$/;"	f	file:
padding	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_Padding padding;$/;"	m	union:__anon57::__anon58
pageno	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    pageno;$/;"	m	struct:__anon90
paint_type	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Byte        paint_type;$/;"	m	struct:CID_FaceDictRec_
pairsmeta	.\dep\Lua\src\lbaselib.c	/^static int pairsmeta (lua_State *L, const char *method, int iszero,$/;"	f	file:
pal	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc  pal[256][4];$/;"	m	struct:__anon108
palette	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    void*           palette;$/;"	m	struct:FT_Bitmap_
palette_mode	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned char   palette_mode;$/;"	m	struct:FT_Bitmap_
panic	.\dep\Lua\src\lauxlib.c	/^static int panic (lua_State *L) {$/;"	f	file:
panic	.\dep\Lua\src\lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
panic	.\include\lua\lstate.h	/^  lua_CFunction panic;  \/* to be called in unprotected errors *\/$/;"	m	struct:global_State
panose	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Byte    panose[10];$/;"	m	struct:TT_OS2_
parameters	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned *parameters;$/;"	m	struct:__anon26
params	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Parameter*   params;$/;"	m	struct:FT_Open_Args_
params	.\include\sol\single\sol\sol.hpp	/^		std::tuple<Ps...> params;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_arguments
params	.\include\sol\sol\function_types.hpp	/^		std::tuple<Ps...> params;$/;"	m	struct:sol::function_arguments
parentDirectory	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::parentDirectory()$/;"	f	class:sf::Ftp
parlist	.\dep\Lua\src\lparser.c	/^static void parlist (LexState *ls) {$/;"	f	file:
parse	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int parse, step;$/;"	m	struct:__anon108
parse	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Response::parse(const std::string& data)$/;"	f	class:sf::Http::Response
parse	.\include\sol\Catch\include\external\clara.h	/^        ConfigT parse( int argc, char const* const argv[] ) const {$/;"	f	class:Clara::CommandLine
parse	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        TestSpecParser& parse( std::string const& arg ) {$/;"	f	class:Catch::TestSpecParser
parseFields	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Response::parseFields(std::istream &in)$/;"	f	class:sf::Http::Response
parseFile	.\include\sol\Catch\scripts\generateSingleHeader.py	/^def parseFile( path, filename ):$/;"	f
parseHeader	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^bool SoundFileReaderWav::parseHeader(Info& info)$/;"	f	class:sf::priv::SoundFileReaderWav
parseInto	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Parser::Token> parseInto( int argc, char const* argv[], ConfigT& config ) const {$/;"	f	class:Clara::CommandLine
parseIntoConfig	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^void parseIntoConfig( const char * (&argv)[size], Catch::ConfigData& config ) {$/;"	f
parseIntoConfigAndReturnError	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^std::string parseIntoConfigAndReturnError( const char * (&argv)[size], Catch::ConfigData& config ) {$/;"	f
parseIntoTokens	.\include\sol\Catch\include\external\clara.h	/^        void parseIntoTokens( int argc, char const* const argv[], std::vector<Parser::Token>& tokens ) const {$/;"	f	struct:Clara::Parser
parseIntoTokens	.\include\sol\Catch\include\external\clara.h	/^        void parseIntoTokens( std::string arg, std::vector<Parser::Token>& tokens ) const {$/;"	f	struct:Clara::Parser
parseSpecialTag	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    inline TestCaseInfo::SpecialProperties parseSpecialTag( std::string const& tag ) {$/;"	f	namespace:Catch
parseTestSpec	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^    inline TestSpec parseTestSpec( std::string const& arg ) {$/;"	f	namespace:Catch
parser	.\include\sol\bootstrap.py	/^parser = argparse.ArgumentParser()$/;"	v
parser	.\include\sol\single.py	/^parser = argparse.ArgumentParser(usage='%(prog)s [options...]', description=description)$/;"	v
participationType	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        unsigned int participationType;$/;"	m	struct:__anon147
partition	.\dep\Lua\src\ltablib.c	/^static IdxT partition (lua_State *L, IdxT lo, IdxT up) {$/;"	f	file:
partitioned_rice	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__EntropyCodingMethod_PartitionedRice partitioned_rice;$/;"	m	union:__anon28::__anon29
passOrFail	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::string passOrFail;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
pass_counter	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  long pass_counter;		\/* work units completed in this pass *\/$/;"	m	struct:jpeg_progress_mgr
pass_limit	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  long pass_limit;		\/* total number of work units in this pass *\/$/;"	m	struct:jpeg_progress_mgr
passed	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        std::size_t passed;$/;"	m	struct:Catch::Counts
passedString	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            static const char* passedString() { return "PASSED"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter
passedString	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            static const char* passedString() { return "passed"; }$/;"	f	class:Catch::CompactReporter::AssertionPrinter
password	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Long    password;$/;"	m	struct:PS_PrivateRec_
patchNumber	.\include\sol\Catch\include\internal\catch_version.h	/^        unsigned int const patchNumber;$/;"	m	struct:Catch::Version
patchlistaux	.\dep\Lua\src\lcode.c	/^static void patchlistaux (FuncState *fs, int list, int vtarget, int reg,$/;"	f	file:
patchtestreg	.\dep\Lua\src\lcode.c	/^static int patchtestreg (FuncState *fs, int node, int reg) {$/;"	f	file:
pathParser	.\include\sol\Catch\scripts\approvalTests.py	/^pathParser = re.compile( r'(.*?)\/(.*\\..pp)(.*)' )$/;"	v
pathname	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_String*      pathname;$/;"	m	struct:FT_Open_Args_
pathname	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_StreamDesc        pathname;$/;"	m	struct:FT_StreamRec_
pause	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::pause()$/;"	f	class:sf::Sound
pause	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::pause()$/;"	f	class:sf::SoundStream
pause	.\src\src\Game.cpp	/^void Game::pause() {$/;"	f	class:Game
pause	.\src\src\PauseWindow.cpp	/^void PauseWindow::pause() {$/;"	f	class:PauseWindow
pause	.\src\src\Window.cpp	/^void Window::pause() {$/;"	f	class:Window
pc	.\dep\Lua\src\lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState
pc	.\dep\Lua\src\lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pc	.\include\lua\lparser.h	/^  int pc;  \/* next position to code (equivalent to 'ncode') *\/$/;"	m	struct:FuncState
pc	.\include\lua\lparser.h	/^  int pc;  \/* position in code *\/$/;"	m	struct:Labeldesc
pcRel	.\dep\Lua\src\ldebug.h	14;"	d
pcRel	.\include\lua\ldebug.h	14;"	d
pcm	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  float  **pcm;       \/* this is a pointer into local storage *\/$/;"	m	struct:vorbis_block
pcm	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  float **pcm;$/;"	m	struct:vorbis_dsp_state
pcm_current	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int      pcm_current;$/;"	m	struct:vorbis_dsp_state
pcm_offset	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t      pcm_offset;$/;"	m	struct:OggVorbis_File
pcm_returned	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int      pcm_returned;$/;"	m	struct:vorbis_dsp_state
pcm_storage	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int      pcm_storage;$/;"	m	struct:vorbis_dsp_state
pcmend	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int   pcmend;$/;"	m	struct:vorbis_block
pcmlengths	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  ogg_int64_t     *pcmlengths; \/* overloaded to maintain binary$/;"	m	struct:OggVorbis_File
pcmret	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  float **pcmret;$/;"	m	struct:vorbis_dsp_state
percent	.\src\include\Stats.h	/^    bool percent;$/;"	m	class:Stats
performOptionalSelector	.\include\sol\Catch\include\internal\catch_objc_arc.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
performOptionalSelector	.\include\sol\Catch\single_include\catch.hpp	/^inline id performOptionalSelector( id obj, SEL sel ) {$/;"	f
perk	.\src\include\SkillTree.h	/^	Perk* perk; \/\/ Perk attached to this Node$/;"	m	class:SkillNode
perkCount	.\src\include\Object.h	/^	unsigned int perkCount() const { return _perks.size(); }$/;"	f	class:Object
pick	.\include\sol\single\sol\sol.hpp	/^		inline auto& pick(std::false_type, property_wrapper<R, W>& f) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
pick	.\include\sol\single\sol\sol.hpp	/^		inline auto& pick(std::true_type, property_wrapper<R, W>& f) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
pick	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) pick(std::integral_constant<bool, b>, F&& f) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail
pick	.\include\sol\sol\call.hpp	/^		inline auto& pick(std::false_type, property_wrapper<R, W>& f) {$/;"	f	namespace:sol::call_detail
pick	.\include\sol\sol\call.hpp	/^		inline auto& pick(std::true_type, property_wrapper<R, W>& f) {$/;"	f	namespace:sol::call_detail
pick	.\include\sol\sol\call.hpp	/^		inline decltype(auto) pick(std::integral_constant<bool, b>, F&& f) {$/;"	f	namespace:sol::call_detail
picture	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_Picture picture;$/;"	m	union:__anon57::__anon58
pipeName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        char    pipeName[80]; \/* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] *\/$/;"	m	struct:__anon146
pipeName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        char    pipeName[80]; \/* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] *\/$/;"	m	struct:__anon147
pipeName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        char pipeName[80]; \/* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] *\/$/;"	m	struct:__anon148
pipeName	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        char pipeName[80]; \/* Should be [GLX_HYPERPIPE_PIPE_NAME_LENGTH_SGIX] *\/$/;"	m	struct:__anon149
pitch	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Short  pitch;$/;"	m	struct:FTC_SBitRec_
pitch	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    int             pitch;$/;"	m	struct:FT_Bitmap_
pitch_and_family	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    pitch_and_family;$/;"	m	struct:FT_WinFNT_HeaderRec_
pixel	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Int      pixel;$/;"	m	struct:FTC_ScalerRec_
pixel_height	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  pixel_height;$/;"	m	struct:FT_WinFNT_HeaderRec_
pixel_mode	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned char   pixel_mode;$/;"	m	struct:FT_Bitmap_
pixel_width	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  pixel_width;$/;"	m	struct:FT_WinFNT_HeaderRec_
pk_funcs	.\dep\Lua\src\loadlib.c	/^static const luaL_Reg pk_funcs[] = {$/;"	v	file:
placeholder	.\include\sol\Catch\include\external\clara.h	/^        std::string placeholder; \/\/ Only value if boundField takes an arg$/;"	m	struct:Clara::CommonArgProperties
platformColourInstance	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    IColourImpl* platformColourInstance() {$/;"	f	namespace:Catch::__anon178
platform_id	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UShort    platform_id;$/;"	m	struct:FT_CharMapRec_
platform_id	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_UShort  platform_id;$/;"	m	struct:FT_SfntName_
play	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::play()$/;"	f	class:sf::Sound
play	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::play()$/;"	f	class:sf::SoundStream
plop_xyz	.\include\sol\test_functions.cpp	/^	int plop_xyz(int x, int y, std::string z) {$/;"	f	namespace:sep
plop_xyz	.\include\sol\test_tables.cpp	/^int plop_xyz(int x, int y, std::string z) {$/;"	f
plugged	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    std::map<unsigned int, std::string> plugged;$/;"	m	namespace:__anon139	file:
plugged	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^        bool plugged;$/;"	m	struct:__anon150::JoystickRecord	file:
pluggedIn	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^void HIDJoystickManager::pluggedIn(void* context, IOReturn, void*, IOHIDDeviceRef)$/;"	f	class:sf::priv::HIDJoystickManager
pluggedOut	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^void HIDJoystickManager::pluggedOut(void* context, IOReturn, void*, IOHIDDeviceRef)$/;"	f	class:sf::priv::HIDJoystickManager
pluralise	.\include\sol\Catch\include\internal\catch_common.h	/^    struct pluralise {$/;"	s	namespace:Catch
pluralise	.\include\sol\Catch\include\internal\catch_common.hpp	/^    pluralise::pluralise( std::size_t count, std::string const& label )$/;"	f	class:Catch::pluralise
pluralise	.\include\sol\Catch\single_include\catch.hpp	/^    struct pluralise {$/;"	s	namespace:Catch
pmain	.\dep\Lua\src\lua.c	/^static int pmain (lua_State *L) {$/;"	f	file:
pmain	.\dep\Lua\src\luac.c	/^static int pmain(lua_State* L)$/;"	f	file:
point2uint	.\dep\Lua\src\llimits.h	59;"	d
point2uint	.\include\lua\llimits.h	59;"	d
pointer	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    void*  pointer;$/;"	m	union:FT_StreamDesc_
pointer	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    const FT_Byte*  pointer;$/;"	m	struct:FT_Data_
pointer	.\include\sol\single\sol\sol.hpp	/^		typedef base_t::pointer pointer;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
pointer	.\include\sol\single\sol\sol.hpp	/^		typedef stack_proxy* pointer;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
pointer	.\include\sol\single\sol\sol.hpp	/^		typedef typename base_t::pointer pointer;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
pointer	.\include\sol\sol\table_iterator.hpp	/^		typedef base_t::pointer pointer;$/;"	t	class:sol::basic_table_iterator
pointer	.\include\sol\sol\variadic_args.hpp	/^		typedef stack_proxy* pointer;$/;"	t	struct:sol::variadic_args
pointer	.\include\sol\sol\variadic_args.hpp	/^		typedef typename base_t::pointer pointer;$/;"	t	struct:sol::va_iterator
points	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_SeekPoint *points;$/;"	m	struct:__anon48
points	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Vector*  points;          \/* the outline's points               *\/$/;"	m	struct:FT_Outline_
points	.\src\include\Path.h	/^	std::vector<Vector2*> points;$/;"	m	class:Path
points	.\src\include\SkillTree.h	/^	int points;    \/\/ Current points in Node$/;"	m	class:SkillNode
pollEvent	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::pollEvent(Event& event)$/;"	f	class:sf::Window
poly	.\include\sol\single\sol\sol.hpp	/^		poly = none | nil | string | number | thread |$/;"	m	class:sol::sol::call_syntax::call_status::type
poly	.\include\sol\sol\types.hpp	/^		poly = none | nil | string | number | thread |$/;"	m	class:sol::call_syntax::call_status::type
pool	.\include\sol\ninja_syntax.py	/^    def pool(self, name, depth):$/;"	m	class:Writer
pop	.\include\sol\single\sol\sol.hpp	/^			-> decltype(stack::pop<std::tuple<Ret0, Ret1, Ret...>>(nullptr)) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
pop	.\include\sol\single\sol\sol.hpp	/^			inline static decltype(auto) pop(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::popper
pop	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) pop(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
pop	.\include\sol\sol\stack_core.hpp	/^		inline decltype(auto) pop(lua_State* L) {$/;"	f	namespace:sol::stack
pop	.\include\sol\sol\stack_pop.hpp	/^			inline static decltype(auto) pop(lua_State* L) {$/;"	f	struct:sol::stack::popper
pop	.\include\sol\sol\table_core.hpp	/^			-> decltype(stack::pop<std::tuple<Ret0, Ret1, Ret...>>(nullptr)) {$/;"	f	class:sol::basic_table_core
pop	.\src\src\StateManager.cpp	/^void StateManager::pop() {$/;"	f	class:StateManager
popEvent	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^bool WindowImpl::popEvent(Event& event, bool block)$/;"	f	class:sf::priv::WindowImpl
popGLStates	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::popGLStates()$/;"	f	class:sf::RenderTarget
popScopedMessage	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void popScopedMessage( MessageInfo const& message ) {$/;"	f	class:Catch::RunContext
pop_front_type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	s	namespace:sol::meta
pop_front_type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	s	namespace:sol::meta
pop_front_type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	s	namespace:sol::meta
pop_front_type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	s	namespace:sol::meta
pop_n	.\include\sol\single\sol\sol.hpp	/^		push_popper_n<top_level> pop_n(lua_State* L, int x) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
pop_n	.\include\sol\sol\reference.hpp	/^		push_popper_n<top_level> pop_n(lua_State* L, int x) {$/;"	f	namespace:sol::stack
popcount	.\include\sol\single\sol\sol.hpp	/^		int popcount;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
popcount	.\include\sol\single\sol\sol.hpp	/^		int popcount;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
popcount	.\include\sol\sol\load_result.hpp	/^		int popcount;$/;"	m	struct:sol::load_result
popcount	.\include\sol\sol\protected_function_result.hpp	/^		int popcount;$/;"	m	struct:sol::protected_function_result
popper	.\include\sol\single\sol\sol.hpp	/^		struct popper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
popper	.\include\sol\single\sol\sol.hpp	/^		struct popper<T, std::enable_if_t<std::is_base_of<stack_reference, meta::unqualified_t<T>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
popper	.\include\sol\sol\stack_pop.hpp	/^		struct popper {$/;"	s	namespace:sol::stack
popper	.\include\sol\sol\stack_pop.hpp	/^		struct popper<T, std::enable_if_t<std::is_base_of<stack_reference, meta::unqualified_t<T>>::value>> {$/;"	s	namespace:sol::stack
populate	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Parser::Token> populate( std::vector<Parser::Token> const& tokens, ConfigT& config ) const {$/;"	f	class:Clara::CommandLine
populateFixedArgs	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Parser::Token> populateFixedArgs( std::vector<Parser::Token> const& tokens, ConfigT& config ) const {$/;"	f	class:Clara::CommandLine
populateFloatingArgs	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Parser::Token> populateFloatingArgs( std::vector<Parser::Token> const& tokens, ConfigT& config ) const {$/;"	f	class:Clara::CommandLine
populateOptions	.\include\sol\Catch\include\external\clara.h	/^        std::vector<Parser::Token> populateOptions( std::vector<Parser::Token> const& tokens, ConfigT& config ) const {$/;"	f	class:Clara::CommandLine
pos	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    unsigned long        pos;$/;"	m	struct:FT_StreamRec_
pos	.\src\include\SkillTree.h	/^	Vector2 pos; \/\/ Position of the Node when drawing. From the center$/;"	m	class:SkillNode
pos	.\src\src\SkillTree.cpp	/^Vector2 SkillTree::pos(SkillNode* node) {$/;"	f	class:SkillTree
position	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex
position	.\dep\SFML\include\SFML\Window\Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent
position	.\include\SFML\Graphics\Vertex.hpp	/^    Vector2f  position;  \/\/\/< 2D position of the vertex$/;"	m	class:sf::Vertex
position	.\include\SFML\Window\Event.hpp	/^        float          position;   \/\/\/< New position on the axis (in range [-100 .. 100])$/;"	m	struct:sf::Event::JoystickMoveEvent
position	.\include\sol\Catch\include\external\clara.h	/^        int position; \/\/ -1 means non-positional (floating)$/;"	m	struct:Clara::PositionalArgProperties
posrelat	.\dep\Lua\src\lstrlib.c	/^static lua_Integer posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
post	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_d_post_controller * post;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_d_post_controller
power_of	.\include\sol\single\sol\sol.hpp	/^		power_of,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
power_of	.\include\sol\sol\types.hpp	/^		power_of,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
pre_emphasis	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned pre_emphasis:1;$/;"	m	struct:__anon52
prebuilt	.\dep\SFML\src\SFML\Android.mk	/^prebuilt := $(strip $(wildcard $(prebuilt_path)))$/;"	m
prebuilt_path	.\dep\SFML\src\SFML\Android.mk	/^prebuilt_path := $(call local-prebuilt-path,$(LOCAL_SRC_FILES))$/;"	m
preextrapolate	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int  preextrapolate;$/;"	m	struct:vorbis_dsp_state
prefix	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__int16 prefix;$/;"	m	struct:__anon107
preinit_thread	.\dep\Lua\src\lstate.c	/^static void preinit_thread (lua_State *L, global_State *g) {$/;"	f	file:
prep	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_c_prep_controller * prep;$/;"	m	struct:jpeg_compress_struct	typeref:struct:jpeg_compress_struct::jpeg_c_prep_controller
prepare	.\dep\SFML\src\SFML\Network\Http.cpp	/^std::string Http::Request::prepare() const$/;"	f	class:sf::Http::Request
prepstate	.\dep\Lua\src\lstrlib.c	/^static void prepstate (MatchState *ms, lua_State *L,$/;"	f	file:
prev	.\dep\Lua\src\lparser.c	/^  struct LHS_assign *prev;$/;"	m	struct:LHS_assign	typeref:struct:LHS_assign::LHS_assign	file:
prev	.\dep\Lua\src\lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
prev	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_ListNode  prev;$/;"	m	struct:FT_ListNodeRec_
prev	.\include\lua\lparser.h	/^  struct FuncState *prev;  \/* enclosing function *\/$/;"	m	struct:FuncState	typeref:struct:FuncState::FuncState
prevAssertions	.\include\sol\Catch\include\internal\catch_section_info.h	/^        Counts prevAssertions;$/;"	m	struct:Catch::SectionEndInfo
prevLine	.\include\sol\Catch\scripts\releaseNotes.py	/^        prevLine = line$/;"	v
prevLine	.\include\sol\Catch\scripts\releaseNotes.py	/^prevLine = ""$/;"	v
previous	.\dep\Lua\src\ldo.c	/^  struct lua_longjmp *previous;$/;"	m	struct:lua_longjmp	typeref:struct:lua_longjmp::lua_longjmp	file:
previous	.\dep\Lua\src\lparser.c	/^  struct BlockCnt *previous;  \/* chain *\/$/;"	m	struct:BlockCnt	typeref:struct:BlockCnt::BlockCnt	file:
previous	.\dep\Lua\src\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
previous	.\include\lua\lstate.h	/^  struct CallInfo *previous, *next;  \/* dynamic call link *\/$/;"	m	struct:CallInfo	typeref:struct:CallInfo::CallInfo
primaryexp	.\dep\Lua\src\lparser.c	/^static void primaryexp (LexState *ls, expdesc *v) {$/;"	f	file:
print	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void print() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
print	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void print() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
print	.\include\sol\examples\config.cpp	/^    void print() {$/;"	f	struct:config
print	.\include\sol\examples\usertype.cpp	/^    void print() {$/;"	f	struct:foo
print	.\src\src\SkillTree.cpp	/^void SkillNode::print() {$/;"	f	class:SkillNode
print	.\src\src\SkillTree.cpp	/^void SkillTree::print(SkillNode* node, bool pos) {$/;"	f	class:SkillTree
print	.\src\src\StateManager.cpp	/^void StateManager::print() {$/;"	f	class:StateManager
print	.\src\src\Stats.cpp	/^void Stats::print() const {$/;"	f	class:Stats
printClosedHeader	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printClosedHeader( std::string const& _name ) {$/;"	f	struct:Catch::ConsoleReporter
printExpressionWas	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printExpressionWas() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printHeaderString	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printHeaderString( std::string const& _string, std::size_t indent = 0 ) {$/;"	f	struct:Catch::ConsoleReporter
printHeaderString	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        void printHeaderString( std::ostream& os, std::string const& _string, std::size_t indent = 0 ) {$/;"	f	struct:Catch::TeamCityReporter
printInfoMessages	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            bool printInfoMessages;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
printInfoMessages	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            bool printInfoMessages;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
printIssue	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printIssue( std::string issue ) const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printMessage	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printMessage() {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printMessage	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void printMessage() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
printOpenHeader	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printOpenHeader( std::string const& _name ) {$/;"	f	struct:Catch::ConsoleReporter
printOriginalExpression	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printOriginalExpression() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printOriginalExpression	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void printOriginalExpression() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
printReconstructedExpression	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printReconstructedExpression() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printReconstructedExpression	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void printReconstructedExpression() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
printRemainingMessages	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printRemainingMessages( Colour::Code colour = dimColour() ) {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printResultType	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printResultType( Colour::Code colour, std::string passOrFail ) const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printResultType	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void printResultType() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
printSectionHeader	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^        void printSectionHeader( std::ostream& os ) {$/;"	f	struct:Catch::TeamCityReporter
printSourceInfo	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            void printSourceInfo() const {$/;"	f	class:Catch::CompactReporter::AssertionPrinter
printSourceInfo	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            void printSourceInfo() const {$/;"	f	class:Catch::ConsoleReporter::AssertionPrinter
printSummaryDivider	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printSummaryDivider() {$/;"	f	struct:Catch::ConsoleReporter
printSummaryRow	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printSummaryRow( std::string const& label, std::vector<SummaryColumn> const& cols, std::size_t row ) {$/;"	f	struct:Catch::ConsoleReporter
printTable	.\src\src\LuaScript.cpp	/^void LuaScript::printTable() {$/;"	f	class:LuaScript
printTestCaseAndSectionHeader	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printTestCaseAndSectionHeader() {$/;"	f	struct:Catch::ConsoleReporter
printToScreen	.\src\include\Logger.h	/^	bool printToScreen = false;$/;"	m	class:Logger
printTotals	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        void printTotals( const Totals& totals ) const {$/;"	f	struct:Catch::CompactReporter
printTotals	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printTotals( Totals const& totals ) {$/;"	f	struct:Catch::ConsoleReporter
printTotalsDivider	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^        void printTotalsDivider( Totals const& totals ) {$/;"	f	struct:Catch::ConsoleReporter
print_function	.\include\sol\Catch\scripts\approvalTests.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\approve.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\developBuild.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\fixTrailingWhitespace.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\generateSingleHeader.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\majorRelease.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\minorRelease.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\patchRelease.py	/^from  __future__ import  print_function$/;"	i
print_function	.\include\sol\Catch\scripts\releaseCommon.py	/^from  __future__ import  print_function$/;"	i
print_section	.\include\sol\sol\debug.hpp	/^			inline void print_section(const std::string& message, lua_State* L) {$/;"	f	namespace:sol::detail::debug
print_stack	.\include\sol\sol\debug.hpp	/^			inline void print_stack(lua_State* L) {$/;"	f	namespace:sol::detail::debug
print_usage	.\dep\Lua\src\lua.c	/^static void print_usage (const char *badoption) {$/;"	f	file:
print_version	.\dep\Lua\src\lua.c	/^static void print_version (void) {$/;"	f	file:
priority	.\dep\Lua\src\lparser.c	/^} priority[] = {  \/* ORDER OPR *\/$/;"	v	typeref:struct:__anon10	file:
priv	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\System\Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\System\Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\System\ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\Window\Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\include\SFML\Window\Window.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\ALCheck.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\ALCheck.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\AudioDevice.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\GLCheck.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\GLCheck.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\GLExtensions.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\ImageLoader.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Graphics\TextureSaver.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Graphics\TextureSaver.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Android\Activity.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Android\ResourceStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Unix\ClockImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Unix\ClockImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Unix\MutexImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Unix\SleepImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Unix\SleepImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Win32\ClockImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Win32\ClockImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Win32\MutexImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Win32\SleepImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Win32\SleepImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Android\InputImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Android\VideoModeImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\EGLCheck.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\EGLCheck.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\GlContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\InputImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\SFKeyboardModifiersHelper.h	/^    namespace priv {$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\SFOpenGLView.h	/^    namespace priv {$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\SFWindowController.h	/^    namespace priv {$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\VideoModeImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\WindowImplDelegateProtocol.h	/^    namespace priv {$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\Display.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\InputImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\ScopedXcbPtr.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Unix\VideoModeImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\VideoModeImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\InputImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Win32\VideoModeImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^namespace priv$/;"	n	namespace:sf	file:
priv	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\iOS\InputImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\iOS\JoystickImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\Graphics\RenderTexture.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\System\FileInputStream.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\System\Mutex.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\System\Thread.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\System\ThreadLocal.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\Window\Context.hpp	/^namespace priv$/;"	n	namespace:sf
priv	.\include\SFML\Window\Window.hpp	/^namespace priv$/;"	n	namespace:sf
private_	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	struct FLAC__StreamDecoderPrivate *private_; \/* avoid the C++ keyword 'private' *\/$/;"	m	struct:__anon69	typeref:struct:__anon69::FLAC__StreamDecoderPrivate
private_	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	struct FLAC__StreamEncoderPrivate *private_; \/* avoid the C++ keyword 'private' *\/$/;"	m	struct:__anon76	typeref:struct:__anon76::FLAC__StreamEncoderPrivate
private_dict	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_PrivateRec  private_dict;$/;"	m	struct:CID_FaceDictRec_
privates	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    PS_Private       privates  [T1_MAX_MM_DESIGNS + 1];$/;"	m	struct:PS_BlendRec_
probe	.\include\sol\single\sol\sol.hpp	/^			probe(bool s, int l) : success(s), levels(l) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::probe
probe	.\include\sol\single\sol\sol.hpp	/^		struct probe {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
probe	.\include\sol\sol\stack_core.hpp	/^			probe(bool s, int l) : success(s), levels(l) {}$/;"	f	struct:sol::stack::probe
probe	.\include\sol\sol\stack_core.hpp	/^		struct probe {$/;"	s	namespace:sol::stack
probe_field_getter	.\include\sol\single\sol\sol.hpp	/^		struct probe_field_getter {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_field_getter	.\include\sol\single\sol\sol.hpp	/^		struct probe_field_getter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_field_getter	.\include\sol\single\sol\sol.hpp	/^		struct probe_field_getter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_field_getter	.\include\sol\sol\stack_probe.hpp	/^		struct probe_field_getter {$/;"	s	namespace:sol::stack
probe_field_getter	.\include\sol\sol\stack_probe.hpp	/^		struct probe_field_getter<std::pair<A, B>, b, raw, C> {$/;"	s	namespace:sol::stack
probe_field_getter	.\include\sol\sol\stack_probe.hpp	/^		struct probe_field_getter<std::tuple<Args...>, b, raw, C> {$/;"	s	namespace:sol::stack
probe_get_field	.\include\sol\single\sol\sol.hpp	/^		probe probe_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_get_field	.\include\sol\single\sol\sol.hpp	/^		probe probe_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_get_field	.\include\sol\sol\stack_core.hpp	/^		probe probe_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::stack
probe_get_field	.\include\sol\sol\stack_core.hpp	/^		probe probe_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::stack
probe_raw_get_field	.\include\sol\single\sol\sol.hpp	/^		probe probe_raw_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_raw_get_field	.\include\sol\single\sol\sol.hpp	/^		probe probe_raw_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
probe_raw_get_field	.\include\sol\sol\stack_core.hpp	/^		probe probe_raw_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::stack
probe_raw_get_field	.\include\sol\sol\stack_core.hpp	/^		probe probe_raw_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::stack
process	.\include\sol\Optional\test_optional.cpp	/^void process(){}$/;"	f
process	.\include\sol\Optional\test_optional.cpp	/^void process(int ){}$/;"	f
processCapturedSamples	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::processCapturedSamples()$/;"	f	class:sf::SoundRecorder
processEvent	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    int (*processEvent)(int fd, int events, void* data);$/;"	m	struct:sf::priv::ActivityStates
processEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::processEvent(int fd, int events, void* data)$/;"	f	class:sf::priv::WindowImplAndroid
processEvent	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^bool WindowImplX11::processEvent(XEvent windowEvent)$/;"	f	class:sf::priv::WindowImplX11
processEvent	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::processEvent(UINT message, WPARAM wParam, LPARAM lParam)$/;"	f	class:sf::priv::WindowImplWin32
processEvents	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::processEvents()$/;"	f	class:sf::priv::WindowImplAndroid
processEvents	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::processEvents()$/;"	f	class:sf::priv::WindowImplX11
processEvents	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::processEvents()$/;"	f	class:sf::priv::WindowImplWin32
processJoystickEvents	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^void WindowImpl::processJoystickEvents()$/;"	f	class:sf::priv::WindowImpl
processKeyEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::processKeyEvent(AInputEvent* _event, ActivityStates* states)$/;"	f	class:sf::priv::WindowImplAndroid
processMotionEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::processMotionEvent(AInputEvent* _event, ActivityStates* states)$/;"	f	class:sf::priv::WindowImplAndroid
processName	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::string processName;$/;"	m	struct:Catch::ConfigData
processNil	.\include\sol\Optional\test_optional.cpp	/^void processNil(){}$/;"	f
processPointerEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::processPointerEvent(bool isDown, AInputEvent* _event, ActivityStates* states)$/;"	f	class:sf::priv::WindowImplAndroid
processScrollEvent	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^int WindowImplAndroid::processScrollEvent(AInputEvent* _event, ActivityStates* states)$/;"	f	class:sf::priv::WindowImplAndroid
processSensorEvents	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^int SensorImpl::processSensorEvents(int fd, int events, void* data)$/;"	f	class:sf::priv::SensorImpl
processSensorEvents	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^void WindowImpl::processSensorEvents()$/;"	f	class:sf::priv::WindowImpl
process_file	.\include\sol\single.py	/^def process_file(filename, out):$/;"	f
processed_files	.\include\sol\single.py	/^processed_files = [os.path.join(script_path, 'sol', x) for x in ('state.hpp', 'object.hpp', 'function.hpp', 'coroutine.hpp')]$/;"	v
productId	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        unsigned int productId; \/\/\/< Product identifier$/;"	m	struct:sf::Joystick::Identification
productId	.\include\SFML\Window\Joystick.hpp	/^        unsigned int productId; \/\/\/< Product identifier$/;"	m	struct:sf::Joystick::Identification
progname	.\dep\Lua\src\lua.c	/^static const char *progname = LUA_PROGNAME;$/;"	v	file:
progname	.\dep\Lua\src\luac.c	/^static const char* progname=PROGNAME;	\/* actual program name *\/$/;"	v	file:
progressive	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            progressive;$/;"	m	struct:__anon98
progressive_mode	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean progressive_mode;	\/* TRUE if SOFn specifies progressive mode *\/$/;"	m	struct:jpeg_decompress_struct
progressive_mode	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean progressive_mode;	\/* TRUE if scan script uses progressive mode *\/$/;"	m	struct:jpeg_compress_struct
project	.\include\sol\docs\source\conf.py	/^project = 'Sol'$/;"	v
prop	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    int* prop;$/;"	m	struct:Obj	file:
propagateall	.\dep\Lua\src\lgc.c	/^static void propagateall (global_State *g) {$/;"	f	file:
propagatemark	.\dep\Lua\src\lgc.c	/^static void propagatemark (global_State *g) {$/;"	f	file:
properties	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        SpecialProperties properties;$/;"	m	struct:Catch::TestCaseInfo
property	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) property(std::false_type, W&& write) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::property_detail
property	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) property(std::false_type, W&& write, R&& read) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::property_detail
property	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) property(std::true_type, R&& read) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::property_detail
property	.\include\sol\single\sol\sol.hpp	/^		inline decltype(auto) property(std::true_type, R&& read, W&& write) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::property_detail
property	.\include\sol\single\sol\sol.hpp	/^	inline decltype(auto) property(F&& f) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
property	.\include\sol\single\sol\sol.hpp	/^	inline decltype(auto) property(F&& f, G&& g) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
property	.\include\sol\sol\property.hpp	/^		inline decltype(auto) property(std::false_type, W&& write) {$/;"	f	namespace:sol::property_detail
property	.\include\sol\sol\property.hpp	/^		inline decltype(auto) property(std::false_type, W&& write, R&& read) {$/;"	f	namespace:sol::property_detail
property	.\include\sol\sol\property.hpp	/^		inline decltype(auto) property(std::true_type, R&& read) {$/;"	f	namespace:sol::property_detail
property	.\include\sol\sol\property.hpp	/^		inline decltype(auto) property(std::true_type, R&& read, W&& write) {$/;"	f	namespace:sol::property_detail
property	.\include\sol\sol\property.hpp	/^	inline decltype(auto) property(F&& f) {$/;"	f	namespace:sol
property	.\include\sol\sol\property.hpp	/^	inline decltype(auto) property(F&& f, G&& g) {$/;"	f	namespace:sol
property_detail	.\include\sol\single\sol\sol.hpp	/^	namespace property_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
property_detail	.\include\sol\sol\property.hpp	/^	namespace property_detail {$/;"	n	namespace:sol
property_wrapper	.\include\sol\single\sol\sol.hpp	/^		property_wrapper(Rx&& r, Wx&& w) : read(std::forward<Rx>(r)), write(std::forward<Wx>(w)) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
property_wrapper	.\include\sol\single\sol\sol.hpp	/^	struct property_wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
property_wrapper	.\include\sol\sol\property.hpp	/^		property_wrapper(Rx&& r, Wx&& w) : read(std::forward<Rx>(r)), write(std::forward<Wx>(w)) {}$/;"	f	struct:sol::property_wrapper
property_wrapper	.\include\sol\sol\property.hpp	/^	struct property_wrapper {$/;"	s	namespace:sol
protect	.\include\sol\single\sol\sol.hpp	/^	auto protect(T&& value) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
protect	.\include\sol\sol\protect.hpp	/^	auto protect(T&& value) {$/;"	f	namespace:sol
protect_t	.\include\sol\single\sol\sol.hpp	/^		protect_t(Arg&& arg, Args&&... args) : value(std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::protect_t
protect_t	.\include\sol\single\sol\sol.hpp	/^	struct protect_t {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
protect_t	.\include\sol\sol\protect.hpp	/^		protect_t(Arg&& arg, Args&&... args) : value(std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::protect_t
protect_t	.\include\sol\sol\protect.hpp	/^	struct protect_t {$/;"	s	namespace:sol
protected_	.\dep\SFML\extlibs\headers\FLAC\stream_decoder.h	/^	struct FLAC__StreamDecoderProtected *protected_; \/* avoid the C++ keyword 'protected' *\/$/;"	m	struct:__anon69	typeref:struct:__anon69::FLAC__StreamDecoderProtected
protected_	.\dep\SFML\extlibs\headers\FLAC\stream_encoder.h	/^	struct FLAC__StreamEncoderProtected *protected_; \/* avoid the C++ keyword 'protected' *\/$/;"	m	struct:__anon76	typeref:struct:__anon76::FLAC__StreamEncoderProtected
protected_function_result	.\include\sol\single\sol\sol.hpp	/^	struct protected_function_result : public proxy_base<protected_function_result> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
protected_function_result	.\include\sol\sol\protected_function_result.hpp	/^	struct protected_function_result : public proxy_base<protected_function_result> {$/;"	s	namespace:sol
proxy	.\include\sol\single\sol\sol.hpp	/^		proxy(Table table, T&& key) : tbl(table), key(std::forward<T>(key)) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
proxy	.\include\sol\single\sol\sol.hpp	/^	struct proxy : public proxy_base<proxy<Table, Key>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
proxy	.\include\sol\sol\proxy.hpp	/^		proxy(Table table, T&& key) : tbl(table), key(std::forward<T>(key)) {}$/;"	f	struct:sol::proxy
proxy	.\include\sol\sol\proxy.hpp	/^	struct proxy : public proxy_base<proxy<Table, Key>> {$/;"	s	namespace:sol
proxy_base	.\include\sol\single\sol\sol.hpp	/^	struct proxy_base {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
proxy_base	.\include\sol\sol\proxy_base.hpp	/^	struct proxy_base {$/;"	s	namespace:sol
ptr	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  unsigned char *ptr;$/;"	m	struct:__anon88
ptr	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  void *ptr;$/;"	m	struct:alloc_chain
ptr	.\include\sol\single\sol\sol.hpp	/^		inline T* ptr(T& val) {$/;"	f	namespace:sol::meta::meta_detail
ptr	.\include\sol\single\sol\sol.hpp	/^		inline T* ptr(T* val) {$/;"	f	namespace:sol::meta::meta_detail
ptr	.\include\sol\single\sol\sol.hpp	/^		inline T* ptr(std::reference_wrapper<T> val) {$/;"	f	namespace:sol::meta::meta_detail
ptr	.\include\sol\single\sol\sol.hpp	/^    char *ptr;$/;"	m	struct:sol::luaL_Buffer_52
ptr	.\include\sol\sol\compatibility\5.1.0.h	/^    char *ptr;$/;"	m	struct:luaL_Buffer_52
ptr	.\include\sol\sol\traits.hpp	/^		inline T* ptr(T& val) {$/;"	f	namespace:sol::meta::meta_detail
ptr	.\include\sol\sol\traits.hpp	/^		inline T* ptr(T* val) {$/;"	f	namespace:sol::meta::meta_detail
ptr	.\include\sol\sol\traits.hpp	/^		inline T* ptr(std::reference_wrapper<T> val) {$/;"	f	namespace:sol::meta::meta_detail
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, Arg&& arg) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, Arg&& arg, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, Arg0&& arg0, Arg0&& arg1, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, F&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, FP&& fp) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, T&& c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, T&& obj) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, T&& t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, T* obj) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, bool b) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, c_closure cc) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, char c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, char16_t c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, char32_t c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const T& cont) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const T& value) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char(&str)[N]) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char* str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char16_t(&str)[N]) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char16_t* u16str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char16_t* u16strb, const char16_t* u16stre) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char32_t(&str)[N]) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char32_t* u32str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const char32_t* u32strb, const char32_t* u32stre) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const overload_set<Functions...>& set) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const property_wrapper<F, G>& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const property_wrapper<F, void>& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const property_wrapper<void, F>& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const protect_t<T>& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const std::reference_wrapper<T>& t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const std::string& str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const std::u16string& u16str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const std::u32string& u32str) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const std::wstring& wstr) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const user<T>& u) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const wchar_t(&str)[N]) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const wchar_t* wstr) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, const wchar_t* wstrb, const wchar_t* wstre) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, constructor_wrapper<Fxs...> c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, destructor_wrapper<Fx> c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, detail::tagged<T, constructor_list<Lists...>>) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, detail::tagged<T, destructor_wrapper<void>>) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, light<T> l) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, lightuserdata_value userdata) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, lua_CFunction func, int n = 0) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, meta_function m) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, metatable_key_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, nil_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, no_metatable_t, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, no_metatable_t, const user<T>& u) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, no_metatable_t, user<T>&& u) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, nullopt_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, overload_set<Functions...>&& set) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, property_wrapper<F, G>&& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, property_wrapper<F, void>&& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, property_wrapper<void, F>&& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, protect_t<T>&& pw) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, std::function<Signature> fx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, std::nullptr_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, umt_t&& umx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, user<T>&& u) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, userdata_value data) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, usertype<T>& user) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, void* userdata) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State* L, wchar_t c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, T& ref) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, T&& ref) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, const proxy<Table, Key>& p) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, const stack_proxy& ref) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, const this_state&) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(lua_State*, const variadic_args& ref) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(std::index_sequence<I...>, lua_State* L, T&& c) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^			static int push(std::index_sequence<I...>, lua_State* L, T&& t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push	.\include\sol\single\sol\sol.hpp	/^		inline int push(lua_State* L, Arg&& arg, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
push	.\include\sol\single\sol\sol.hpp	/^		inline int push(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
push	.\include\sol\single\sol\sol.hpp	/^		int push() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
push	.\include\sol\single\sol\sol.hpp	/^		int push() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
push	.\include\sol\single\sol\sol.hpp	/^		int push(lua_State* L) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, F&& f) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, FP&& fp) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, const overload_set<Functions...>& set) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, const property_wrapper<F, G>& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, const property_wrapper<F, void>& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, const property_wrapper<void, F>& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, const protect_t<T>& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, constructor_wrapper<Fxs...> c) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, destructor_wrapper<Fx> c) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, detail::tagged<T, constructor_list<Lists...>>) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, detail::tagged<T, destructor_wrapper<void>>) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, overload_set<Functions...>&& set) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, property_wrapper<F, G>&& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, property_wrapper<F, void>&& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, property_wrapper<void, F>&& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, protect_t<T>&& pw) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\function_types.hpp	/^			static int push(lua_State* L, std::function<Signature> fx) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\proxy.hpp	/^			static int push(lua_State*, const proxy<Table, Key>& p) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\simple_usertype_metatable.hpp	/^			static int push(lua_State* L, umt_t&& umx) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_core.hpp	/^		inline int push(lua_State* L, Arg&& arg, Args&&... args) {$/;"	f	namespace:sol::stack
push	.\include\sol\sol\stack_core.hpp	/^		inline int push(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::stack
push	.\include\sol\sol\stack_proxy.hpp	/^			static int push(lua_State*, const stack_proxy& ref) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_proxy.hpp	/^		int push() const {$/;"	f	struct:sol::stack_proxy
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, Arg&& arg) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, Arg&& arg, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, Arg0&& arg0, Arg0&& arg1, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, T&& c) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, T&& obj) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, T&& t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, T* obj) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, bool b) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, c_closure cc) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, char c) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const T& cont) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const T& value) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const char(&str)[N]) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const char* str) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const std::reference_wrapper<T>& t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const std::string& str) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, const user<T>& u) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, light<T> l) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, lightuserdata_value userdata) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, lua_CFunction func, int n = 0) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, meta_function m) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, metatable_key_t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, nil_t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, no_metatable_t, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, no_metatable_t, const user<T>& u) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, no_metatable_t, user<T>&& u) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, nullopt_t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, std::nullptr_t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, user<T>&& u) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, userdata_value data) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State* L, void* userdata) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State*, T& ref) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State*, T&& ref) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(lua_State*, const this_state&) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(std::index_sequence<I...>, lua_State* L, T&& c) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\stack_push.hpp	/^			static int push(std::index_sequence<I...>, lua_State* L, T&& t) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\usertype.hpp	/^			static int push(lua_State* L, usertype<T>& user) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\usertype.hpp	/^		int push(lua_State* L) {$/;"	f	class:sol::usertype
push	.\include\sol\sol\usertype_metatable.hpp	/^			static int push(lua_State* L, umt_t&& umx) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\variadic_args.hpp	/^			static int push(lua_State*, const variadic_args& ref) {$/;"	f	struct:sol::stack::pusher
push	.\include\sol\sol\variadic_args.hpp	/^		int push() const {$/;"	f	struct:sol::variadic_args
push	.\include\sol\test_customizations.cpp	/^			static int push(lua_State* L, const two_things& things) {$/;"	f	struct:sol::stack::pusher
push	.\src\src\StateManager.cpp	/^void StateManager::push(Window* state) {$/;"	f	class:StateManager
pushEvent	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^void WindowImpl::pushEvent(const Event& event)$/;"	f	class:sf::priv::WindowImpl
pushGLStates	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::pushGLStates()$/;"	f	class:sf::RenderTarget
pushScopedMessage	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void pushScopedMessage( MessageInfo const& message ) {$/;"	f	class:Catch::RunContext
push_as_upvalues	.\include\sol\single\sol\sol.hpp	/^			inline int push_as_upvalues(lua_State* L, T& item) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
push_as_upvalues	.\include\sol\sol\stack.hpp	/^			inline int push_as_upvalues(lua_State* L, T& item) {$/;"	f	namespace:sol::stack::stack_detail
push_captures	.\dep\Lua\src\lstrlib.c	/^static int push_captures (MatchState *ms, const char *s, const char *e) {$/;"	f	file:
push_deep	.\include\sol\single\sol\sol.hpp	/^			static int push_deep(lua_State* L, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push_deep	.\include\sol\sol\stack_push.hpp	/^			static int push_deep(lua_State* L, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push_func	.\include\sol\single\sol\sol.hpp	/^			static int push_func(std::index_sequence<I...>, lua_State* L, FP&& fp) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
push_func	.\include\sol\sol\function_types.hpp	/^			static int push_func(std::index_sequence<I...>, lua_State* L, FP&& fp) {$/;"	f	struct:sol::stack::pusher
push_keyed	.\include\sol\single\sol\sol.hpp	/^			static int push_keyed(lua_State* L, K&& k, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push_keyed	.\include\sol\single\sol\sol.hpp	/^			static int push_keyed(lua_State* L, K&& k, T* obj) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push_keyed	.\include\sol\sol\stack_push.hpp	/^			static int push_keyed(lua_State* L, K&& k, Args&&... args) {$/;"	f	struct:sol::stack::pusher
push_keyed	.\include\sol\sol\stack_push.hpp	/^			static int push_keyed(lua_State* L, K&& k, T* obj) {$/;"	f	struct:sol::stack::pusher
push_onecapture	.\dep\Lua\src\lstrlib.c	/^static void push_onecapture (MatchState *ms, int i, const char *s,$/;"	f	file:
push_package_table	.\include\sol\single\sol\sol.hpp	/^inline static void push_package_table(lua_State *L) {$/;"	f
push_pop	.\include\sol\single\sol\sol.hpp	/^		push_popper<top_level, T> push_pop(T&& x) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
push_pop	.\include\sol\sol\reference.hpp	/^		push_popper<top_level, T> push_pop(T&& x) {$/;"	f	namespace:sol::stack
push_popper	.\include\sol\single\sol\sol.hpp	/^			push_popper(T x) : t(x) { t.push(); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper
push_popper	.\include\sol\single\sol\sol.hpp	/^			push_popper(T) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper
push_popper	.\include\sol\single\sol\sol.hpp	/^		struct push_popper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
push_popper	.\include\sol\single\sol\sol.hpp	/^		struct push_popper<true, T> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
push_popper	.\include\sol\sol\reference.hpp	/^			push_popper(T x) : t(x) { t.push(); }$/;"	f	struct:sol::stack::push_popper
push_popper	.\include\sol\sol\reference.hpp	/^			push_popper(T) {}$/;"	f	struct:sol::stack::push_popper
push_popper	.\include\sol\sol\reference.hpp	/^		struct push_popper {$/;"	s	namespace:sol::stack
push_popper	.\include\sol\sol\reference.hpp	/^		struct push_popper<true, T> {$/;"	s	namespace:sol::stack
push_popper_n	.\include\sol\single\sol\sol.hpp	/^			push_popper_n(lua_State* L, int x) : L(L), t(x) { }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper_n
push_popper_n	.\include\sol\single\sol\sol.hpp	/^			push_popper_n(lua_State*, int) { }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper_n
push_popper_n	.\include\sol\single\sol\sol.hpp	/^		struct push_popper_n {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
push_popper_n	.\include\sol\single\sol\sol.hpp	/^		struct push_popper_n<true> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
push_popper_n	.\include\sol\sol\reference.hpp	/^			push_popper_n(lua_State* L, int x) : L(L), t(x) { }$/;"	f	struct:sol::stack::push_popper_n
push_popper_n	.\include\sol\sol\reference.hpp	/^			push_popper_n(lua_State*, int) { }$/;"	f	struct:sol::stack::push_popper_n
push_popper_n	.\include\sol\sol\reference.hpp	/^		struct push_popper_n {$/;"	s	namespace:sol::stack
push_popper_n	.\include\sol\sol\reference.hpp	/^		struct push_popper_n<true> {$/;"	s	namespace:sol::stack
push_reference	.\include\sol\single\sol\sol.hpp	/^		inline int push_reference(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
push_reference	.\include\sol\sol\stack_core.hpp	/^		inline int push_reference(lua_State* L, T&& t, Args&&... args) {$/;"	f	namespace:sol::stack
push_with	.\include\sol\single\sol\sol.hpp	/^			static int push_with(lua_State* L, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::pusher
push_with	.\include\sol\sol\stack_push.hpp	/^			static int push_with(lua_State* L, Args&&... args) {$/;"	f	struct:sol::stack::pusher
pushargs	.\dep\Lua\src\lua.c	/^static int pushargs (lua_State *L) {$/;"	f	file:
pushclosure	.\dep\Lua\src\lvm.c	/^static void pushclosure (lua_State *L, Proto *p, UpVal **encup, StkId base,$/;"	f	file:
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<Signature, std::enable_if_t<meta::all<std::is_function<Signature>, meta::neg<std::is_same<Signature, lua_CFunction>>, meta::neg<std::is_same<Signature, std::remove_pointer_t<lua_CFunction>>>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<Signature, std::enable_if_t<std::is_member_pointer<Signature>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<meta::has_begin_end<T>, meta::has_key_value_pair<T>, meta::neg<meta::any<std::is_base_of<reference, T>, std::is_base_of<stack_reference, T>>>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<meta::has_begin_end<T>, meta::neg<meta::has_key_value_pair<T>>, meta::neg<meta::any<std::is_base_of<reference, T>, std::is_base_of<stack_reference, T>>>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_signed<T>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_unsigned<T>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<std::is_base_of<reference, T>::value || std::is_base_of<stack_reference, T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<std::is_enum<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<bool> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<c_closure> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char16_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char16_t[N]> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char32_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char32_t[N]> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<char[N]> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<closure<Arg, Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<const char*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<const char16_t*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<const char32_t*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<const wchar_t*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<detail::as_reference_tag> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<detail::tagged<T, constructor_list<Lists...>>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<detail::tagged<T, constructor_wrapper<Fxs...>>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<detail::tagged<T, destructor_wrapper<Fx>>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<detail::tagged<T, destructor_wrapper<void>>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<function_arguments<T, Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<function_sig<Sigs...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<light<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<lightuserdata_value> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<lua_CFunction> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<meta_function> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<metatable_key_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<nil_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<nullopt_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<optional<O>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<overload_set<Functions...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<property_wrapper<F, G>, std::enable_if_t<!std::is_void<F>::value && !std::is_void<G>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<property_wrapper<F, void>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<property_wrapper<void, F>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<protect_t<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<proxy<Table, Key>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<simple_usertype_metatable<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<stack_proxy> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::function<Signature>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::nullptr_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::pair<A, B>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::reference_wrapper<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::remove_pointer_t<lua_CFunction>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::tuple<Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::u16string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::u32string> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<std::wstring> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<this_state> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<user<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<userdata_value> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<usertype<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<usertype_metatable<T, std::index_sequence<I...>, Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<variadic_args> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<void*> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<wchar_t> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\single\sol\sol.hpp	/^		struct pusher<wchar_t[N]> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<Signature, std::enable_if_t<meta::all<std::is_function<Signature>, meta::neg<std::is_same<Signature, lua_CFunction>>, meta::neg<std::is_same<Signature, std::remove_pointer_t<lua_CFunction>>>>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<Signature, std::enable_if_t<std::is_member_pointer<Signature>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<detail::tagged<T, constructor_list<Lists...>>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<detail::tagged<T, constructor_wrapper<Fxs...>>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<detail::tagged<T, destructor_wrapper<Fx>>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<detail::tagged<T, destructor_wrapper<void>>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<function_arguments<T, Args...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<function_sig<Sigs...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<overload_set<Functions...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<property_wrapper<F, G>, std::enable_if_t<!std::is_void<F>::value && !std::is_void<G>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<property_wrapper<F, void>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<property_wrapper<void, F>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<protect_t<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\function_types.hpp	/^		struct pusher<std::function<Signature>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\proxy.hpp	/^		struct pusher<proxy<Table, Key>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\simple_usertype_metatable.hpp	/^		struct pusher<simple_usertype_metatable<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_proxy.hpp	/^		struct pusher<stack_proxy> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T*> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<is_unique_usertype<T>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<meta::has_begin_end<T>, meta::has_key_value_pair<T>, meta::neg<meta::any<std::is_base_of<reference, T>, std::is_base_of<stack_reference, T>>>>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<meta::has_begin_end<T>, meta::neg<meta::has_key_value_pair<T>>, meta::neg<meta::any<std::is_base_of<reference, T>, std::is_base_of<stack_reference, T>>>>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_signed<T>>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<meta::all<std::is_integral<T>, std::is_unsigned<T>>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<std::is_base_of<reference, T>::value || std::is_base_of<stack_reference, T>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<std::is_enum<T>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<T, std::enable_if_t<std::is_floating_point<T>::value>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<bool> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<c_closure> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<char> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<char[N]> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<closure<Arg, Args...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<const char*> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<detail::as_reference_tag> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<light<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<lightuserdata_value> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<lua_CFunction> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<meta_function> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<metatable_key_t> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<nil_t> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<nullopt_t> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<optional<O>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::nullptr_t> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::pair<A, B>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::reference_wrapper<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::remove_pointer_t<lua_CFunction>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::string> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<std::tuple<Args...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<this_state> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<user<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<userdata_value> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\stack_push.hpp	/^		struct pusher<void*> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\usertype.hpp	/^		struct pusher<usertype<T>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\usertype_metatable.hpp	/^		struct pusher<usertype_metatable<T, std::index_sequence<I...>, Args...>> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\sol\variadic_args.hpp	/^		struct pusher<variadic_args> {$/;"	s	namespace:sol::stack
pusher	.\include\sol\test_customizations.cpp	/^		struct pusher<two_things> {$/;"	s	namespace:sol::stack	file:
pusherror	.\dep\Lua\src\loadlib.c	/^static void pusherror (lua_State *L) {$/;"	f	file:
pushfuncname	.\dep\Lua\src\lauxlib.c	/^static void pushfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushfuncname	.\include\sol\single\sol\sol.hpp	/^inline static void pushfuncname(lua_State *L, lua_Debug *ar) {$/;"	f
pushglobalfuncname	.\dep\Lua\src\lauxlib.c	/^static int pushglobalfuncname (lua_State *L, lua_Debug *ar) {$/;"	f	file:
pushglobalfuncname	.\include\sol\single\sol\sol.hpp	/^inline static int pushglobalfuncname(lua_State *L, lua_Debug *ar) {$/;"	f
pushline	.\dep\Lua\src\lua.c	/^static int pushline (lua_State *L, int firstline) {$/;"	f	file:
pushnexttemplate	.\dep\Lua\src\loadlib.c	/^static const char *pushnexttemplate (lua_State *L, const char *path) {$/;"	f	file:
pushnumint	.\dep\Lua\src\lmathlib.c	/^static void pushnumint (lua_State *L, lua_Number d) {$/;"	f	file:
pushstr	.\dep\Lua\src\lobject.c	/^static void pushstr (lua_State *L, const char *str, size_t l) {$/;"	f	file:
pushunsigned	.\dep\Lua\src\lbitlib.c	22;"	d	file:
pushutfchar	.\dep\Lua\src\lutf8lib.c	/^static void pushutfchar (lua_State *L, int arg) {$/;"	f	file:
pvalue	.\dep\Lua\src\lobject.h	168;"	d
pvalue	.\include\lua\lobject.h	168;"	d
pygments_style	.\include\sol\docs\source\conf.py	/^pygments_style = 'sphinx'$/;"	v
q_scale_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int q_scale_factor[NUM_QUANT_TBLS];$/;"	m	struct:jpeg_compress_struct
qlp_coeff	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__int32 qlp_coeff[FLAC__MAX_LPC_ORDER];$/;"	m	struct:__anon34
qlp_coeff_precision	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned qlp_coeff_precision;$/;"	m	struct:__anon34
qnxnto	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdCXX\CMakeCXXCompilerId.cpp	/^char const* qnxnto = "INFO" ":" "qnxnto";$/;"	v
qnxnto	.\dep\SFML-build\CMakeFiles\3.0.0\CompilerIdC\CMakeCCompilerId.c	/^char const* qnxnto = "INFO" ":" "qnxnto";$/;"	v
qualified_name	.\include\sol\single\sol\sol.hpp	/^		static const std::string qualified_name;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::usertype_traits
qualified_name	.\include\sol\single\sol\sol.hpp	/^	const std::string usertype_traits<T>::qualified_name = detail::demangle<T>();$/;"	m	class:sol::sol::call_syntax::call_status::sol::usertype_traits
qualified_name	.\include\sol\sol\usertype_traits.hpp	/^		static const std::string qualified_name;$/;"	m	struct:sol::usertype_traits
qualified_name	.\include\sol\sol\usertype_traits.hpp	/^	const std::string usertype_traits<T>::qualified_name = detail::demangle<T>();$/;"	m	class:sol::usertype_traits
quant_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JQUANT_TBL * quant_table;$/;"	m	struct:__anon81
quant_tbl_no	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int quant_tbl_no;		\/* quantization table selector (0..3) *\/$/;"	m	struct:__anon81
quant_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];$/;"	m	struct:jpeg_compress_struct
quant_tbl_ptrs	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JQUANT_TBL * quant_tbl_ptrs[NUM_QUANT_TBLS];$/;"	m	struct:jpeg_decompress_struct
quantization_level	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	int quantization_level;$/;"	m	struct:__anon34
quantize_colors	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean quantize_colors;	\/* TRUE=colormapped output wanted *\/$/;"	m	struct:jpeg_decompress_struct
quantval	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  UINT16 quantval[DCTSIZE2];	\/* quantization step for each coefficient *\/$/;"	m	struct:__anon79
r	.\dep\Lua\src\llex.h	/^  lua_Number r;$/;"	m	union:__anon5
r	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color
r	.\include\SFML\Graphics\Color.hpp	/^    Uint8 r; \/\/\/< Red component$/;"	m	class:sf::Color
r	.\include\lua\llex.h	/^  lua_Number r;$/;"	m	union:__anon157
r	.\src\include\Color.h	/^	unsigned char r;$/;"	m	struct:Color
ran	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        bool ran() {$/;"	f	class:Catch::RunningSection
ranToCompletion	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        void ranToCompletion() {$/;"	f	class:Catch::RunningSection
randInt	.\src\src\Random.cpp	/^	int randInt(int min, int max) {$/;"	f	namespace:Random
randWeightedInt	.\src\src\Random.cpp	/^	int randWeightedInt(double n[], double w[], int size)  {$/;"	f	namespace:Random
raster_class	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Raster_Funcs*           raster_class;$/;"	m	struct:FT_Renderer_Class_
raster_done	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_DoneFunc     raster_done;$/;"	m	struct:FT_Raster_Funcs_
raster_new	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_NewFunc      raster_new;$/;"	m	struct:FT_Raster_Funcs_
raster_render	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_RenderFunc   raster_render;$/;"	m	struct:FT_Raster_Funcs_
raster_reset	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_ResetFunc    raster_reset;$/;"	m	struct:FT_Raster_Funcs_
raster_set_mode	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Raster_SetModeFunc  raster_set_mode;$/;"	m	struct:FT_Raster_Funcs_
rate	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long rate;$/;"	m	struct:vorbis_info
ratio	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon108
rawMemoryToString	.\include\sol\Catch\include\internal\catch_tostring.h	/^    inline std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
rawMemoryToString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^    std::string rawMemoryToString( const void *object, std::size_t size )$/;"	f	namespace:Catch::Detail
rawMemoryToString	.\include\sol\Catch\single_include\catch.hpp	/^    inline std::string rawMemoryToString( const T& object ) {$/;"	f	namespace:Catch::Detail
raw_bits	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned *raw_bits;$/;"	m	struct:__anon26
raw_coeff	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon98::__anon99
raw_data	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      void *raw_data, *raw_coeff;$/;"	m	struct:__anon98::__anon99
raw_data_in	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean raw_data_in;		\/* TRUE=caller supplies downsampled data *\/$/;"	m	struct:jpeg_compress_struct
raw_data_out	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean raw_data_out;		\/* TRUE=downsampled data wanted *\/$/;"	m	struct:jpeg_decompress_struct
raw_get_field	.\include\sol\single\sol\sol.hpp	/^		void raw_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
raw_get_field	.\include\sol\single\sol\sol.hpp	/^		void raw_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
raw_get_field	.\include\sol\sol\stack_core.hpp	/^		void raw_get_field(lua_State* L, Key&& key) {$/;"	f	namespace:sol::stack
raw_get_field	.\include\sol\sol\stack_core.hpp	/^		void raw_get_field(lua_State* L, Key&& key, int tableindex) {$/;"	f	namespace:sol::stack
raw_set_field	.\include\sol\single\sol\sol.hpp	/^		void raw_set_field(lua_State* L, Key&& key, Value&& value) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
raw_set_field	.\include\sol\single\sol\sol.hpp	/^		void raw_set_field(lua_State* L, Key&& key, Value&& value, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
raw_set_field	.\include\sol\sol\stack_core.hpp	/^		void raw_set_field(lua_State* L, Key&& key, Value&& value) {$/;"	f	namespace:sol::stack
raw_set_field	.\include\sol\sol\stack_core.hpp	/^		void raw_set_field(lua_State* L, Key&& key, Value&& value, int tableindex) {$/;"	f	namespace:sol::stack
rbegin	.\include\sol\single\sol\sol.hpp	/^		const_reverse_iterator rbegin() const { return std::reverse_iterator<const_iterator>(begin()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
rbegin	.\include\sol\single\sol\sol.hpp	/^		reverse_iterator rbegin() { return std::reverse_iterator<iterator>(begin()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
rbegin	.\include\sol\sol\variadic_args.hpp	/^		const_reverse_iterator rbegin() const { return std::reverse_iterator<const_iterator>(begin()); }$/;"	f	struct:sol::variadic_args
rbegin	.\include\sol\sol\variadic_args.hpp	/^		reverse_iterator rbegin() { return std::reverse_iterator<iterator>(begin()); }$/;"	f	struct:sol::variadic_args
rcVirtualScreen	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    RECT   rcVirtualScreen;$/;"	m	struct:_GPU_DEVICE
re	.\include\sol\Catch\scripts\approvalTests.py	/^import re$/;"	i
re	.\include\sol\Catch\scripts\generateSingleHeader.py	/^import re$/;"	i
re	.\include\sol\Catch\scripts\releaseCommon.py	/^import re$/;"	i
re	.\include\sol\Catch\scripts\releaseNotes.py	/^import re$/;"	i
re	.\include\sol\bootstrap.py	/^import os, sys, glob, re$/;"	i
re	.\include\sol\single.py	/^import re$/;"	i
react	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::react() {$/;"	f	class:Catch::ResultBuilder
read	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Read read;$/;"	m	struct:__anon24
read	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Stream_IoFunc     read;$/;"	m	struct:FT_StreamRec_
read	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int      (*read)  (void *user,char *data,int size);   \/\/ fill 'data' with 'size' bytes.  return number of bytes actually read$/;"	m	struct:__anon94
read	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^Uint64 InputSoundFile::read(Int16* samples, Uint64 maxCount)$/;"	f	class:sf::InputSoundFile
read	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^Uint64 SoundFileReaderFlac::read(Int16* samples, Uint64 maxCount)$/;"	f	class:sf::priv::SoundFileReaderFlac
read	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^    size_t read(void* ptr, size_t size, size_t nmemb, void* data)$/;"	f	namespace:__anon121
read	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^Uint64 SoundFileReaderOgg::read(Int16* samples, Uint64 maxCount)$/;"	f	class:sf::priv::SoundFileReaderOgg
read	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^Uint64 SoundFileReaderWav::read(Int16* samples, Uint64 maxCount)$/;"	f	class:sf::priv::SoundFileReaderWav
read	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^    unsigned long read(FT_Stream rec, unsigned long offset, unsigned char* buffer, unsigned long count)$/;"	f	namespace:__anon125
read	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^    int read(void* user, char* data, int size)$/;"	f	namespace:__anon126
read	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^Int64 ResourceStream::read(void *data, Int64 size)$/;"	f	class:sf::priv::ResourceStream
read	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^Int64 FileInputStream::read(void* data, Int64 size)$/;"	f	class:sf::FileInputStream
read	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^Int64 MemoryInputStream::read(void* data, Int64 size)$/;"	f	class:sf::MemoryInputStream
read	.\include\sol\single\sol\sol.hpp	/^		Read read;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
read	.\include\sol\sol\property.hpp	/^		Read read;$/;"	m	struct:sol::property_wrapper
readNextChar	.\include\sol\Optional\test_optional.cpp	/^std::experimental::optional<char> readNextChar(){ return{}; }$/;"	f
read_all	.\dep\Lua\src\liolib.c	/^static void read_all (lua_State *L, FILE *f) {$/;"	f	file:
read_chars	.\dep\Lua\src\liolib.c	/^static int read_chars (lua_State *L, FILE *f, size_t n) {$/;"	f	file:
read_from_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int read_from_callbacks;$/;"	m	struct:__anon95
read_func	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  size_t (*read_func)  (void *ptr, size_t size, size_t nmemb, void *datasource);$/;"	m	struct:__anon109
read_line	.\dep\Lua\src\liolib.c	/^static int read_line (lua_State *L, FILE *f, int chop) {$/;"	f	file:
read_long_string	.\dep\Lua\src\llex.c	/^static void read_long_string (LexState *ls, SemInfo *seminfo, int sep) {$/;"	f	file:
read_number	.\dep\Lua\src\liolib.c	/^static int read_number (lua_State *L, FILE *f) {$/;"	f	file:
read_numeral	.\dep\Lua\src\llex.c	/^static int read_numeral (LexState *ls, SemInfo *seminfo) {$/;"	f	file:
read_string	.\dep\Lua\src\llex.c	/^static void read_string (LexState *ls, int del, SemInfo *seminfo) {$/;"	f	file:
readable	.\dep\Lua\src\loadlib.c	/^static int readable (const char *filename) {$/;"	f	file:
readdecesc	.\dep\Lua\src\llex.c	/^static int readdecesc (LexState *ls) {$/;"	f	file:
readdigits	.\dep\Lua\src\liolib.c	/^static int readdigits (RN *rn, int hex) {$/;"	f	file:
reader	.\dep\Lua\src\luac.c	/^static const char* reader(lua_State *L, void *ud, size_t *size)$/;"	f	file:
reader	.\dep\Lua\src\lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
reader	.\include\lua\lzio.h	/^  lua_Reader reader;		\/* reader function *\/$/;"	m	struct:Zio
readhexaesc	.\dep\Lua\src\llex.c	/^static int readhexaesc (LexState *ls) {$/;"	f	file:
readmePath	.\include\sol\Catch\scripts\releaseCommon.py	/^readmePath = os.path.join( catchPath, "README.md" )$/;"	v
readonly	.\include\sol\single\sol\sol.hpp	/^	auto readonly(R T::* v) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol
readonly	.\include\sol\sol\property.hpp	/^	auto readonly(R T::* v) {$/;"	f	namespace:sol
readutf8esc	.\dep\Lua\src\llex.c	/^static unsigned long readutf8esc (LexState *ls) {$/;"	f	file:
ready_state	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int              ready_state;$/;"	m	struct:OggVorbis_File
real_call	.\include\sol\single\sol\sol.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_free_function
real_call	.\include\sol\single\sol\sol.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_function
real_call	.\include\sol\single\sol\sol.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_variable
real_call	.\include\sol\single\sol\sol.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_function
real_call	.\include\sol\single\sol\sol.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_variable
real_call	.\include\sol\single\sol\sol.hpp	/^		static int real_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
real_call	.\include\sol\sol\function_types_stateless.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_free_function
real_call	.\include\sol\sol\function_types_stateless.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_function
real_call	.\include\sol\sol\function_types_stateless.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_member_variable
real_call	.\include\sol\sol\function_types_stateless.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_function
real_call	.\include\sol\sol\function_types_stateless.hpp	/^			static int real_call(lua_State* L) {$/;"	f	struct:sol::function_detail::upvalue_this_member_variable
real_call	.\include\sol\sol\usertype_metatable.hpp	/^		static int real_call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
real_call_with	.\include\sol\single\sol\sol.hpp	/^		static int real_call_with(lua_State* L, usertype_metatable& um) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
real_call_with	.\include\sol\sol\usertype_metatable.hpp	/^		static int real_call_with(lua_State* L, usertype_metatable& um) {$/;"	f	struct:sol::usertype_metatable
real_find_call	.\include\sol\single\sol\sol.hpp	/^		int real_find_call(std::integral_constant<bool, is_index>, lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
real_find_call	.\include\sol\sol\usertype_metatable.hpp	/^		int real_find_call(std::integral_constant<bool, is_index>, lua_State* L) {$/;"	f	struct:sol::usertype_metatable
real_index_call	.\include\sol\single\sol\sol.hpp	/^		static int real_index_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
real_index_call	.\include\sol\sol\usertype_metatable.hpp	/^		static int real_index_call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
real_new_index_call	.\include\sol\single\sol\sol.hpp	/^		static int real_new_index_call(lua_State* L) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
real_new_index_call	.\include\sol\sol\usertype_metatable.hpp	/^		static int real_new_index_call(lua_State* L) {$/;"	f	struct:sol::usertype_metatable
realloc	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    FT_Realloc_Func  realloc;$/;"	m	struct:FT_MemoryRec_
reallymarkobject	.\dep\Lua\src\lgc.c	/^static void reallymarkobject (global_State *g, GCObject *o) {$/;"	f	file:
reap	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  struct alloc_chain *reap;$/;"	m	struct:vorbis_block	typeref:struct:vorbis_block::alloc_chain
rec_outbuf_height	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int rec_outbuf_height;	\/* min recommended height of scanline buffer *\/$/;"	m	struct:jpeg_decompress_struct
receive	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^void Ftp::DataChannel::receive(std::ostream& stream)$/;"	f	class:sf::Ftp::DataChannel
receive	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::receive(Packet& packet)$/;"	f	class:sf::TcpSocket
receive	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::receive(void* data, std::size_t size, std::size_t& received)$/;"	f	class:sf::TcpSocket
receive	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^Socket::Status UdpSocket::receive(Packet& packet, IpAddress& remoteAddress, unsigned short& remotePort)$/;"	f	class:sf::UdpSocket
receive	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^Socket::Status UdpSocket::receive(void* data, std::size_t size, std::size_t& received, IpAddress& remoteAddress, unsigned short& remotePort)$/;"	f	class:sf::UdpSocket
recfield	.\dep\Lua\src\lparser.c	/^static void recfield (LexState *ls, struct ConsControl *cc) {$/;"	f	file:
reconstructExpression	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    std::string ResultBuilder::reconstructExpression() const {$/;"	f	class:Catch::ResultBuilder
reconstructedExpression	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
reconstructedExpression	.\include\sol\Catch\single_include\catch.hpp	/^        std::string reconstructedExpression;$/;"	m	struct:Catch::AssertionResultData
record	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::record()$/;"	f	class:sf::SoundRecorder
record	.\include\sol\single\sol\sol.hpp	/^			record() : last(), used() {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::record
record	.\include\sol\single\sol\sol.hpp	/^		struct record {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack
record	.\include\sol\sol\stack_core.hpp	/^			record() : last(), used() {}$/;"	f	struct:sol::stack::record
record	.\include\sol\sol\stack_core.hpp	/^		struct record {$/;"	s	namespace:sol::stack
recover	.\dep\Lua\src\ldo.c	/^static int recover (lua_State *L, int status) {$/;"	f	file:
red	.\src\src\Colors.cpp	/^	const char red[] =     { 0x1b, '[', '0', '3', '1', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
ref	.\include\sol\Optional\optional.hpp	/^  T* ref;$/;"	m	class:sol::optional
ref	.\include\sol\Optional\optional.hpp	/^  constexpr optional() noexcept : ref(nullptr) {}$/;"	f	class:sol::optional
ref	.\include\sol\Optional\optional.hpp	/^  constexpr optional(const optional& rhs) noexcept : ref(rhs.ref) {}$/;"	f	class:sol::optional
ref	.\include\sol\Optional\optional.hpp	/^  constexpr optional(nullopt_t) noexcept : ref(nullptr) {}$/;"	f	class:sol::optional
ref	.\include\sol\single\sol\sol.hpp	/^		int ref = LUA_NOREF;$/;"	m	class:sol::sol::call_syntax::call_status::sol::reference
ref	.\include\sol\single\sol\sol.hpp	/^		reference_type ref;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
ref	.\include\sol\sol\reference.hpp	/^		int ref = LUA_NOREF;$/;"	m	class:sol::reference
ref	.\include\sol\sol\table_iterator.hpp	/^		reference_type ref;$/;"	m	class:sol::basic_table_iterator
ref_clean	.\include\sol\single\sol\sol.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::ref_clean
ref_clean	.\include\sol\single\sol\sol.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail
ref_clean	.\include\sol\sol\table_core.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::detail::ref_clean
ref_clean	.\include\sol\sol\table_core.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	s	namespace:sol::detail
refcount	.\dep\Lua\src\lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal
refcount	.\include\lua\lfunc.h	/^  lu_mem refcount;  \/* reference counter *\/$/;"	m	struct:UpVal
reference	.\include\sol\single\sol\sol.hpp	/^		basic_table_core(lua_State* L, detail::global_tag t) noexcept : reference(L, t) { }$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
reference	.\include\sol\single\sol\sol.hpp	/^		reference(const stack_reference& r) noexcept : reference(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::reference
reference	.\include\sol\single\sol\sol.hpp	/^		reference(nil_t) noexcept : reference() {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::reference
reference	.\include\sol\single\sol\sol.hpp	/^		reference(stack_reference&& r) noexcept : reference(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::reference
reference	.\include\sol\single\sol\sol.hpp	/^		typedef base_t::reference reference;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
reference	.\include\sol\single\sol\sol.hpp	/^		typedef typename base_t::reference reference;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
reference	.\include\sol\single\sol\sol.hpp	/^	class reference {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol
reference	.\include\sol\sol\reference.hpp	/^		reference(const stack_reference& r) noexcept : reference(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::reference
reference	.\include\sol\sol\reference.hpp	/^		reference(nil_t) noexcept : reference() {}$/;"	f	class:sol::reference
reference	.\include\sol\sol\reference.hpp	/^		reference(stack_reference&& r) noexcept : reference(r.lua_state(), r.stack_index()) {}$/;"	f	class:sol::reference
reference	.\include\sol\sol\reference.hpp	/^	class reference {$/;"	c	namespace:sol
reference	.\include\sol\sol\table_core.hpp	/^		basic_table_core(lua_State* L, detail::global_tag t) noexcept : reference(L, t) { }$/;"	f	class:sol::basic_table_core
reference	.\include\sol\sol\table_iterator.hpp	/^		typedef base_t::reference reference;$/;"	t	class:sol::basic_table_iterator
reference	.\include\sol\sol\variadic_args.hpp	/^		typedef typename base_t::reference reference;$/;"	t	struct:sol::va_iterator
referenceCount	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^    unsigned int referenceCount = 0;$/;"	m	namespace:__anon144	file:
reference_type	.\include\sol\single\sol\sol.hpp	/^		typedef stack_proxy reference_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
reference_type	.\include\sol\sol\variadic_args.hpp	/^		typedef stack_proxy reference_type;$/;"	t	struct:sol::variadic_args
reg	.\include\sol\single\sol\sol.hpp	/^		table reg;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
reg	.\include\sol\sol\state_view.hpp	/^		table reg;$/;"	m	class:sol::state_view
registerGame	.\src\src\StateManager.cpp	/^void StateManager::registerGame(Game* game) {$/;"	f	class:StateManager
registerListener	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^        void registerListener( Ptr<IReporterFactory> const& factory ) {$/;"	f	class:Catch::ReporterRegistry
registerReporter	.\include\sol\Catch\include\internal\catch_reporter_registry.hpp	/^        void registerReporter( std::string const& name, Ptr<IReporterFactory> const& factory ) {$/;"	f	class:Catch::ReporterRegistry
registerTest	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^        virtual void registerTest( TestCase const& testCase ) {$/;"	f	class:Catch::TestRegistry
registerTestCase	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    void registerTestCase$/;"	f	namespace:Catch
registerTestCaseFunction	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    void registerTestCaseFunction$/;"	f	namespace:Catch
registerTestMethods	.\include\sol\Catch\include\internal\catch_objc.hpp	/^    inline size_t registerTestMethods() {$/;"	f	namespace:Catch
registerTranslator	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^        virtual void registerTranslator( const IExceptionTranslator* translator ) {$/;"	f	class:Catch::ExceptionTranslatorRegistry
registerWindowClass	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::registerWindowClass()$/;"	f	class:sf::priv::WindowImplWin32
registerlocalvar	.\dep\Lua\src\lparser.c	/^static int registerlocalvar (LexState *ls, TString *varname) {$/;"	f	file:
registrar	.\include\sol\single\sol\sol.hpp	/^		struct registrar {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
registrar	.\include\sol\sol\usertype_metatable.hpp	/^		struct registrar {$/;"	s	namespace:sol::usertype_detail
registrations	.\include\sol\single\sol\sol.hpp	/^		std::vector<std::pair<object, object>> registrations;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
registrations	.\include\sol\sol\simple_usertype_metatable.hpp	/^		std::vector<std::pair<object, object>> registrations;$/;"	m	struct:sol::simple_usertype_metatable
registry	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*      registry;$/;"	m	struct:CID_FaceInfoRec_
registry	.\include\sol\sol\state_view.hpp	/^		table registry() const {$/;"	f	class:sol::state_view
regs_t	.\include\sol\single\sol\sol.hpp	/^			typedef typename umt_t::regs_t regs_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
regs_t	.\include\sol\single\sol\sol.hpp	/^		typedef std::array<luaL_Reg, sizeof...(Tn) \/ 2 + 1> regs_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
regs_t	.\include\sol\sol\usertype_metatable.hpp	/^			typedef typename umt_t::regs_t regs_t;$/;"	t	struct:sol::stack::pusher
regs_t	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::array<luaL_Reg, sizeof...(Tn) \/ 2 + 1> regs_t;$/;"	t	struct:sol::usertype_metatable
rehash	.\dep\Lua\src\ltable.c	/^static void rehash (lua_State *L, Table *t, const TValue *ek) {$/;"	f	file:
release	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl
release	.\include\sol\Catch\single_include\catch.hpp	/^        virtual void release() const {$/;"	f	struct:Catch::SharedImpl
release	.\include\sol\docs\source\conf.py	/^release = '2.10.0'$/;"	v
remaining	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        Uint64                remaining;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
remarkupvals	.\dep\Lua\src\lgc.c	/^static void remarkupvals (global_State *g) {$/;"	f	file:
remove	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^void SocketSelector::remove(Socket& socket)$/;"	f	class:sf::SocketSelector
remove	.\include\sol\single\sol\sol.hpp	/^		inline void remove(lua_State* L, int index, int count) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
remove	.\include\sol\sol\stack.hpp	/^		inline void remove(lua_State* L, int index, int count) {$/;"	f	namespace:sol::stack
removePerk	.\src\src\Object.cpp	/^void Object::removePerk(Perk* p) {$/;"	f	class:Object
removeStack	.\src\include\Perk.h	/^	void removeStack() { _stacks--; }$/;"	f	class:Perk
remove_command	.\include\sol\bootstrap.py	/^remove_command = 'rm -rf {} && rm -f {}'.format(os.path.join(args.install_dir, 'sol'), os.path.join(args.install_dir, 'sol.hpp'))$/;"	v
remove_member_pointer	.\include\sol\single\sol\sol.hpp	/^		struct remove_member_pointer<R T::* const> {$/;"	s	namespace:sol::meta
remove_member_pointer	.\include\sol\single\sol\sol.hpp	/^		struct remove_member_pointer<R T::*> {$/;"	s	namespace:sol::meta
remove_member_pointer	.\include\sol\sol\traits.hpp	/^		struct remove_member_pointer<R T::* const> {$/;"	s	namespace:sol::meta
remove_member_pointer	.\include\sol\sol\traits.hpp	/^		struct remove_member_pointer<R T::*> {$/;"	s	namespace:sol::meta
removeentry	.\dep\Lua\src\lgc.c	/^static void removeentry (Node *n) {$/;"	f	file:
removevalues	.\dep\Lua\src\lcode.c	/^static void removevalues (FuncState *fs, int list) {$/;"	f	file:
removevars	.\dep\Lua\src\lparser.c	/^static void removevars (FuncState *fs, int tolevel) {$/;"	f	file:
renameFile	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::renameFile(const std::string& file, const std::string& newName)$/;"	f	class:sf::Ftp
rend	.\include\sol\single\sol\sol.hpp	/^		const_reverse_iterator rend() const { return std::reverse_iterator<const_iterator>(end()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
rend	.\include\sol\single\sol\sol.hpp	/^		reverse_iterator rend() { return std::reverse_iterator<iterator>(end()); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
rend	.\include\sol\sol\variadic_args.hpp	/^		const_reverse_iterator rend() const { return std::reverse_iterator<const_iterator>(end()); }$/;"	f	struct:sol::variadic_args
rend	.\include\sol\sol\variadic_args.hpp	/^		reverse_iterator rend() { return std::reverse_iterator<iterator>(end()); }$/;"	f	struct:sol::variadic_args
render	.\src\src\GameWindow.cpp	/^void GameWindow::render(sf::RenderWindow& window) {$/;"	f	class:GameWindow
render	.\src\src\PauseWindow.cpp	/^void PauseWindow::render(sf::RenderWindow& window) {$/;"	f	class:PauseWindow
render	.\src\src\SkillTreeWindow.cpp	/^void SkillTreeWindow::render(sf::RenderWindow& window) {$/;"	f	class:SkillTreeWindow
render	.\src\src\Window.cpp	/^void Window::render(sf::RenderWindow& target) {$/;"	f	class:Window
renderMap	.\src\src\GameWindow.cpp	/^void GameWindow::renderMap(sf::RenderWindow& window) {$/;"	f	class:GameWindow
render_glyph	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Renderer_RenderFunc     render_glyph;$/;"	m	struct:FT_Renderer_Class_
repeatstat	.\dep\Lua\src\lparser.c	/^static void repeatstat (LexState *ls, int line) {$/;"	f	file:
replace	.\dep\SFML\src\SFML\System\String.cpp	/^void String::replace(const String& searchFor, const String& replaceWith)$/;"	f	class:sf::String
replace	.\dep\SFML\src\SFML\System\String.cpp	/^void String::replace(std::size_t position, std::size_t length, const String& replaceWith)$/;"	f	class:sf::String
replaceInPlace	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool replaceInPlace( std::string& str, std::string const& replaceThis, std::string const& withThis ) {$/;"	f	namespace:Catch
replace_extension	.\include\sol\bootstrap.py	/^def replace_extension(f, e):$/;"	f
report	.\dep\Lua\src\lua.c	/^static int report (lua_State *L, int status) {$/;"	f	file:
reporterNames	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::vector<std::string> reporterNames;$/;"	m	struct:Catch::ConfigData
reprepstate	.\dep\Lua\src\lstrlib.c	/^static void reprepstate (MatchState *ms) {$/;"	f	file:
requestFocus	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::requestFocus()$/;"	f	class:sf::priv::WindowImplAndroid
requestFocus	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::requestFocus()$/;"	f	class:sf::priv::WindowImplX11
requestFocus	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::requestFocus()$/;"	f	class:sf::priv::WindowImplWin32
requestFocus	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::requestFocus()$/;"	f	class:sf::Window
require	.\include\sol\sol\state_view.hpp	/^		object require(const std::string& key, lua_CFunction open_function, bool create_global = true) {$/;"	f	class:sol::state_view
require_core	.\include\sol\sol\state_view.hpp	/^		object require_core(const std::string& key, Fx&& action, bool create_global = true) {$/;"	f	class:sol::state_view
require_file	.\include\sol\sol\state_view.hpp	/^		object require_file(const std::string& key, const std::string& filename, bool create_global = true) {$/;"	f	class:sol::state_view
require_script	.\include\sol\sol\state_view.hpp	/^		object require_script(const std::string& key, const std::string& code, bool create_global = true) {$/;"	f	class:sol::state_view
res_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long res_bits;$/;"	m	struct:vorbis_block
res_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t res_bits;$/;"	m	struct:vorbis_dsp_state
resample	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   resample_row_func resample;$/;"	m	struct:__anon100
resample_row_1	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *resample_row_1(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
resample_row_func	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef stbi_uc *(*resample_row_func)(stbi_uc *out, stbi_uc *in0, stbi_uc *in1,$/;"	t
resample_row_hv_2_kernel	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *(*resample_row_hv_2_kernel)(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs);$/;"	m	struct:__anon98
reserved	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UInt           reserved;       \/* retained for binary compatibility *\/$/;"	m	struct:FT_GlyphSlotRec_
reserved	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    reserved;$/;"	m	struct:FT_WinFNT_HeaderRec_
reserved1	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_ULong   reserved1[4];$/;"	m	struct:FT_WinFNT_HeaderRec_
reset	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::reset(const FloatRect& rectangle)$/;"	f	class:sf::View
reset	.\include\sol\Catch\include\internal\catch_fatal_condition.hpp	/^		void reset() {}$/;"	f	struct:Catch::FatalConditionHandler
reset	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        void reset() {$/;"	f	struct:Catch::LazyStat
reset	.\include\sol\Catch\include\internal\catch_option.hpp	/^        void reset() {$/;"	f	class:Catch::Option
reset	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr
reset	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        void reset()$/;"	f	class:Catch::iTchRunnerReporter
reset	.\include\sol\Catch\single_include\catch.hpp	/^        void reset() {$/;"	f	class:Catch::Ptr
reset	.\src\src\Colors.cpp	/^	const char reset[] =   { 0x1b, '[', '0', '3', '9', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
reset	.\src\src\Window.cpp	/^void Window::reset() {$/;"	f	class:Window
resetBuffer	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::resetBuffer()$/;"	f	class:sf::Sound
resetCurrentState	.\src\src\StateManager.cpp	/^void StateManager::resetCurrentState() {$/;"	f	class:StateManager
resetGLStates	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::resetGLStates()$/;"	f	class:sf::RenderTarget
resetVideoMode	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::resetVideoMode()$/;"	f	class:sf::priv::WindowImplX11
resetbit	.\dep\Lua\src\lgc.h	73;"	d
resetbit	.\include\lua\lgc.h	73;"	d
resetbits	.\dep\Lua\src\lgc.h	67;"	d
resetbits	.\include\lua\lgc.h	67;"	d
resethookcount	.\dep\Lua\src\ldebug.h	18;"	d
resethookcount	.\include\lua\ldebug.h	18;"	d
residual	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	const FLAC__int32 *residual;$/;"	m	struct:__anon33
residual	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	const FLAC__int32 *residual;$/;"	m	struct:__anon34
resize	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^void VertexArray::resize(std::size_t vertexCount)$/;"	f	class:sf::VertexArray
resize	.\src\src\GuiComponent.cpp	/^void GuiComponent::resize(Vector2 newSize) {$/;"	f	class:GuiComponent
resizeEvent	.\src\src\Window.cpp	/^void Window::resizeEvent(sf::Event& e) {}$/;"	f	class:Window
resizebox	.\dep\Lua\src\lauxlib.c	/^static void *resizebox (lua_State *L, int idx, size_t newsize) {$/;"	f	file:
resolve	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^    sf::Uint32 resolve(const std::string& address)$/;"	f	namespace:__anon133
resolve	.\include\sol\single\sol\sol.hpp	/^	inline Sig C::* resolve(Sig C::* mem_ptr) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::C
resolve	.\include\sol\single\sol\sol.hpp	/^	inline Sig* resolve(Sig* fun_ptr) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
resolve	.\include\sol\sol\resolve.hpp	/^	inline Sig C::* resolve(Sig C::* mem_ptr) {$/;"	f	class:sol::C
resolve	.\include\sol\sol\resolve.hpp	/^	inline Sig* resolve(Sig* fun_ptr) {$/;"	f	namespace:sol
resolveLastRelativeIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    std::size_t resolveLastRelativeIndex( int _index ) {$/;"	f	class:ColourString	file:
resolveRelativeIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    std::size_t resolveRelativeIndex( int _index ) {$/;"	f	class:ColourString	file:
resolve_f	.\include\sol\single\sol\sol.hpp	/^		inline void resolve_f(std::false_type, F&&) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail
resolve_f	.\include\sol\sol\resolve.hpp	/^		inline void resolve_f(std::false_type, F&&) {$/;"	f	namespace:sol::detail
resolve_v	.\include\sol\single\sol\sol.hpp	/^		inline Sig C::* resolve_v(std::false_type, Sig C::* mem_func_ptr) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail::C
resolve_v	.\include\sol\single\sol\sol.hpp	/^		inline Sig C::* resolve_v(std::true_type, Sig C::* mem_variable_ptr) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::detail::C
resolve_v	.\include\sol\sol\resolve.hpp	/^		inline Sig C::* resolve_v(std::false_type, Sig C::* mem_func_ptr) {$/;"	f	class:sol::detail::C
resolve_v	.\include\sol\sol\resolve.hpp	/^		inline Sig C::* resolve_v(std::true_type, Sig C::* mem_variable_ptr) {$/;"	f	class:sol::detail::C
restart	.\dep\SFML\src\SFML\System\Clock.cpp	/^Time Clock::restart()$/;"	f	class:sf::Clock
restart_in_rows	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int restart_in_rows;		\/* if > 0, MCU rows per restart interval *\/$/;"	m	struct:jpeg_compress_struct
restart_interval	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int restart_interval; \/* MCUs per restart interval, or 0 for no restart *\/$/;"	m	struct:jpeg_decompress_struct
restart_interval	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int restart_interval; \/* MCUs per restart, or 0 for no restart *\/$/;"	m	struct:jpeg_compress_struct
restart_interval	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon98
restartcollection	.\dep\Lua\src\lgc.c	/^static void restartcollection (global_State *g) {$/;"	f	file:
restorestack	.\dep\Lua\src\ldo.h	33;"	d
restorestack	.\include\lua\ldo.h	33;"	d
result	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            AssertionResult const& result;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
result	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            AssertionResult const& result;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
result	.\include\sol\single.py	/^result = ''$/;"	v
result	.\include\sol\single.py	/^result = ss.getvalue()$/;"	v
resultDisposition	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultDisposition	.\include\sol\Catch\single_include\catch.hpp	/^        ResultDisposition::Flags resultDisposition;$/;"	m	struct:Catch::AssertionInfo
resultType	.\include\sol\Catch\include\internal\catch_assertionresult.h	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
resultType	.\include\sol\Catch\single_include\catch.hpp	/^        ResultWas::OfType resultType;$/;"	m	struct:Catch::AssertionResultData
result_type	.\include\sol\Optional\optional.hpp	/^    typedef typename hash<T>::result_type result_type;$/;"	t	struct:std::hash
resume	.\dep\Lua\src\ldo.c	/^static void resume (lua_State *L, void *ud) {$/;"	f	file:
resume	.\src\src\Window.cpp	/^void Window::resume() {$/;"	f	class:Window
resume_error	.\dep\Lua\src\ldo.c	/^static l_noret resume_error (lua_State *L, const char *msg, StkId firstArg) {$/;"	f	file:
retrieveStates	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^ActivityStates* retrieveStates(ANativeActivity* activity)$/;"	f	namespace:sf::priv
retstat	.\dep\Lua\src\lparser.c	/^static void retstat (LexState *ls) {$/;"	f	file:
return_type	.\include\sol\single\sol\sol.hpp	/^				typedef R return_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
return_type	.\include\sol\single\sol\sol.hpp	/^				typedef R return_type;$/;"	t	struct:sol::meta::meta_detail::callable_traits
return_type	.\include\sol\single\sol\sol.hpp	/^			typedef meta::function_return_t<function_type> return_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::functor_function
return_type	.\include\sol\single\sol\sol.hpp	/^			typedef meta::function_return_t<function_type> return_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_function
return_type	.\include\sol\single\sol\sol.hpp	/^			typedef typename meta::bind_traits<function_type>::return_type return_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
return_type	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::return_type return_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
return_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R return_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
return_type	.\include\sol\sol\bind_traits.hpp	/^				typedef R return_type;$/;"	t	struct:sol::meta::meta_detail::callable_traits
return_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef meta::function_return_t<function_type> return_type;$/;"	t	struct:sol::function_detail::functor_function
return_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef meta::function_return_t<function_type> return_type;$/;"	t	struct:sol::function_detail::member_function
return_type	.\include\sol\sol\function_types_stateful.hpp	/^			typedef typename meta::bind_traits<function_type>::return_type return_type;$/;"	t	struct:sol::function_detail::member_variable
return_type	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::return_type return_type;$/;"	t	struct:sol::wrapper
return_types	.\include\sol\single\sol\sol.hpp	/^			typedef meta::tuple_types<typename fx_t::return_type> return_types;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::getter
return_types	.\include\sol\sol\function.hpp	/^			typedef meta::tuple_types<typename fx_t::return_type> return_types;$/;"	t	struct:sol::stack::getter
returncount	.\include\sol\single\sol\sol.hpp	/^		int returncount;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
returncount	.\include\sol\single\sol\sol.hpp	/^		int returncount;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
returncount	.\include\sol\single\sol\sol.hpp	/^		int returncount;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::function_result
returncount	.\include\sol\sol\function_result.hpp	/^		int returncount;$/;"	m	struct:sol::function_result
returncount	.\include\sol\sol\load_result.hpp	/^		int returncount;$/;"	m	struct:sol::load_result
returncount	.\include\sol\sol\protected_function_result.hpp	/^		int returncount;$/;"	m	struct:sol::protected_function_result
returned	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int returned;$/;"	m	struct:__anon92
returnsConstNull	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^inline const char* returnsConstNull(){ return CATCH_NULL; }$/;"	f
returnsNull	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^inline char* returnsNull(){ return CATCH_NULL; }$/;"	f
returns_list	.\include\sol\single\sol\sol.hpp	/^				typedef meta::tuple_types<R> returns_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
returns_list	.\include\sol\single\sol\sol.hpp	/^				typedef tuple_types<R> returns_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
returns_list	.\include\sol\single\sol\sol.hpp	/^		typedef meta::tuple_types<R> returns_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
returns_list	.\include\sol\single\sol\sol.hpp	/^		typedef typename traits_type::returns_list returns_list;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
returns_list	.\include\sol\sol\bind_traits.hpp	/^				typedef meta::tuple_types<R> returns_list;$/;"	t	struct:sol::meta::meta_detail::callable_traits
returns_list	.\include\sol\sol\bind_traits.hpp	/^				typedef tuple_types<R> returns_list;$/;"	t	struct:sol::meta::meta_detail::basic_traits
returns_list	.\include\sol\sol\wrapper.hpp	/^		typedef meta::tuple_types<R> returns_list;$/;"	t	struct:sol::member_function_wrapper
returns_list	.\include\sol\sol\wrapper.hpp	/^		typedef typename traits_type::returns_list returns_list;$/;"	t	struct:sol::wrapper
reverse	.\dep\Lua\src\lapi.c	/^static void reverse (lua_State *L, StkId from, StkId to) {$/;"	f	file:
reverse_iterator	.\include\sol\single\sol\sol.hpp	/^		typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
reverse_iterator	.\include\sol\sol\variadic_args.hpp	/^		typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	struct:sol::variadic_args
revision	.\include\sol\single.py	/^revision = get_revision()$/;"	v
rhs	.\include\sol\Catch\include\internal\catch_result_builder.h	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
rhs	.\include\sol\Catch\single_include\catch.hpp	/^            std::string lhs, rhs, op;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
right	.\dep\Lua\src\lparser.c	/^  lu_byte right; \/* right priority *\/$/;"	m	struct:__anon10	file:
right	.\src\include\SkillTree.h	/^	SkillNode* right;$/;"	m	class:SkillNode
righttt	.\dep\Lua\src\lobject.h	188;"	d
righttt	.\include\lua\lobject.h	188;"	d
rngSeed	.\include\sol\Catch\include\internal\catch_common.hpp	/^    unsigned int rngSeed() {$/;"	f	namespace:Catch
rngSeed	.\include\sol\Catch\include\internal\catch_config.hpp	/^        unsigned int rngSeed;$/;"	m	struct:Catch::ConfigData
rngSeed	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual unsigned int rngSeed() const    { return m_data.rngSeed; }$/;"	f	class:Catch::Config
root	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GlyphRec  root;$/;"	m	struct:FT_BitmapGlyphRec_
root	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_GlyphRec  root;$/;"	m	struct:FT_OutlineGlyphRec_
root	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Module_Class            root;$/;"	m	struct:FT_Renderer_Class_
rootPath	.\include\sol\Catch\scripts\approvalTests.py	/^rootPath = os.path.join( catchPath, 'projects\/SelfTest\/Baselines' )$/;"	v
rootPath	.\include\sol\Catch\scripts\approve.py	/^rootPath = os.path.join( catchPath, 'projects\/SelfTest\/Baselines' )$/;"	v
rootPath	.\include\sol\Catch\scripts\generateSingleHeader.py	/^rootPath = os.path.join( catchPath, 'include\/' )$/;"	v
rootPath	.\include\sol\Catch\scripts\releaseCommon.py	/^rootPath = os.path.join( catchPath, 'include\/' )$/;"	v
rootPath	.\include\sol\Catch\scripts\releaseNotes.py	/^rootPath = os.path.join( catchPath, 'include\/' )$/;"	v
rotate	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::rotate(float angle)$/;"	f	class:sf::Transform
rotate	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::rotate(float angle, const Vector2f& center)$/;"	f	class:sf::Transform
rotate	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::rotate(float angle, float centerX, float centerY)$/;"	f	class:sf::Transform
rotate	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::rotate(float angle)$/;"	f	class:sf::Transformable
rotate	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::rotate(float angle)$/;"	f	class:sf::View
round_stem_up	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Bool    round_stem_up;$/;"	m	struct:PS_PrivateRec_
rows	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned int    rows;$/;"	m	struct:FT_Bitmap_
rows	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page
rows	.\include\SFML\Graphics\Font.hpp	/^        std::vector<Row> rows;    \/\/\/< List containing the position of all the existing rows$/;"	m	struct:sf::Font::Page
rows	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::vector<std::string> rows;$/;"	m	struct:Catch::ConsoleReporter::SummaryColumn
rsb_delta	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos            rsb_delta;$/;"	m	struct:FT_GlyphSlotRec_
rttype	.\dep\Lua\src\lobject.h	127;"	d
rttype	.\include\lua\lobject.h	127;"	d
rule	.\include\sol\ninja_syntax.py	/^    def rule(self, name, command, description=None, depfile=None,$/;"	m	class:Writer
run	.\dep\SFML\src\SFML\System\Thread.cpp	/^void Thread::run()$/;"	f	class:sf::Thread
run	.\include\sol\Catch\include\catch_session.hpp	/^        int run( int argc, char const* argv[] ) {$/;"	f	class:Catch::Session
run	.\include\sol\Catch\include\catch_session.hpp	/^        int run( int argc, char* argv[] ) {$/;"	f	class:Catch::Session
run	.\include\sol\Catch\include\catch_session.hpp	/^        int run() {$/;"	f	class:Catch::Session
run	.\include\sol\Optional\test_optional.cpp	/^void run(Date const&, Date const&, Date const&) {}$/;"	f
run	.\include\sol\Optional\test_optional.cpp	/^void run(std::complex<double>) {}$/;"	f
run	.\include\sol\Optional\test_optional.cpp	/^void run(std::experimental::optional<std::string>) {}$/;"	f
runAndCapture	.\include\sol\Catch\scripts\releaseNotes.py	/^from scriptCommon import runAndCapture$/;"	i
runAndCapture	.\include\sol\Catch\scripts\scriptCommon.py	/^def runAndCapture( args ):$/;"	f
runCurrentTest	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        void runCurrentTest( std::string& redirectedCout, std::string& redirectedCerr ) {$/;"	f	class:Catch::RunContext
runInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestRunInfo runInfo;$/;"	m	struct:Catch::TestRunStats
runOrder	.\include\sol\Catch\include\internal\catch_config.hpp	/^        RunTests::InWhatOrder runOrder;$/;"	m	struct:Catch::ConfigData
runOrder	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual RunTests::InWhatOrder runOrder() const  { return m_data.runOrder; }$/;"	f	class:Catch::Config
runTest	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        Totals runTest( TestCase const& testCase ) {$/;"	f	class:Catch::RunContext
runTests	.\include\sol\Catch\include\catch_session.hpp	/^    Totals runTests( Ptr<Config> const& config ) {$/;"	f	namespace:Catch
runTestsForGroup	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerMainView.h	/^inline Catch::Totals runTestsForGroup( Catch::RunContext& context, const Catch::TestCaseFilters& filterGroup ) {$/;"	f
runafewfinalizers	.\dep\Lua\src\lgc.c	/^static int runafewfinalizers (lua_State *L) {$/;"	f	file:
runargs	.\dep\Lua\src\lua.c	/^static int runargs (lua_State *L, char **argv, int n) {$/;"	f	file:
runtime	.\include\sol\single\sol\sol.hpp	/^		runtime = LUA_ERRRUN,$/;"	m	class:sol::sol::call_syntax::call_status
runtime	.\include\sol\single\sol\sol.hpp	/^		runtime = LUA_ERRRUN,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
runtime	.\include\sol\sol\types.hpp	/^		runtime = LUA_ERRRUN,$/;"	m	class:sol::call_syntax::call_status
runtime	.\include\sol\sol\types.hpp	/^		runtime = LUA_ERRRUN,$/;"	m	class:sol::call_syntax::call_status::thread_status
s	.\dep\Lua\src\lauxlib.c	/^  const char *s;$/;"	m	struct:LoadS	file:
s	.\dep\Lua\src\llimits.h	/^  void *s;$/;"	m	union:__anon6
s	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^    char s[JMSG_STR_PARM_MAX];$/;"	m	union:jpeg_error_mgr::__anon86
s	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon104
s	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__context *s;$/;"	m	struct:__anon98
s	.\include\lua\llimits.h	/^  void *s;$/;"	m	union:__anon158
s	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static std::ostream &s;$/;"	m	struct:Catch::Detail::IsStreamInsertable
s	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^        std::string s;$/;"	m	class:__anon185::TestClass	file:
s	.\include\sol\Catch\single_include\catch.hpp	/^        static std::ostream &s;$/;"	m	struct:Catch::Detail::IsStreamInsertable
s	.\include\sol\Optional\test_optional.cpp	/^    State s;$/;"	m	struct:Oracle	file:
s	.\include\sol\Optional\test_optional.cpp	/^    State s;$/;"	m	struct:OracleVal	file:
s	.\include\sol\Optional\test_optional.cpp	/^    std::string s;$/;"	m	struct:ExplicitStr	file:
s	.\include\sol\single\sol\sol.hpp	/^			std::size_t s;$/;"	m	struct:sol::sol::string_detail::string_shim
s	.\include\sol\single\sol\sol.hpp	/^	const char *s;$/;"	m	struct:sol::kepler_lua_compat_get_string_view
s	.\include\sol\sol\compatibility\5.1.0.h	/^	const char *s;$/;"	m	struct:kepler_lua_compat_get_string_view
s	.\include\sol\sol\string_shim.hpp	/^			std::size_t s;$/;"	m	struct:sol::string_detail::string_shim
sCapHeight	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sCapHeight;$/;"	m	struct:TT_OS2_
sCopyAssigned	.\include\sol\Optional\test_optional.cpp	/^    sCopyAssigned,$/;"	e	enum:State	file:
sCopyConstructed	.\include\sol\Optional\test_optional.cpp	/^    sCopyConstructed,$/;"	e	enum:State	file:
sDefaultConstructed	.\include\sol\Optional\test_optional.cpp	/^    sDefaultConstructed,$/;"	e	enum:State	file:
sFamilyClass	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sFamilyClass;$/;"	m	struct:TT_OS2_
sMoveAssigned	.\include\sol\Optional\test_optional.cpp	/^    sMoveAssigned,$/;"	e	enum:State	file:
sMoveConstructed	.\include\sol\Optional\test_optional.cpp	/^    sMoveConstructed,$/;"	e	enum:State	file:
sMovedFrom	.\include\sol\Optional\test_optional.cpp	/^    sMovedFrom,$/;"	e	enum:State	file:
sTypoAscender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sTypoAscender;$/;"	m	struct:TT_OS2_
sTypoDescender	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sTypoDescender;$/;"	m	struct:TT_OS2_
sTypoLineGap	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sTypoLineGap;$/;"	m	struct:TT_OS2_
sValueConstructed	.\include\sol\Optional\test_optional.cpp	/^    sValueConstructed$/;"	e	enum:State	file:
sValueCopyAssigned	.\include\sol\Optional\test_optional.cpp	/^    sValueCopyAssigned,$/;"	e	enum:State	file:
sValueCopyConstructed	.\include\sol\Optional\test_optional.cpp	/^    sValueCopyConstructed,$/;"	e	enum:State	file:
sValueMoveAssigned	.\include\sol\Optional\test_optional.cpp	/^    sValueMoveAssigned,$/;"	e	enum:State	file:
sValueMoveConstructed	.\include\sol\Optional\test_optional.cpp	/^    sValueMoveConstructed,$/;"	e	enum:State	file:
s_get	.\include\sol\test_usertypes.cpp	/^	static int s_get(int x) {$/;"	f	struct:ext_getset
s_readers	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    static ReaderFactoryArray s_readers; \/\/\/< List of all registered readers$/;"	m	class:sf::SoundFileFactory
s_readers	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileFactory::ReaderFactoryArray SoundFileFactory::s_readers;$/;"	m	class:sf::SoundFileFactory	file:
s_readers	.\include\SFML\Audio\SoundFileFactory.hpp	/^    static ReaderFactoryArray s_readers; \/\/\/< List of all registered readers$/;"	m	class:sf::SoundFileFactory
s_set	.\include\sol\test_usertypes.cpp	/^	static void s_set(int) {$/;"	f	struct:ext_getset
s_writers	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^    static WriterFactoryArray s_writers; \/\/\/< List of all registered writers$/;"	m	class:sf::SoundFileFactory
s_writers	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^SoundFileFactory::WriterFactoryArray SoundFileFactory::s_writers;$/;"	m	class:sf::SoundFileFactory	file:
s_writers	.\include\SFML\Audio\SoundFileFactory.hpp	/^    static WriterFactoryArray s_writers; \/\/\/< List of all registered writers$/;"	m	class:sf::SoundFileFactory
sampleCount	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^        Uint64       sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	struct:sf::SoundFileReader::Info
sampleCount	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk
sampleCount	.\include\SFML\Audio\SoundFileReader.hpp	/^        Uint64       sampleCount;  \/\/\/< Total number of samples in the file$/;"	m	struct:sf::SoundFileReader::Info
sampleCount	.\include\SFML\Audio\SoundStream.hpp	/^        std::size_t  sampleCount; \/\/\/< Number of samples pointed by Samples$/;"	m	struct:sf::SoundStream::Chunk
sampleRate	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^        unsigned int sampleRate;   \/\/\/< Samples rate of the sound, in samples per second$/;"	m	struct:sf::SoundFileReader::Info
sampleRate	.\include\SFML\Audio\SoundFileReader.hpp	/^        unsigned int sampleRate;   \/\/\/< Samples rate of the sound, in samples per second$/;"	m	struct:sf::SoundFileReader::Info
sample_number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__uint64 sample_number;$/;"	m	union:__anon39::__anon40
sample_number	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 sample_number;$/;"	m	struct:__anon47
sample_range_limit	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JSAMPLE * sample_range_limit; \/* table for fast range-limiting *\/$/;"	m	struct:jpeg_decompress_struct
sample_rate	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned sample_rate;$/;"	m	struct:__anon39
sample_rate	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned sample_rate;$/;"	m	struct:__anon44
samples	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk
samples	.\include\SFML\Audio\SoundStream.hpp	/^        const Int16* samples;     \/\/\/< Pointer to the audio samples$/;"	m	struct:sf::SoundStream::Chunk
samptrack	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  double           samptrack;$/;"	m	struct:OggVorbis_File
save	.\dep\Lua\src\llex.c	/^static void save (LexState *ls, int c) {$/;"	f	file:
save	.\include\sol\test_usertypes.cpp	/^	static void save(factory_test& f) {$/;"	f	struct:factory_test
saveImageToFile	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^bool ImageLoader::saveImageToFile(const std::string& filename, const std::vector<Uint8>& pixels, const Vector2u& size)$/;"	f	class:sf::priv::ImageLoader
saveToFile	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::saveToFile(const std::string& filename) const$/;"	f	class:sf::SoundBuffer
saveToFile	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^bool Image::saveToFile(const std::string& filename) const$/;"	f	class:sf::Image
save_and_next	.\dep\Lua\src\llex.c	51;"	d	file:
savedState	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    void* savedState;$/;"	m	struct:sf::priv::ActivityStates
savedStateSize	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    size_t savedStateSize;$/;"	m	struct:sf::priv::ActivityStates
savedpc	.\dep\Lua\src\lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon15::__anon16
savedpc	.\include\lua\lstate.h	/^      const Instruction *savedpc;$/;"	m	struct:CallInfo::__anon166::__anon167
savestack	.\dep\Lua\src\ldo.h	32;"	d
savestack	.\include\lua\ldo.h	32;"	d
saw_Adobe_marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean saw_Adobe_marker;	\/* TRUE iff an Adobe APP14 marker was found *\/$/;"	m	struct:jpeg_decompress_struct
saw_JFIF_marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean saw_JFIF_marker;	\/* TRUE iff a JFIF APP0 marker was found *\/$/;"	m	struct:jpeg_decompress_struct
scale	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::scale(const Vector2f& factors)$/;"	f	class:sf::Transform
scale	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::scale(const Vector2f& factors, const Vector2f& center)$/;"	f	class:sf::Transform
scale	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::scale(float scaleX, float scaleY)$/;"	f	class:sf::Transform
scale	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::scale(float scaleX, float scaleY, float centerX, float centerY)$/;"	f	class:sf::Transform
scale	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::scale(const Vector2f& factor)$/;"	f	class:sf::Transformable
scale	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::scale(float factorX, float factorY)$/;"	f	class:sf::Transformable
scale	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        Approx& scale( double newScale ) {$/;"	f	class:Catch::Detail::Approx
scale_denom	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int scale_num, scale_denom; \/* fraction by which to scale image *\/$/;"	m	struct:jpeg_compress_struct
scale_denom	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int scale_num, scale_denom; \/* fraction by which to scale image *\/$/;"	m	struct:jpeg_decompress_struct
scale_num	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int scale_num, scale_denom; \/* fraction by which to scale image *\/$/;"	m	struct:jpeg_compress_struct
scale_num	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  unsigned int scale_num, scale_denom; \/* fraction by which to scale image *\/$/;"	m	struct:jpeg_decompress_struct
scan_info	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  const jpeg_scan_info * scan_info; \/* script for multi-scan file, or NULL *\/$/;"	m	struct:jpeg_compress_struct
scan_n	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int scan_n, order[4];$/;"	m	struct:__anon98
scanformat	.\dep\Lua\src\lstrlib.c	/^static const char *scanformat (lua_State *L, const char *strfrmt, char *form) {$/;"	f	file:
scopedElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        ScopedElement scopedElement( std::string const& name ) {$/;"	f	class:Catch::XmlWriter
screenSize	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    Vector2i screenSize;$/;"	m	struct:sf::priv::ActivityStates
script	.\include\sol\single\sol\sol.hpp	/^		inline void script(lua_State* L, const std::string& code) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
script	.\include\sol\sol\stack.hpp	/^		inline void script(lua_State* L, const std::string& code) {$/;"	f	namespace:sol::stack
script	.\include\sol\sol\state_view.hpp	/^		function_result script(const std::string& code) {$/;"	f	class:sol::state_view
script_dir	.\include\sol\bootstrap.py	/^script_dir = os.path.dirname(os.path.realpath(sys.argv[0]))$/;"	v
script_file	.\include\sol\single\sol\sol.hpp	/^		inline void script_file(lua_State* L, const std::string& filename) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
script_file	.\include\sol\sol\stack.hpp	/^		inline void script_file(lua_State* L, const std::string& filename) {$/;"	f	namespace:sol::stack
script_file	.\include\sol\sol\state_view.hpp	/^		function_result script_file(const std::string& filename) {$/;"	f	class:sol::state_view
script_path	.\include\sol\single.py	/^script_path = os.path.normpath(os.path.dirname(os.path.realpath(__file__)))$/;"	v
script_space	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  jpeg_scan_info * script_space; \/* workspace for jpeg_simple_progression *\/$/;"	m	struct:jpeg_compress_struct
script_space_size	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int script_space_size;$/;"	m	struct:jpeg_compress_struct
sd_bytes	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int         sd_bytes;$/;"	m	struct:CID_FaceDictRec_
searcher_C	.\dep\Lua\src\loadlib.c	/^static int searcher_C (lua_State *L) {$/;"	f	file:
searcher_Croot	.\dep\Lua\src\loadlib.c	/^static int searcher_Croot (lua_State *L) {$/;"	f	file:
searcher_Lua	.\dep\Lua\src\loadlib.c	/^static int searcher_Lua (lua_State *L) {$/;"	f	file:
searcher_preload	.\dep\Lua\src\loadlib.c	/^static int searcher_preload (lua_State *L) {$/;"	f	file:
searchpath	.\dep\Lua\src\loadlib.c	/^static const char *searchpath (lua_State *L, const char *name,$/;"	f	file:
searchupvalue	.\dep\Lua\src\lparser.c	/^static int searchupvalue (FuncState *fs, TString *name) {$/;"	f	file:
searchvar	.\dep\Lua\src\lparser.c	/^static int searchvar (FuncState *fs, TString *n) {$/;"	f	file:
second	.\include\sol\Catch\projects\SelfTest\GeneratorTests.cpp	/^struct IntPair { int first, second; };$/;"	m	struct:IntPair	file:
secondarymeta	.\include\sol\single\sol\sol.hpp	/^		bool secondarymeta;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
secondarymeta	.\include\sol\sol\usertype_metatable.hpp	/^		bool secondarymeta;$/;"	m	struct:sol::usertype_metatable
seconds	.\dep\SFML\src\SFML\System\Time.cpp	/^Time seconds(float amount)$/;"	f	namespace:sf
sectionEnded	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::sectionEnded( SectionStats const& sectionStats ) {$/;"	f	class:Catch::LegacyReporterAdapter
sectionEnded	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void sectionEnded( SectionEndInfo const& endInfo ) {$/;"	f	class:Catch::RunContext
sectionEndedEarly	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual void sectionEndedEarly( SectionEndInfo const& endInfo ) {$/;"	f	class:Catch::RunContext
sectionInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        SectionInfo sectionInfo;$/;"	m	struct:Catch::SectionStats
sectionInfo	.\include\sol\Catch\include\internal\catch_section_info.h	/^        SectionInfo sectionInfo;$/;"	m	struct:Catch::SectionEndInfo
sectionStarted	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual bool sectionStarted ($/;"	f	class:Catch::RunContext
sectionStarting	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::sectionStarting( SectionInfo const& sectionInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter
seed	.\dep\Lua\src\lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
seed	.\include\lua\lstate.h	/^  unsigned int seed;  \/* randomized seed for hashes *\/$/;"	m	struct:global_State
seedRng	.\include\sol\Catch\include\internal\catch_common.hpp	/^    void seedRng( IConfig const& config ) {$/;"	f	namespace:Catch
seek	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Seek seek;$/;"	m	struct:__anon24
seek	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^void InputSoundFile::seek(Time timeOffset)$/;"	f	class:sf::InputSoundFile
seek	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^void InputSoundFile::seek(Uint64 sampleOffset)$/;"	f	class:sf::InputSoundFile
seek	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^void SoundFileReaderFlac::seek(Uint64 sampleOffset)$/;"	f	class:sf::priv::SoundFileReaderFlac
seek	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^    int seek(void* data, ogg_int64_t offset, int whence)$/;"	f	namespace:__anon121
seek	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^void SoundFileReaderOgg::seek(Uint64 sampleOffset)$/;"	f	class:sf::priv::SoundFileReaderOgg
seek	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^void SoundFileReaderWav::seek(Uint64 sampleOffset)$/;"	f	class:sf::priv::SoundFileReaderWav
seek	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^Int64 ResourceStream::seek(Int64 position)$/;"	f	class:sf::priv::ResourceStream
seek	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^Int64 FileInputStream::seek(Int64 position)$/;"	f	class:sf::FileInputStream
seek	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^Int64 MemoryInputStream::seek(Int64 position)$/;"	f	class:sf::MemoryInputStream
seek_func	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int    (*seek_func)  (void *datasource, ogg_int64_t offset, int whence);$/;"	m	struct:__anon109
seek_table	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_SeekTable seek_table;$/;"	m	union:__anon57::__anon58
seekable	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  int              seekable;$/;"	m	struct:OggVorbis_File
seenHeaders	.\include\sol\Catch\scripts\generateSingleHeader.py	/^seenHeaders = set([])$/;"	v
select	.\include\sol\single\sol\sol.hpp	/^			static void select(lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select	.\include\sol\sol\function_types.hpp	/^			static void select(lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
selectBestPixelFormat	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^int WglContext::selectBestPixelFormat(HDC deviceContext, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::WglContext
selectBestVisual	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^XVisualInfo EglContext::selectBestVisual(::Display* XDisplay, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::EglContext
selectBestVisual	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^XVisualInfo GlxContext::selectBestVisual(::Display* display, unsigned int bitsPerPixel, const ContextSettings& settings)$/;"	f	class:sf::priv::GlxContext
select_convertible	.\include\sol\single\sol\sol.hpp	/^			static void select_convertible(std::false_type, types<Sig...>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_convertible	.\include\sol\single\sol\sol.hpp	/^			static void select_convertible(std::true_type, types<R(A...)>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_convertible	.\include\sol\single\sol\sol.hpp	/^			static void select_convertible(types<>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_convertible	.\include\sol\single\sol\sol.hpp	/^			static void select_convertible(types<R(A...)> t, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_convertible	.\include\sol\sol\function_types.hpp	/^			static void select_convertible(std::false_type, types<Sig...>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_convertible	.\include\sol\sol\function_types.hpp	/^			static void select_convertible(std::true_type, types<R(A...)>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_convertible	.\include\sol\sol\function_types.hpp	/^			static void select_convertible(types<>, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_convertible	.\include\sol\sol\function_types.hpp	/^			static void select_convertible(types<R(A...)> t, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_function	.\include\sol\single\sol\sol.hpp	/^			static void select_function(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_function	.\include\sol\single\sol\sol.hpp	/^			static void select_function(std::true_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_function	.\include\sol\single\sol\sol.hpp	/^			static void select_function(std::true_type, lua_State* L, lua_CFunction f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_function	.\include\sol\sol\function_types.hpp	/^			static void select_function(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_function	.\include\sol\sol\function_types.hpp	/^			static void select_function(std::true_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_function	.\include\sol\sol\function_types.hpp	/^			static void select_function(std::true_type, lua_State* L, lua_CFunction f) {$/;"	f	struct:sol::stack::pusher
select_member_function	.\include\sol\single\sol\sol.hpp	/^			static void select_member_function(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_function	.\include\sol\single\sol\sol.hpp	/^			static void select_member_function(std::true_type, lua_State* L, Fx&& fx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_function	.\include\sol\single\sol\sol.hpp	/^			static void select_member_function(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_function	.\include\sol\sol\function_types.hpp	/^			static void select_member_function(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_member_function	.\include\sol\sol\function_types.hpp	/^			static void select_member_function(std::true_type, lua_State* L, Fx&& fx) {$/;"	f	struct:sol::stack::pusher
select_member_function	.\include\sol\sol\function_types.hpp	/^			static void select_member_function(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_member_variable	.\include\sol\single\sol\sol.hpp	/^			static void select_member_variable(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_variable	.\include\sol\single\sol\sol.hpp	/^			static void select_member_variable(std::true_type, lua_State* L, Fx&& fx) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_variable	.\include\sol\single\sol\sol.hpp	/^			static void select_member_variable(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_member_variable	.\include\sol\sol\function_types.hpp	/^			static void select_member_variable(std::false_type, lua_State* L, Fx&& fx, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_member_variable	.\include\sol\sol\function_types.hpp	/^			static void select_member_variable(std::true_type, lua_State* L, Fx&& fx) {$/;"	f	struct:sol::stack::pusher
select_member_variable	.\include\sol\sol\function_types.hpp	/^			static void select_member_variable(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_reference_member_function	.\include\sol\single\sol\sol.hpp	/^			static void select_reference_member_function(std::false_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_reference_member_function	.\include\sol\single\sol\sol.hpp	/^			static void select_reference_member_function(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_reference_member_function	.\include\sol\sol\function_types.hpp	/^			static void select_reference_member_function(std::false_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_reference_member_function	.\include\sol\sol\function_types.hpp	/^			static void select_reference_member_function(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_reference_member_variable	.\include\sol\single\sol\sol.hpp	/^			static void select_reference_member_variable(std::false_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_reference_member_variable	.\include\sol\single\sol\sol.hpp	/^			static void select_reference_member_variable(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
select_reference_member_variable	.\include\sol\sol\function_types.hpp	/^			static void select_reference_member_variable(std::false_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
select_reference_member_variable	.\include\sol\sol\function_types.hpp	/^			static void select_reference_member_variable(std::true_type, lua_State* L, Fx&& fx, T&& obj, Args&&... args) {$/;"	f	struct:sol::stack::pusher
self_test	.\include\sol\test_usertypes.cpp	/^	self_test() : bark(100) {$/;"	f	struct:self_test
self_test	.\include\sol\test_usertypes.cpp	/^struct self_test {$/;"	s	file:
semerror	.\dep\Lua\src\lparser.c	/^static l_noret semerror (LexState *ls, const char *msg) {$/;"	f	file:
seminfo	.\dep\Lua\src\llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
seminfo	.\include\lua\llex.h	/^  SemInfo seminfo;$/;"	m	struct:Token
send	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^void Ftp::DataChannel::send(std::istream& stream)$/;"	f	class:sf::Ftp::DataChannel
send	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::send(Packet& packet)$/;"	f	class:sf::TcpSocket
send	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::send(const void* data, std::size_t size)$/;"	f	class:sf::TcpSocket
send	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^Socket::Status TcpSocket::send(const void* data, std::size_t size, std::size_t& sent)$/;"	f	class:sf::TcpSocket
send	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^Socket::Status UdpSocket::send(Packet& packet, const IpAddress& remoteAddress, unsigned short remotePort)$/;"	f	class:sf::UdpSocket
send	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^Socket::Status UdpSocket::send(const void* data, std::size_t size, const IpAddress& remoteAddress, unsigned short remotePort)$/;"	f	class:sf::UdpSocket
sendCommand	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::sendCommand(const std::string& command, const std::string& parameter)$/;"	f	class:sf::Ftp
sendRequest	.\dep\SFML\src\SFML\Network\Http.cpp	/^Http::Response Http::sendRequest(const Http::Request& request, Time timeout)$/;"	f	class:sf::Http
sensor	.\dep\SFML\include\SFML\Window\Event.hpp	/^        SensorEvent           sensor;            \/\/\/< Sensor event parameters (Event::SensorChanged)$/;"	m	union:sf::Event::__anon114
sensor	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^        SensorImpl sensor; \/\/\/< Sensor implementation$/;"	m	struct:sf::priv::SensorManager::Item
sensor	.\include\SFML\Window\Event.hpp	/^        SensorEvent           sensor;            \/\/\/< Sensor event parameters (Event::SensorChanged)$/;"	m	union:sf::Event::__anon174
sensorData	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^    sf::Vector3f       sensorData[sf::Sensor::Count];$/;"	m	namespace:__anon137	file:
sensorEventQueue	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^    ASensorEventQueue* sensorEventQueue;$/;"	m	namespace:__anon137	file:
sensorManager	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^    ASensorManager*    sensorManager;$/;"	m	namespace:__anon137	file:
sent_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean sent_table;		\/* TRUE when table has been output *\/$/;"	m	struct:__anon79
sent_table	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean sent_table;		\/* TRUE when table has been output *\/$/;"	m	struct:__anon80
sep	.\include\sol\test_functions.cpp	/^namespace sep {$/;"	n	file:
separatetobefnz	.\dep\Lua\src\lgc.c	/^static void separatetobefnz (global_State *g, int all) {$/;"	f	file:
separators	.\include\sol\Catch\include\external\clara.h	/^        std::string separators;$/;"	m	struct:Clara::Parser
sequence	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t sequence;$/;"	m	struct:vorbis_block
sequence	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t sequence;$/;"	m	struct:vorbis_dsp_state
sequence	.\include\sol\Catch\include\internal\catch_message.h	/^        unsigned int sequence;$/;"	m	struct:Catch::MessageInfo
serialno	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long    serialno;$/;"	m	struct:__anon90
serialnos	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  long            *serialnos;$/;"	m	struct:OggVorbis_File
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C& obj, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundBinaryFunction
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C& obj, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundUnaryFunction
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundDataMember
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundNullaryMethod
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C& p, std::string const& stringValue ) const {$/;"	f	struct:Clara::Detail::BoundUnaryMethod
set	.\include\sol\Catch\include\external\clara.h	/^            virtual void set( C&, std::string const& ) const {}$/;"	f	struct:Clara::Detail::NullBinder
set	.\include\sol\Catch\include\external\clara.h	/^            void set( ConfigT& config, std::string const& value ) const {$/;"	f	class:Clara::Detail::BoundArgFunction
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int tableindex = -3) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, Keys&& keys, Value&& value, int tableindex = -1) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, Keys&& keys, Value&& value, int tableindex = -3) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, metatable_key_t, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^			void set(lua_State* L, void* key, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::field_setter
set	.\include\sol\single\sol\sol.hpp	/^		proxy& set(T&& item) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
set	.\include\sol\single\sol\sol.hpp	/^		std::tuple<Functions...> set;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::constructor_wrapper
set	.\include\sol\single\sol\sol.hpp	/^		void set(std::false_type, T&& target) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::tie_t
set	.\include\sol\single\sol\sol.hpp	/^		void set(std::true_type, T&& target) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::tie_t
set	.\include\sol\single\sol\sol.hpp	/^        std::tuple<Functions...> set;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::overload_set
set	.\include\sol\sol\overload.hpp	/^        std::tuple<Functions...> set;$/;"	m	struct:sol::overload_set
set	.\include\sol\sol\proxy.hpp	/^		proxy& set(T&& item) {$/;"	f	struct:sol::proxy
set	.\include\sol\sol\raii.hpp	/^		std::tuple<Functions...> set;$/;"	m	struct:sol::constructor_wrapper
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int = -2) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, Key&& key, Value&& value, int tableindex = -3) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, Keys&& keys, Value&& value, int tableindex = -1) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, Keys&& keys, Value&& value, int tableindex = -3) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, metatable_key_t, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\stack_field.hpp	/^			void set(lua_State* L, void* key, Value&& value, int tableindex = -2) {$/;"	f	struct:sol::stack::field_setter
set	.\include\sol\sol\state_view.hpp	/^		state_view& set(Args&&... args) {$/;"	f	class:sol::state_view
set	.\include\sol\sol\table_core.hpp	/^		basic_table_core& set(Args&&... args) {$/;"	f	class:sol::basic_table_core
set	.\include\sol\sol\tie.hpp	/^		void set(std::false_type, T&& target) {$/;"	f	struct:sol::tie_t
set	.\include\sol\sol\tie.hpp	/^		void set(std::true_type, T&& target) {$/;"	f	struct:sol::tie_t
set	.\include\sol\test_usertypes.cpp	/^	void set(sol::variadic_args, sol::this_state, int x) {$/;"	f	struct:ext_getset
set2	.\dep\Lua\src\ltablib.c	/^static void set2 (lua_State *L, IdxT i, IdxT j) {$/;"	f	file:
setAccel	.\src\include\Object.h	/^	void setAccel(float f) { _stats["accel"] = f; }$/;"	f	class:Object
setActive	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^bool RenderTexture::setActive(bool active)$/;"	f	class:sf::RenderTexture
setActive	.\dep\SFML\src\SFML\Window\Context.cpp	/^bool Context::setActive(bool active)$/;"	f	class:sf::Context
setActive	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^bool GlContext::setActive(bool active)$/;"	f	class:sf::priv::GlContext
setActive	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::setActive(bool active) const$/;"	f	class:sf::Window
setAttached	.\src\src\Perk.cpp	/^void Perk::setAttached(Object* attached) {$/;"	f	class:Perk
setAttached	.\src\src\SkillTree.cpp	/^void SkillTree::setAttached(Object* o) {$/;"	f	class:SkillTree
setAttackerCount	.\src\include\Object.h	/^	void setAttackerCount(int c) { _attackerCount = c; }$/;"	f	class:Object
setAttenuation	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setAttenuation(float attenuation)$/;"	f	class:sf::SoundSource
setBlocking	.\dep\SFML\src\SFML\Network\Socket.cpp	/^void Socket::setBlocking(bool blocking)$/;"	f	class:sf::Socket
setBlocking	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^void SocketImpl::setBlocking(SocketHandle sock, bool block)$/;"	f	class:sf::priv::SocketImpl
setBlocking	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^void SocketImpl::setBlocking(SocketHandle sock, bool block)$/;"	f	class:sf::priv::SocketImpl
setBody	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Request::setBody(const std::string& body)$/;"	f	class:sf::Http::Request
setBuffer	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::setBuffer(const SoundBuffer& buffer)$/;"	f	class:sf::Sound
setCenter	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setCenter(const Vector2f& center)$/;"	f	class:sf::View
setCenter	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setCenter(float x, float y)$/;"	f	class:sf::View
setCharacterSize	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::setCharacterSize(unsigned int size)$/;"	f	class:sf::Text
setColor	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::setColor(const Color& color)$/;"	f	class:sf::Sprite
setColor	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::setColor(const Color& color)$/;"	f	class:sf::Text
setComp	.\src\include\SkillTree.h	/^	void setComp(bool b) { _comp = b; }$/;"	f	class:SkillTree
setConfig	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual void setConfig( Ptr<IConfig const> const& config ) {$/;"	f	class:Catch::Context
setCurrentSize	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^bool Font::setCurrentSize(unsigned int characterSize) const$/;"	f	class:sf::Font
setCurrentTracker	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void setCurrentTracker( ITracker* tracker ) {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
setDamage	.\src\include\Object.h	/^	void setDamage(float d) { _stats["damage"] = d; }$/;"	f	class:Object
setData	.\src\include\SkillTree.h	/^	void setData(std::vector<SkillNode*>* v) { _data = *v; }$/;"	f	class:SkillTree
setDevice	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^bool SoundRecorder::setDevice(const std::string& name)$/;"	f	class:sf::SoundRecorder
setDirection	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^void AudioDevice::setDirection(const Vector3f& direction)$/;"	f	class:sf::priv::AudioDevice
setDirection	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setDirection(const Vector3f& direction)$/;"	f	class:sf::Listener
setDirection	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setDirection(float x, float y, float z)$/;"	f	class:sf::Listener
setDuration	.\src\include\Perk.h	/^	void setDuration(float d) { _duration = d; }$/;"	f	class:Perk
setEnabled	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^void SensorImpl::setEnabled(bool enabled)$/;"	f	class:sf::priv::SensorImpl
setEnabled	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^void SensorImpl::setEnabled(bool \/*enabled*\/)$/;"	f	class:sf::priv::SensorImpl
setEnabled	.\dep\SFML\src\SFML\Window\Sensor.cpp	/^void Sensor::setEnabled(Type sensor, bool enabled)$/;"	f	class:sf::Sensor
setEnabled	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^void SensorManager::setEnabled(Sensor::Type sensor, bool enabled)$/;"	f	class:sf::priv::SensorManager
setEnabled	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^void SensorImpl::setEnabled(bool \/*enabled*\/)$/;"	f	class:sf::priv::SensorImpl
setEnabled	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^void SensorImpl::setEnabled(bool \/*enabled*\/)$/;"	f	class:sf::priv::SensorImpl
setField	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Request::setField(const std::string& field, const std::string& value)$/;"	f	class:sf::Http::Request
setFileInfo	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator& setFileInfo( const char* fileInfo ) {$/;"	f	class:Catch::CompositeGenerator
setFillColor	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::setFillColor(const Color& color)$/;"	f	class:sf::Shape
setFireRate	.\src\include\Object.h	/^	void setFireRate(float r) { _stats["fireRate"] = r; }$/;"	f	class:Object
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& ) const {}$/;"	f	struct:Clara::Detail::NullBinder
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& obj ) const {$/;"	f	struct:Clara::Detail::BoundBinaryFunction
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundDataMember
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundNullaryMethod
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundUnaryFunction
setFlag	.\include\sol\Catch\include\external\clara.h	/^            virtual void setFlag( C& p ) const {$/;"	f	struct:Clara::Detail::BoundUnaryMethod
setFlag	.\include\sol\Catch\include\external\clara.h	/^            void setFlag( ConfigT& config ) const {$/;"	f	class:Clara::Detail::BoundArgFunction
setFont	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::setFont(const Font& font)$/;"	f	class:sf::Text
setFramerateLimit	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setFramerateLimit(unsigned int limit)$/;"	f	class:sf::Window
setGlobalVolume	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^void AudioDevice::setGlobalVolume(float volume)$/;"	f	class:sf::priv::AudioDevice
setGlobalVolume	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setGlobalVolume(float volume)$/;"	f	class:sf::Listener
setHead	.\src\include\SkillTree.h	/^	void setHead(SkillNode* h) { _head = h; }$/;"	f	class:SkillTree
setHealth	.\src\include\Enemy.h	/^	void setHealth(float health) { this->_health = health; }$/;"	f	class:Enemy
setHeight	.\src\include\GuiComponent.h	/^	void setHeight(float h) { _size.Y = h; }$/;"	f	class:GuiComponent
setHost	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::setHost(const std::string& host, unsigned short port)$/;"	f	class:sf::Http
setHttpVersion	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Request::setHttpVersion(unsigned int major, unsigned int minor)$/;"	f	class:sf::Http::Request
setIcon	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setIcon(unsigned int width, unsigned int height, const Uint8* pixels)$/;"	f	class:sf::priv::WindowImplAndroid
setIcon	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setIcon(unsigned int width, unsigned int height, const Uint8* pixels)$/;"	f	class:sf::priv::WindowImplX11
setIcon	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setIcon(unsigned int width, unsigned int height, const Uint8* pixels)$/;"	f	class:sf::priv::WindowImplWin32
setIcon	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setIcon(unsigned int width, unsigned int height, const Uint8* pixels)$/;"	f	class:sf::Window
setIndent	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes& setIndent( std::size_t _value )         { indent = _value; return *this; }$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setIndent	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes& setIndent( std::size_t _value )         { indent = _value; return *this; }$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setInitialIndent	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes& setInitialIndent( std::size_t _value )  { initialIndent = _value; return *this; }$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setInitialIndent	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes& setInitialIndent( std::size_t _value )  { initialIndent = _value; return *this; }$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setJoystickThreshold	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setJoystickThreshold(float threshold)$/;"	f	class:sf::Window
setJoystickThreshold	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^void WindowImpl::setJoystickThreshold(float threshold)$/;"	f	class:sf::priv::WindowImpl
setKeyRepeatEnabled	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setKeyRepeatEnabled(bool enabled)$/;"	f	class:sf::priv::WindowImplAndroid
setKeyRepeatEnabled	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setKeyRepeatEnabled(bool enabled)$/;"	f	class:sf::priv::WindowImplX11
setKeyRepeatEnabled	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setKeyRepeatEnabled(bool enabled)$/;"	f	class:sf::priv::WindowImplWin32
setKeyRepeatEnabled	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setKeyRepeatEnabled(bool enabled)$/;"	f	class:sf::Window
setLhs	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder& ResultBuilder::setLhs( std::string const& lhs ) {$/;"	f	class:Catch::ResultBuilder
setLoaded	.\src\include\LuaScript.h	/^	void setLoaded(bool b) { _loaded = b; }$/;"	f	class:LuaScript
setLogFile	.\src\src\Logger.cpp	/^void Logger::setLogFile(const char* filename, bool plainText, bool showOnScreen) {$/;"	f	class:Logger
setLoop	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::setLoop(bool loop)$/;"	f	class:sf::Sound
setLoop	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::setLoop(bool loop)$/;"	f	class:sf::SoundStream
setMaxHealth	.\src\include\Enemy.h	/^	void setMaxHealth(float h) { this->_maxHealth = h; }$/;"	f	class:Enemy
setMethod	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Request::setMethod(Http::Request::Method method)$/;"	f	class:sf::Http::Request
setMinDistance	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setMinDistance(float distance)$/;"	f	class:sf::SoundSource
setMotifHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setMotifHints(unsigned long style)$/;"	f	class:sf::priv::WindowImplX11
setMouseCursorVisible	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setMouseCursorVisible(bool visible)$/;"	f	class:sf::priv::WindowImplAndroid
setMouseCursorVisible	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setMouseCursorVisible(bool visible)$/;"	f	class:sf::priv::WindowImplX11
setMouseCursorVisible	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setMouseCursorVisible(bool visible)$/;"	f	class:sf::priv::WindowImplWin32
setMouseCursorVisible	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setMouseCursorVisible(bool visible)$/;"	f	class:sf::Window
setMousePosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position)$/;"	f	class:sf::priv::InputImpl
setMousePosition	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position, const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
setMousePosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position)$/;"	f	class:sf::priv::InputImpl
setMousePosition	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position, const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
setMousePosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position)$/;"	f	class:sf::priv::InputImpl
setMousePosition	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^void InputImpl::setMousePosition(const Vector2i& position, const Window& relativeTo)$/;"	f	class:sf::priv::InputImpl
setName	.\src\include\Window.h	/^	void setName(const std::string& name) { _name = name; }$/;"	f	class:Window
setOp	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder& ResultBuilder::setOp( std::string const& op ) {$/;"	f	class:Catch::ResultBuilder
setOrder	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void setOrder( ConfigData& config, std::string const& order ) {$/;"	f	namespace:Catch
setOrigin	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setOrigin(const Vector2f& origin)$/;"	f	class:sf::Transformable
setOrigin	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setOrigin(float x, float y)$/;"	f	class:sf::Transformable
setOutlineColor	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::setOutlineColor(const Color& color)$/;"	f	class:sf::Shape
setOutlineThickness	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::setOutlineThickness(float thickness)$/;"	f	class:sf::Shape
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, CurrentTextureType)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, const Color& color)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, const Texture& texture)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, const Transform& transform)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, const Vector2f& v)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, const Vector3f& v)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, float x)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, float x, float y)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, float x, float y, float z)$/;"	f	class:sf::Shader
setParameter	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^void Shader::setParameter(const std::string& name, float x, float y, float z, float w)$/;"	f	class:sf::Shader
setPath	.\src\include\Enemy.h	/^	void setPath(Path* p) { this->_path = p; }$/;"	f	class:Enemy
setPitch	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setPitch(float pitch)$/;"	f	class:sf::SoundSource
setPixel	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^void Image::setPixel(unsigned int x, unsigned int y, const Color& color)$/;"	f	class:sf::Image
setPlayingOffset	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::setPlayingOffset(Time timeOffset)$/;"	f	class:sf::Sound
setPlayingOffset	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::setPlayingOffset(Time timeOffset)$/;"	f	class:sf::SoundStream
setPoint	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^void ConvexShape::setPoint(std::size_t index, const Vector2f& point)$/;"	f	class:sf::ConvexShape
setPointCount	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^void CircleShape::setPointCount(std::size_t count)$/;"	f	class:sf::CircleShape
setPointCount	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^void ConvexShape::setPointCount(std::size_t count)$/;"	f	class:sf::ConvexShape
setPoints	.\src\src\SkillTree.cpp	/^void SkillNode::setPoints(int p) {$/;"	f	class:SkillNode
setPos	.\src\include\SkillTree.h	/^	void setPos(Vector2 newPos) { pos = newPos; }$/;"	f	class:SkillNode
setPosition	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^void AudioDevice::setPosition(const Vector3f& position)$/;"	f	class:sf::priv::AudioDevice
setPosition	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setPosition(const Vector3f& position)$/;"	f	class:sf::Listener
setPosition	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setPosition(float x, float y, float z)$/;"	f	class:sf::Listener
setPosition	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setPosition(const Vector3f& position)$/;"	f	class:sf::SoundSource
setPosition	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setPosition(float x, float y, float z)$/;"	f	class:sf::SoundSource
setPosition	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setPosition(const Vector2f& position)$/;"	f	class:sf::Transformable
setPosition	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setPosition(float x, float y)$/;"	f	class:sf::Transformable
setPosition	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setPosition(const Vector2i& position)$/;"	f	class:sf::priv::WindowImplAndroid
setPosition	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^void Mouse::setPosition(const Vector2i& position)$/;"	f	class:sf::Mouse
setPosition	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^void Mouse::setPosition(const Vector2i& position, const Window& relativeTo)$/;"	f	class:sf::Mouse
setPosition	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setPosition(const Vector2i& position)$/;"	f	class:sf::priv::WindowImplX11
setPosition	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setPosition(const Vector2i& position)$/;"	f	class:sf::priv::WindowImplWin32
setPosition	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setPosition(const Vector2i& position)$/;"	f	class:sf::Window
setPosition	.\src\include\GuiComponent.h	/^	void setPosition(Vector2 pos) { this->_pos = pos; }$/;"	f	class:GuiComponent
setPosition	.\src\include\Target.h	/^	virtual void setPosition(float x, float y) {$/;"	f	class:Target
setPosition	.\src\src\Object.cpp	/^void Object::setPosition(float nx, float ny) {$/;"	f	class:Object
setPosition	.\src\src\Tower.cpp	/^void Tower::setPosition(float x, float y) {$/;"	f	class:Tower
setPositionalArg	.\include\sol\Catch\include\external\clara.h	/^        friend void setPositionalArg( Arg& arg, int position )$/;"	f	class:Clara::CommandLine
setPrimitiveType	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^void VertexArray::setPrimitiveType(PrimitiveType type)$/;"	f	class:sf::VertexArray
setProcessDpiAware	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^    void setProcessDpiAware()$/;"	f	namespace:__anon153
setProcessingInterval	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::setProcessingInterval(Time interval)$/;"	f	class:sf::SoundRecorder
setProjSpeed	.\src\include\Object.h	/^	void setProjSpeed(float f) { _stats["projSpeed"] = f; }$/;"	f	class:Object
setProjectile	.\src\src\Tower.cpp	/^void Tower::setProjectile(Object& o) {$/;"	f	class:Tower
setProtocols	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setProtocols()$/;"	f	class:sf::priv::WindowImplX11
setRadius	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^void CircleShape::setRadius(float radius)$/;"	f	class:sf::CircleShape
setRange	.\src\include\Object.h	/^	void setRange(int r) { _stats["range"] = r; }$/;"	f	class:Object
setRelativeToListener	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setRelativeToListener(bool relative)$/;"	f	class:sf::SoundSource
setRepeated	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^void RenderTexture::setRepeated(bool repeated)$/;"	f	class:sf::RenderTexture
setRepeated	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::setRepeated(bool repeated)$/;"	f	class:sf::Texture
setResultCapture	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual void setResultCapture( IResultCapture* resultCapture ) {$/;"	f	class:Catch::Context
setResultType	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder& ResultBuilder::setResultType( ResultWas::OfType result ) {$/;"	f	class:Catch::ResultBuilder
setResultType	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder& ResultBuilder::setResultType( bool result ) {$/;"	f	class:Catch::ResultBuilder
setRhs	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    ResultBuilder& ResultBuilder::setRhs( std::string const& rhs ) {$/;"	f	class:Catch::ResultBuilder
setRngSeed	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void setRngSeed( ConfigData& config, std::string const& seed ) {$/;"	f	namespace:Catch
setRotation	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setRotation(float angle)$/;"	f	class:sf::Transformable
setRotation	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setRotation(float angle)$/;"	f	class:sf::View
setRunner	.\include\sol\Catch\include\internal\catch_context_impl.hpp	/^        virtual void setRunner( IRunner* runner ) {$/;"	f	class:Catch::Context
setScale	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setScale(const Vector2f& factors)$/;"	f	class:sf::Transformable
setScale	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^void Transformable::setScale(float factorX, float factorY)$/;"	f	class:sf::Transformable
setShowDurations	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void setShowDurations( ConfigData& config, bool _showDurations ) {$/;"	f	namespace:Catch
setSize	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^void RectangleShape::setSize(const Vector2f& size)$/;"	f	class:sf::RectangleShape
setSize	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setSize(const Vector2f& size)$/;"	f	class:sf::View
setSize	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setSize(float width, float height)$/;"	f	class:sf::View
setSize	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setSize(const Vector2u& size)$/;"	f	class:sf::priv::WindowImplAndroid
setSize	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setSize(const Vector2u& size)$/;"	f	class:sf::priv::WindowImplX11
setSize	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setSize(const Vector2u& size)$/;"	f	class:sf::priv::WindowImplWin32
setSize	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setSize(const Vector2u& size)$/;"	f	class:sf::Window
setSize	.\src\include\GuiComponent.h	/^	void setSize(Vector2 size) { this->_size = size; } $/;"	f	class:GuiComponent
setSize	.\src\include\Map.h	/^	void setSize(int w, int h) { _size.X = w; _size.Y = h;}$/;"	f	class:Map
setSize	.\src\include\SkillTree.h	/^	void setSize(float w, float h) { _size.X = w; _size.Y = h; }$/;"	f	class:SkillTree
setSize	.\src\include\Window.h	/^	void setSize(Vector2 size) { _size = size; }$/;"	f	class:Window
setSkillTree	.\src\src\Object.cpp	/^void Object::setSkillTree(SkillTree* tree) {$/;"	f	class:Object
setSmooth	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^void RenderTexture::setSmooth(bool smooth)$/;"	f	class:sf::RenderTexture
setSmooth	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::setSmooth(bool smooth)$/;"	f	class:sf::Texture
setSpeed	.\src\include\Object.h	/^	void setSpeed(int s) { _stats["speed"] = s; }$/;"	f	class:Object
setStackable	.\src\include\Perk.h	/^	void setStackable(bool b) { _stackable = b; }$/;"	f	class:Perk
setStacks	.\src\src\Perk.cpp	/^void Perk::setStacks(int c) {$/;"	f	class:Perk
setStat	.\src\src\Stats.cpp	/^void Stats::setStat(std::string name, float value) {$/;"	f	class:Stats
setState	.\src\include\Game.h	/^	static void setState(GameState state) { CurrentGameState = state; }$/;"	f	class:Game
setState	.\src\src\Window.cpp	/^void Window::setState(WindowState state) {$/;"	f	class:Window
setStats	.\src\src\Object.cpp	/^void Object::setStats(Stats s, bool relative) {$/;"	f	class:Object
setStream	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        void setStream( std::ostream& os ) {$/;"	f	class:Catch::XmlWriter
setString	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::setString(const String& string)$/;"	f	class:sf::Text
setStyle	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^void Text::setStyle(Uint32 style)$/;"	f	class:sf::Text
setTabChar	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes& setTabChar( char _value )               { tabChar = _value; return *this; }$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setTabChar	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes& setTabChar( char _value )               { tabChar = _value; return *this; }$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setTags	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    void setTags( TestCaseInfo& testCaseInfo, std::set<std::string> const& tags )$/;"	f	namespace:Catch
setTarget	.\src\include\Enemy.h	/^	void setTarget(Target* t) { this->_target = t; }$/;"	f	class:Enemy
setTarget	.\src\src\Object.cpp	/^void Object::setTarget(Target* t) {$/;"	f	class:Object
setTextAttribute	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        void setTextAttribute( WORD _textAttribute ) {$/;"	f	class:Catch::__anon178::Win32ColourImpl
setTexture	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::setTexture(const Texture* texture, bool resetRect)$/;"	f	class:sf::Shape
setTexture	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::setTexture(const Texture& texture, bool resetRect)$/;"	f	class:sf::Sprite
setTextureRect	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::setTextureRect(const IntRect& rect)$/;"	f	class:sf::Shape
setTextureRect	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::setTextureRect(const IntRect& rectangle)$/;"	f	class:sf::Sprite
setThrowOnUnrecognisedTokens	.\include\sol\Catch\include\external\clara.h	/^        CommandLine& setThrowOnUnrecognisedTokens( bool shouldThrow = true ) {$/;"	f	class:Clara::CommandLine
setTitle	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setTitle(const String& title)$/;"	f	class:sf::priv::WindowImplAndroid
setTitle	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setTitle(const String& title)$/;"	f	class:sf::priv::WindowImplX11
setTitle	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setTitle(const String& title)$/;"	f	class:sf::priv::WindowImplWin32
setTitle	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setTitle(const String& title)$/;"	f	class:sf::Window
setToRemove	.\src\include\Object.h	/^	void setToRemove(bool b) { _toRemove = b; }$/;"	f	class:Object
setTracking	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setTracking(bool track)$/;"	f	class:sf::priv::WindowImplWin32
setUpMenuBar	.\dep\SFML\src\SFML\Window\OSX\SFApplication.h	/^+(void)setUpMenuBar;$/;"	v
setUpVector	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^void AudioDevice::setUpVector(const Vector3f& upVector)$/;"	f	class:sf::priv::AudioDevice
setUpVector	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setUpVector(const Vector3f& upVector)$/;"	f	class:sf::Listener
setUpVector	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^void Listener::setUpVector(float x, float y, float z)$/;"	f	class:sf::Listener
setUpdating	.\src\include\GuiComponent.h	/^	void setUpdating(bool b) { this->_updating = b; }$/;"	f	class:GuiComponent
setUri	.\dep\SFML\src\SFML\Network\Http.cpp	/^void Http::Request::setUri(const std::string& uri)$/;"	f	class:sf::Http::Request
setValue	.\dep\SFML\src\SFML\System\ThreadLocal.cpp	/^void ThreadLocal::setValue(void* value)$/;"	f	class:sf::ThreadLocal
setValue	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^void ThreadLocalImpl::setValue(void* value)$/;"	f	class:sf::priv::ThreadLocalImpl
setValue	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^void ThreadLocalImpl::setValue(void* value)$/;"	f	class:sf::priv::ThreadLocalImpl
setVerbosity	.\include\sol\Catch\include\internal\catch_commandline.hpp	/^    inline void setVerbosity( ConfigData& config, int level ) {$/;"	f	namespace:Catch
setVerticalSyncEnabled	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^void EglContext::setVerticalSyncEnabled(bool enabled)$/;"	f	class:sf::priv::EglContext
setVerticalSyncEnabled	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^void GlxContext::setVerticalSyncEnabled(bool enabled)$/;"	f	class:sf::priv::GlxContext
setVerticalSyncEnabled	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^void WglContext::setVerticalSyncEnabled(bool enabled)$/;"	f	class:sf::priv::WglContext
setVerticalSyncEnabled	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setVerticalSyncEnabled(bool enabled)$/;"	f	class:sf::Window
setVideoMode	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setVideoMode(const VideoMode& mode)$/;"	f	class:sf::priv::WindowImplX11
setView	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^void RenderTarget::setView(const View& view)$/;"	f	class:sf::RenderTarget
setViewport	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::setViewport(const FloatRect& viewport)$/;"	f	class:sf::View
setVirtualKeyboardVisible	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^void InputImpl::setVirtualKeyboardVisible(bool visible)$/;"	f	class:sf::priv::InputImpl
setVirtualKeyboardVisible	.\dep\SFML\src\SFML\Window\Keyboard.cpp	/^void Keyboard::setVirtualKeyboardVisible(bool visible)$/;"	f	class:sf::Keyboard
setVirtualKeyboardVisible	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^void InputImpl::setVirtualKeyboardVisible(bool \/*visible*\/)$/;"	f	class:sf::priv::InputImpl
setVirtualKeyboardVisible	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^void InputImpl::setVirtualKeyboardVisible(bool visible)$/;"	f	class:sf::priv::InputImpl
setVisible	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^void WindowImplAndroid::setVisible(bool visible)$/;"	f	class:sf::priv::WindowImplAndroid
setVisible	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setVisible(bool visible)$/;"	f	class:sf::priv::WindowImplX11
setVisible	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::setVisible(bool visible)$/;"	f	class:sf::priv::WindowImplWin32
setVisible	.\dep\SFML\src\SFML\Window\Window.cpp	/^void Window::setVisible(bool visible)$/;"	f	class:sf::Window
setVisible	.\src\include\GuiComponent.h	/^	void setVisible(bool b) { this->_visible = b; }$/;"	f	class:GuiComponent
setVolume	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^void SoundSource::setVolume(float volume)$/;"	f	class:sf::SoundSource
setWMHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setWMHints(const WMHints& hints)$/;"	f	class:sf::priv::WindowImplX11
setWMSizeHints	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::setWMSizeHints(const WMSizeHints& hints)$/;"	f	class:sf::priv::WindowImplX11
setWidth	.\include\sol\Catch\include\external\clara.h	/^        TextAttributes& setWidth( std::size_t _value )          { width = _value; return *this; }$/;"	f	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setWidth	.\include\sol\Catch\include\external\tbc_text_format.h	/^        TextAttributes& setWidth( std::size_t _value )          { width = _value; return *this; }$/;"	f	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
setWidth	.\src\include\GuiComponent.h	/^	void setWidth(float w) { _size.X = w; }$/;"	f	class:GuiComponent
setX	.\src\include\GuiComponent.h	/^	void setX(float x) { _pos.X = x; }$/;"	f	class:GuiComponent
setY	.\src\include\GuiComponent.h	/^	void setY(float y) { _pos.Y = y; }$/;"	f	class:GuiComponent
set_default_handler	.\include\sol\single\sol\sol.hpp	/^		static void set_default_handler(reference& ref) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
set_default_handler	.\include\sol\sol\protected_function.hpp	/^		static void set_default_handler(reference& ref) {$/;"	f	class:sol::basic_protected_function
set_env	.\dep\Lua\src\loadlib.c	/^static void set_env (lua_State *L) {$/;"	f	file:
set_extra	.\include\sol\single\sol\sol.hpp	/^		void set_extra(std::false_type, std::index_sequence<I...>, T&& target) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::tie_t
set_extra	.\include\sol\single\sol\sol.hpp	/^		void set_extra(std::true_type, std::index_sequence<I...>, T&& target) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::tie_t
set_extra	.\include\sol\sol\tie.hpp	/^		void set_extra(std::false_type, std::index_sequence<I...>, T&& target) {$/;"	f	struct:sol::tie_t
set_extra	.\include\sol\sol\tie.hpp	/^		void set_extra(std::true_type, std::index_sequence<I...>, T&& target) {$/;"	f	struct:sol::tie_t
set_field	.\include\sol\single\sol\sol.hpp	/^		void set_field(lua_State* L, Key&& key, Value&& value) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
set_field	.\include\sol\single\sol\sol.hpp	/^		void set_field(lua_State* L, Key&& key, Value&& value, int tableindex) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
set_field	.\include\sol\sol\stack_core.hpp	/^		void set_field(lua_State* L, Key&& key, Value&& value) {$/;"	f	namespace:sol::stack
set_field	.\include\sol\sol\stack_core.hpp	/^		void set_field(lua_State* L, Key&& key, Value&& value, int tableindex) {$/;"	f	namespace:sol::stack
set_function	.\include\sol\single\sol\sol.hpp	/^		proxy& set_function(Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
set_function	.\include\sol\sol\proxy.hpp	/^		proxy& set_function(Args&&... args) {$/;"	f	struct:sol::proxy
set_function	.\include\sol\sol\state_view.hpp	/^		state_view& set_function(Key&& key, Args&&... args) {$/;"	f	class:sol::state_view
set_function	.\include\sol\sol\table_core.hpp	/^		basic_table_core& set_function(Key&& key, Args&&... args) {$/;"	f	class:sol::basic_table_core
set_fx	.\include\sol\single\sol\sol.hpp	/^			static void set_fx(lua_State* L, Args&&... args) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::stack::pusher
set_fx	.\include\sol\sol\function_types.hpp	/^			static void set_fx(lua_State* L, Args&&... args) {$/;"	f	struct:sol::stack::pusher
set_fx	.\include\sol\sol\table_core.hpp	/^		void set_fx(types<>, Key&& key, Fx&& fx) {$/;"	f	class:sol::basic_table_core
set_fx	.\include\sol\sol\table_core.hpp	/^		void set_fx(types<>, Key&& key, Fx&& fx, Args&&... args) {$/;"	f	class:sol::basic_table_core
set_fx	.\include\sol\sol\table_core.hpp	/^		void set_fx(types<R(Args...)>, Key&& key, Fx&& fx) {$/;"	f	class:sol::basic_table_core
set_mode	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Renderer_SetModeFunc    set_mode;$/;"	m	struct:FT_Renderer_Class_
set_panic	.\include\sol\sol\state_view.hpp	/^		void set_panic(lua_CFunction panic) {$/;"	f	class:sol::state_view
set_ref	.\include\sol\single\sol\sol.hpp	/^		int set_ref(lua_State* L, T&& arg, int tableindex = -2) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack
set_ref	.\include\sol\sol\stack.hpp	/^		int set_ref(lua_State* L, T&& arg, int tableindex = -2) {$/;"	f	namespace:sol::stack
set_resolved_function	.\include\sol\sol\table_core.hpp	/^		void set_resolved_function(Key&& key, Args&&... args) {$/;"	f	class:sol::basic_table_core
set_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& set_usertype(Key&& key, usertype<T>& user) {$/;"	f	class:sol::state_view
set_usertype	.\include\sol\sol\state_view.hpp	/^		state_view& set_usertype(usertype<T>& user) {$/;"	f	class:sol::state_view
set_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& set_usertype(Key&& key, usertype<T>& user) {$/;"	f	class:sol::basic_table_core
set_usertype	.\include\sol\sol\table_core.hpp	/^		basic_table_core& set_usertype(usertype<T>& user) {$/;"	f	class:sol::basic_table_core
setallfields	.\dep\Lua\src\loslib.c	/^static void setallfields (lua_State *L, struct tm *stm) {$/;"	f	file:
setarg	.\dep\Lua\src\lopcodes.h	94;"	d
setarg	.\include\lua\lopcodes.h	94;"	d
setarrayvector	.\dep\Lua\src\ltable.c	/^static void setarrayvector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setbits	.\dep\Lua\src\lgc.h	68;"	d
setbits	.\include\lua\lgc.h	68;"	d
setboolfield	.\dep\Lua\src\loslib.c	/^static void setboolfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setbvalue	.\dep\Lua\src\lobject.h	218;"	d
setbvalue	.\include\lua\lobject.h	218;"	d
setclCvalue	.\dep\Lua\src\lobject.h	245;"	d
setclCvalue	.\include\lua\lobject.h	245;"	d
setclLvalue	.\dep\Lua\src\lobject.h	240;"	d
setclLvalue	.\include\lua\lobject.h	240;"	d
setdeadvalue	.\dep\Lua\src\lobject.h	255;"	d
setdeadvalue	.\include\lua\lobject.h	255;"	d
seterrorobj	.\dep\Lua\src\ldo.c	/^static void seterrorobj (lua_State *L, int errcode, StkId oldtop) {$/;"	f	file:
setfield	.\dep\Lua\src\loslib.c	/^static void setfield (lua_State *L, const char *key, int value) {$/;"	f	file:
setfltvalue	.\dep\Lua\src\lobject.h	198;"	d
setfltvalue	.\include\lua\lobject.h	198;"	d
setfvalue	.\dep\Lua\src\lobject.h	212;"	d
setfvalue	.\include\lua\lobject.h	212;"	d
setgcovalue	.\dep\Lua\src\lobject.h	221;"	d
setgcovalue	.\include\lua\lobject.h	221;"	d
sethvalue	.\dep\Lua\src\lobject.h	250;"	d
sethvalue	.\include\lua\lobject.h	250;"	d
sethvalue2s	.\dep\Lua\src\lobject.h	273;"	d
sethvalue2s	.\include\lua\lobject.h	273;"	d
setivalue	.\dep\Lua\src\lobject.h	204;"	d
setivalue	.\include\lua\lobject.h	204;"	d
setnilvalue	.\dep\Lua\src\lobject.h	210;"	d
setnilvalue	.\include\lua\lobject.h	210;"	d
setnodekey	.\dep\Lua\src\lobject.h	485;"	d
setnodekey	.\include\lua\lobject.h	485;"	d
setnodevector	.\dep\Lua\src\ltable.c	/^static void setnodevector (lua_State *L, Table *t, unsigned int size) {$/;"	f	file:
setoah	.\dep\Lua\src\lstate.h	111;"	d
setoah	.\include\lua\lstate.h	111;"	d
setobj	.\dep\Lua\src\lobject.h	259;"	d
setobj	.\include\lua\lobject.h	259;"	d
setobj2n	.\dep\Lua\src\lobject.h	278;"	d
setobj2n	.\include\lua\lobject.h	278;"	d
setobj2s	.\dep\Lua\src\lobject.h	271;"	d
setobj2s	.\include\lua\lobject.h	271;"	d
setobj2t	.\dep\Lua\src\lobject.h	282;"	d
setobj2t	.\include\lua\lobject.h	282;"	d
setobjs2s	.\dep\Lua\src\lobject.h	269;"	d
setobjs2s	.\include\lua\lobject.h	269;"	d
setobjt2t	.\dep\Lua\src\lobject.h	276;"	d
setobjt2t	.\include\lua\lobject.h	276;"	d
setpath	.\dep\Lua\src\loadlib.c	/^static void setpath (lua_State *L, const char *fieldname, const char *envname1,$/;"	f	file:
setpause	.\dep\Lua\src\lgc.c	/^static void setpause (global_State *g) {$/;"	f	file:
setprogdir	.\dep\Lua\src\loadlib.c	/^static void setprogdir (lua_State *L) {$/;"	f	file:
setprogdir	.\dep\Lua\src\loadlib.c	182;"	d	file:
setprogdir	.\dep\Lua\src\loadlib.c	97;"	d	file:
setptvalue2s	.\dep\Lua\src\lobject.h	274;"	d
setptvalue2s	.\include\lua\lobject.h	274;"	d
setpvalue	.\dep\Lua\src\lobject.h	215;"	d
setpvalue	.\include\lua\lobject.h	215;"	d
setsvalue	.\dep\Lua\src\lobject.h	225;"	d
setsvalue	.\include\lua\lobject.h	225;"	d
setsvalue2n	.\dep\Lua\src\lobject.h	279;"	d
setsvalue2n	.\include\lua\lobject.h	279;"	d
setsvalue2s	.\dep\Lua\src\lobject.h	272;"	d
setsvalue2s	.\include\lua\lobject.h	272;"	d
settableProtected	.\dep\Lua\src\lvm.c	780;"	d	file:
settabsb	.\dep\Lua\src\ldblib.c	/^static void settabsb (lua_State *L, const char *k, int v) {$/;"	f	file:
settabsi	.\dep\Lua\src\ldblib.c	/^static void settabsi (lua_State *L, const char *k, int v) {$/;"	f	file:
settabss	.\dep\Lua\src\ldblib.c	/^static void settabss (lua_State *L, const char *k, const char *v) {$/;"	f	file:
setthvalue	.\dep\Lua\src\lobject.h	235;"	d
setthvalue	.\include\lua\lobject.h	235;"	d
settt_	.\dep\Lua\src\lobject.h	196;"	d
settt_	.\include\lua\lobject.h	196;"	d
setuservalue	.\dep\Lua\src\lobject.h	371;"	d
setuservalue	.\include\lua\lobject.h	371;"	d
setuvalue	.\dep\Lua\src\lobject.h	230;"	d
setuvalue	.\include\lua\lobject.h	230;"	d
sf	.\dep\SFML\include\SFML\Audio\AlResource.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\InputSoundFile.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\Listener.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\Music.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\OutputSoundFile.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\Sound.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundBuffer.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundFileFactory.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundFileWriter.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundRecorder.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundSource.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Audio\SoundStream.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Config.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\BlendMode.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\CircleShape.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Color.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\ConvexShape.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Drawable.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Image.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\PrimitiveType.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\RectangleShape.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\RenderTexture.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\RenderWindow.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Shader.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Shape.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Sprite.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Text.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Texture.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Transform.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Transformable.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\VertexArray.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Graphics\View.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\Ftp.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\Http.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\IpAddress.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\Packet.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\Socket.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\SocketHandle.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\SocketSelector.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\TcpListener.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\TcpSocket.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Network\UdpSocket.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Clock.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Err.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\FileInputStream.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\InputStream.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Lock.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Mutex.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\NonCopyable.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Sleep.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\String.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Thread.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\ThreadLocal.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Time.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Utf.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Vector2.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\System\Vector3.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Context.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Event.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\GlResource.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Keyboard.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Mouse.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Sensor.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Touch.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\VideoMode.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\Window.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\WindowHandle.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\include\SFML\Window\WindowStyle.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\ALCheck.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\ALCheck.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\AudioDevice.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\Listener.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\Music.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundBufferRecorder.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileFactory.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileReaderWav.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\BlendMode.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\CircleShape.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\ConvexShape.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\GLCheck.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\GLCheck.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\GLExtensions.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\GLExtensions.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\ImageLoader.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\RectangleShape.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderStates.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Text.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\TextureSaver.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\TextureSaver.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\Vertex.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\VertexArray.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Graphics\View.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Http.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Packet.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Socket.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\TcpListener.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\TcpSocket.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Unix\SocketImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Android\Activity.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Android\ResourceStream.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Clock.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Err.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Lock.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Mutex.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Sleep.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\String.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Thread.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\ThreadLocal.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Time.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\ClockImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\ClockImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\MutexImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Unix\SleepImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\SleepImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Win32\ClockImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Win32\ClockImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Win32\MutexImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Win32\SleepImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Win32\SleepImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Android\InputImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Android\InputImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Android\SensorImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Android\VideoModeImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Context.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\EGLCheck.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\EGLCheck.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\EglContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\GlContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Keyboard.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Mouse.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\HIDInputManager.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\InputImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\SFContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\SFKeyboardModifiersHelper.h	/^namespace sf {$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\SFOpenGLView.h	/^namespace sf {$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\SFWindowController.h	/^namespace sf {$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\VideoModeImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\WindowImplDelegateProtocol.h	/^namespace sf {$/;"	n
sf	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\OSX\cg_sf_conversion.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Sensor.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Touch.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\Display.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\GlxContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\InputImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\InputImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\ScopedXcbPtr.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Unix\VideoModeImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\VideoMode.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\VideoModeImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Win32\InputImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\InputImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Win32\VideoModeImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\WglContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\Window.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^namespace sf$/;"	n	file:
sf	.\dep\SFML\src\SFML\Window\WindowImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\iOS\EaglContext.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\iOS\InputImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\iOS\JoystickImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\iOS\SensorImpl.hpp	/^namespace sf$/;"	n
sf	.\dep\SFML\src\SFML\Window\iOS\WindowImplUIKit.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\AlResource.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\InputSoundFile.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\Listener.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\Music.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\OutputSoundFile.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\Sound.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundBuffer.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundBufferRecorder.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundFileFactory.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundFileReader.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundFileWriter.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundRecorder.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundSource.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Audio\SoundStream.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Config.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\BlendMode.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\CircleShape.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Color.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\ConvexShape.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Drawable.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Font.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Glyph.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Image.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\PrimitiveType.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Rect.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\RectangleShape.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\RenderStates.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\RenderTarget.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\RenderTexture.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\RenderWindow.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Shader.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Shape.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Sprite.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Text.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Texture.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Transform.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Transformable.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\Vertex.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\VertexArray.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Graphics\View.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\Ftp.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\Http.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\IpAddress.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\Packet.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\Socket.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\SocketHandle.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\SocketSelector.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\TcpListener.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\TcpSocket.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Network\UdpSocket.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Clock.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Err.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\FileInputStream.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\InputStream.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Lock.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\MemoryInputStream.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Mutex.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\NonCopyable.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Sleep.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\String.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Thread.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\ThreadLocal.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\ThreadLocalPtr.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Time.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Utf.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Vector2.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\System\Vector3.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Context.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\ContextSettings.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Event.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\GlResource.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Joystick.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Keyboard.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Mouse.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Sensor.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Touch.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\VideoMode.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\Window.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\WindowHandle.hpp	/^namespace sf$/;"	n
sf	.\include\SFML\Window\WindowStyle.hpp	/^namespace sf$/;"	n
sfLine	.\src\include\sfLine.h	/^class sfLine : public sf::Drawable {$/;"	c
sfLine	.\src\src\sfLine.cpp	/^sfLine::sfLine(const sf::Vector2f& p1, const sf::Vector2f& p2, float t, $/;"	f	class:sfLine
sfWindow	.\dep\SFML\src\SFML\Window\iOS\SFAppDelegate.hpp	/^@property (nonatomic) sf::priv::WindowImplUIKit* sfWindow; \/\/\/< Main window of the application$/;"	v
sf_ptrc_glActiveTextureARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glActiveTextureARB)(GLenum) = NULL;$/;"	v
sf_ptrc_glAttachObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glAttachObjectARB)(GLhandleARB, GLhandleARB) = NULL;$/;"	v
sf_ptrc_glBindAttribLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBindAttribLocationARB)(GLhandleARB, GLuint, const GLcharARB *) = NULL;$/;"	v
sf_ptrc_glBindFramebufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBindFramebufferEXT)(GLenum, GLuint) = NULL;$/;"	v
sf_ptrc_glBindRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBindRenderbufferEXT)(GLenum, GLuint) = NULL;$/;"	v
sf_ptrc_glBlendEquationEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBlendEquationEXT)(GLenum) = NULL;$/;"	v
sf_ptrc_glBlendEquationSeparateEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBlendEquationSeparateEXT)(GLenum, GLenum) = NULL;$/;"	v
sf_ptrc_glBlendFuncSeparateEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glBlendFuncSeparateEXT)(GLenum, GLenum, GLenum, GLenum) = NULL;$/;"	v
sf_ptrc_glCheckFramebufferStatusEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLenum (CODEGEN_FUNCPTR *sf_ptrc_glCheckFramebufferStatusEXT)(GLenum) = NULL;$/;"	v
sf_ptrc_glClientActiveTextureARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glClientActiveTextureARB)(GLenum) = NULL;$/;"	v
sf_ptrc_glCompileShaderARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glCompileShaderARB)(GLhandleARB) = NULL;$/;"	v
sf_ptrc_glCreateProgramObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLhandleARB (CODEGEN_FUNCPTR *sf_ptrc_glCreateProgramObjectARB)() = NULL;$/;"	v
sf_ptrc_glCreateShaderObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLhandleARB (CODEGEN_FUNCPTR *sf_ptrc_glCreateShaderObjectARB)(GLenum) = NULL;$/;"	v
sf_ptrc_glDeleteFramebuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glDeleteFramebuffersEXT)(GLsizei, const GLuint *) = NULL;$/;"	v
sf_ptrc_glDeleteObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glDeleteObjectARB)(GLhandleARB) = NULL;$/;"	v
sf_ptrc_glDeleteRenderbuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glDeleteRenderbuffersEXT)(GLsizei, const GLuint *) = NULL;$/;"	v
sf_ptrc_glDetachObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glDetachObjectARB)(GLhandleARB, GLhandleARB) = NULL;$/;"	v
sf_ptrc_glFramebufferRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glFramebufferRenderbufferEXT)(GLenum, GLenum, GLenum, GLuint) = NULL;$/;"	v
sf_ptrc_glFramebufferTexture1DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glFramebufferTexture1DEXT)(GLenum, GLenum, GLenum, GLuint, GLint) = NULL;$/;"	v
sf_ptrc_glFramebufferTexture2DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glFramebufferTexture2DEXT)(GLenum, GLenum, GLenum, GLuint, GLint) = NULL;$/;"	v
sf_ptrc_glFramebufferTexture3DEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glFramebufferTexture3DEXT)(GLenum, GLenum, GLenum, GLuint, GLint, GLint) = NULL;$/;"	v
sf_ptrc_glGenFramebuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGenFramebuffersEXT)(GLsizei, GLuint *) = NULL;$/;"	v
sf_ptrc_glGenRenderbuffersEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGenRenderbuffersEXT)(GLsizei, GLuint *) = NULL;$/;"	v
sf_ptrc_glGenerateMipmapEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGenerateMipmapEXT)(GLenum) = NULL;$/;"	v
sf_ptrc_glGetActiveAttribARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetActiveAttribARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetActiveUniformARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetActiveUniformARB)(GLhandleARB, GLuint, GLsizei, GLsizei *, GLint *, GLenum *, GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetAttachedObjectsARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetAttachedObjectsARB)(GLhandleARB, GLsizei, GLsizei *, GLhandleARB *) = NULL;$/;"	v
sf_ptrc_glGetAttribLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLint (CODEGEN_FUNCPTR *sf_ptrc_glGetAttribLocationARB)(GLhandleARB, const GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetFramebufferAttachmentParameterivEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetFramebufferAttachmentParameterivEXT)(GLenum, GLenum, GLenum, GLint *) = NULL;$/;"	v
sf_ptrc_glGetHandleARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLhandleARB (CODEGEN_FUNCPTR *sf_ptrc_glGetHandleARB)(GLenum) = NULL;$/;"	v
sf_ptrc_glGetInfoLogARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetInfoLogARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetObjectParameterfvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetObjectParameterfvARB)(GLhandleARB, GLenum, GLfloat *) = NULL;$/;"	v
sf_ptrc_glGetObjectParameterivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetObjectParameterivARB)(GLhandleARB, GLenum, GLint *) = NULL;$/;"	v
sf_ptrc_glGetRenderbufferParameterivEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetRenderbufferParameterivEXT)(GLenum, GLenum, GLint *) = NULL;$/;"	v
sf_ptrc_glGetShaderSourceARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetShaderSourceARB)(GLhandleARB, GLsizei, GLsizei *, GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetUniformLocationARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLint (CODEGEN_FUNCPTR *sf_ptrc_glGetUniformLocationARB)(GLhandleARB, const GLcharARB *) = NULL;$/;"	v
sf_ptrc_glGetUniformfvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetUniformfvARB)(GLhandleARB, GLint, GLfloat *) = NULL;$/;"	v
sf_ptrc_glGetUniformivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glGetUniformivARB)(GLhandleARB, GLint, GLint *) = NULL;$/;"	v
sf_ptrc_glIsFramebufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLboolean (CODEGEN_FUNCPTR *sf_ptrc_glIsFramebufferEXT)(GLuint) = NULL;$/;"	v
sf_ptrc_glIsRenderbufferEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^GLboolean (CODEGEN_FUNCPTR *sf_ptrc_glIsRenderbufferEXT)(GLuint) = NULL;$/;"	v
sf_ptrc_glLinkProgramARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glLinkProgramARB)(GLhandleARB) = NULL;$/;"	v
sf_ptrc_glRenderbufferStorageEXT	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glRenderbufferStorageEXT)(GLenum, GLenum, GLsizei, GLsizei) = NULL;$/;"	v
sf_ptrc_glShaderSourceARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glShaderSourceARB)(GLhandleARB, GLsizei, const GLcharARB **, const GLint *) = NULL;$/;"	v
sf_ptrc_glUniform1fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform1fARB)(GLint, GLfloat) = NULL;$/;"	v
sf_ptrc_glUniform1fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform1fvARB)(GLint, GLsizei, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniform1iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform1iARB)(GLint, GLint) = NULL;$/;"	v
sf_ptrc_glUniform1ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform1ivARB)(GLint, GLsizei, const GLint *) = NULL;$/;"	v
sf_ptrc_glUniform2fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform2fARB)(GLint, GLfloat, GLfloat) = NULL;$/;"	v
sf_ptrc_glUniform2fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform2fvARB)(GLint, GLsizei, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniform2iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform2iARB)(GLint, GLint, GLint) = NULL;$/;"	v
sf_ptrc_glUniform2ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform2ivARB)(GLint, GLsizei, const GLint *) = NULL;$/;"	v
sf_ptrc_glUniform3fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform3fARB)(GLint, GLfloat, GLfloat, GLfloat) = NULL;$/;"	v
sf_ptrc_glUniform3fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform3fvARB)(GLint, GLsizei, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniform3iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform3iARB)(GLint, GLint, GLint, GLint) = NULL;$/;"	v
sf_ptrc_glUniform3ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform3ivARB)(GLint, GLsizei, const GLint *) = NULL;$/;"	v
sf_ptrc_glUniform4fARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform4fARB)(GLint, GLfloat, GLfloat, GLfloat, GLfloat) = NULL;$/;"	v
sf_ptrc_glUniform4fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform4fvARB)(GLint, GLsizei, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniform4iARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform4iARB)(GLint, GLint, GLint, GLint, GLint) = NULL;$/;"	v
sf_ptrc_glUniform4ivARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniform4ivARB)(GLint, GLsizei, const GLint *) = NULL;$/;"	v
sf_ptrc_glUniformMatrix2fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniformMatrix2fvARB)(GLint, GLsizei, GLboolean, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniformMatrix3fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniformMatrix3fvARB)(GLint, GLsizei, GLboolean, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUniformMatrix4fvARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUniformMatrix4fvARB)(GLint, GLsizei, GLboolean, const GLfloat *) = NULL;$/;"	v
sf_ptrc_glUseProgramObjectARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glUseProgramObjectARB)(GLhandleARB) = NULL;$/;"	v
sf_ptrc_glValidateProgramARB	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glValidateProgramARB)(GLhandleARB) = NULL;$/;"	v
sf_ptrc_glXCreateContextAttribsARB	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^GLXContext (CODEGEN_FUNCPTR *sf_ptrc_glXCreateContextAttribsARB)(Display *, GLXFBConfig, GLXContext, Bool, const int *) = NULL;$/;"	v
sf_ptrc_glXSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^void (CODEGEN_FUNCPTR *sf_ptrc_glXSwapIntervalEXT)(Display *, GLXDrawable, int) = NULL;$/;"	v
sf_ptrc_glXSwapIntervalMESA	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int (CODEGEN_FUNCPTR *sf_ptrc_glXSwapIntervalMESA)(int) = NULL;$/;"	v
sf_ptrc_glXSwapIntervalSGI	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int (CODEGEN_FUNCPTR *sf_ptrc_glXSwapIntervalSGI)(int) = NULL;$/;"	v
sf_ptrc_wglChoosePixelFormatARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^BOOL (CODEGEN_FUNCPTR *sf_ptrc_wglChoosePixelFormatARB)(HDC, const int *, const FLOAT *, UINT, int *, UINT *) = NULL;$/;"	v
sf_ptrc_wglCreateContextAttribsARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^HGLRC (CODEGEN_FUNCPTR *sf_ptrc_wglCreateContextAttribsARB)(HDC, HGLRC, const int *) = NULL;$/;"	v
sf_ptrc_wglGetExtensionsStringARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^static const char * (CODEGEN_FUNCPTR *sf_ptrc_wglGetExtensionsStringARB)(HDC) = NULL;$/;"	v	file:
sf_ptrc_wglGetPixelFormatAttribfvARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^BOOL (CODEGEN_FUNCPTR *sf_ptrc_wglGetPixelFormatAttribfvARB)(HDC, int, int, UINT, const int *, FLOAT *) = NULL;$/;"	v
sf_ptrc_wglGetPixelFormatAttribivARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^BOOL (CODEGEN_FUNCPTR *sf_ptrc_wglGetPixelFormatAttribivARB)(HDC, int, int, UINT, const int *, int *) = NULL;$/;"	v
sf_ptrc_wglGetSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int (CODEGEN_FUNCPTR *sf_ptrc_wglGetSwapIntervalEXT)(void) = NULL;$/;"	v
sf_ptrc_wglSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^BOOL (CODEGEN_FUNCPTR *sf_ptrc_wglSwapIntervalEXT)(int) = NULL;$/;"	v
sfglx_LOAD_FAILED	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    sfglx_LOAD_FAILED = 0,$/;"	e	enum:sfglx_LoadStatus
sfglx_LOAD_SUCCEEDED	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^    sfglx_LOAD_SUCCEEDED = 1$/;"	e	enum:sfglx_LoadStatus
sfglx_LoadFunctions	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_LoadFunctions(Display *display, int screen)$/;"	f
sfglx_LoadStatus	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^enum sfglx_LoadStatus$/;"	g
sfglx_StrToExtMap	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^} sfglx_StrToExtMap;$/;"	t	typeref:struct:sfglx_StrToExtMap_s	file:
sfglx_StrToExtMap_s	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^typedef struct sfglx_StrToExtMap_s$/;"	s	file:
sfglx_ext_ARB_create_context	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_ARB_create_context = sfglx_LOAD_FAILED;$/;"	v
sfglx_ext_ARB_create_context_profile	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_ARB_create_context_profile = sfglx_LOAD_FAILED;$/;"	v
sfglx_ext_ARB_multisample	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_ARB_multisample = sfglx_LOAD_FAILED;$/;"	v
sfglx_ext_EXT_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_EXT_swap_control = sfglx_LOAD_FAILED;$/;"	v
sfglx_ext_MESA_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_MESA_swap_control = sfglx_LOAD_FAILED;$/;"	v
sfglx_ext_SGI_swap_control	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.cpp	/^int sfglx_ext_SGI_swap_control = sfglx_LOAD_FAILED;$/;"	v
sfogl_GetMajorVersion	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_GetMajorVersion()$/;"	f
sfogl_GetMinorVersion	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_GetMinorVersion()$/;"	f
sfogl_IsVersionGEQ	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_IsVersionGEQ(int majorVersion, int minorVersion)$/;"	f
sfogl_LOAD_FAILED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^    sfogl_LOAD_FAILED = 0,$/;"	e	enum:sfogl_LoadStatus
sfogl_LOAD_SUCCEEDED	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^    sfogl_LOAD_SUCCEEDED = 1$/;"	e	enum:sfogl_LoadStatus
sfogl_LoadFunctions	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_LoadFunctions()$/;"	f
sfogl_LoadStatus	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^enum sfogl_LoadStatus$/;"	g
sfogl_StrToExtMap	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^} sfogl_StrToExtMap;$/;"	t	typeref:struct:sfogl_StrToExtMap_s	file:
sfogl_StrToExtMap_s	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^typedef struct sfogl_StrToExtMap_s$/;"	s	file:
sfogl_ext_ARB_fragment_shader	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_fragment_shader = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_ARB_multitexture	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_multitexture = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_ARB_shader_objects	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_shader_objects = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_ARB_shading_language_100	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_shading_language_100 = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_ARB_texture_non_power_of_two	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_texture_non_power_of_two = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_ARB_vertex_shader	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_ARB_vertex_shader = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_blend_equation_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_blend_equation_separate = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_blend_func_separate	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_blend_func_separate = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_blend_minmax	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_blend_minmax = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_blend_subtract	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_blend_subtract = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_framebuffer_object	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_framebuffer_object = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_EXT_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_EXT_texture_edge_clamp = sfogl_LOAD_FAILED;$/;"	v
sfogl_ext_SGIS_texture_edge_clamp	.\dep\SFML\src\SFML\Graphics\GLLoader.cpp	/^int sfogl_ext_SGIS_texture_edge_clamp = sfogl_LOAD_FAILED;$/;"	v
sfwgl_LOAD_FAILED	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    sfwgl_LOAD_FAILED = 0,$/;"	e	enum:sfwgl_LoadStatus
sfwgl_LOAD_SUCCEEDED	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^    sfwgl_LOAD_SUCCEEDED = 1$/;"	e	enum:sfwgl_LoadStatus
sfwgl_LoadFunctions	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_LoadFunctions(HDC hdc)$/;"	f
sfwgl_LoadStatus	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	/^enum sfwgl_LoadStatus$/;"	g
sfwgl_StrToExtMap	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^} sfwgl_StrToExtMap;$/;"	t	typeref:struct:sfwgl_StrToExtMap_s	file:
sfwgl_StrToExtMap_s	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^typedef struct sfwgl_StrToExtMap_s$/;"	s	file:
sfwgl_ext_ARB_create_context	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_ext_ARB_create_context = sfwgl_LOAD_FAILED;$/;"	v
sfwgl_ext_ARB_create_context_profile	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_ext_ARB_create_context_profile = sfwgl_LOAD_FAILED;$/;"	v
sfwgl_ext_ARB_multisample	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_ext_ARB_multisample = sfwgl_LOAD_FAILED;$/;"	v
sfwgl_ext_ARB_pixel_format	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_ext_ARB_pixel_format = sfwgl_LOAD_FAILED;$/;"	v
sfwgl_ext_EXT_swap_control	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.cpp	/^int sfwgl_ext_EXT_swap_control = sfwgl_LOAD_FAILED;$/;"	v
shader	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates
shader	.\include\SFML\Graphics\RenderStates.hpp	/^    const Shader*  shader;    \/\/\/< Shader$/;"	m	class:sf::RenderStates
sharedContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^    ContextType* sharedContext = NULL;$/;"	m	namespace:__anon140	file:
sharedDisplay	.\dep\SFML\src\SFML\Window\Unix\Display.cpp	/^    Display* sharedDisplay = NULL;$/;"	m	namespace:__anon144	file:
shift	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    int                     shift;$/;"	m	struct:FT_Outline_Funcs_
shift	.\dep\SFML\include\SFML\Window\Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent
shift	.\include\SFML\Window\Event.hpp	/^        bool          shift;   \/\/\/< Is the Shift key pressed?$/;"	m	struct:sf::Event::KeyEvent
shoot	.\src\src\Tower.cpp	/^void Tower::shoot() {$/;"	f	class:Tower
shortNames	.\include\sol\Catch\include\external\clara.h	/^        std::vector<std::string> shortNames;$/;"	m	struct:Clara::OptionArgProperties
short_demangle	.\include\sol\single\sol\sol.hpp	/^		inline std::string short_demangle() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
short_demangle	.\include\sol\sol\demangle.hpp	/^		inline std::string short_demangle() {$/;"	f	namespace:sol::detail
short_demangle_once	.\include\sol\single\sol\sol.hpp	/^		inline std::string short_demangle_once() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
short_demangle_once	.\include\sol\sol\demangle.hpp	/^		inline std::string short_demangle_once() {$/;"	f	namespace:sol::detail
short_metrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    void*      short_metrics;$/;"	m	struct:TT_HoriHeader_
short_metrics	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    void*      short_metrics;$/;"	m	struct:TT_VertHeader_
short_src	.\dep\Lua\src\lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
short_src	.\include\lua\lua.h	/^  char short_src[LUA_IDSIZE]; \/* (S) *\/$/;"	m	struct:lua_Debug
shouldContinueOnFailure	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }$/;"	f	namespace:Catch
shouldContinueOnFailure	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool shouldContinueOnFailure( int flags )    { return ( flags & ResultDisposition::ContinueOnFailure ) != 0; }$/;"	f	namespace:Catch
shouldDebugBreak	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool shouldDebugBreak() const { return m_data.shouldDebugBreak; }$/;"	f	class:Catch::Config
shouldDebugBreak	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool shouldDebugBreak;$/;"	m	struct:Catch::ConfigData
shouldDebugBreak	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    bool ResultBuilder::shouldDebugBreak() const { return m_shouldDebugBreak; }$/;"	f	class:Catch::ResultBuilder
shouldRedirectStdOut	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool shouldRedirectStdOut;$/;"	m	struct:Catch::ReporterPreferences
shouldRedirectStdout	.\include\sol\Catch\projects\runners\iTchRunner\internal\iTchRunnerReporter.h	/^        virtual bool shouldRedirectStdout$/;"	f	class:Catch::iTchRunnerReporter
shouldRun	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        bool shouldRun() const {$/;"	f	class:Catch::RunningSection
shouldSuppressFailure	.\include\sol\Catch\include\internal\catch_result_type.h	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }$/;"	f	namespace:Catch
shouldSuppressFailure	.\include\sol\Catch\single_include\catch.hpp	/^    inline bool shouldSuppressFailure( int flags )      { return ( flags & ResultDisposition::SuppressFail ) != 0; }$/;"	f	namespace:Catch
showDurations	.\include\sol\Catch\include\internal\catch_config.hpp	/^        ShowDurations::OrNot showDurations;$/;"	m	struct:Catch::ConfigData
showDurations	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual ShowDurations::OrNot showDurations() const { return m_data.showDurations; }$/;"	f	class:Catch::Config
showHelp	.\include\sol\Catch\include\catch_session.hpp	/^        void showHelp( std::string const& processName ) {$/;"	f	class:Catch::Session
showHelp	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool showHelp() const { return m_data.showHelp; }$/;"	f	class:Catch::Config
showHelp	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool showHelp;$/;"	m	struct:Catch::ConfigData
showInvisibles	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool showInvisibles() const { return m_data.showInvisibles; }$/;"	f	class:Catch::Config
showInvisibles	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool showInvisibles;$/;"	m	struct:Catch::ConfigData
showSuccessfulTests	.\include\sol\Catch\include\internal\catch_config.hpp	/^        bool showSuccessfulTests;$/;"	m	struct:Catch::ConfigData
shrlen	.\dep\Lua\src\lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString
shrlen	.\include\lua\lobject.h	/^  lu_byte shrlen;  \/* length for short strings *\/$/;"	m	struct:TString
shutil	.\include\sol\Catch\scripts\approve.py	/^import shutil$/;"	i
signature_type	.\include\sol\single\sol\sol.hpp	/^				typedef std::remove_pointer_t<free_function_pointer_type> signature_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
signature_type	.\include\sol\sol\bind_traits.hpp	/^				typedef std::remove_pointer_t<free_function_pointer_type> signature_type;$/;"	t	struct:sol::meta::meta_detail::basic_traits
simple_tag	.\include\sol\single\sol\sol.hpp	/^	struct simple_tag {} const simple{};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
simple_tag	.\include\sol\sol\simple_usertype_metatable.hpp	/^	struct simple_tag {} const simple{};$/;"	s	namespace:sol
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L) : simple_usertype_metatable(meta::condition<meta::all<std::is_default_constructible<T>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), L) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, Arg&& arg, Args&&... args) : simple_usertype_metatable(L, meta::condition<meta::all<std::is_default_constructible<T>, meta::neg<usertype_detail::has_constructor<Args...>>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, constructor_wrapper<Fxs...> constructorlist, Args&&... args) : simple_usertype_metatable(L, usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, constructors<CArgs...> constructorlist, Args&&... args) : simple_usertype_metatable(L, usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::add_destructor_tag, Args&&... args) : simple_usertype_metatable(L, usertype_detail::verified, std::forward<Args>(args)..., "__gc", default_destructor) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::check_destructor_tag, Args&&... args) : simple_usertype_metatable(L, meta::condition<meta::all<std::is_destructible<T>, meta::neg<usertype_detail::has_destructor<Args...>>>, usertype_detail::add_destructor_tag, usertype_detail::verified_tag>(), std::forward<Args>(args)...) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::verified_tag v, Args&&... args) : simple_usertype_metatable(v, std::make_index_sequence<sizeof...(Args) \/ 2>(), L, std::forward_as_tuple(std::forward<Args>(args)...)) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		simple_usertype_metatable(usertype_detail::verified_tag, std::index_sequence<I...>, lua_State* L, Tuple&& args)$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\single\sol\sol.hpp	/^	struct simple_usertype_metatable : usertype_detail::registrar {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L) : simple_usertype_metatable(meta::condition<meta::all<std::is_default_constructible<T>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), L) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, Arg&& arg, Args&&... args) : simple_usertype_metatable(L, meta::condition<meta::all<std::is_default_constructible<T>, meta::neg<usertype_detail::has_constructor<Args...>>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), std::forward<Arg>(arg), std::forward<Args>(args)...) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, constructor_wrapper<Fxs...> constructorlist, Args&&... args) : simple_usertype_metatable(L, usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, constructors<CArgs...> constructorlist, Args&&... args) : simple_usertype_metatable(L, usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::add_destructor_tag, Args&&... args) : simple_usertype_metatable(L, usertype_detail::verified, std::forward<Args>(args)..., "__gc", default_destructor) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::check_destructor_tag, Args&&... args) : simple_usertype_metatable(L, meta::condition<meta::all<std::is_destructible<T>, meta::neg<usertype_detail::has_destructor<Args...>>>, usertype_detail::add_destructor_tag, usertype_detail::verified_tag>(), std::forward<Args>(args)...) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(lua_State* L, usertype_detail::verified_tag v, Args&&... args) : simple_usertype_metatable(v, std::make_index_sequence<sizeof...(Args) \/ 2>(), L, std::forward_as_tuple(std::forward<Args>(args)...)) {}$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^		simple_usertype_metatable(usertype_detail::verified_tag, std::index_sequence<I...>, lua_State* L, Tuple&& args)$/;"	f	struct:sol::simple_usertype_metatable
simple_usertype_metatable	.\include\sol\sol\simple_usertype_metatable.hpp	/^	struct simple_usertype_metatable : usertype_detail::registrar {$/;"	s	namespace:sol
simpleexp	.\dep\Lua\src\lparser.c	/^static void simpleexp (LexState *ls, expdesc *v) {$/;"	f	file:
singleInstance	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^WindowImplAndroid* WindowImplAndroid::singleInstance = NULL;$/;"	m	class:sf::priv::WindowImplAndroid	file:
singleInstance	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.hpp	/^    static WindowImplAndroid* singleInstance;$/;"	m	class:sf::priv::WindowImplAndroid
singlematch	.\dep\Lua\src\lstrlib.c	/^static int singlematch (MatchState *ms, const char *s, const char *p,$/;"	f	file:
singlestep	.\dep\Lua\src\lgc.c	/^static lu_mem singlestep (lua_State *L) {$/;"	f	file:
singlevar	.\dep\Lua\src\lparser.c	/^static void singlevar (LexState *ls, expdesc *var) {$/;"	f	file:
singlevaraux	.\dep\Lua\src\lparser.c	/^static void singlevaraux (FuncState *fs, TString *n, expdesc *var, int base) {$/;"	f	file:
size	.\dep\Lua\src\lauxlib.c	/^  size_t size;$/;"	m	struct:LoadS	file:
size	.\dep\Lua\src\lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	.\dep\Lua\src\lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon14
size	.\dep\Lua\src\lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	.\dep\Lua\src\lstate.h	/^  int size;$/;"	m	struct:stringtable
size	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos    size;$/;"	m	struct:FT_Bitmap_Size_
size	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Size           size;$/;"	m	struct:FT_FaceRec_
size	.\dep\SFML\extlibs\headers\freetype2\ftsizes.h	/^  FT_Activate_Size( FT_Size  size );$/;"	v
size	.\dep\SFML\extlibs\headers\freetype2\ftsizes.h	/^  FT_Done_Size( FT_Size  size );$/;"	v
size	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    unsigned long        size;$/;"	m	struct:FT_StreamRec_
size	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc  size[257];$/;"	m	struct:__anon97
size	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc  size[288];$/;"	m	struct:__anon101
size	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon106
size	.\dep\SFML\include\SFML\Window\Event.hpp	/^        SizeEvent             size;              \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon114
size	.\include\SFML\Window\Event.hpp	/^        SizeEvent             size;              \/\/\/< Size event parameters (Event::Resized)$/;"	m	union:sf::Event::__anon174
size	.\include\lua\lauxlib.h	/^  size_t size;  \/* buffer size *\/$/;"	m	struct:luaL_Buffer
size	.\include\lua\lparser.h	/^    int size;$/;"	m	struct:Dyndata::__anon165
size	.\include\lua\lparser.h	/^  int size;  \/* array size *\/$/;"	m	struct:Labellist
size	.\include\lua\lstate.h	/^  int size;$/;"	m	struct:stringtable
size	.\include\sol\Catch\include\external\clara.h	/^        std::size_t size() const { return lines.size(); }$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
size	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::size_t size() const { return lines.size(); }$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
size	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    virtual std::size_t size() const {$/;"	f	class:Catch::BetweenGenerator
size	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    virtual std::size_t size() const {$/;"	f	class:Catch::ValuesGenerator
size	.\include\sol\single\sol\sol.hpp	/^			std::size_t size() const {$/;"	f	struct:sol::sol::string_detail::string_shim
size	.\include\sol\single\sol\sol.hpp	/^	size_t size;$/;"	m	struct:sol::kepler_lua_compat_get_string_view
size	.\include\sol\single\sol\sol.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	f	struct:sol::types
size	.\include\sol\sol\compatibility\5.1.0.h	/^	size_t size;$/;"	m	struct:kepler_lua_compat_get_string_view
size	.\include\sol\sol\string_shim.hpp	/^			std::size_t size() const {$/;"	f	struct:sol::string_detail::string_shim
size	.\include\sol\sol\table_core.hpp	/^		size_t size() const {$/;"	f	class:sol::basic_table_core
size	.\include\sol\sol\tuple.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	f	struct:sol::types
size	.\src\include\Path.h	/^	unsigned int size() { return points.size(); }$/;"	f	class:Path
sizeCclosure	.\dep\Lua\src\lfunc.h	14;"	d
sizeCclosure	.\include\lua\lfunc.h	14;"	d
sizeLclosure	.\dep\Lua\src\lfunc.h	17;"	d
sizeLclosure	.\include\lua\lfunc.h	17;"	d
size_type	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        typedef std::size_t size_type;$/;"	t	struct:__anon187::minimal_allocator	file:
size_type	.\include\sol\single\sol\sol.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
size_type	.\include\sol\sol\variadic_args.hpp	/^		typedef std::size_t size_type;$/;"	t	struct:sol::variadic_args
sizearray	.\dep\Lua\src\lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table
sizearray	.\include\lua\lobject.h	/^  unsigned int sizearray;  \/* size of 'array' array *\/$/;"	m	struct:Table
sizecode	.\dep\Lua\src\lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizecode	.\include\lua\lobject.h	/^  int sizecode;$/;"	m	struct:Proto
sizek	.\dep\Lua\src\lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto
sizek	.\include\lua\lobject.h	/^  int sizek;  \/* size of 'k' *\/$/;"	m	struct:Proto
sizelineinfo	.\dep\Lua\src\lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelineinfo	.\include\lua\lobject.h	/^  int sizelineinfo;$/;"	m	struct:Proto
sizelocvars	.\dep\Lua\src\lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizelocvars	.\include\lua\lobject.h	/^  int sizelocvars;$/;"	m	struct:Proto
sizelstring	.\dep\Lua\src\lstring.h	15;"	d
sizelstring	.\include\lua\lstring.h	15;"	d
sizeludata	.\dep\Lua\src\lstring.h	17;"	d
sizeludata	.\include\lua\lstring.h	17;"	d
sizenode	.\dep\Lua\src\lobject.h	519;"	d
sizenode	.\include\lua\lobject.h	519;"	d
sizep	.\dep\Lua\src\lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto
sizep	.\include\lua\lobject.h	/^  int sizep;  \/* size of 'p' *\/$/;"	m	struct:Proto
sizer	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct FalseType { char sizer[2]; };$/;"	m	struct:Catch::Detail::FalseType
sizer	.\include\sol\Catch\include\internal\catch_tostring.h	/^    struct TrueType { char sizer[1]; };$/;"	m	struct:Catch::Detail::TrueType
sizer	.\include\sol\Catch\single_include\catch.hpp	/^    struct FalseType { char sizer[2]; };$/;"	m	struct:Catch::Detail::FalseType
sizer	.\include\sol\Catch\single_include\catch.hpp	/^    struct TrueType { char sizer[1]; };$/;"	m	struct:Catch::Detail::TrueType
sizes_list	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ListRec        sizes_list;$/;"	m	struct:FT_FaceRec_
sizeudata	.\dep\Lua\src\lstring.h	18;"	d
sizeudata	.\include\lua\lstring.h	18;"	d
sizeupvalues	.\dep\Lua\src\lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto
sizeupvalues	.\include\lua\lobject.h	/^  int sizeupvalues;  \/* size of 'upvalues' *\/$/;"	m	struct:Proto
skip	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   void     (*skip)  (void *user,int n);                 \/\/ skip the next 'n' bytes, or 'unget' the last -n bytes if negative$/;"	m	struct:__anon94
skip	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^    void skip(void* user, int size)$/;"	f	namespace:__anon126
skipBOM	.\dep\Lua\src\lauxlib.c	/^static int skipBOM (LoadF *lf) {$/;"	f	file:
skipTest	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::skipTest( TestCaseInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter
skip_sep	.\dep\Lua\src\llex.c	/^static int skip_sep (LexState *ls) {$/;"	f	file:
skipcomment	.\dep\Lua\src\lauxlib.c	/^static int skipcomment (LoadF *lf, int *cp) {$/;"	f	file:
skipnoopstat	.\dep\Lua\src\lparser.c	/^static void skipnoopstat (LexState *ls) {$/;"	f	file:
sleep	.\dep\SFML\src\SFML\System\Sleep.cpp	/^void sleep(Time duration)$/;"	f	namespace:sf
sleepImpl	.\dep\SFML\src\SFML\System\Unix\SleepImpl.cpp	/^void sleepImpl(Time time)$/;"	f	namespace:sf::priv
sleepImpl	.\dep\SFML\src\SFML\System\Win32\SleepImpl.cpp	/^void sleepImpl(Time time)$/;"	f	namespace:sf::priv
slot	.\dep\SFML\extlibs\headers\freetype2\ftbitmap.h	/^  FT_GlyphSlot_Own_Bitmap( FT_GlyphSlot  slot );$/;"	v
slot	.\dep\SFML\extlibs\headers\freetype2\ftsynth.h	/^  FT_GlyphSlot_Embolden( FT_GlyphSlot  slot );$/;"	v
slot	.\dep\SFML\extlibs\headers\freetype2\ftsynth.h	/^  FT_GlyphSlot_Oblique( FT_GlyphSlot  slot );$/;"	v
smoothing_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int smoothing_factor;		\/* 1..100, or 0 for no input smoothing *\/$/;"	m	struct:jpeg_compress_struct
snap_heights	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   snap_heights[13];  \/* including std height *\/$/;"	m	struct:PS_PrivateRec_
snap_widths	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short   snap_widths [13];  \/* including std width  *\/$/;"	m	struct:PS_PrivateRec_
socketCount	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^    int    socketCount;  \/\/\/< Number of socket handles$/;"	m	struct:sf::SocketSelector::SocketSelectorImpl	file:
socketsReady	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^    fd_set socketsReady; \/\/\/< Set containing handles of the sockets that are ready$/;"	m	struct:sf::SocketSelector::SocketSelectorImpl	file:
sof	.\dep\Lua\src\ltablib.c	250;"	d	file:
sol	.\include\sol\Optional\optional.hpp	/^namespace sol{$/;"	n
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	class:sol::sol::call_syntax::call_status
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	namespace:sol
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
sol	.\include\sol\single\sol\sol.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\bind_traits.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\call.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\coroutine.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\debug.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\demangle.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\deprecate.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\error.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_result.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types_core.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types_overloaded.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types_stateful.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types_stateless.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\function_types_templated.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\inheritance.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\load_result.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\object.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\optional.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\overload.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\property.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\protect.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\protected_function.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\protected_function_result.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\proxy.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\proxy_base.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\raii.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\reference.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\resolve.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\simple_usertype_metatable.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_check.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_check_get.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_core.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_field.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_get.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_guard.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_pop.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_probe.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_proxy.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_push.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\stack_reference.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\state.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\state_view.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\string_shim.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\table.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\table_core.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\table_iterator.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\thread.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\tie.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\traits.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\tuple.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\types.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\userdata.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\usertype.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\usertype_metatable.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\usertype_traits.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\variadic_args.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\sol\wrapper.hpp	/^namespace sol {$/;"	n
sol	.\include\sol\test_customizations.cpp	/^namespace sol {$/;"	n	file:
sol_dir	.\include\sol\bootstrap.py	/^sol_dir = os.path.join(script_dir, 'sol')$/;"	v
sol_file	.\include\sol\bootstrap.py	/^sol_file = os.path.join(script_dir, 'sol.hpp')$/;"	v
some	.\include\sol\Catch\include\internal\catch_option.hpp	/^        bool some() const { return nullableValue != CATCH_NULL; }$/;"	f	class:Catch::Option
something	.\include\sol\test_usertypes.cpp	/^bool something() {$/;"	f
sort	.\dep\Lua\src\ltablib.c	/^static int sort (lua_State *L) {$/;"	f	file:
sortTests	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    inline std::vector<TestCase> sortTests( IConfig const& config, std::vector<TestCase> const& unsortedTestCases ) {$/;"	f	namespace:Catch
sort_comp	.\dep\Lua\src\ltablib.c	/^static int sort_comp (lua_State *L, int a, int b) {$/;"	f	file:
source	.\dep\Lua\src\llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	.\dep\Lua\src\lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto
source	.\dep\Lua\src\lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
source	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    const void*             source;$/;"	m	struct:FT_Raster_Params_
source	.\include\lua\llex.h	/^  TString *source;  \/* current source name *\/$/;"	m	struct:LexState
source	.\include\lua\lobject.h	/^  TString  *source;  \/* used for debug information *\/$/;"	m	struct:Proto
source	.\include\lua\lua.h	/^  const char *source;	\/* (S) *\/$/;"	m	struct:lua_Debug
source_suffix	.\include\sol\docs\source\conf.py	/^source_suffix = '.rst'$/;"	v
sp	.\include\sol\single\sol\sol.hpp	/^		stack_proxy sp;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
sp	.\include\sol\sol\variadic_args.hpp	/^		stack_proxy sp;$/;"	m	struct:sol::va_iterator
spec_end	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            spec_end;$/;"	m	struct:__anon98
spec_start	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            spec_start;$/;"	m	struct:__anon98
special_destruct	.\include\sol\single\sol\sol.hpp	/^		inline void special_destruct(void* memory) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
special_destruct	.\include\sol\sol\stack_core.hpp	/^		inline void special_destruct(void* memory) {$/;"	f	namespace:sol::detail
spellings	.\include\sol\Catch\include\internal\catch_list.hpp	/^        std::set<std::string> spellings;$/;"	m	struct:Catch::TagInfo
sphinx_ok	.\include\sol\docs\make.bat	/^:sphinx_ok$/;"	l
sphinx_python	.\include\sol\docs\make.bat	/^:sphinx_python$/;"	l
spliceLine	.\include\sol\Catch\include\external\clara.h	/^        void spliceLine( std::size_t _indent, std::string& _remainder, std::size_t _pos ) {$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
spliceLine	.\include\sol\Catch\include\external\tbc_text_format.h	/^        void spliceLine( std::size_t _indent, std::string& _remainder, std::size_t _pos ) {$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
split	.\src\src\Convert.cpp	/^	std::vector<std::string> split(std::string str, char delim) {$/;"	f	namespace:convert
sqrtLength	.\src\src\Vector2.cpp	/^float Vector2::sqrtLength() {$/;"	f	class:Vector2
src	.\dep\Lua\src\lstrlib.c	/^  const char *src;  \/* current position *\/$/;"	m	struct:GMatchState	file:
src	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_source_mgr * src;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_source_mgr
srcHeight	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int srcXOrigin, srcYOrigin, srcWidth, srcHeight;$/;"	m	struct:__anon148
srcWidth	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int srcXOrigin, srcYOrigin, srcWidth, srcHeight;$/;"	m	struct:__anon148
srcXOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int srcXOrigin, srcYOrigin, srcWidth, srcHeight;$/;"	m	struct:__anon148
srcYOrigin	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int srcXOrigin, srcYOrigin, srcWidth, srcHeight;$/;"	m	struct:__anon148
src_end	.\dep\Lua\src\lstrlib.c	/^  const char *src_end;  \/* end ('\\0') of source string *\/$/;"	m	struct:MatchState	file:
src_init	.\dep\Lua\src\lstrlib.c	/^  const char *src_init;  \/* init of source string *\/$/;"	m	struct:MatchState	file:
ss	.\include\sol\single.py	/^ss = StringIO()$/;"	v
sstream	.\include\sol\single.py	/^    import cStringIO as sstream$/;"	i
stack	.\dep\Lua\src\lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack	.\include\lua\lstate.h	/^  StkId stack;  \/* stack base *\/$/;"	m	struct:lua_State
stack	.\include\sol\single\sol\sol.hpp	/^	namespace stack {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol
stack	.\include\sol\single\sol\sol.hpp	/^	namespace stack {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
stack	.\include\sol\single\sol\sol.hpp	/^	namespace stack {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol
stack	.\include\sol\single\sol\sol.hpp	/^	namespace stack {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
stack	.\include\sol\sol\function.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\function_types.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\proxy.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\reference.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\simple_usertype_metatable.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_check.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_check_get.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_core.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_field.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_get.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_pop.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_probe.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_proxy.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\stack_push.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\usertype.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\usertype_metatable.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\sol\variadic_args.hpp	/^	namespace stack {$/;"	n	namespace:sol
stack	.\include\sol\test_customizations.cpp	/^	namespace stack {$/;"	n	namespace:sol	file:
stack_detail	.\include\sol\single\sol\sol.hpp	/^		namespace stack_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::stack
stack_detail	.\include\sol\sol\stack.hpp	/^		namespace stack_detail {$/;"	n	namespace:sol::stack
stack_detail	.\include\sol\sol\stack_check.hpp	/^		namespace stack_detail {$/;"	n	namespace:sol::stack
stack_detail	.\include\sol\sol\stack_core.hpp	/^		namespace stack_detail {$/;"	n	namespace:sol::stack
stack_fail	.\include\sol\sol\stack_guard.hpp	/^		inline void stack_fail(int, int) {$/;"	f	namespace:sol::detail
stack_global_table	.\include\sol\single\sol\sol.hpp	/^	typedef stack_table_core<true> stack_global_table;$/;"	t	class:sol::sol::call_syntax::call_status::type
stack_global_table	.\include\sol\sol\types.hpp	/^	typedef stack_table_core<true> stack_global_table;$/;"	t	class:sol::call_syntax::call_status::type
stack_guard	.\include\sol\sol\stack_guard.hpp	/^		stack_guard(lua_State* L) : stack_guard(L, lua_gettop(L)) {}$/;"	f	struct:sol::stack_guard
stack_guard	.\include\sol\sol\stack_guard.hpp	/^		stack_guard(lua_State* L, int top, std::function<void(int, int)> fx = detail::stack_fail) : L(L), top(top), on_mismatch(std::move(fx)) {}$/;"	f	struct:sol::stack_guard
stack_guard	.\include\sol\sol\stack_guard.hpp	/^	struct stack_guard {$/;"	s	namespace:sol
stack_index	.\include\sol\single\sol\sol.hpp	/^		int stack_index() const { return index; }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
stack_index	.\include\sol\single\sol\sol.hpp	/^		int stack_index() const { return index; };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
stack_index	.\include\sol\single\sol\sol.hpp	/^		int stack_index() const { return index; };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
stack_index	.\include\sol\sol\function_result.hpp	/^		int stack_index() const { return index; };$/;"	f	struct:sol::function_result
stack_index	.\include\sol\sol\stack_proxy.hpp	/^		int stack_index() const { return index; }$/;"	f	struct:sol::stack_proxy
stack_index	.\include\sol\sol\variadic_args.hpp	/^		int stack_index() const { return index; };$/;"	f	struct:sol::variadic_args
stack_init	.\dep\Lua\src\lstate.c	/^static void stack_init (lua_State *L1, lua_State *L) {$/;"	f	file:
stack_last	.\dep\Lua\src\lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stack_last	.\include\lua\lstate.h	/^  StkId stack_last;  \/* last free slot in the stack *\/$/;"	m	struct:lua_State
stack_proxy	.\include\sol\single\sol\sol.hpp	/^		stack_proxy() : L(nullptr), index(0) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
stack_proxy	.\include\sol\single\sol\sol.hpp	/^		stack_proxy(lua_State* L, int index) : L(L), index(index) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::stack_proxy
stack_proxy	.\include\sol\single\sol\sol.hpp	/^	struct stack_proxy : public proxy_base<stack_proxy> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol
stack_proxy	.\include\sol\sol\stack_proxy.hpp	/^		stack_proxy() : L(nullptr), index(0) {}$/;"	f	struct:sol::stack_proxy
stack_proxy	.\include\sol\sol\stack_proxy.hpp	/^		stack_proxy(lua_State* L, int index) : L(L), index(index) {}$/;"	f	struct:sol::stack_proxy
stack_proxy	.\include\sol\sol\stack_proxy.hpp	/^	struct stack_proxy : public proxy_base<stack_proxy> {$/;"	s	namespace:sol
stack_reference	.\include\sol\single\sol\sol.hpp	/^		stack_reference(nil_t) noexcept : stack_reference() {};$/;"	f	class:sol::sol::call_syntax::call_status::sol::stack_reference
stack_reference	.\include\sol\single\sol\sol.hpp	/^	class stack_reference {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol
stack_reference	.\include\sol\sol\stack_reference.hpp	/^		stack_reference(nil_t) noexcept : stack_reference() {};$/;"	f	class:sol::stack_reference
stack_reference	.\include\sol\sol\stack_reference.hpp	/^	class stack_reference {$/;"	c	namespace:sol
stack_table	.\include\sol\single\sol\sol.hpp	/^	typedef stack_table_core<false> stack_table;$/;"	t	class:sol::sol::call_syntax::call_status::type
stack_table	.\include\sol\sol\types.hpp	/^	typedef stack_table_core<false> stack_table;$/;"	t	class:sol::call_syntax::call_status::type
stackerror	.\dep\Lua\src\ldo.c	/^static void stackerror (lua_State *L) {$/;"	f	file:
stackindex	.\include\sol\single\sol\sol.hpp	/^			int stackindex;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::handler
stackindex	.\include\sol\sol\protected_function.hpp	/^			int stackindex;$/;"	m	struct:sol::basic_protected_function::handler
stackinuse	.\dep\Lua\src\ldo.c	/^static int stackinuse (lua_State *L) {$/;"	f	file:
stacksize	.\dep\Lua\src\lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
stacksize	.\include\lua\lstate.h	/^  int stacksize;$/;"	m	struct:lua_State
stacktop	.\include\sol\single\sol\sol.hpp	/^		int stacktop;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
stacktop	.\include\sol\single\sol\sol.hpp	/^		int stacktop;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
stacktop	.\include\sol\sol\variadic_args.hpp	/^		int stacktop;$/;"	m	struct:sol::va_iterator
stacktop	.\include\sol\sol\variadic_args.hpp	/^		int stacktop;$/;"	m	struct:sol::variadic_args
standard_height	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UShort  standard_height[1];$/;"	m	struct:PS_PrivateRec_
standard_include	.\include\sol\single.py	/^standard_include = re.compile(r'#include <(.*?)>')$/;"	v
standard_width	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UShort  standard_width[1];$/;"	m	struct:PS_PrivateRec_
start	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^bool SoundRecorder::start(unsigned int sampleRate)$/;"	f	class:sf::SoundRecorder
start	.\include\sol\Catch\include\internal\catch_timer.hpp	/^    void Timer::start() {$/;"	f	class:Catch::Timer
start	.\src\src\Game.cpp	/^void Game::start() {$/;"	f	class:Game
startCycle	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^        void startCycle() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
startElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& startElement( std::string const& name ) {$/;"	f	class:Catch::XmlWriter
startNewMode	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        void startNewMode( Mode mode, std::size_t start ) {$/;"	f	class:Catch::TestSpecParser
startRun	.\include\sol\Catch\include\internal\catch_test_case_tracker.hpp	/^    inline ITracker& TrackerContext::startRun() {$/;"	f	class:Catch::TestCaseTracking::TrackerContext
start_capture	.\dep\Lua\src\lstrlib.c	/^static const char *start_capture (MatchState *ms, const char *s,$/;"	f	file:
start_x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon108
start_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int start_x, start_y;$/;"	m	struct:__anon108
startpc	.\dep\Lua\src\lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
startpc	.\include\lua\lobject.h	/^  int startpc;  \/* first point where variable is active *\/$/;"	m	struct:LocVar
startsWith	.\include\sol\Catch\include\external\clara.h	/^        inline bool startsWith( std::string const& str, std::string const& prefix ) {$/;"	f	namespace:Clara::Detail
startsWith	.\include\sol\Catch\include\internal\catch_common.hpp	/^    bool startsWith( std::string const& s, std::string const& prefix ) {$/;"	f	namespace:Catch
state	.\dep\SFML\src\SFML\Window\JoystickManager.hpp	/^        JoystickState            state;          \/\/\/< The current joystick state$/;"	m	struct:sf::priv::JoystickManager::Item
state	.\include\sol\single\sol\sol.hpp	/^		state(lua_CFunction panic = default_at_panic) : unique_base(luaL_newstate(), lua_close),$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::state
state	.\include\sol\single\sol\sol.hpp	/^		state(lua_CFunction panic, lua_Alloc alfunc, void* alpointer = nullptr) : unique_base(lua_newstate(alfunc, alpointer), lua_close),$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::state
state	.\include\sol\single\sol\sol.hpp	/^		state_view state() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
state	.\include\sol\single\sol\sol.hpp	/^	class state : private std::unique_ptr<lua_State, void(*)(lua_State*)>, public state_view {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol
state	.\include\sol\sol\state.hpp	/^		state(lua_CFunction panic = default_at_panic) : unique_base(luaL_newstate(), lua_close),$/;"	f	class:sol::state
state	.\include\sol\sol\state.hpp	/^		state(lua_CFunction panic, lua_Alloc alfunc, void* alpointer = nullptr) : unique_base(lua_newstate(alfunc, alpointer), lua_close),$/;"	f	class:sol::state
state	.\include\sol\sol\state.hpp	/^	class state : private std::unique_ptr<lua_State, void(*)(lua_State*)>, public state_view {$/;"	c	namespace:sol
state	.\include\sol\sol\thread.hpp	/^		state_view state() const {$/;"	f	class:sol::thread
state_view	.\include\sol\single\sol\sol.hpp	/^	class state_view {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol
state_view	.\include\sol\sol\state_view.hpp	/^		state_view(lua_State* L) :$/;"	f	class:sol::state_view
state_view	.\include\sol\sol\state_view.hpp	/^	class state_view {$/;"	c	namespace:sol
statement	.\dep\Lua\src\lparser.c	/^static void statement (LexState *ls) {$/;"	f	file:
static_addressof	.\include\sol\Optional\optional.hpp	/^  constexpr optional(T& v) noexcept : ref(detail_::static_addressof(v)) {}$/;"	f	class:sol::optional
static_addressof	.\include\sol\Optional\optional.hpp	/^  explicit constexpr optional(in_place_t, T& v) noexcept : ref(detail_::static_addressof(v)) {}$/;"	f	class:sol::optional
static_addressof	.\include\sol\Optional\optional.hpp	/^T* static_addressof(T& ref)$/;"	f	namespace:sol::detail_
static_addressof	.\include\sol\Optional\optional.hpp	/^constexpr T* static_addressof(T& ref)$/;"	f	namespace:sol::detail_
static_trampoline	.\include\sol\single\sol\sol.hpp	/^		int static_trampoline(lua_State* L) {$/;"	f	namespace:sol::sol::detail
static_trampoline	.\include\sol\sol\types.hpp	/^		int static_trampoline(lua_State* L) {$/;"	f	namespace:sol::detail
statlist	.\dep\Lua\src\lparser.c	/^static void statlist (LexState *ls) {$/;"	f	file:
stats	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            SectionStats stats;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode
stats	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            AssertionStats const& stats;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
stats	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            AssertionStats const& stats;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
stats	.\include\sol\single\sol\sol.hpp	/^		call_status stats = call_status::yielded;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::coroutine
stats	.\include\sol\sol\coroutine.hpp	/^		call_status stats = call_status::yielded;$/;"	m	class:sol::coroutine
stats	.\src\include\Stats.h	/^	std::map<std::string, float> stats;$/;"	m	class:Stats
status	.\dep\Lua\src\ldo.c	/^  volatile int status;  \/* error code *\/$/;"	m	struct:lua_longjmp	file:
status	.\dep\Lua\src\ldump.c	/^  int status;$/;"	m	struct:__anon1	file:
status	.\dep\Lua\src\lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	.\include\lua\lstate.h	/^  lu_byte status;$/;"	m	struct:lua_State
status	.\include\sol\single\sol\sol.hpp	/^		thread_status status() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
status	.\include\sol\sol\thread.hpp	/^		thread_status status() const {$/;"	f	class:sol::thread
stb_image_write_test	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^typedef int stb_image_write_test[sizeof(stbiw_uint32)==4 ? 1 : -1];$/;"	t
stbi__DNL	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2669;"	d
stbi__EOI	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2671;"	d
stbi__SOF	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2672;"	d
stbi__SOF_progressive	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2675;"	d
stbi__SOI	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2670;"	d
stbi__SOS	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2673;"	d
stbi__YCbCr_to_RGB_row	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__YCbCr_to_RGB_row(stbi_uc *out, const stbi_uc *y, const stbi_uc *pcb, const stbi_uc *pcr, int count, int step)$/;"	f
stbi__YCbCr_to_RGB_simd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__YCbCr_to_RGB_simd(stbi_uc *out, stbi_uc const *y, stbi_uc const *pcb, stbi_uc const *pcr, int count, int step)$/;"	f
stbi__at_eof	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__at_eof(stbi__context *s)$/;"	f
stbi__bit_reverse	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__bit_reverse(int v, int bits)$/;"	f
stbi__bitcount	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__bitcount(unsigned int a)$/;"	f
stbi__bitreverse16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__bitreverse16(int n)$/;"	f
stbi__bmask	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi__uint32 stbi__bmask[17]={0,1,3,7,15,31,63,127,255,511,1023,2047,4095,8191,16383,32767,65535};$/;"	v
stbi__bmp_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__bmp_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__bmp_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__bmp_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__bmp_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__bmp_test(stbi__context *s)$/;"	f
stbi__bmp_test_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__bmp_test_raw(stbi__context *s)$/;"	f
stbi__build_fast_ac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__build_fast_ac(stbi__int16 *fast_ac, stbi__huffman *h)$/;"	f
stbi__build_huffman	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__build_huffman(stbi__huffman *h, int *count)$/;"	f
stbi__check_png_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__check_png_header(stbi__context *s)$/;"	f
stbi__clamp	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static stbi_uc stbi__clamp(int x)$/;"	f
stbi__cleanup_jpeg	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__cleanup_jpeg(stbi__jpeg *j)$/;"	f
stbi__compute_huffman_codes	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__compute_huffman_codes(stbi__zbuf *a)$/;"	f
stbi__compute_transparency	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__compute_transparency(stbi__png *z, stbi_uc tc[3], int out_n)$/;"	f
stbi__compute_y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__compute_y(int r, int g, int b)$/;"	f
stbi__context	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__context;$/;"	t	typeref:struct:__anon95
stbi__convert_format	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static unsigned char *stbi__convert_format(unsigned char *data, int img_n, int req_comp, unsigned int x, unsigned int y)$/;"	f
stbi__copyval	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__copyval(int channel,stbi_uc *dest,const stbi_uc *src)$/;"	f
stbi__cpuid3	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__cpuid3(void)$/;"	f
stbi__create_png_image	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__create_png_image(stbi__png *a, stbi_uc *image_data, stbi__uint32 image_data_len, int out_n, int depth, int color, int interlaced)$/;"	f
stbi__create_png_image_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__create_png_image_raw(stbi__png *a, stbi_uc *raw, stbi__uint32 raw_len, int out_n, stbi__uint32 x, stbi__uint32 y, int depth, int color)$/;"	f
stbi__de_iphone	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__de_iphone(stbi__png *z)$/;"	f
stbi__de_iphone_flag	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__de_iphone_flag = 0;$/;"	v
stbi__decode_jpeg_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__decode_jpeg_header(stbi__jpeg *z, int scan)$/;"	f
stbi__decode_jpeg_image	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__decode_jpeg_image(stbi__jpeg *j)$/;"	f
stbi__depth_scale_table	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__depth_scale_table[9] = { 0, 0xff, 0x55, 0, 0x11, 0,0,0, 0x01 };$/;"	v
stbi__div16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2787;"	d
stbi__div4	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	2738;"	d
stbi__do_png	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static unsigned char *stbi__do_png(stbi__png *p, int *x, int *y, int *n, int req_comp)$/;"	f
stbi__do_zlib	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__do_zlib(stbi__zbuf *a, char *obuf, int olen, int exp, int parse_header)$/;"	f
stbi__err	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__err(const char *str)$/;"	f
stbi__err	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	865;"	d
stbi__err	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	867;"	d
stbi__err	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	869;"	d
stbi__errpf	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	872;"	d
stbi__errpuc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	873;"	d
stbi__expand_png_palette	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__expand_png_palette(stbi__png *a, stbi_uc *palette, int len, int pal_img_n)$/;"	f
stbi__extend_receive	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__extend_receive(stbi__jpeg *j, int n)$/;"	f
stbi__f2f	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1810;"	d
stbi__fill_bits	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__fill_bits(stbi__zbuf *z)$/;"	f
stbi__fill_gif_background	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__fill_gif_background(stbi__gif *g)$/;"	f
stbi__float2int	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1289;"	d
stbi__fopen	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static FILE *stbi__fopen(char const *filename, char const *mode)$/;"	f
stbi__fsh	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	1811;"	d
stbi__g_failure_reason	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static const char *stbi__g_failure_reason;$/;"	v
stbi__get16be	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__get16be(stbi__context *s)$/;"	f
stbi__get16le	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__get16le(stbi__context *s)$/;"	f
stbi__get32be	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi__uint32 stbi__get32be(stbi__context *s)$/;"	f
stbi__get32le	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi__uint32 stbi__get32le(stbi__context *s)$/;"	f
stbi__get8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static stbi_uc stbi__get8(stbi__context *s)$/;"	f
stbi__get_chunk_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi__pngchunk stbi__get_chunk_header(stbi__context *s)$/;"	f
stbi__get_marker	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__get_marker(stbi__jpeg *j)$/;"	f
stbi__getn	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__getn(stbi__context *s, stbi_uc *buffer, int n)$/;"	f
stbi__gif	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__gif;$/;"	t	typeref:struct:__anon108
stbi__gif_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__gif_header(stbi__context *s, stbi__gif *g, int *comp, int is_info)$/;"	f
stbi__gif_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__gif_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_info_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__gif_info_raw(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__gif_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__gif_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__gif_load_next	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__gif_load_next(stbi__context *s, stbi__gif *g, int *comp, int req_comp)$/;"	f
stbi__gif_lzw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__gif_lzw;$/;"	t	typeref:struct:__anon107
stbi__gif_parse_colortable	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__gif_parse_colortable(stbi__context *s, stbi_uc pal[256][4], int num_entries, int transp)$/;"	f
stbi__gif_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__gif_test(stbi__context *s)$/;"	f
stbi__gif_test_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__gif_test_raw(stbi__context *s)$/;"	f
stbi__grow_buffer_unsafe	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__grow_buffer_unsafe(stbi__jpeg *j)$/;"	f
stbi__h2l_gamma_i	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__h2l_scale_i	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float stbi__h2l_gamma_i=1.0f\/2.2f, stbi__h2l_scale_i=1.0f;$/;"	v
stbi__hdr_convert	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__hdr_convert(float *output, stbi_uc *input, int req_comp)$/;"	f
stbi__hdr_gettoken	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static char *stbi__hdr_gettoken(stbi__context *z, char *buffer)$/;"	f
stbi__hdr_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__hdr_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__hdr_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float *stbi__hdr_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__hdr_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__hdr_test(stbi__context* s)$/;"	f
stbi__hdr_test_core	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__hdr_test_core(stbi__context *s)$/;"	f
stbi__hdr_to_ldr	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__hdr_to_ldr(float   *data, int x, int y, int comp)$/;"	f
stbi__high_bit	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__high_bit(unsigned int z)$/;"	f
stbi__huffman	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__huffman;$/;"	t	typeref:struct:__anon97
stbi__idct_block	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__idct_block(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__idct_simd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__idct_simd(stbi_uc *out, int out_stride, short data[64])$/;"	f
stbi__info_main	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__info_main(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__init_zdefaults	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__init_zdefaults(void)$/;"	f
stbi__int16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef   signed short stbi__int16;$/;"	t
stbi__int16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef int16_t  stbi__int16;$/;"	t
stbi__int32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef   signed int   stbi__int32;$/;"	t
stbi__int32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef int32_t  stbi__int32;$/;"	t
stbi__jbias	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int const stbi__jbias[16] = {0,-1,-3,-7,-15,-31,-63,-127,-255,-511,-1023,-2047,-4095,-8191,-16383,-32767};$/;"	v
stbi__jpeg	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__jpeg;$/;"	t	typeref:struct:__anon98
stbi__jpeg_decode_block	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_decode_block(stbi__jpeg *j, short data[64], stbi__huffman *hdc, stbi__huffman *hac, stbi__int16 *fac, int b, stbi_uc *dequant)$/;"	f
stbi__jpeg_decode_block_prog_ac	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_decode_block_prog_ac(stbi__jpeg *j, short data[64], stbi__huffman *hac, stbi__int16 *fac)$/;"	f
stbi__jpeg_decode_block_prog_dc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_decode_block_prog_dc(stbi__jpeg *j, short data[64], stbi__huffman *hdc, int b)$/;"	f
stbi__jpeg_dequantize	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__jpeg_dequantize(short *data, stbi_uc *dequant)$/;"	f
stbi__jpeg_dezigzag	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__jpeg_dezigzag[64+15] =$/;"	v
stbi__jpeg_finish	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__jpeg_finish(stbi__jpeg *z)$/;"	f
stbi__jpeg_get_bit	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__jpeg_get_bit(stbi__jpeg *j)$/;"	f
stbi__jpeg_get_bits	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__jpeg_get_bits(stbi__jpeg *j, int n)$/;"	f
stbi__jpeg_huff_decode	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__jpeg_huff_decode(stbi__jpeg *j, stbi__huffman *h)$/;"	f
stbi__jpeg_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_info_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_info_raw(stbi__jpeg *j, int *x, int *y, int *comp)$/;"	f
stbi__jpeg_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static unsigned char *stbi__jpeg_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__jpeg_reset	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__jpeg_reset(stbi__jpeg *j)$/;"	f
stbi__jpeg_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__jpeg_test(stbi__context *s)$/;"	f
stbi__l2h_gamma	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__l2h_scale	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float stbi__l2h_gamma=2.2f, stbi__l2h_scale=1.0f;$/;"	v
stbi__ldr_to_hdr	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float   *stbi__ldr_to_hdr(stbi_uc *data, int x, int y, int comp)$/;"	f
stbi__malloc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void *stbi__malloc(size_t size)$/;"	f
stbi__out_gif_code	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__out_gif_code(stbi__gif *g, stbi__uint16 code)$/;"	f
stbi__paeth	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__paeth(int a, int b, int c)$/;"	f
stbi__parse_entropy_coded_data	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_entropy_coded_data(stbi__jpeg *z)$/;"	f
stbi__parse_huffman_block	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_huffman_block(stbi__zbuf *a)$/;"	f
stbi__parse_png_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_png_file(stbi__png *z, int scan, int req_comp)$/;"	f
stbi__parse_uncomperssed_block	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_uncomperssed_block(stbi__zbuf *a)$/;"	f
stbi__parse_zlib	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_zlib(stbi__zbuf *a, int parse_header)$/;"	f
stbi__parse_zlib_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__parse_zlib_header(stbi__zbuf *a)$/;"	f
stbi__pic_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__pic_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pic_is4	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__pic_is4(stbi__context *s,const char *str)$/;"	f
stbi__pic_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__pic_load(stbi__context *s,int *px,int *py,int *comp,int req_comp)$/;"	f
stbi__pic_load_core	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__pic_load_core(stbi__context *s,int width,int height,int *comp, stbi_uc *result)$/;"	f
stbi__pic_packet	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__pic_packet;$/;"	t	typeref:struct:__anon106
stbi__pic_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__pic_test(stbi__context *s)$/;"	f
stbi__pic_test_core	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__pic_test_core(stbi__context *s)$/;"	f
stbi__png	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__png;$/;"	t	typeref:struct:__anon104
stbi__png_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__png_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__png_info_raw	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__png_info_raw(stbi__png *p, int *x, int *y, int *comp)$/;"	f
stbi__png_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static unsigned char *stbi__png_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__png_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__png_test(stbi__context *s)$/;"	f
stbi__pngchunk	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__pngchunk;$/;"	t	typeref:struct:__anon103
stbi__pnm_getinteger	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int      stbi__pnm_getinteger(stbi__context *s, char *c)$/;"	f
stbi__pnm_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int      stbi__pnm_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__pnm_isdigit	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int      stbi__pnm_isdigit(char c)$/;"	f
stbi__pnm_isspace	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int      stbi__pnm_isspace(char c)$/;"	f
stbi__pnm_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__pnm_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__pnm_skip_whitespace	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void     stbi__pnm_skip_whitespace(stbi__context *s, char *c)$/;"	f
stbi__pnm_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int      stbi__pnm_test(stbi__context *s)$/;"	f
stbi__process_frame_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__process_frame_header(stbi__jpeg *z, int scan)$/;"	f
stbi__process_gif_raster	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__process_gif_raster(stbi__context *s, stbi__gif *g)$/;"	f
stbi__process_marker	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__process_marker(stbi__jpeg *z, int m)$/;"	f
stbi__process_scan_header	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__process_scan_header(stbi__jpeg *z)$/;"	f
stbi__psd_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__psd_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__psd_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__psd_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__psd_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__psd_test(stbi__context *s)$/;"	f
stbi__readval	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__readval(stbi__context *s, int channel, stbi_uc *dest)$/;"	f
stbi__refill_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__refill_buffer(stbi__context *s)$/;"	f
stbi__resample	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__resample;$/;"	t	typeref:struct:__anon100
stbi__resample_row_generic	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__resample_row_generic(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_h_2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc*  stbi__resample_row_h_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_hv_2_simd	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__resample_row_hv_2_simd(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__resample_row_v_2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc* stbi__resample_row_v_2(stbi_uc *out, stbi_uc *in_near, stbi_uc *in_far, int w, int hs)$/;"	f
stbi__rewind	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__rewind(stbi__context *s)$/;"	f
stbi__setup_jpeg	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__setup_jpeg(stbi__jpeg *j)$/;"	f
stbi__shiftsigned	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__shiftsigned(int v, int shift, int bits)$/;"	f
stbi__skip	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__skip(stbi__context *s, int n)$/;"	f
stbi__sse2_available	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__sse2_available()$/;"	f
stbi__start_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__start_callbacks(stbi__context *s, stbi_io_callbacks *c, void *user)$/;"	f
stbi__start_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__start_file(stbi__context *s, FILE *f)$/;"	f
stbi__start_mem	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__start_mem(stbi__context *s, stbi_uc const *buffer, int len)$/;"	f
stbi__stdio_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_io_callbacks stbi__stdio_callbacks =$/;"	v
stbi__stdio_eof	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__stdio_eof(void *user)$/;"	f
stbi__stdio_read	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__stdio_read(void *user, char *data, int size)$/;"	f
stbi__stdio_skip	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static void stbi__stdio_skip(void *user, int n)$/;"	f
stbi__tga_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__tga_info(stbi__context *s, int *x, int *y, int *comp)$/;"	f
stbi__tga_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc *stbi__tga_load(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi__tga_test	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__tga_test(stbi__context *s)$/;"	f
stbi__uint16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef uint16_t stbi__uint16;$/;"	t
stbi__uint16	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef unsigned short stbi__uint16;$/;"	t
stbi__uint32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef uint32_t stbi__uint32;$/;"	t
stbi__uint32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef unsigned int   stbi__uint32;$/;"	t
stbi__unpremultiply_on_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__unpremultiply_on_load = 0;$/;"	v
stbi__zbuf	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__zbuf;$/;"	t	typeref:struct:__anon102
stbi__zbuild_huffman	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zbuild_huffman(stbi__zhuffman *z, stbi_uc *sizelist, int num)$/;"	f
stbi__zdefault_distance	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdefault_length	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static stbi_uc stbi__zdefault_length[288], stbi__zdefault_distance[32];$/;"	v
stbi__zdist_base	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zdist_base[32] = { 1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,$/;"	v
stbi__zdist_extra	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zdist_extra[32] =$/;"	v
stbi__zexpand	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zexpand(stbi__zbuf *z, char *zout, int n)  \/\/ need to make room for n bytes$/;"	f
stbi__zget8	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static stbi_uc stbi__zget8(stbi__zbuf *z)$/;"	f
stbi__zhuffman	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi__zhuffman;$/;"	t	typeref:struct:__anon101
stbi__zhuffman_decode	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static int stbi__zhuffman_decode(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zhuffman_decode_slowpath	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zhuffman_decode_slowpath(stbi__zbuf *a, stbi__zhuffman *z)$/;"	f
stbi__zlength_base	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zlength_base[31] = {$/;"	v
stbi__zlength_extra	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static int stbi__zlength_extra[31]=$/;"	v
stbi__zreceive	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^stbi_inline static unsigned int stbi__zreceive(stbi__zbuf *z, int n)$/;"	f
stbi_convert_iphone_png_to_rgb	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void stbi_convert_iphone_png_to_rgb(int flag_true_if_should_convert)$/;"	f
stbi_failure_reason	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF const char *stbi_failure_reason(void)$/;"	f
stbi_hdr_to_ldr_gamma	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_gamma(float gamma) { stbi__h2l_gamma_i = 1\/gamma; }$/;"	f
stbi_hdr_to_ldr_scale	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void   stbi_hdr_to_ldr_scale(float scale) { stbi__h2l_scale_i = 1\/scale; }$/;"	f
stbi_image_free	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void stbi_image_free(void *retval_from_stbi_load)$/;"	f
stbi_info	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_info(char const *filename, int *x, int *y, int *comp)$/;"	f
stbi_info_from_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_info_from_callbacks(stbi_io_callbacks const *c, void *user, int *x, int *y, int *comp)$/;"	f
stbi_info_from_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_info_from_file(FILE *f, int *x, int *y, int *comp)$/;"	f
stbi_info_from_memory	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_info_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp)$/;"	f
stbi_inline	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	572;"	d
stbi_inline	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	574;"	d
stbi_inline	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	577;"	d
stbi_io_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^} stbi_io_callbacks;$/;"	t	typeref:struct:__anon94
stbi_is_hdr	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int      stbi_is_hdr          (char const *filename)$/;"	f
stbi_is_hdr_from_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int      stbi_is_hdr_from_callbacks(stbi_io_callbacks const *clbk, void *user)$/;"	f
stbi_is_hdr_from_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int      stbi_is_hdr_from_file(FILE *f)$/;"	f
stbi_is_hdr_from_memory	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_is_hdr_from_memory(stbi_uc const *buffer, int len)$/;"	f
stbi_ldr_to_hdr_gamma	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_gamma(float gamma) { stbi__l2h_gamma = gamma; }$/;"	f
stbi_ldr_to_hdr_scale	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void   stbi_ldr_to_hdr_scale(float scale) { stbi__l2h_scale = scale; }$/;"	f
stbi_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF stbi_uc *stbi_load(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_from_memory	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF stbi_uc *stbi_load_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_load_main	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static unsigned char *stbi_load_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF float *stbi_loadf(char const *filename, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_callbacks	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF float *stbi_loadf_from_callbacks(stbi_io_callbacks const *clbk, void *user, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_file	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF float *stbi_loadf_from_file(FILE *f, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_from_memory	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF float *stbi_loadf_from_memory(stbi_uc const *buffer, int len, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_loadf_main	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^static float *stbi_loadf_main(stbi__context *s, int *x, int *y, int *comp, int req_comp)$/;"	f
stbi_lrot	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	608;"	d
stbi_lrot	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	610;"	d
stbi_set_unpremultiply_on_load	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF void stbi_set_unpremultiply_on_load(int flag_true_if_should_unpremultiply)$/;"	f
stbi_uc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef unsigned char stbi_uc;$/;"	t
stbi_write_bmp	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^int stbi_write_bmp(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_write_hdr	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^int stbi_write_hdr(char const *filename, int x, int y, int comp, const float *data)$/;"	f
stbi_write_png	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^int stbi_write_png(char const *filename, int x, int y, int comp, const void *data, int stride_bytes)$/;"	f
stbi_write_png_to_mem	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^unsigned char *stbi_write_png_to_mem(unsigned char *pixels, int stride_bytes, int x, int y, int n, int *out_len)$/;"	f
stbi_write_tga	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^int stbi_write_tga(char const *filename, int x, int y, int comp, const void *data)$/;"	f
stbi_zlib_compress	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^unsigned char * stbi_zlib_compress(unsigned char *data, int data_len, int *out_len, int quality)$/;"	f
stbi_zlib_decode_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_zlib_decode_buffer(char *obuffer, int olen, char const *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_malloc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize(const char *buffer, int len, int initial_size, int *outlen)$/;"	f
stbi_zlib_decode_malloc_guesssize_headerflag	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF char *stbi_zlib_decode_malloc_guesssize_headerflag(const char *buffer, int len, int initial_size, int *outlen, int parse_header)$/;"	f
stbi_zlib_decode_noheader_buffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF int stbi_zlib_decode_noheader_buffer(char *obuffer, int olen, const char *ibuffer, int ilen)$/;"	f
stbi_zlib_decode_noheader_malloc	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^STBIDEF char *stbi_zlib_decode_noheader_malloc(char const *buffer, int len, int *outlen)$/;"	f
stbiw__ZHASH	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	438;"	d
stbiw__crc32	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^unsigned int stbiw__crc32(unsigned char *buffer, int len)$/;"	f
stbiw__linear_to_rgbe	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^void stbiw__linear_to_rgbe(unsigned char *rgbe, float *linear)$/;"	f
stbiw__max	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	213;"	d
stbiw__paeth	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static unsigned char stbiw__paeth(int a, int b, int c)$/;"	f
stbiw__sbcount	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	370;"	d
stbiw__sbfree	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	371;"	d
stbiw__sbgrow	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	367;"	d
stbiw__sbgrowf	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static void *stbiw__sbgrowf(void **arr, int increment, int itemsize)$/;"	f
stbiw__sbm	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	362;"	d
stbiw__sbmaybegrow	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	366;"	d
stbiw__sbn	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	363;"	d
stbiw__sbneedgrow	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	365;"	d
stbiw__sbpush	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	369;"	d
stbiw__sbraw	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	361;"	d
stbiw__wp32	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	558;"	d
stbiw__wpcrc	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static void stbiw__wpcrc(unsigned char **data, int len)$/;"	f
stbiw__wpng4	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	557;"	d
stbiw__wptag	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	559;"	d
stbiw__write_dump_data	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^void stbiw__write_dump_data(FILE *f, int length, unsigned char *data)$/;"	f
stbiw__write_hdr_scanline	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^void stbiw__write_hdr_scanline(FILE *f, int width, int comp, unsigned char *scratch, const float *scanline)$/;"	f
stbiw__write_run_data	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^void stbiw__write_run_data(FILE *f, int length, unsigned char databyte)$/;"	f
stbiw__zhash	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static unsigned int stbiw__zhash(unsigned char *data)$/;"	f
stbiw__zlib_add	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	427;"	d
stbiw__zlib_bitrev	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static int stbiw__zlib_bitrev(int code, int codebits)$/;"	f
stbiw__zlib_countm	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static unsigned int stbiw__zlib_countm(unsigned char *a, unsigned char *b, int limit)$/;"	f
stbiw__zlib_flush	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	426;"	d
stbiw__zlib_flushf	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static unsigned char *stbiw__zlib_flushf(unsigned char *data, unsigned int *bitbuffer, int *bitcount)$/;"	f
stbiw__zlib_huff	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	435;"	d
stbiw__zlib_huff1	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	431;"	d
stbiw__zlib_huff2	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	432;"	d
stbiw__zlib_huff3	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	433;"	d
stbiw__zlib_huff4	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	434;"	d
stbiw__zlib_huffa	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	429;"	d
stbiw__zlib_huffb	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	436;"	d
stbiw_uint32	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^typedef unsigned int stbiw_uint32;$/;"	t
std	.\include\sol\Optional\optional.hpp	/^namespace std$/;"	n
std	.\include\sol\Optional\test_type_traits.cpp	/^  namespace std { class type_info; }$/;"	n	file:
std	.\include\sol\Optional\test_type_traits.cpp	/^namespace std { namespace experimental {$/;"	n	file:
stdErr	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::string stdErr;$/;"	m	struct:Catch::TestCaseStats
stdErr	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            std::string stdErr;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode
stdErrForSuite	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        std::ostringstream stdErrForSuite;$/;"	m	class:Catch::JunitReporter
stdOut	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::string stdOut;$/;"	m	struct:Catch::TestCaseStats
stdOut	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            std::string stdOut;$/;"	m	struct:Catch::CumulativeReporterBase::SectionNode
stdOutForSuite	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        std::ostringstream stdOutForSuite;$/;"	m	class:Catch::JunitReporter
stdoutHandle	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        HANDLE stdoutHandle;$/;"	m	class:Catch::__anon178::Win32ColourImpl
stencilBits	.\dep\SFML\include\SFML\Window\ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings
stencilBits	.\include\SFML\Window\ContextSettings.hpp	/^    unsigned int stencilBits;       \/\/\/< Bits of the stencil buffer$/;"	m	struct:sf::ContextSettings
step	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int parse, step;$/;"	m	struct:__anon108
stop	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^void Sound::stop()$/;"	f	class:sf::Sound
stop	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^void SoundRecorder::stop()$/;"	f	class:sf::SoundRecorder
stop	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::stop()$/;"	f	class:sf::SoundStream
storage	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int storage;$/;"	m	struct:__anon92
storage	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  long storage;$/;"	m	struct:__anon88
storage	.\include\sol\Catch\include\internal\catch_option.hpp	/^        char storage[sizeof(T)];$/;"	m	class:Catch::Option
storage_	.\include\sol\Optional\optional.hpp	/^    constexpr constexpr_optional_base() noexcept : init_(false), storage_(trivial_init) {};$/;"	f	struct:sol::constexpr_optional_base
storage_	.\include\sol\Optional\optional.hpp	/^    constexpr optional_base() noexcept : init_(false), storage_(trivial_init) {};$/;"	f	struct:sol::optional_base
storage_	.\include\sol\Optional\optional.hpp	/^    constexpr_storage_t<T> storage_;$/;"	m	struct:sol::constexpr_optional_base
storage_	.\include\sol\Optional\optional.hpp	/^    storage_t<T> storage_;$/;"	m	struct:sol::optional_base
storage_t	.\include\sol\Optional\optional.hpp	/^  constexpr storage_t( Args&&... args ) : value_(constexpr_forward<Args>(args)...) {}$/;"	f	union:sol::storage_t
storage_t	.\include\sol\Optional\optional.hpp	/^union storage_t$/;"	u	namespace:sol
str	.\include\sol\Catch\include\external\clara.h	/^        std::string str;$/;"	m	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
str	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::string str;$/;"	m	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
str_byte	.\dep\Lua\src\lstrlib.c	/^static int str_byte (lua_State *L) {$/;"	f	file:
str_char	.\dep\Lua\src\lstrlib.c	/^static int str_char (lua_State *L) {$/;"	f	file:
str_checkname	.\dep\Lua\src\lparser.c	/^static TString *str_checkname (LexState *ls) {$/;"	f	file:
str_dump	.\dep\Lua\src\lstrlib.c	/^static int str_dump (lua_State *L) {$/;"	f	file:
str_find	.\dep\Lua\src\lstrlib.c	/^static int str_find (lua_State *L) {$/;"	f	file:
str_find_aux	.\dep\Lua\src\lstrlib.c	/^static int str_find_aux (lua_State *L, int find) {$/;"	f	file:
str_format	.\dep\Lua\src\lstrlib.c	/^static int str_format (lua_State *L) {$/;"	f	file:
str_gsub	.\dep\Lua\src\lstrlib.c	/^static int str_gsub (lua_State *L) {$/;"	f	file:
str_hello	.\include\sol\Catch\projects\SelfTest\ConditionTests.cpp	/^    std::string str_hello;$/;"	m	struct:TestData	file:
str_len	.\dep\Lua\src\lstrlib.c	/^static int str_len (lua_State *L) {$/;"	f	file:
str_lower	.\dep\Lua\src\lstrlib.c	/^static int str_lower (lua_State *L) {$/;"	f	file:
str_match	.\dep\Lua\src\lstrlib.c	/^static int str_match (lua_State *L) {$/;"	f	file:
str_pack	.\dep\Lua\src\lstrlib.c	/^static int str_pack (lua_State *L) {$/;"	f	file:
str_packsize	.\dep\Lua\src\lstrlib.c	/^static int str_packsize (lua_State *L) {$/;"	f	file:
str_rep	.\dep\Lua\src\lstrlib.c	/^static int str_rep (lua_State *L) {$/;"	f	file:
str_reverse	.\dep\Lua\src\lstrlib.c	/^static int str_reverse (lua_State *L) {$/;"	f	file:
str_sub	.\dep\Lua\src\lstrlib.c	/^static int str_sub (lua_State *L) {$/;"	f	file:
str_unpack	.\dep\Lua\src\lstrlib.c	/^static int str_unpack (lua_State *L) {$/;"	f	file:
str_upper	.\dep\Lua\src\lstrlib.c	/^static int str_upper (lua_State *L) {$/;"	f	file:
strcache	.\dep\Lua\src\lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State
strcache	.\include\lua\lstate.h	/^  TString *strcache[STRCACHE_N][STRCACHE_M];  \/* cache for strings in API *\/$/;"	m	struct:global_State
stream	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Stream         stream;$/;"	m	struct:FT_FaceRec_
stream	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Stream       stream;$/;"	m	struct:FT_Open_Args_
stream	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.hpp	/^        InputStream*          stream;$/;"	m	struct:sf::priv::SoundFileReaderFlac::ClientData
stream	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual std::ostream& stream() const    { return m_stream->stream(); }$/;"	f	class:Catch::Config
stream	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        std::ostream& stream() const    { return *m_stream; }$/;"	f	struct:Catch::ReporterConfig
stream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    std::ostream& CoutStream::stream() const {$/;"	f	class:Catch::CoutStream
stream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    std::ostream& DebugOutStream::stream() const {$/;"	f	class:Catch::DebugOutStream
stream	.\include\sol\Catch\include\internal\catch_stream.hpp	/^    std::ostream& FileStream::stream() const {$/;"	f	class:Catch::FileStream
stream	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        std::ostream& stream() {$/;"	f	class:Catch::XmlWriter
stream	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::ostream& stream;$/;"	m	struct:Catch::CumulativeReporterBase
stream	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^        std::ostream& stream;$/;"	m	struct:Catch::StreamingReporterBase
stream	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^            std::ostream& stream;$/;"	m	class:Catch::CompactReporter::AssertionPrinter
stream	.\include\sol\Catch\include\reporters\catch_reporter_console.hpp	/^            std::ostream& stream;$/;"	m	class:Catch::ConsoleReporter::AssertionPrinter
streamData	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^void SoundStream::streamData()$/;"	f	class:sf::SoundStream
streamEof	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__bool streamEof(const FLAC__StreamDecoder*, void* clientData)$/;"	f	namespace:__anon120
streamError	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    void streamError(const FLAC__StreamDecoder*, FLAC__StreamDecoderErrorStatus, void* clientData)$/;"	f	namespace:__anon120
streamLength	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__StreamDecoderLengthStatus streamLength(const FLAC__StreamDecoder*, FLAC__uint64* streamLength, void* clientData)$/;"	f	namespace:__anon120
streamMetadata	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    void streamMetadata(const FLAC__StreamDecoder*, const FLAC__StreamMetadata* meta, void* clientData)$/;"	f	namespace:__anon120
streamRead	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__StreamDecoderReadStatus streamRead(const FLAC__StreamDecoder*, FLAC__byte buffer[], std::size_t* bytes, void* clientData)$/;"	f	namespace:__anon120
streamSeek	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__StreamDecoderSeekStatus streamSeek(const FLAC__StreamDecoder*, FLAC__uint64 absoluteByteOffset, void* clientData)$/;"	f	namespace:__anon120
streamTell	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__StreamDecoderTellStatus streamTell(const FLAC__StreamDecoder*, FLAC__uint64* absoluteByteOffset, void* clientData)$/;"	f	namespace:__anon120
streamWrite	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^    FLAC__StreamDecoderWriteStatus streamWrite(const FLAC__StreamDecoder*, const FLAC__Frame* frame, const FLAC__int32* const buffer[], void* clientData)$/;"	f	namespace:__anon120
stream_info	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_StreamInfo stream_info;$/;"	m	union:__anon57::__anon58
stream_offset	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 stream_offset;$/;"	m	struct:__anon47
strid	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt     strid;$/;"	m	struct:FT_Var_Axis_
strid	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_UInt    strid;$/;"	m	struct:FT_Var_Named_Style_
strike_out	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    strike_out;$/;"	m	struct:FT_WinFNT_HeaderRec_
string	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_Byte*   string;      \/* this string is *not* null-terminated! *\/$/;"	m	struct:FT_SfntName_
string	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    std::string string;$/;"	m	class:ColourString	file:
string	.\include\sol\Catch\scripts\generateSingleHeader.py	/^import string$/;"	i
string	.\include\sol\Catch\scripts\releaseCommon.py	/^import string$/;"	i
string	.\include\sol\single\sol\sol.hpp	/^		string = LUA_TSTRING,$/;"	m	class:sol::sol::call_syntax::call_status::type
string	.\include\sol\single\sol\sol.hpp	/^		string,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
string	.\include\sol\sol\state_view.hpp	/^		string,$/;"	m	class:sol::lib
string	.\include\sol\sol\types.hpp	/^		string = LUA_TSTRING,$/;"	m	class:sol::call_syntax::call_status::type
stringFromCFString	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^    std::string stringFromCFString(CFStringRef cfString)$/;"	f	namespace:__anon143
string_detail	.\include\sol\single\sol\sol.hpp	/^	namespace string_detail {$/;"	n	namespace:sol::sol
string_detail	.\include\sol\sol\string_shim.hpp	/^	namespace string_detail {$/;"	n	namespace:sol
string_len	.\dep\SFML\extlibs\headers\freetype2\ftsnames.h	/^    FT_UInt    string_len;  \/* in bytes *\/$/;"	m	struct:FT_SfntName_
string_shim	.\include\sol\single\sol\sol.hpp	/^			string_shim(const char* p) : string_shim(p, std::char_traits<char>::length(p)) {}$/;"	f	struct:sol::sol::string_detail::string_shim
string_shim	.\include\sol\single\sol\sol.hpp	/^			string_shim(const char* p, std::size_t s) : s(s), p(p) {}$/;"	f	struct:sol::sol::string_detail::string_shim
string_shim	.\include\sol\single\sol\sol.hpp	/^			string_shim(const std::string& r) : string_shim(r.data(), r.size()) {}$/;"	f	struct:sol::sol::string_detail::string_shim
string_shim	.\include\sol\single\sol\sol.hpp	/^		struct string_shim {$/;"	s	namespace:sol::sol::string_detail
string_shim	.\include\sol\sol\string_shim.hpp	/^			string_shim(const char* p) : string_shim(p, std::char_traits<char>::length(p)) {}$/;"	f	struct:sol::string_detail::string_shim
string_shim	.\include\sol\sol\string_shim.hpp	/^			string_shim(const char* p, std::size_t s) : s(s), p(p) {}$/;"	f	struct:sol::string_detail::string_shim
string_shim	.\include\sol\sol\string_shim.hpp	/^			string_shim(const std::string& r) : string_shim(r.data(), r.size()) {}$/;"	f	struct:sol::string_detail::string_shim
string_shim	.\include\sol\sol\string_shim.hpp	/^		struct string_shim {$/;"	s	namespace:sol::string_detail
stringtable	.\dep\Lua\src\lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	.\dep\Lua\src\lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
stringtable	.\include\lua\lstate.h	/^typedef struct stringtable {$/;"	s
stringtable	.\include\lua\lstate.h	/^} stringtable;$/;"	t	typeref:struct:stringtable
strip	.\dep\Lua\src\ldump.c	/^  int strip;$/;"	m	struct:__anon1	file:
strip	.\include\sol\single\sol\sol.hpp	/^			struct strip {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
strip	.\include\sol\single\sol\sol.hpp	/^			struct strip<non_null<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
strip	.\include\sol\single\sol\sol.hpp	/^			struct strip<std::reference_wrapper<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
strip	.\include\sol\single\sol\sol.hpp	/^			struct strip<user<T>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
strip	.\include\sol\sol\stack_core.hpp	/^			struct strip {$/;"	s	namespace:sol::stack::stack_detail
strip	.\include\sol\sol\stack_core.hpp	/^			struct strip<non_null<T>> {$/;"	s	namespace:sol::stack::stack_detail
strip	.\include\sol\sol\stack_core.hpp	/^			struct strip<std::reference_wrapper<T>> {$/;"	s	namespace:sol::stack::stack_detail
strip	.\include\sol\sol\stack_core.hpp	/^			struct strip<user<T>> {$/;"	s	namespace:sol::stack::stack_detail
stripping	.\dep\Lua\src\luac.c	/^static int stripping=0;			\/* strip debug information? *\/$/;"	v	file:
strlib	.\dep\Lua\src\lstrlib.c	/^static const luaL_Reg strlib[] = {$/;"	v	file:
stroke_width	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Pos         stroke_width;$/;"	m	struct:CID_FaceDictRec_
stroker	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  FT_Stroker_Done( FT_Stroker  stroker );$/;"	v
stroker	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  FT_Stroker_EndSubPath( FT_Stroker  stroker );$/;"	v
stroker	.\dep\SFML\extlibs\headers\freetype2\ftstroke.h	/^  FT_Stroker_Rewind( FT_Stroker  stroker );$/;"	v
strt	.\dep\Lua\src\lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
strt	.\include\lua\lstate.h	/^  stringtable strt;  \/* hash table for strings *\/$/;"	m	struct:global_State
stuff	.\include\sol\test_usertypes.cpp	/^	static void stuff() {$/;"	f	struct:giver
style_flags	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long           style_flags;$/;"	m	struct:FT_FaceRec_
style_name	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_String*        style_name;$/;"	m	struct:FT_FaceRec_
subString	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        std::string subString() const { return m_arg.substr( m_start, m_pos - m_start ); }$/;"	f	class:Catch::TestSpecParser
subexpr	.\dep\Lua\src\lparser.c	/^static BinOpr subexpr (LexState *ls, expdesc *v, int limit) {$/;"	f	file:
subframes	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__Subframe subframes[FLAC__MAX_CHANNELS];$/;"	m	struct:__anon42
subglyphs	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_SubGlyph       subglyphs;$/;"	m	struct:FT_GlyphSlotRec_
subninja	.\include\sol\ninja_syntax.py	/^    def subninja(self, path):$/;"	m	class:Writer
subprocess	.\include\sol\Catch\scripts\approvalTests.py	/^import subprocess$/;"	i
subprocess	.\include\sol\Catch\scripts\scriptCommon.py	/^import subprocess$/;"	i
subrmap_offset	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong       subrmap_offset;$/;"	m	struct:CID_FaceDictRec_
substring	.\dep\SFML\src\SFML\System\String.cpp	/^String String::substring(std::size_t position, std::size_t length) const$/;"	f	class:sf::String
subtraction	.\include\sol\single\sol\sol.hpp	/^		subtraction,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
subtraction	.\include\sol\sol\types.hpp	/^		subtraction,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
succ_high	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            succ_high;$/;"	m	struct:__anon98
succ_low	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int            succ_low;$/;"	m	struct:__anon98
succeeded	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    bool AssertionResult::succeeded() const {$/;"	f	class:Catch::AssertionResult
succeedingCase	.\include\sol\Catch\projects\SelfTest\ClassTests.cpp	/^        void succeedingCase()$/;"	f	class:__anon185::TestClass
success	.\include\sol\single\sol\sol.hpp	/^			bool success;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::probe
success	.\include\sol\sol\stack_core.hpp	/^			bool success;$/;"	m	struct:sol::stack::probe
suffix	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc suffix;$/;"	m	struct:__anon107
suffixedexp	.\dep\Lua\src\lparser.c	/^static void suffixedexp (LexState *ls, expdesc *v) {$/;"	f	file:
suiteTimer	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        Timer suiteTimer;$/;"	m	class:Catch::JunitReporter
supplement	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int          supplement;$/;"	m	struct:CID_FaceInfoRec_
svalue	.\dep\Lua\src\lobject.h	333;"	d
svalue	.\include\lua\lobject.h	333;"	d
swap	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr
swap	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    void TestCase::swap( TestCase& other ) {$/;"	f	class:Catch::TestCase
swap	.\include\sol\Catch\single_include\catch.hpp	/^        void swap( Ptr& other ) { std::swap( m_p, other.m_p ); }$/;"	f	class:Catch::Ptr
swapextra	.\dep\Lua\src\ldebug.c	/^static void swapextra (lua_State *L) {$/;"	f	file:
sweepgc	.\dep\Lua\src\lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State
sweepgc	.\include\lua\lstate.h	/^  GCObject **sweepgc;  \/* current position of sweep in list *\/$/;"	m	struct:global_State
sweeplist	.\dep\Lua\src\lgc.c	/^static GCObject **sweeplist (lua_State *L, GCObject **p, lu_mem count) {$/;"	f	file:
sweepstep	.\dep\Lua\src\lgc.c	/^static lu_mem sweepstep (lua_State *L, global_State *g,$/;"	f	file:
sweeptolive	.\dep\Lua\src\lgc.c	/^static GCObject **sweeptolive (lua_State *L, GCObject **p) {$/;"	f	file:
sweepwholelist	.\dep\Lua\src\lgc.c	723;"	d	file:
switchToFullscreen	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^void WindowImplX11::switchToFullscreen()$/;"	f	class:sf::priv::WindowImplX11
switchToFullscreen	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^void WindowImplWin32::switchToFullscreen(const VideoMode& mode)$/;"	f	class:sf::priv::WindowImplWin32
sxHeight	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   sxHeight;$/;"	m	struct:TT_OS2_
sync	.\dep\SFML\src\SFML\System\Err.cpp	/^    virtual int sync()$/;"	f	class:__anon135::DefaultErrStreamBuf	file:
sync	.\include\sol\Catch\include\internal\catch_stream.hpp	/^        int sync() {$/;"	f	class:Catch::StreamBufImpl
syntax	.\include\sol\single\sol\sol.hpp	/^		syntax = LUA_ERRSYNTAX,$/;"	m	class:sol::sol::call_syntax::call_status::load_status
syntax	.\include\sol\sol\types.hpp	/^		syntax = LUA_ERRSYNTAX,$/;"	m	class:sol::call_syntax::call_status::load_status
sys	.\include\sol\Catch\scripts\approvalTests.py	/^import sys$/;"	i
sys	.\include\sol\Catch\scripts\approve.py	/^import sys$/;"	i
sys	.\include\sol\Catch\scripts\generateSingleHeader.py	/^import sys$/;"	i
sys	.\include\sol\Catch\scripts\releaseCommon.py	/^import sys$/;"	i
sys	.\include\sol\Catch\scripts\scriptCommon.py	/^import sys$/;"	i
sys	.\include\sol\bootstrap.py	/^import os, sys, glob, re$/;"	i
sys	.\include\sol\docs\source\conf.py	/^import sys$/;"	i
sys	.\include\sol\single.py	/^import os, sys$/;"	i
syslib	.\dep\Lua\src\loslib.c	/^static const luaL_Reg syslib[] = {$/;"	v	file:
system	.\dep\SFML\include\SFML\Window\Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent
system	.\include\SFML\Window\Event.hpp	/^        bool          system;  \/\/\/< Is the System key pressed?$/;"	m	struct:sf::Event::KeyEvent
systemPath	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^        std::string systemPath;$/;"	m	struct:__anon150::JoystickRecord	file:
t	.\dep\Lua\src\llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	.\dep\Lua\src\lparser.c	/^  expdesc *t;  \/* table descriptor *\/$/;"	m	struct:ConsControl	file:
t	.\dep\Lua\src\lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon12::__anon13
t	.\dep\Lua\src\lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc
t	.\include\lua\llex.h	/^  Token t;  \/* current token *\/$/;"	m	struct:LexState
t	.\include\lua\lparser.h	/^      lu_byte t;  \/* table (register or upvalue) *\/$/;"	m	struct:expdesc::__anon163::__anon164
t	.\include\lua\lparser.h	/^  int t;  \/* patch list of 'exit when true' *\/$/;"	m	struct:expdesc
t	.\include\sol\Catch\include\internal\catch_tostring.h	/^        static T  const&t;$/;"	m	struct:Catch::Detail::IsStreamInsertable
t	.\include\sol\Catch\single_include\catch.hpp	/^        static T  const&t;$/;"	m	struct:Catch::Detail::IsStreamInsertable
t	.\include\sol\single\sol\sol.hpp	/^			T t;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper
t	.\include\sol\single\sol\sol.hpp	/^			int t;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper_n
t	.\include\sol\sol\reference.hpp	/^			T t;$/;"	m	struct:sol::stack::push_popper
t	.\include\sol\sol\reference.hpp	/^			int t;$/;"	m	struct:sol::stack::push_popper_n
t1_blend_blue_scale	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	265;"	d
t1_blend_blue_shift	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	266;"	d
t1_blend_blue_values	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	259;"	d
t1_blend_family_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	267;"	d
t1_blend_family_other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	268;"	d
t1_blend_force_bold	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	269;"	d
t1_blend_italic_angle	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	258;"	d
t1_blend_max	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	270;"	d
t1_blend_other_blues	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	260;"	d
t1_blend_standard_height	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	262;"	d
t1_blend_standard_widths	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	261;"	d
t1_blend_stem_snap_heights	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	264;"	d
t1_blend_stem_snap_widths	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	263;"	d
t1_blend_underline_position	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	256;"	d
t1_blend_underline_thickness	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	257;"	d
tabChar	.\include\sol\Catch\include\external\clara.h	/^        char tabChar;               \/\/ If this char is seen the indent is changed to current pos$/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
tabChar	.\include\sol\Catch\include\external\tbc_text_format.h	/^        char tabChar;               \/\/ If this char is seen the indent is changed to current pos$/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
tab_funcs	.\dep\Lua\src\ltablib.c	/^static const luaL_Reg tab_funcs[] = {$/;"	v	file:
table	.\include\sol\single\sol\sol.hpp	/^		table = LUA_TTABLE,$/;"	m	class:sol::sol::call_syntax::call_status::type
table	.\include\sol\single\sol\sol.hpp	/^		table,$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::lib
table	.\include\sol\single\sol\sol.hpp	/^	typedef table_core<false> table;$/;"	t	class:sol::sol::call_syntax::call_status::type
table	.\include\sol\single\sol\sol.hpp	/^	typedef table_core<false> table;$/;"	t	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol
table	.\include\sol\sol\state_view.hpp	/^		table,$/;"	m	class:sol::lib
table	.\include\sol\sol\table.hpp	/^	typedef table_core<false> table;$/;"	t	namespace:sol
table	.\include\sol\sol\types.hpp	/^		table = LUA_TTABLE,$/;"	m	class:sol::call_syntax::call_status::type
table	.\include\sol\sol\types.hpp	/^	typedef table_core<false> table;$/;"	t	class:sol::call_syntax::call_status::type
tableidx	.\include\sol\single\sol\sol.hpp	/^		int tableidx = 0;$/;"	m	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
tableidx	.\include\sol\sol\table_iterator.hpp	/^		int tableidx = 0;$/;"	m	class:sol::basic_table_iterator
tag	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_ULong    tag;$/;"	m	struct:FT_Parameter_
tag	.\dep\SFML\extlibs\headers\freetype2\ftmm.h	/^    FT_ULong    tag;$/;"	m	struct:FT_Var_Axis_
tag	.\include\sol\Catch\include\internal\catch_tag_alias.h	/^        std::string tag;$/;"	m	struct:Catch::TagAlias
tag_error	.\dep\Lua\src\lauxlib.c	/^static void tag_error (lua_State *L, int arg, int tag) {$/;"	f	file:
tagged	.\include\sol\single\sol\sol.hpp	/^		struct tagged {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::detail
tagged	.\include\sol\sol\raii.hpp	/^		struct tagged {$/;"	s	namespace:sol::detail
tagged_get	.\include\sol\single\sol\sol.hpp	/^			inline decltype(auto) tagged_get(types<optional<T>>, lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
tagged_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tagged_get(types<T>) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
tagged_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tagged_get(types<T>) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
tagged_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tagged_get(types<sol::optional<T>>) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result
tagged_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tagged_get(types<sol::optional<T>>) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result
tagged_get	.\include\sol\sol\load_result.hpp	/^		decltype(auto) tagged_get(types<T>) const {$/;"	f	struct:sol::load_result
tagged_get	.\include\sol\sol\load_result.hpp	/^		decltype(auto) tagged_get(types<sol::optional<T>>) const {$/;"	f	struct:sol::load_result
tagged_get	.\include\sol\sol\load_result.hpp	/^		sol::error tagged_get(types<sol::error>) const {$/;"	f	struct:sol::load_result
tagged_get	.\include\sol\sol\load_result.hpp	/^		sol::optional<sol::error> tagged_get(types<sol::optional<sol::error>>) const {$/;"	f	struct:sol::load_result
tagged_get	.\include\sol\sol\protected_function_result.hpp	/^		decltype(auto) tagged_get(types<T>) const {$/;"	f	struct:sol::protected_function_result
tagged_get	.\include\sol\sol\protected_function_result.hpp	/^		decltype(auto) tagged_get(types<sol::optional<T>>) const {$/;"	f	struct:sol::protected_function_result
tagged_get	.\include\sol\sol\protected_function_result.hpp	/^		error tagged_get(types<error>) const {$/;"	f	struct:sol::protected_function_result
tagged_get	.\include\sol\sol\protected_function_result.hpp	/^		optional<error> tagged_get(types<optional<error>>) const {$/;"	f	struct:sol::protected_function_result
tagged_get	.\include\sol\sol\stack_core.hpp	/^			inline decltype(auto) tagged_get(types<optional<T>>, lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::stack::stack_detail
tags	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    char*       tags;            \/* the points flags                   *\/$/;"	m	struct:FT_Outline_
tags	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::set<std::string> tags;$/;"	m	struct:Catch::TestCaseInfo
tagsAsString	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        std::string tagsAsString;$/;"	m	struct:Catch::TestCaseInfo
tail	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_ListNode  tail;$/;"	m	struct:FT_ListRec_
takefn	.\include\sol\test_functions.cpp	/^void takefn(std::function<int()> purr) {$/;"	f
takesArg	.\include\sol\Catch\include\external\clara.h	/^            bool takesArg() const { return functionObj->takesArg(); }$/;"	f	class:Clara::Detail::BoundArgFunction
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return !IsBool<M>::value; }$/;"	f	struct:Clara::Detail::BoundDataMember
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return !IsBool<M>::value; }$/;"	f	struct:Clara::Detail::BoundUnaryMethod
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return !IsBool<T>::value; }$/;"	f	struct:Clara::Detail::BoundBinaryFunction
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return false; }$/;"	f	struct:Clara::Detail::BoundNullaryMethod
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return false; }$/;"	f	struct:Clara::Detail::BoundUnaryFunction
takesArg	.\include\sol\Catch\include\external\clara.h	/^            virtual bool takesArg() const { return true; }$/;"	f	struct:Clara::Detail::NullBinder
takesArg	.\include\sol\Catch\include\external\clara.h	/^        bool takesArg() const {$/;"	f	struct:Clara::CommonArgProperties
target	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    const FT_Bitmap*        target;$/;"	m	struct:FT_Raster_Params_
target	.\include\sol\single\sol\sol.hpp	/^			const reference& target;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::handler
target	.\include\sol\sol\protected_function.hpp	/^			const reference& target;$/;"	m	struct:sol::basic_protected_function::handler
tbl	.\include\sol\single\sol\sol.hpp	/^		Table tbl;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
tbl	.\include\sol\sol\proxy.hpp	/^		Table tbl;$/;"	m	struct:sol::proxy
tconcat	.\dep\Lua\src\ltablib.c	/^static int tconcat (lua_State *L) {$/;"	f	file:
tell	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Tell tell;$/;"	m	struct:__anon24
tell	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^    long tell(void* data)$/;"	f	namespace:__anon121
tell	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^Int64 ResourceStream::tell()$/;"	f	class:sf::priv::ResourceStream
tell	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^Int64 FileInputStream::tell()$/;"	f	class:sf::FileInputStream
tell	.\dep\SFML\src\SFML\System\MemoryInputStream.cpp	/^Int64 MemoryInputStream::tell()$/;"	f	class:sf::MemoryInputStream
tell_func	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  long   (*tell_func)  (void *datasource);$/;"	m	struct:__anon109
templates_path	.\include\sol\docs\source\conf.py	/^templates_path = ['_templates']$/;"	v
terminate	.\dep\SFML\src\SFML\System\Thread.cpp	/^void Thread::terminate()$/;"	f	class:sf::Thread
terminate	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^void ThreadImpl::terminate()$/;"	f	class:sf::priv::ThreadImpl
terminate	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^void ThreadImpl::terminate()$/;"	f	class:sf::priv::ThreadImpl
terminateMain	.\dep\SFML\src\SFML\Main\MainAndroid.cpp	/^static void terminateMain(ActivityStates* states)$/;"	f	namespace:sf::priv
terminated	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool terminated;$/;"	m	struct:sf::priv::ActivityStates
test	.\include\sol\Catch\include\internal\catch_test_case_info.h	/^        Ptr<ITestCase> test;$/;"	m	class:Catch::TestCase
test	.\include\sol\examples\usertype.cpp	/^    int test(int x) {$/;"	f	struct:foo
test2	.\dep\Lua\src\liolib.c	/^static int test2 (RN *rn, const char *set) {$/;"	f	file:
testAMode	.\dep\Lua\src\lopcodes.h	284;"	d
testAMode	.\include\lua\lopcodes.h	284;"	d
testCaseEnded	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testCaseEnded( TestCaseStats const& testCaseStats ) {$/;"	f	class:Catch::LegacyReporterAdapter
testCaseStarting	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testCaseStarting( TestCaseInfo const& testInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter
testCases	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        Counts testCases;$/;"	m	struct:Catch::Totals
testCheckedElse	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline bool testCheckedElse( bool flag )$/;"	f
testCheckedIf	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline bool testCheckedIf( bool flag )$/;"	f
testFalse	.\include\sol\Catch\include\internal\catch_result_builder.h	/^            bool testFalse;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
testFalse	.\include\sol\Catch\single_include\catch.hpp	/^            bool testFalse;$/;"	m	struct:Catch::ResultBuilder::ExprComponents
testForMissingAssertions	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        bool testForMissingAssertions( Counts& assertions ) {$/;"	f	class:Catch::RunContext
testGroupEnded	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testGroupEnded( TestGroupStats const& testGroupStats ) {$/;"	f	class:Catch::LegacyReporterAdapter
testGroupEnded	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        void testGroupEnded( std::string const& testSpec, Totals const& totals, std::size_t groupIndex, std::size_t groupsCount ) {$/;"	f	class:Catch::RunContext
testGroupStarting	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testGroupStarting( GroupInfo const& groupInfo ) {$/;"	f	class:Catch::LegacyReporterAdapter
testGroupStarting	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        void testGroupStarting( std::string const& testSpec, std::size_t groupIndex, std::size_t groupsCount ) {$/;"	f	class:Catch::RunContext
testInfo	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        TestCaseInfo testInfo;$/;"	m	struct:Catch::TestCaseStats
testRunEnded	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testRunEnded( TestRunStats const& testRunStats ) {$/;"	f	class:Catch::LegacyReporterAdapter
testRunEnded	.\include\sol\Catch\include\reporters\catch_reporter_compact.hpp	/^        virtual void testRunEnded( TestRunStats const& _testRunStats ) {$/;"	f	struct:Catch::CompactReporter
testRunStarting	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    void LegacyReporterAdapter::testRunStarting( TestRunInfo const& ) {$/;"	f	class:Catch::LegacyReporterAdapter
testSpec	.\include\sol\Catch\include\internal\catch_config.hpp	/^        TestSpec const& testSpec() const { return m_testSpec; }$/;"	f	class:Catch::Config
testSpec	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        TestSpec testSpec() {$/;"	f	class:Catch::TestSpecParser
testStringForMatching	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline const char* testStringForMatching()$/;"	f
testStringForMatching2	.\include\sol\Catch\projects\SelfTest\MiscTests.cpp	/^inline const char* testStringForMatching2()$/;"	f
testTMode	.\dep\Lua\src\lopcodes.h	285;"	d
testTMode	.\include\lua\lopcodes.h	285;"	d
test_eof	.\dep\Lua\src\liolib.c	/^static int test_eof (lua_State *L, FILE *f) {$/;"	f	file:
test_free_func	.\include\sol\test_functions.cpp	/^void test_free_func(std::function<void()> f) {$/;"	f
test_free_func2	.\include\sol\test_functions.cpp	/^void test_free_func2(std::function<int(int)> f, int arg1) {$/;"	f
test_noexcept	.\include\sol\Optional\test_optional.cpp	/^void test_noexcept()$/;"	f
test_stack_guard	.\include\sol\test_stack_guard.hpp	/^	test_stack_guard(lua_State* L, int& begintop, int& endtop) : L(L), begintop(begintop), endtop(endtop) {$/;"	f	struct:test_stack_guard
test_stack_guard	.\include\sol\test_stack_guard.hpp	/^struct test_stack_guard {$/;"	s
test_table_return_one	.\include\sol\test_tables.cpp	/^std::vector<int> test_table_return_one() {$/;"	f
test_table_return_three	.\include\sol\test_tables.cpp	/^std::map<std::string, std::string> test_table_return_three() {$/;"	f
test_table_return_two	.\include\sol\test_tables.cpp	/^std::vector<std::pair<std::string, int>> test_table_return_two() {$/;"	f
test_then_block	.\dep\Lua\src\lparser.c	/^static void test_then_block (LexState *ls, int *escapelist) {$/;"	f	file:
testbit	.\dep\Lua\src\lgc.h	74;"	d
testbit	.\include\lua\lgc.h	74;"	d
testbits	.\dep\Lua\src\lgc.h	69;"	d
testbits	.\include\lua\lgc.h	69;"	d
testnext	.\dep\Lua\src\lparser.c	/^static int testnext (LexState *ls, int c) {$/;"	f	file:
testprop	.\dep\Lua\src\lctype.h	52;"	d
testprop	.\include\lua\lctype.h	52;"	d
tests	.\include\sol\bootstrap.py	/^     tests = os.path.join(builddir, 'tests')$/;"	v
tests	.\include\sol\bootstrap.py	/^     tests = os.path.join(builddir, 'tests.exe')$/;"	v
testsOrTags	.\include\sol\Catch\include\internal\catch_config.hpp	/^        std::vector<std::string> testsOrTags;$/;"	m	struct:Catch::ConfigData
tests_object_files	.\include\sol\bootstrap.py	/^tests_object_files = []$/;"	v
texCoords	.\dep\SFML\include\SFML\Graphics\Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex
texCoords	.\include\SFML\Graphics\Vertex.hpp	/^    Vector2f  texCoords; \/\/\/< Coordinates of the texture's pixel to map to the vertex$/;"	m	class:sf::Vertex
texinfo_documents	.\include\sol\docs\source\conf.py	/^texinfo_documents = [$/;"	v
text	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TextEvent             text;              \/\/\/< Text event parameters (Event::TextEntered)$/;"	m	union:sf::Event::__anon114
text	.\include\SFML\Window\Event.hpp	/^        TextEvent             text;              \/\/\/< Text event parameters (Event::TextEntered)$/;"	m	union:sf::Event::__anon174
texture	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        Texture          texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page
texture	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates
texture	.\include\SFML\Graphics\Font.hpp	/^        Texture          texture; \/\/\/< Texture containing the pixels of the glyphs$/;"	m	struct:sf::Font::Page
texture	.\include\SFML\Graphics\RenderStates.hpp	/^    const Texture* texture;   \/\/\/< Texture$/;"	m	class:sf::RenderStates
textureRect	.\dep\SFML\include\SFML\Graphics\Glyph.hpp	/^    IntRect   textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph
textureRect	.\include\SFML\Graphics\Glyph.hpp	/^    IntRect   textureRect; \/\/\/< Texture coordinates of the glyph inside the font's texture$/;"	m	class:sf::Glyph
textwrap	.\include\sol\ninja_syntax.py	/^import textwrap$/;"	i
th	.\dep\Lua\src\lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:GCUnion::lua_State
th	.\include\lua\lstate.h	/^  struct lua_State th;  \/* thread *\/$/;"	m	union:GCUnion	typeref:struct:GCUnion::lua_State
then	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator& then( CompositeGenerator& other ) {$/;"	f	class:Catch::CompositeGenerator
then	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator& then( T value ) {$/;"	f	class:Catch::CompositeGenerator
thickness	.\src\include\sfLine.h	/^    float thickness;$/;"	m	class:sfLine
thing	.\include\sol\test_usertypes.cpp	/^	thing() {}$/;"	f	struct:thing
thing	.\include\sol\test_usertypes.cpp	/^	thing(int x) : v(x) {}$/;"	f	struct:thing
thing	.\include\sol\test_usertypes.cpp	/^struct thing {$/;"	s	file:
thisDoesntThrow	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    int thisDoesntThrow()$/;"	f	namespace:__anon186
thisFunctionNotImplemented	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^inline int thisFunctionNotImplemented( int ) {$/;"	f
thisThrows	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^    inline int thisThrows()$/;"	f	namespace:__anon186
this_state	.\include\sol\single\sol\sol.hpp	/^	struct this_state {$/;"	s	namespace:sol::sol
this_state	.\include\sol\sol\types.hpp	/^	struct this_state {$/;"	s	namespace:sol
thread	.\include\sol\single\sol\sol.hpp	/^		thread = LUA_TTHREAD,$/;"	m	class:sol::sol::call_syntax::call_status::type
thread	.\include\sol\single\sol\sol.hpp	/^		thread(const stack_reference& r) : thread(r.lua_state(), r.stack_index()) {};$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
thread	.\include\sol\single\sol\sol.hpp	/^		thread(lua_State* L, int index = -1) : reference(L, index) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
thread	.\include\sol\single\sol\sol.hpp	/^		thread(stack_reference&& r) : thread(r.lua_state(), r.stack_index()) {};$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
thread	.\include\sol\single\sol\sol.hpp	/^	class thread : public reference {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol
thread	.\include\sol\sol\thread.hpp	/^		thread(const stack_reference& r) : thread(r.lua_state(), r.stack_index()) {};$/;"	f	class:sol::thread
thread	.\include\sol\sol\thread.hpp	/^		thread(lua_State* L, int index = -1) : reference(L, index) {$/;"	f	class:sol::thread
thread	.\include\sol\sol\thread.hpp	/^		thread(stack_reference&& r) : thread(r.lua_state(), r.stack_index()) {};$/;"	f	class:sol::thread
thread	.\include\sol\sol\thread.hpp	/^	class thread : public reference {$/;"	c	namespace:sol
thread	.\include\sol\sol\types.hpp	/^		thread = LUA_TTHREAD,$/;"	m	class:sol::call_syntax::call_status::type
thread_state	.\include\sol\single\sol\sol.hpp	/^		lua_State* thread_state() const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::thread
thread_state	.\include\sol\sol\thread.hpp	/^		lua_State* thread_state() const {$/;"	f	class:sol::thread
thread_status	.\include\sol\single\sol\sol.hpp	/^	enum class thread_status : int {$/;"	c	class:sol::sol::call_syntax::call_status
thread_status	.\include\sol\sol\types.hpp	/^	enum class thread_status : int {$/;"	c	class:sol::call_syntax::call_status
throwCustom	.\include\sol\Catch\projects\SelfTest\ExceptionTests.cpp	/^inline void throwCustom() {$/;"	f
throwLogicError	.\include\sol\Catch\include\internal\catch_common.hpp	/^    void throwLogicError( std::string const& message, SourceLineInfo const& locationInfo ) {$/;"	f	namespace:Catch
throws	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    bool TestCaseInfo::throws() const {$/;"	f	class:Catch::TestCaseInfo
thvalue	.\dep\Lua\src\lobject.h	177;"	d
thvalue	.\include\lua\lobject.h	177;"	d
tie	.\include\sol\single\sol\sol.hpp	/^		inline tie_t<std::remove_reference_t<Tn>...> tie(Tn&&... argn) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::adl_barrier_detail
tie	.\include\sol\sol\tie.hpp	/^		inline tie_t<std::remove_reference_t<Tn>...> tie(Tn&&... argn) {$/;"	f	namespace:sol::adl_barrier_detail
tie_size	.\include\sol\single\sol\sol.hpp	/^	struct tie_size : std::tuple_size<T> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
tie_size	.\include\sol\single\sol\sol.hpp	/^	struct tie_size<::sol::tie_t<Tn...>> : ::std::tuple_size<::std::tuple<Tn...>> { };$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
tie_size	.\include\sol\single\sol\sol.hpp	/^	struct tie_size<protected_function_result> : std::integral_constant<std::size_t, SIZE_MAX> {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::detail
tie_size	.\include\sol\sol\stack_proxy.hpp	/^	struct tie_size<protected_function_result> : std::integral_constant<std::size_t, SIZE_MAX> {};$/;"	s	namespace:sol::detail
tie_size	.\include\sol\sol\tie.hpp	/^	struct tie_size : std::tuple_size<T> {};$/;"	s	namespace:sol
tie_size	.\include\sol\sol\tie.hpp	/^	struct tie_size<::sol::tie_t<Tn...>> : ::std::tuple_size<::std::tuple<Tn...>> { };$/;"	s	namespace:sol
tie_t	.\include\sol\single\sol\sol.hpp	/^	struct tie_t : public std::tuple<std::add_lvalue_reference_t<Tn>...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
tie_t	.\include\sol\sol\tie.hpp	/^	struct tie_t : public std::tuple<std::add_lvalue_reference_t<Tn>...> {$/;"	s	namespace:sol
timeSlice	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^        int     timeSlice;$/;"	m	struct:__anon147
time_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long time_bits;$/;"	m	struct:vorbis_block
time_bits	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  ogg_int64_t time_bits;$/;"	m	struct:vorbis_dsp_state
timer	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^        sf::Clock timer;$/;"	m	struct:__anon152::ConnectionCache	file:
tinsert	.\dep\Lua\src\ltablib.c	/^static int tinsert (lua_State *L) {$/;"	f	file:
tmname	.\dep\Lua\src\lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmname	.\include\lua\lstate.h	/^  TString *tmname[TM_N];  \/* array with tag-method names *\/$/;"	m	struct:global_State
tmove	.\dep\Lua\src\ltablib.c	/^static int tmove (lua_State *L) {$/;"	f	file:
toAnsiString	.\dep\SFML\src\SFML\System\String.cpp	/^std::string String::toAnsiString(const std::locale& locale) const$/;"	f	class:sf::String
toClose	.\src\include\Game.h	/^	static bool toClose() { return CurrentGameState == Ending; }$/;"	f	class:Game
toIndex	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^        std::size_t toIndex;$/;"	m	struct:ColourString::ColourIndex	file:
toInt	.\src\src\Convert.cpp	/^	int toInt(std::string str) {$/;"	f	namespace:convert
toInteger	.\dep\SFML\src\SFML\Graphics\Color.cpp	/^Uint32 Color::toInteger() const$/;"	f	class:sf::Color
toInteger	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^Uint32 IpAddress::toInteger() const$/;"	f	class:sf::IpAddress
toLower	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^    std::string toLower(std::string str)$/;"	f	namespace:__anon126
toLower	.\dep\SFML\src\SFML\Network\Http.cpp	/^    std::string toLower(std::string str)$/;"	f	namespace:__anon132
toLower	.\include\sol\Catch\include\internal\catch_common.hpp	/^    std::string toLower( std::string const& s ) {$/;"	f	namespace:Catch
toLowerInPlace	.\include\sol\Catch\include\internal\catch_common.hpp	/^    void toLowerInPlace( std::string& s ) {$/;"	f	namespace:Catch
toRemove	.\src\include\Map.h	/^	std::vector<Object*> toRemove;$/;"	m	class:Map
toSF	.\src\include\Color.h	/^	sf::Color toSF() {$/;"	f	struct:Color
toStream	.\src\include\trmclr.hpp	/^    static void toStream(std::ostream& os, uint32_t attribute)$/;"	f	struct:trmclr::Attribute
toString	.\dep\SFML\src\SFML\Network\IpAddress.cpp	/^std::string IpAddress::toString() const$/;"	f	class:sf::IpAddress
toString	.\include\sol\Catch\include\external\clara.h	/^        std::string toString() const {$/;"	f	class:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
toString	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::string toString() const {$/;"	f	class:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::Text
toString	.\include\sol\Catch\include\internal\catch_approx.hpp	/^        std::string toString() const {$/;"	f	class:Catch::Detail::Approx
toString	.\include\sol\Catch\include\internal\catch_approx.hpp	/^inline std::string toString<Detail::Approx>( Detail::Approx const& value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
toString	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
toString	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Contains
toString	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::EndsWith
toString	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::Equals
toString	.\include\sol\Catch\include\internal\catch_objc.hpp	/^                virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::NSStringMatchers::StartsWith
toString	.\include\sol\Catch\include\internal\catch_tostring.h	/^std::string toString( std::vector<T,Allocator> const& v ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^    std::string toString( NSObject* const& nsObject ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^    std::string toString( NSString * CATCH_ARC_STRONG const& nsstring ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^    std::string toString( NSString const * const& nsstring ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( bool value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( char value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( char* const value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( const char* const value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( const double value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( const float value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( const wchar_t* const value )$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( int value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( long long value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( signed char value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( std::nullptr_t ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( std::string const& value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( std::wstring const& value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( unsigned char value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( unsigned int value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( unsigned long long value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( unsigned long value ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^std::string toString( wchar_t* const value )$/;"	f	namespace:Catch
toString	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^    inline std::string toString( const has_maker_and_toString& ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\projects\SelfTest\ToStringWhich.cpp	/^    inline std::string toString( const has_toString& ) {$/;"	f	namespace:Catch
toString	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    std::string toString<std::pair<int, int> >( const std::pair<int, int>& value )$/;"	f	namespace:Catch
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AllOf
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	class:Catch::Matchers::Impl::Generic::AnyOf
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Contains
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::EndsWith
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::Equals
toString	.\include\sol\Catch\single_include\catch.hpp	/^            virtual std::string toString() const {$/;"	f	struct:Catch::Matchers::Impl::StdString::StartsWith
toString	.\include\sol\Catch\single_include\catch.hpp	/^std::string toString( std::vector<T,Allocator> const& v ) {$/;"	f	namespace:Catch
toString	.\src\include\Convert.h	/^	std::string toString(const T& n) {$/;"	f	namespace:convert
toStringSuffix	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^            std::string toStringSuffix() const$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
toStringSuffix	.\include\sol\Catch\single_include\catch.hpp	/^            std::string toStringSuffix() const$/;"	f	struct:Catch::Matchers::Impl::StdString::CasedString
toUtf16	.\dep\SFML\src\SFML\System\String.cpp	/^std::basic_string<Uint16> String::toUtf16() const$/;"	f	class:sf::String
toUtf32	.\dep\SFML\src\SFML\System\String.cpp	/^std::basic_string<Uint32> String::toUtf32() const$/;"	f	class:sf::String
toUtf8	.\dep\SFML\src\SFML\System\String.cpp	/^std::basic_string<Uint8> String::toUtf8() const$/;"	f	class:sf::String
toWideString	.\dep\SFML\src\SFML\System\String.cpp	/^std::wstring String::toWideString() const$/;"	f	class:sf::String
to_string	.\include\sol\single\sol\sol.hpp	/^		to_string,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
to_string	.\include\sol\sol\types.hpp	/^		to_string,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
tobefnz	.\dep\Lua\src\lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
tobefnz	.\include\lua\lstate.h	/^  GCObject *tobefnz;  \/* list of userdata to be GC *\/$/;"	m	struct:global_State
todo	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int restart_interval, todo;$/;"	m	struct:__anon98
todo_include_todos	.\include\sol\docs\source\conf.py	/^todo_include_todos = True$/;"	v
tofile	.\dep\Lua\src\liolib.c	/^static FILE *tofile (lua_State *L) {$/;"	f	file:
tofinalize	.\dep\Lua\src\lgc.h	92;"	d
tofinalize	.\include\lua\lgc.h	92;"	d
tointeger	.\dep\Lua\src\lvm.h	43;"	d
tointeger	.\include\lua\lvm.h	43;"	d
token	.\dep\Lua\src\llex.h	/^  int token;$/;"	m	struct:Token
token	.\include\lua\llex.h	/^  int token;$/;"	m	struct:Token
tolstream	.\dep\Lua\src\liolib.c	144;"	d	file:
tonumber	.\dep\Lua\src\lvm.h	40;"	d
tonumber	.\include\lua\lvm.h	40;"	d
tonumeral	.\dep\Lua\src\lcode.c	/^static int tonumeral(expdesc *e, TValue *v) {$/;"	f	file:
top	.\dep\Lua\src\lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	.\dep\Lua\src\lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
top	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Char   top;$/;"	m	struct:FTC_SBitRec_
top	.\dep\SFML\extlibs\headers\freetype2\ftglyph.h	/^    FT_Int       top;$/;"	m	struct:FT_BitmapGlyphRec_
top	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row
top	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect
top	.\include\SFML\Graphics\Font.hpp	/^        unsigned int top;    \/\/\/< Y position of the row into the texture$/;"	m	struct:sf::Font::Row
top	.\include\SFML\Graphics\Rect.hpp	/^    T top;    \/\/\/< Top coordinate of the rectangle$/;"	m	class:sf::Rect
top	.\include\lua\lstate.h	/^  StkId	top;  \/* top for this function *\/$/;"	m	struct:CallInfo
top	.\include\lua\lstate.h	/^  StkId top;  \/* first free slot in the stack *\/$/;"	m	struct:lua_State
top	.\include\sol\single\sol\sol.hpp	/^		int top() const { return stacktop; }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
top	.\include\sol\sol\stack_guard.hpp	/^		int top;$/;"	m	struct:sol::stack_guard
top	.\include\sol\sol\variadic_args.hpp	/^		int top() const { return stacktop; }$/;"	f	struct:sol::variadic_args
toproto	.\dep\Lua\src\luac.c	137;"	d	file:
tostore	.\dep\Lua\src\lparser.c	/^  int tostore;  \/* number of array elements pending to be stored *\/$/;"	m	struct:ConsControl	file:
tostring	.\dep\Lua\src\lvm.c	454;"	d	file:
total	.\include\sol\Catch\include\internal\catch_totals.hpp	/^        std::size_t total() const {$/;"	f	struct:Catch::Counts
total_iMCU_rows	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION total_iMCU_rows;	\/* # of iMCU rows in image *\/$/;"	m	struct:jpeg_decompress_struct
total_iMCU_rows	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION total_iMCU_rows;	\/* # of iMCU rows to be input to coef ctlr *\/$/;"	m	struct:jpeg_compress_struct
total_passes	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int total_passes;		\/* total number of passes expected *\/$/;"	m	struct:jpeg_progress_mgr
total_samples	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint64 total_samples;$/;"	m	struct:__anon44
totalbytes	.\dep\Lua\src\lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
totalbytes	.\include\lua\lstate.h	/^  l_mem totalbytes;  \/* number of bytes currently allocated - GCdebt *\/$/;"	m	struct:global_State
totals	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Totals totals;$/;"	m	struct:Catch::AssertionStats
totals	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Totals totals;$/;"	m	struct:Catch::TestCaseStats
totals	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Totals totals;$/;"	m	struct:Catch::TestGroupStats
totals	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        Totals totals;$/;"	m	struct:Catch::TestRunStats
totaluse	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  long                totaluse;$/;"	m	struct:vorbis_block
touch	.\dep\SFML\include\SFML\Window\Event.hpp	/^        TouchEvent            touch;             \/\/\/< Touch events parameters (Event::TouchBegan, Event::TouchMoved, Event::TouchEnded)$/;"	m	union:sf::Event::__anon114
touch	.\include\SFML\Window\Event.hpp	/^        TouchEvent            touch;             \/\/\/< Touch events parameters (Event::TouchBegan, Event::TouchMoved, Event::TouchEnded)$/;"	m	union:sf::Event::__anon174
touchEvents	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    std::map<int, Vector2i> touchEvents;$/;"	m	struct:sf::priv::ActivityStates
touched	.\dep\Lua\src\lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon2::__anon3
touched	.\include\lua\lfunc.h	/^      int touched;  \/* mark to avoid cycles with dead threads *\/$/;"	m	struct:UpVal::__anon155::__anon156
tq	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int tq;$/;"	m	struct:__anon98::__anon99
trace_level	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int trace_level;		\/* max msg_level that will be displayed *\/$/;"	m	struct:jpeg_error_mgr
tracks	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_CueSheet_Track *tracks;$/;"	m	struct:__anon53
traits_type	.\include\sol\single\sol\sol.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_free_function
traits_type	.\include\sol\single\sol\sol.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_function
traits_type	.\include\sol\single\sol\sol.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_member_variable
traits_type	.\include\sol\single\sol\sol.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_function
traits_type	.\include\sol\single\sol\sol.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::upvalue_this_member_variable
traits_type	.\include\sol\single\sol\sol.hpp	/^		typedef lua_bind_traits<F> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::member_function_wrapper
traits_type	.\include\sol\single\sol\sol.hpp	/^		typedef lua_bind_traits<F> traits_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::wrapper
traits_type	.\include\sol\sol\call.hpp	/^			typedef sol::lua_bind_traits<F> traits_type;$/;"	t	struct:sol::call_detail::lua_call_wrapper
traits_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::function_detail::upvalue_free_function
traits_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::function_detail::upvalue_member_function
traits_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::function_detail::upvalue_member_variable
traits_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::function_detail::upvalue_this_member_function
traits_type	.\include\sol\sol\function_types_stateless.hpp	/^			typedef lua_bind_traits<function_type> traits_type;$/;"	t	struct:sol::function_detail::upvalue_this_member_variable
traits_type	.\include\sol\sol\wrapper.hpp	/^		typedef lua_bind_traits<F> traits_type;$/;"	t	struct:sol::member_function_wrapper
traits_type	.\include\sol\sol\wrapper.hpp	/^		typedef lua_bind_traits<F> traits_type;$/;"	t	struct:sol::wrapper
trampoline	.\include\sol\single\sol\sol.hpp	/^		int trampoline(lua_State* L, Fx&& f, Args&&... args) {$/;"	f	namespace:sol::sol::detail
trampoline	.\include\sol\sol\types.hpp	/^		int trampoline(lua_State* L, Fx&& f, Args&&... args) {$/;"	f	namespace:sol::detail
transform	.\dep\SFML\include\SFML\Graphics\RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates
transform	.\include\SFML\Graphics\RenderStates.hpp	/^    Transform      transform; \/\/\/< Transform$/;"	m	class:sf::RenderStates
transformPoint	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Vector2f Transform::transformPoint(const Vector2f& point) const$/;"	f	class:sf::Transform
transformPoint	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Vector2f Transform::transformPoint(float x, float y) const$/;"	f	class:sf::Transform
transformRect	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^FloatRect Transform::transformRect(const FloatRect& rectangle) const$/;"	f	class:sf::Transform
transform_glyph	.\dep\SFML\extlibs\headers\freetype2\ftrender.h	/^    FT_Renderer_TransformFunc  transform_glyph;$/;"	m	struct:FT_Renderer_Class_
translate	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::translate(const Vector2f& offset)$/;"	f	class:sf::Transform
translate	.\dep\SFML\src\SFML\Graphics\Transform.cpp	/^Transform& Transform::translate(float x, float y)$/;"	f	class:sf::Transform
translateActiveException	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^        virtual std::string translateActiveException() const {$/;"	f	class:Catch::ExceptionTranslatorRegistry
translateActiveException	.\include\sol\Catch\include\internal\catch_registry_hub.hpp	/^    std::string translateActiveException() {$/;"	f	namespace:Catch
transparent	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int flags, bgindex, ratio, transparent, eflags;$/;"	m	struct:__anon108
traverseCclosure	.\dep\Lua\src\lgc.c	/^static lu_mem traverseCclosure (global_State *g, CClosure *cl) {$/;"	f	file:
traverseLclosure	.\dep\Lua\src\lgc.c	/^static lu_mem traverseLclosure (global_State *g, LClosure *cl) {$/;"	f	file:
traverse_get	.\include\sol\sol\state_view.hpp	/^		decltype(auto) traverse_get(Keys&&... keys) const {$/;"	f	class:sol::state_view
traverse_get	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get(Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_get_deep	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_deep(Key&& key) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_deep	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_deep(Key&& key, Keys&&... keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_deep	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_deep(Key&& key) const {$/;"	f	class:sol::basic_table_core
traverse_get_deep	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_deep(Key&& key, Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_get_deep_optional	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_deep_optional(int& popcount, Key&& key) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_deep_optional	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_deep_optional(int& popcount, Key&& key, Keys&&... keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_deep_optional	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_deep_optional(int& popcount, Key&& key) const {$/;"	f	class:sol::basic_table_core
traverse_get_deep_optional	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_deep_optional(int& popcount, Key&& key, Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_get_optional	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_optional(std::false_type, Keys&&... keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_optional	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) traverse_get_optional(std::true_type, Keys&&... keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_get_optional	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_optional(std::false_type, Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_get_optional	.\include\sol\sol\table_core.hpp	/^		decltype(auto) traverse_get_optional(std::true_type, Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_set	.\include\sol\sol\state_view.hpp	/^		state_view& traverse_set(Args&&... args) {$/;"	f	class:sol::state_view
traverse_set	.\include\sol\sol\table_core.hpp	/^		basic_table_core& traverse_set(Keys&&... keys) {$/;"	f	class:sol::basic_table_core
traverse_set_deep	.\include\sol\single\sol\sol.hpp	/^		void traverse_set_deep(Key&& key, Keys&&... keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_set_deep	.\include\sol\single\sol\sol.hpp	/^		void traverse_set_deep(Key&& key, Value&& value) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
traverse_set_deep	.\include\sol\sol\table_core.hpp	/^		void traverse_set_deep(Key&& key, Keys&&... keys) const {$/;"	f	class:sol::basic_table_core
traverse_set_deep	.\include\sol\sol\table_core.hpp	/^		void traverse_set_deep(Key&& key, Value&& value) const {$/;"	f	class:sol::basic_table_core
traverseephemeron	.\dep\Lua\src\lgc.c	/^static int traverseephemeron (global_State *g, Table *h) {$/;"	f	file:
traverseproto	.\dep\Lua\src\lgc.c	/^static int traverseproto (global_State *g, Proto *f) {$/;"	f	file:
traversestrongtable	.\dep\Lua\src\lgc.c	/^static void traversestrongtable (global_State *g, Table *h) {$/;"	f	file:
traversetable	.\dep\Lua\src\lgc.c	/^static lu_mem traversetable (global_State *g, Table *h) {$/;"	f	file:
traversethread	.\dep\Lua\src\lgc.c	/^static lu_mem traversethread (global_State *g, lua_State *th) {$/;"	f	file:
traverseweakvalue	.\dep\Lua\src\lgc.c	/^static void traverseweakvalue (global_State *g, Table *h) {$/;"	f	file:
treatstackoption	.\dep\Lua\src\ldblib.c	/^static void treatstackoption (lua_State *L, lua_State *L1, const char *fname) {$/;"	f	file:
tree	.\src\include\SkillTree.h	/^    SkillTree* tree;$/;"	m	class:SkillNode
tremove	.\dep\Lua\src\ltablib.c	/^static int tremove (lua_State *L) {$/;"	f	file:
trim	.\dep\Lua\src\lbitlib.c	41;"	d	file:
trim	.\include\sol\Catch\include\internal\catch_common.hpp	/^    std::string trim( std::string const& str ) {$/;"	f	namespace:Catch
trivial_init	.\include\sol\Optional\optional.hpp	/^constexpr struct trivial_init_t{} trivial_init{};$/;"	s	namespace:sol
trivial_init_t	.\include\sol\Optional\optional.hpp	/^constexpr struct trivial_init_t{} trivial_init{};$/;"	s	namespace:sol
trmclr	.\src\include\trmclr.hpp	/^namespace trmclr$/;"	n
true	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	76;"	d
true	.\dep\SFML\extlibs\headers\FLAC\ordinals.h	82;"	d
trueValue	.\include\sol\Catch\include\internal\catch_common.h	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool
trueValue	.\include\sol\Catch\single_include\catch.hpp	/^        void trueValue() const {}$/;"	f	class:Catch::SafeBool
true_a	.\include\sol\test_usertypes.cpp	/^	static const int true_a;$/;"	m	struct:factory_test	file:
true_a	.\include\sol\test_usertypes.cpp	/^const int factory_test::true_a = 156;$/;"	m	class:factory_test	file:
true_arity	.\include\sol\single\sol\sol.hpp	/^		static const std::size_t true_arity = base_t::arity;$/;"	m	struct:sol::sol::call_syntax::call_status::type::lua_bind_traits
true_arity	.\include\sol\sol\types.hpp	/^		static const std::size_t true_arity = base_t::arity;$/;"	m	struct:sol::call_syntax::call_status::type::lua_bind_traits
true_free_arity	.\include\sol\single\sol\sol.hpp	/^		static const std::size_t true_free_arity = base_t::free_arity;$/;"	m	struct:sol::sol::call_syntax::call_status::type::lua_bind_traits
true_free_arity	.\include\sol\sol\types.hpp	/^		static const std::size_t true_free_arity = base_t::free_arity;$/;"	m	struct:sol::call_syntax::call_status::type::lua_bind_traits
tryTranslators	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^        std::string tryTranslators() const {$/;"	f	class:Catch::ExceptionTranslatorRegistry
tryfuncTM	.\dep\Lua\src\ldo.c	/^static void tryfuncTM (lua_State *L, StkId func) {$/;"	f	file:
ts	.\dep\Lua\src\llex.h	/^  TString *ts;$/;"	m	union:__anon5
ts	.\dep\Lua\src\lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:GCUnion::TString
ts	.\include\lua\llex.h	/^  TString *ts;$/;"	m	union:__anon157
ts	.\include\lua\lstate.h	/^  struct TString ts;$/;"	m	union:GCUnion	typeref:struct:GCUnion::TString
tsslen	.\dep\Lua\src\lobject.h	336;"	d
tsslen	.\include\lua\lobject.h	336;"	d
tsv	.\dep\Lua\src\lobject.h	/^  TString tsv;$/;"	m	union:UTString
tsv	.\include\lua\lobject.h	/^  TString tsv;$/;"	m	union:UTString
tsvalue	.\dep\Lua\src\lobject.h	169;"	d
tsvalue	.\include\lua\lobject.h	169;"	d
ttisCclosure	.\dep\Lua\src\lobject.h	154;"	d
ttisCclosure	.\include\lua\lobject.h	154;"	d
ttisLclosure	.\dep\Lua\src\lobject.h	155;"	d
ttisLclosure	.\include\lua\lobject.h	155;"	d
ttisboolean	.\dep\Lua\src\lobject.h	146;"	d
ttisboolean	.\include\lua\lobject.h	146;"	d
ttisclosure	.\dep\Lua\src\lobject.h	153;"	d
ttisclosure	.\include\lua\lobject.h	153;"	d
ttisdeadkey	.\dep\Lua\src\lobject.h	159;"	d
ttisdeadkey	.\include\lua\lobject.h	159;"	d
ttisfloat	.\dep\Lua\src\lobject.h	143;"	d
ttisfloat	.\include\lua\lobject.h	143;"	d
ttisfulluserdata	.\dep\Lua\src\lobject.h	157;"	d
ttisfulluserdata	.\include\lua\lobject.h	157;"	d
ttisfunction	.\dep\Lua\src\lobject.h	152;"	d
ttisfunction	.\include\lua\lobject.h	152;"	d
ttisinteger	.\dep\Lua\src\lobject.h	144;"	d
ttisinteger	.\include\lua\lobject.h	144;"	d
ttislcf	.\dep\Lua\src\lobject.h	156;"	d
ttislcf	.\include\lua\lobject.h	156;"	d
ttislightuserdata	.\dep\Lua\src\lobject.h	147;"	d
ttislightuserdata	.\include\lua\lobject.h	147;"	d
ttislngstring	.\dep\Lua\src\lobject.h	150;"	d
ttislngstring	.\include\lua\lobject.h	150;"	d
ttisnil	.\dep\Lua\src\lobject.h	145;"	d
ttisnil	.\include\lua\lobject.h	145;"	d
ttisnumber	.\dep\Lua\src\lobject.h	142;"	d
ttisnumber	.\include\lua\lobject.h	142;"	d
ttisshrstring	.\dep\Lua\src\lobject.h	149;"	d
ttisshrstring	.\include\lua\lobject.h	149;"	d
ttisstring	.\dep\Lua\src\lobject.h	148;"	d
ttisstring	.\include\lua\lobject.h	148;"	d
ttistable	.\dep\Lua\src\lobject.h	151;"	d
ttistable	.\include\lua\lobject.h	151;"	d
ttisthread	.\dep\Lua\src\lobject.h	158;"	d
ttisthread	.\include\lua\lobject.h	158;"	d
ttnov	.\dep\Lua\src\lobject.h	136;"	d
ttnov	.\include\lua\lobject.h	136;"	d
ttuv_	.\dep\Lua\src\lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata
ttuv_	.\include\lua\lobject.h	/^  lu_byte ttuv_;  \/* user value's tag *\/$/;"	m	struct:Udata
ttype	.\dep\Lua\src\lobject.h	133;"	d
ttype	.\include\lua\lobject.h	133;"	d
ttypename	.\dep\Lua\src\ltm.h	53;"	d
ttypename	.\include\lua\ltm.h	53;"	d
tuple_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tuple_get(std::index_sequence<I...>) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
tuple_get	.\include\sol\single\sol\sol.hpp	/^		decltype(auto) tuple_get(types<Ret>, std::index_sequence<I>, Keys&& keys) const {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
tuple_get	.\include\sol\sol\proxy.hpp	/^		decltype(auto) tuple_get(std::index_sequence<I...>) const {$/;"	f	struct:sol::proxy
tuple_get	.\include\sol\sol\table_core.hpp	/^		decltype(auto) tuple_get(types<Ret>, std::index_sequence<I>, Keys&& keys) const {$/;"	f	class:sol::basic_table_core
tuple_set	.\include\sol\single\sol\sol.hpp	/^		void tuple_set(std::index_sequence<I...>, Pairs&& pairs) {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core
tuple_set	.\include\sol\single\sol\sol.hpp	/^		void tuple_set(std::index_sequence<I...>, T&& value) const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
tuple_set	.\include\sol\sol\proxy.hpp	/^		void tuple_set(std::index_sequence<I...>, T&& value) const {$/;"	f	struct:sol::proxy
tuple_set	.\include\sol\sol\table_core.hpp	/^		void tuple_set(std::index_sequence<I...>, Pairs&& pairs) {$/;"	f	class:sol::basic_table_core
tuple_types_	.\include\sol\single\sol\sol.hpp	/^			struct tuple_types_ { typedef types<Args...> type; };$/;"	s	namespace:sol::meta::detail
tuple_types_	.\include\sol\single\sol\sol.hpp	/^			struct tuple_types_<std::tuple<Args...>> { typedef types<Args...> type; };$/;"	s	namespace:sol::meta::detail
tuple_types_	.\include\sol\sol\tuple.hpp	/^			struct tuple_types_ { typedef types<Args...> type; };$/;"	s	namespace:sol::meta::detail
tuple_types_	.\include\sol\sol\tuple.hpp	/^			struct tuple_types_<std::tuple<Args...>> { typedef types<Args...> type; };$/;"	s	namespace:sol::meta::detail
tvk	.\dep\Lua\src\lobject.h	/^  TValue tvk;$/;"	m	union:TKey
tvk	.\include\lua\lobject.h	/^  TValue tvk;$/;"	m	union:TKey
two_pass_quantize	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean two_pass_quantize;	\/* TRUE=use two-pass color quantization *\/$/;"	m	struct:jpeg_decompress_struct
two_things	.\include\sol\test_customizations.cpp	/^struct two_things {$/;"	s	file:
twoto	.\dep\Lua\src\lobject.h	518;"	d
twoto	.\include\lua\lobject.h	518;"	d
twups	.\dep\Lua\src\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
twups	.\dep\Lua\src\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_State
twups	.\include\lua\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:global_State	typeref:struct:global_State::lua_State
twups	.\include\lua\lstate.h	/^  struct lua_State *twups;  \/* list of threads with open upvalues *\/$/;"	m	struct:lua_State	typeref:struct:lua_State::lua_State
txtToken	.\dep\Lua\src\llex.c	/^static const char *txtToken (LexState *ls, int token) {$/;"	f	file:
type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__EntropyCodingMethodType type;$/;"	m	struct:__anon28
type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__MetadataType type;$/;"	m	struct:__anon57
type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_Picture_Type type;$/;"	m	struct:__anon55
type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__SubframeType type;$/;"	m	struct:__anon35
type	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned type:1;$/;"	m	struct:__anon52
type	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Size_Request_Type  type;$/;"	m	struct:FT_Size_RequestRec_
type	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    BDF_PropertyType  type;$/;"	m	struct:BDF_PropertyRec_
type	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint32 type;$/;"	m	struct:__anon103
type	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc size,type,channel;$/;"	m	struct:__anon106
type	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Sensor::Type type; \/\/\/< Type of the sensor$/;"	m	struct:sf::Event::SensorEvent
type	.\dep\SFML\include\SFML\Window\Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event
type	.\include\SFML\Window\Event.hpp	/^        Sensor::Type type; \/\/\/< Type of the sensor$/;"	m	struct:sf::Event::SensorEvent
type	.\include\SFML\Window\Event.hpp	/^    EventType type; \/\/\/< Type of the event$/;"	m	class:sf::Event
type	.\include\sol\Catch\include\external\clara.h	/^            Type type;$/;"	m	struct:Clara::Parser::Token
type	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T const&>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef
type	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T const>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef
type	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef<T&>{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef
type	.\include\sol\Catch\include\external\clara.h	/^        template<typename T> struct RemoveConstRef{ typedef T type; };$/;"	t	struct:Clara::Detail::RemoveConstRef
type	.\include\sol\Catch\include\internal\catch_message.h	/^        ResultWas::OfType type;$/;"	m	struct:Catch::MessageInfo
type	.\include\sol\Optional\test_optional.cpp	/^  typedef T type;$/;"	t	struct:generic	file:
type	.\include\sol\Optional\test_optional.cpp	/^  typedef std::reference_wrapper<U> type;$/;"	t	struct:generic	file:
type	.\include\sol\single\sol\sol.hpp	/^				typedef T type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::strip
type	.\include\sol\single\sol\sol.hpp	/^				typedef T& type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::stack::stack_detail::strip
type	.\include\sol\single\sol\sol.hpp	/^			struct tuple_types_ { typedef types<Args...> type; };$/;"	t	struct:sol::meta::detail::tuple_types_
type	.\include\sol\single\sol\sol.hpp	/^			struct tuple_types_<std::tuple<Args...>> { typedef types<Args...> type; };$/;"	t	struct:sol::meta::detail::tuple_types_
type	.\include\sol\single\sol\sol.hpp	/^			struct void_tuple_element<I, std::tuple<>> { typedef void type; };$/;"	t	struct:sol::meta::meta_detail::void_tuple_element
type	.\include\sol\single\sol\sol.hpp	/^			typedef R type;$/;"	t	struct:sol::meta::remove_member_pointer
type	.\include\sol\single\sol\sol.hpp	/^			typedef T type;$/;"	t	struct:sol::meta::unwrapped
type	.\include\sol\single\sol\sol.hpp	/^		struct at_in_pack<0, Arg, Args...> { typedef Arg type; };$/;"	t	struct:sol::meta::at_in_pack
type	.\include\sol\single\sol\sol.hpp	/^		struct identity { typedef T type; };$/;"	t	struct:sol::meta::identity
type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
type	.\include\sol\single\sol\sol.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
type	.\include\sol\single\sol\sol.hpp	/^		typedef F type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::wrap
type	.\include\sol\single\sol\sol.hpp	/^		typedef T type;$/;"	t	struct:sol::sol::unique_usertype_traits
type	.\include\sol\single\sol\sol.hpp	/^		typedef std::conditional_t<std::is_array<meta::unqualified_t<T>>::value, T&, std::decay_t<T>> type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::clean_type
type	.\include\sol\single\sol\sol.hpp	/^	enum class type : int {$/;"	c	class:sol::sol::call_syntax::call_status
type	.\include\sol\sol\bind_traits.hpp	/^			struct void_tuple_element<I, std::tuple<>> { typedef void type; };$/;"	t	struct:sol::meta::meta_detail::void_tuple_element
type	.\include\sol\sol\function_types_templated.hpp	/^		typedef F type;$/;"	t	struct:sol::wrap
type	.\include\sol\sol\stack_core.hpp	/^				typedef T type;$/;"	t	struct:sol::stack::stack_detail::strip
type	.\include\sol\sol\stack_core.hpp	/^				typedef T& type;$/;"	t	struct:sol::stack::stack_detail::strip
type	.\include\sol\sol\traits.hpp	/^			typedef R type;$/;"	t	struct:sol::meta::remove_member_pointer
type	.\include\sol\sol\traits.hpp	/^			typedef T type;$/;"	t	struct:sol::meta::unwrapped
type	.\include\sol\sol\traits.hpp	/^		struct at_in_pack<0, Arg, Args...> { typedef Arg type; };$/;"	t	struct:sol::meta::at_in_pack
type	.\include\sol\sol\traits.hpp	/^		struct identity { typedef T type; };$/;"	t	struct:sol::meta::identity
type	.\include\sol\sol\tuple.hpp	/^			struct tuple_types_ { typedef types<Args...> type; };$/;"	t	struct:sol::meta::detail::tuple_types_
type	.\include\sol\sol\tuple.hpp	/^			struct tuple_types_<std::tuple<Args...>> { typedef types<Args...> type; };$/;"	t	struct:sol::meta::detail::tuple_types_
type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Arg, Args...>> { typedef Arg front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
type	.\include\sol\sol\tuple.hpp	/^		struct pop_front_type<types<Args...>> { typedef void front_type; typedef types<Args...> type; };$/;"	t	struct:sol::meta::pop_front_type
type	.\include\sol\sol\types.hpp	/^		typedef T type;$/;"	t	struct:sol::unique_usertype_traits
type	.\include\sol\sol\types.hpp	/^	enum class type : int {$/;"	c	class:sol::call_syntax::call_status
type	.\include\sol\sol\usertype_metatable.hpp	/^		typedef std::conditional_t<std::is_array<meta::unqualified_t<T>>::value, T&, std::decay_t<T>> type;$/;"	t	struct:sol::clean_type
type_assert	.\include\sol\single\sol\sol.hpp	/^	inline void type_assert(lua_State* L, int index, type expected) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_assert	.\include\sol\single\sol\sol.hpp	/^	inline void type_assert(lua_State* L, int index, type expected, type actual) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_assert	.\include\sol\sol\types.hpp	/^	inline void type_assert(lua_State* L, int index, type expected) {$/;"	f	class:sol::call_syntax::call_status::type
type_assert	.\include\sol\sol\types.hpp	/^	inline void type_assert(lua_State* L, int index, type expected, type actual) {$/;"	f	class:sol::call_syntax::call_status::type
type_cast	.\include\sol\single\sol\sol.hpp	/^			static void* type_cast(void* voiddata, std::size_t ti) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_cast	.\include\sol\sol\inheritance.hpp	/^			static void* type_cast(void* voiddata, std::size_t ti) {$/;"	f	struct:sol::detail::inheritance
type_cast_bases	.\include\sol\single\sol\sol.hpp	/^			static void* type_cast_bases(types<>, T*, std::size_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_cast_bases	.\include\sol\single\sol\sol.hpp	/^			static void* type_cast_bases(types<Base, Args...>, T* data, std::size_t ti) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_cast_bases	.\include\sol\sol\inheritance.hpp	/^			static void* type_cast_bases(types<>, T*, std::size_t) {$/;"	f	struct:sol::detail::inheritance
type_cast_bases	.\include\sol\sol\inheritance.hpp	/^			static void* type_cast_bases(types<Base, Args...>, T* data, std::size_t ti) {$/;"	f	struct:sol::detail::inheritance
type_check	.\include\sol\single\sol\sol.hpp	/^			static bool type_check(std::size_t ti) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_check	.\include\sol\sol\inheritance.hpp	/^			static bool type_check(std::size_t ti) {$/;"	f	struct:sol::detail::inheritance
type_check_bases	.\include\sol\single\sol\sol.hpp	/^			static bool type_check_bases(types<>, std::size_t) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_check_bases	.\include\sol\single\sol\sol.hpp	/^			static bool type_check_bases(types<Base, Args...>, std::size_t ti) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::detail::inheritance
type_check_bases	.\include\sol\sol\inheritance.hpp	/^			static bool type_check_bases(types<>, std::size_t) {$/;"	f	struct:sol::detail::inheritance
type_check_bases	.\include\sol\sol\inheritance.hpp	/^			static bool type_check_bases(types<Base, Args...>, std::size_t ti) {$/;"	f	struct:sol::detail::inheritance
type_error	.\include\sol\single\sol\sol.hpp	/^	inline void type_error(lua_State* L, int expected, int actual) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_error	.\include\sol\single\sol\sol.hpp	/^	inline void type_error(lua_State* L, type expected, type actual) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_error	.\include\sol\sol\types.hpp	/^	inline void type_error(lua_State* L, int expected, int actual) {$/;"	f	class:sol::call_syntax::call_status::type
type_error	.\include\sol\sol\types.hpp	/^	inline void type_error(lua_State* L, type expected, type actual) {$/;"	f	class:sol::call_syntax::call_status::type
type_name	.\include\sol\single\sol\sol.hpp	/^	inline std::string type_name(lua_State* L, type t) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_name	.\include\sol\sol\types.hpp	/^	inline std::string type_name(lua_State* L, type t) {$/;"	f	class:sol::call_syntax::call_status::type
type_of	.\include\sol\single\sol\sol.hpp	/^	inline type type_of() {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_of	.\include\sol\single\sol\sol.hpp	/^	inline type type_of(lua_State* L, int index) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_of	.\include\sol\sol\types.hpp	/^	inline type type_of() {$/;"	f	class:sol::call_syntax::call_status::type
type_of	.\include\sol\sol\types.hpp	/^	inline type type_of(lua_State* L, int index) {$/;"	f	class:sol::call_syntax::call_status::type
type_panic	.\include\sol\single\sol\sol.hpp	/^	inline int type_panic(lua_State* L, int index, type expected, type actual) {$/;"	f	class:sol::sol::call_syntax::call_status::type
type_panic	.\include\sol\sol\types.hpp	/^	inline int type_panic(lua_State* L, int index, type expected, type actual) {$/;"	f	class:sol::call_syntax::call_status::type
typeerror	.\dep\Lua\src\lauxlib.c	/^static int typeerror (lua_State *L, int arg, const char *tname) {$/;"	f	file:
types	.\include\sol\single\sol\sol.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	s	namespace:sol
types	.\include\sol\sol\tuple.hpp	/^	struct types { typedef std::make_index_sequence<sizeof...(Args)> indices; static constexpr std::size_t size() { return sizeof...(Args); } };$/;"	s	namespace:sol
u	.\dep\Lua\src\lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon2
u	.\dep\Lua\src\llimits.h	/^  double u;$/;"	m	union:__anon6
u	.\dep\Lua\src\lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon7
u	.\dep\Lua\src\lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon12
u	.\dep\Lua\src\lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Udata
u	.\dep\Lua\src\lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon15
u	.\dep\Lua\src\lstrlib.c	/^  union { double d; void *p; lua_Integer i; lua_Number n; } u;$/;"	m	struct:cD	typeref:union:cD::__anon20	file:
u	.\dep\SFML\extlibs\headers\freetype2\ftbdf.h	/^    } u;$/;"	m	struct:BDF_PropertyRec_	typeref:union:BDF_PropertyRec_::__anon77
u	.\include\lua\lfunc.h	/^  } u;$/;"	m	struct:UpVal	typeref:union:UpVal::__anon155
u	.\include\lua\llimits.h	/^  double u;$/;"	m	union:__anon158
u	.\include\lua\lobject.h	/^  } u;$/;"	m	struct:TString	typeref:union:TString::__anon159
u	.\include\lua\lparser.h	/^  } u;$/;"	m	struct:expdesc	typeref:union:expdesc::__anon163
u	.\include\lua\lstate.h	/^  struct Udata u;$/;"	m	union:GCUnion	typeref:struct:GCUnion::Udata
u	.\include\lua\lstate.h	/^  } u;$/;"	m	struct:CallInfo	typeref:union:CallInfo::__anon166
u_posrelat	.\dep\Lua\src\lutf8lib.c	/^static lua_Integer u_posrelat (lua_Integer pos, size_t len) {$/;"	f	file:
uchar	.\dep\Lua\src\lstrlib.c	39;"	d	file:
ud	.\dep\Lua\src\lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State
ud	.\include\lua\lstate.h	/^  void *ud;         \/* auxiliary data to 'frealloc' *\/$/;"	m	struct:global_State
udata2finalize	.\dep\Lua\src\lgc.c	/^static GCObject *udata2finalize (global_State *g) {$/;"	f	file:
udatatypename	.\dep\Lua\src\ltm.c	/^static const char udatatypename[] = "userdata";$/;"	v	file:
udevContext	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    udev* udevContext = 0;$/;"	m	namespace:__anon150	file:
udevMonitor	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    udev_monitor* udevMonitor = 0;$/;"	m	namespace:__anon150	file:
uid_base	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong        uid_base;$/;"	m	struct:CID_FaceInfoRec_
uint64_t	.\dep\SFML\extlibs\headers\AL\alext.h	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Graphics\GLLoader.hpp	/^typedef unsigned long long int uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned __int64 uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned long int uint64_t;$/;"	t
uint64_t	.\dep\SFML\src\SFML\Window\Unix\GlxExtensions.hpp	/^typedef unsigned long long int uint64_t;$/;"	t
uint64_t	.\include\sol\Catch\include\internal\catch_timer.h	/^typedef unsigned long long uint64_t;$/;"	t
ulCodePageRange1	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulCodePageRange1;       \/* Bits 0-31   *\/$/;"	m	struct:TT_OS2_
ulCodePageRange2	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulCodePageRange2;       \/* Bits 32-63  *\/$/;"	m	struct:TT_OS2_
ulUnicodeRange1	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulUnicodeRange1;        \/* Bits 0-31   *\/$/;"	m	struct:TT_OS2_
ulUnicodeRange2	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulUnicodeRange2;        \/* Bits 32-63  *\/$/;"	m	struct:TT_OS2_
ulUnicodeRange3	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulUnicodeRange3;        \/* Bits 64-95  *\/$/;"	m	struct:TT_OS2_
ulUnicodeRange4	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_ULong   ulUnicodeRange4;        \/* Bits 96-127 *\/$/;"	m	struct:TT_OS2_
umt_t	.\include\sol\single\sol\sol.hpp	/^			typedef simple_usertype_metatable<T> umt_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
umt_t	.\include\sol\single\sol\sol.hpp	/^			typedef usertype_metatable<T, std::index_sequence<I...>, Args...> umt_t;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::stack::pusher
umt_t	.\include\sol\sol\simple_usertype_metatable.hpp	/^			typedef simple_usertype_metatable<T> umt_t;$/;"	t	struct:sol::stack::pusher
umt_t	.\include\sol\sol\usertype_metatable.hpp	/^			typedef usertype_metatable<T, std::index_sequence<I...>, Args...> umt_t;$/;"	t	struct:sol::stack::pusher
unary_minus	.\include\sol\single\sol\sol.hpp	/^		unary_minus,$/;"	m	class:sol::sol::call_syntax::call_status::type::meta_function
unary_minus	.\include\sol\sol\types.hpp	/^		unary_minus,$/;"	m	class:sol::call_syntax::call_status::type::meta_function
unbind	.\dep\SFML\src\SFML\Network\UdpSocket.cpp	/^void UdpSocket::unbind()$/;"	f	class:sf::UdpSocket
unbound_search	.\dep\Lua\src\ltable.c	/^static int unbound_search (Table *t, unsigned int j) {$/;"	f	file:
unchecked_get	.\include\sol\single\sol\sol.hpp	/^			inline auto tagged_get(types<T>, lua_State* L, int index, record& tracking) -> decltype(stack_detail::unchecked_get<T>(L, index, tracking)) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
unchecked_get	.\include\sol\single\sol\sol.hpp	/^			inline decltype(auto) unchecked_get(lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::stack::stack_detail
unchecked_get	.\include\sol\sol\stack_core.hpp	/^			inline auto tagged_get(types<T>, lua_State* L, int index, record& tracking) -> decltype(stack_detail::unchecked_get<T>(L, index, tracking)) {$/;"	f	namespace:sol::stack::stack_detail
unchecked_get	.\include\sol\sol\stack_core.hpp	/^			inline decltype(auto) unchecked_get(lua_State* L, int index, record& tracking) {$/;"	f	namespace:sol::stack::stack_detail
undefgoto	.\dep\Lua\src\lparser.c	/^static l_noret undefgoto (LexState *ls, Labeldesc *gt) {$/;"	f	file:
underline	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_Byte    underline;$/;"	m	struct:FT_WinFNT_HeaderRec_
underlinePosition	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short  underlinePosition;$/;"	m	struct:TT_Postscript_
underlineThickness	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short  underlineThickness;$/;"	m	struct:TT_Postscript_
underline_position	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          underline_position;$/;"	m	struct:FT_FaceRec_
underline_position	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Short    underline_position;$/;"	m	struct:PS_FontInfoRec_
underline_thickness	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short          underline_thickness;$/;"	m	struct:FT_FaceRec_
underline_thickness	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_UShort   underline_thickness;$/;"	m	struct:PS_FontInfoRec_
unexpectedExceptions	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        unsigned int unexpectedExceptions;$/;"	m	class:Catch::JunitReporter
unichar	.\dep\SFML\src\SFML\Window\OSX\WindowImplCocoa.hpp	/^typedef unsigned short unichar; \/\/ See NSString.h$/;"	t
unicode	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 Unicode value of the character$/;"	m	struct:sf::Event::TextEvent
unicode	.\include\SFML\Window\Event.hpp	/^        Uint32 unicode; \/\/\/< UTF-32 Unicode value of the character$/;"	m	struct:sf::Event::TextEvent
unique_base	.\include\sol\single\sol\sol.hpp	/^		typedef std::unique_ptr<lua_State, void(*)(lua_State*)> unique_base;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_core::sol::load_result::sol::state_view::sol::state
unique_base	.\include\sol\sol\state.hpp	/^		typedef std::unique_ptr<lua_State, void(*)(lua_State*)> unique_base;$/;"	t	class:sol::state
unique_destruct	.\include\sol\single\sol\sol.hpp	/^		inline int unique_destruct(lua_State* L) {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
unique_destruct	.\include\sol\sol\stack_core.hpp	/^		inline int unique_destruct(lua_State* L) {$/;"	f	namespace:sol::detail
unique_id	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Int     unique_id;$/;"	m	struct:PS_PrivateRec_
unique_id	.\include\sol\single\sol\sol.hpp	/^		inline std::size_t unique_id() {$/;"	f	namespace:sol::sol::call_syntax::call_status::sol::detail
unique_id	.\include\sol\sol\inheritance.hpp	/^		inline std::size_t unique_id() {$/;"	f	namespace:sol::detail
unique_usertype	.\include\sol\single\sol\sol.hpp	/^		struct unique_usertype {};$/;"	s	namespace:sol::sol::detail
unique_usertype	.\include\sol\sol\types.hpp	/^		struct unique_usertype {};$/;"	s	namespace:sol::detail
unique_usertype_traits	.\include\sol\single\sol\sol.hpp	/^	struct unique_usertype_traits {$/;"	s	namespace:sol::sol
unique_usertype_traits	.\include\sol\single\sol\sol.hpp	/^	struct unique_usertype_traits<std::shared_ptr<T>> {$/;"	s	namespace:sol::sol
unique_usertype_traits	.\include\sol\single\sol\sol.hpp	/^	struct unique_usertype_traits<std::unique_ptr<T, D>> {$/;"	s	namespace:sol::sol
unique_usertype_traits	.\include\sol\sol\types.hpp	/^	struct unique_usertype_traits {$/;"	s	namespace:sol
unique_usertype_traits	.\include\sol\sol\types.hpp	/^	struct unique_usertype_traits<std::shared_ptr<T>> {$/;"	s	namespace:sol
unique_usertype_traits	.\include\sol\sol\types.hpp	/^	struct unique_usertype_traits<std::unique_ptr<T, D>> {$/;"	s	namespace:sol
units_per_EM	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UShort         units_per_EM;$/;"	m	struct:FT_FaceRec_
unknown	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_Unknown unknown;$/;"	m	union:__anon57::__anon58
unlock	.\dep\SFML\src\SFML\System\Mutex.cpp	/^void Mutex::unlock()$/;"	f	class:sf::Mutex
unlock	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^void MutexImpl::unlock()$/;"	f	class:sf::priv::MutexImpl
unlock	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^void MutexImpl::unlock()$/;"	f	class:sf::priv::MutexImpl
unlocked	.\src\src\SkillTree.cpp	/^bool SkillNode::unlocked() {$/;"	f	class:SkillNode
unmakemask	.\dep\Lua\src\ldblib.c	/^static char *unmakemask (int mask, char *smask) {$/;"	f	file:
unpack	.\dep\Lua\src\ltablib.c	/^static int unpack (lua_State *L) {$/;"	f	file:
unpackint	.\dep\Lua\src\lstrlib.c	/^static lua_Integer unpackint (lua_State *L, const char *str,$/;"	f	file:
unprintableString	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^    const std::string unprintableString = "{?}";$/;"	m	namespace:Catch::Detail
unread_marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int unread_marker;$/;"	m	struct:jpeg_decompress_struct
unroll	.\dep\Lua\src\ldo.c	/^static void unroll (lua_State *L, void *ud) {$/;"	f	file:
unsynced	.\dep\SFML\extlibs\headers\ogg\ogg.h	/^  int unsynced;$/;"	m	struct:__anon92
unused	.\include\sol\Optional\test_optional.cpp	/^template <typename T> void unused(T&&) {}$/;"	f
unusedTokens	.\include\sol\Catch\include\catch_session.hpp	/^        std::vector<Clara::Parser::Token> const& unusedTokens() const {$/;"	f	class:Catch::Session::std
unwrap	.\include\sol\single\sol\sol.hpp	/^		T& unwrap(std::reference_wrapper<T> arg) {$/;"	f	namespace:sol::meta::meta_detail
unwrap	.\include\sol\sol\traits.hpp	/^		T& unwrap(std::reference_wrapper<T> arg) {$/;"	f	namespace:sol::meta::meta_detail
unwrap_unqualified	.\include\sol\single\sol\sol.hpp	/^		struct unwrap_unqualified : unwrapped<unqualified_t<T>> {};$/;"	s	namespace:sol::meta
unwrap_unqualified	.\include\sol\sol\traits.hpp	/^		struct unwrap_unqualified : unwrapped<unqualified_t<T>> {};$/;"	s	namespace:sol::meta
unwrapped	.\include\sol\single\sol\sol.hpp	/^		struct unwrapped {$/;"	s	namespace:sol::meta
unwrapped	.\include\sol\single\sol\sol.hpp	/^		struct unwrapped<std::reference_wrapper<T>> {$/;"	s	namespace:sol::meta
unwrapped	.\include\sol\sol\traits.hpp	/^		struct unwrapped {$/;"	s	namespace:sol::meta
unwrapped	.\include\sol\sol\traits.hpp	/^		struct unwrapped<std::reference_wrapper<T>> {$/;"	s	namespace:sol::meta
update	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^bool SoundBuffer::update(unsigned int channelCount, unsigned int sampleRate)$/;"	f	class:sf::SoundBuffer
update	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::update()$/;"	f	class:sf::Shape
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Image& image)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Image& image, unsigned int x, unsigned int y)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Uint8* pixels)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Uint8* pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Window& window)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^void Texture::update(const Window& window, unsigned int x, unsigned int y)$/;"	f	class:sf::Texture
update	.\dep\SFML\src\SFML\Window\Android\JoystickImpl.cpp	/^JoystickState JoystickImpl::update()$/;"	f	class:sf::priv::JoystickImpl
update	.\dep\SFML\src\SFML\Window\Android\SensorImpl.cpp	/^Vector3f SensorImpl::update()$/;"	f	class:sf::priv::SensorImpl
update	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^JoystickState JoystickImpl::JoystickImpl::update()$/;"	f	class:sf::priv::JoystickImpl::JoystickImpl
update	.\dep\SFML\src\SFML\Window\Joystick.cpp	/^void Joystick::update()$/;"	f	class:sf::Joystick
update	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^void JoystickManager::update()$/;"	f	class:sf::priv::JoystickManager
update	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^void HIDJoystickManager::update()$/;"	f	class:sf::priv::HIDJoystickManager
update	.\dep\SFML\src\SFML\Window\OSX\JoystickImpl.cpp	/^JoystickState JoystickImpl::update()$/;"	f	class:sf::priv::JoystickImpl
update	.\dep\SFML\src\SFML\Window\OSX\SensorImpl.cpp	/^Vector3f SensorImpl::update()$/;"	f	class:sf::priv::SensorImpl
update	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^void SensorManager::update()$/;"	f	class:sf::priv::SensorManager
update	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^JoystickState JoystickImpl::JoystickImpl::update()$/;"	f	class:sf::priv::JoystickImpl::JoystickImpl
update	.\dep\SFML\src\SFML\Window\Unix\SensorImpl.cpp	/^Vector3f SensorImpl::update()$/;"	f	class:sf::priv::SensorImpl
update	.\dep\SFML\src\SFML\Window\Win32\JoystickImpl.cpp	/^JoystickState JoystickImpl::update()$/;"	f	class:sf::priv::JoystickImpl
update	.\dep\SFML\src\SFML\Window\Win32\SensorImpl.cpp	/^Vector3f SensorImpl::update()$/;"	f	class:sf::priv::SensorImpl
update	.\src\src\Enemy.cpp	/^void Enemy::update(int diff) {$/;"	f	class:Enemy
update	.\src\src\FPS.cpp	/^void FPS::update() {$/;"	f	class:FPS
update	.\src\src\GameWindow.cpp	/^void GameWindow::update(int diff) {$/;"	f	class:GameWindow
update	.\src\src\GuiComponent.cpp	/^void GuiComponent::update(int diff) {$/;"	f	class:GuiComponent
update	.\src\src\Map.cpp	/^void Map::update(int diff) {$/;"	f	class:Map
update	.\src\src\Object.cpp	/^void Object::update(int diff) {$/;"	f	class:Object
update	.\src\src\Particle.cpp	/^void ParticleEmitter::update(int diff) {$/;"	f	class:ParticleEmitter
update	.\src\src\Perk.cpp	/^void Perk::update(int diff) {$/;"	f	class:Perk
update	.\src\src\Projectile.cpp	/^void Projectile::update(int diff) {$/;"	f	class:Projectile
update	.\src\src\SkillTreeWindow.cpp	/^void SkillTreeWindow::update(int diff) {$/;"	f	class:SkillTreeWindow
update	.\src\src\Tower.cpp	/^void Tower::update(int diff) {$/;"	f	class:Tower
update	.\src\src\Window.cpp	/^void Window::update(int diff) {$/;"	f	class:Window
updateFillColors	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::updateFillColors()$/;"	f	class:sf::Shape
updateOutline	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::updateOutline()$/;"	f	class:sf::Shape
updateOutlineColors	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::updateOutlineColors()$/;"	f	class:sf::Shape
updatePluggedList	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    void updatePluggedList()$/;"	f	namespace:__anon139
updatePluggedList	.\dep\SFML\src\SFML\Window\Unix\JoystickImpl.cpp	/^    void updatePluggedList(udev_device* udevDevice = NULL)$/;"	f	namespace:__anon150
updatePositions	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::updatePositions()$/;"	f	class:sf::Sprite
updateReadmeFile	.\include\sol\Catch\scripts\releaseCommon.py	/^    def updateReadmeFile(self):$/;"	m	class:Version
updateTexCoords	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^void Shape::updateTexCoords()$/;"	f	class:sf::Shape
updateTexCoords	.\dep\SFML\src\SFML\Graphics\Sprite.cpp	/^void Sprite::updateTexCoords()$/;"	f	class:sf::Sprite
updateTexture	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^void RenderTextureImplDefault::updateTexture(unsigned int textureId)$/;"	f	class:sf::priv::RenderTextureImplDefault
updateTexture	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^void RenderTextureImplFBO::updateTexture(unsigned int)$/;"	f	class:sf::priv::RenderTextureImplFBO
updateVersionFile	.\include\sol\Catch\scripts\releaseCommon.py	/^    def updateVersionFile(self):$/;"	m	class:Version
updated	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    bool updated;$/;"	m	struct:sf::priv::ActivityStates
upisopen	.\dep\Lua\src\lfunc.h	47;"	d
upisopen	.\include\lua\lfunc.h	47;"	d
upload	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::Response Ftp::upload(const std::string& localFile, const std::string& remotePath, TransferMode mode)$/;"	f	class:sf::Ftp
upsample	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  struct jpeg_upsampler * upsample;$/;"	m	struct:jpeg_decompress_struct	typeref:struct:jpeg_decompress_struct::jpeg_upsampler
upval	.\dep\Lua\src\lparser.c	/^  lu_byte upval;  \/* true if some variable in the block is an upvalue *\/$/;"	m	struct:BlockCnt	file:
upvalname	.\dep\Lua\src\ldebug.c	/^static const char *upvalname (Proto *p, int uv) {$/;"	f	file:
upvals	.\dep\Lua\src\lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvals	.\include\lua\lobject.h	/^  UpVal *upvals[1];  \/* list of upvalues *\/$/;"	m	struct:LClosure
upvalue	.\dep\Lua\src\lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalue	.\include\lua\lobject.h	/^  TValue upvalue[1];  \/* list of upvalues *\/$/;"	m	struct:CClosure
upvalue_free_function	.\include\sol\single\sol\sol.hpp	/^		struct upvalue_free_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
upvalue_free_function	.\include\sol\sol\function_types_stateless.hpp	/^		struct upvalue_free_function {$/;"	s	namespace:sol::function_detail
upvalue_index	.\include\sol\single\sol\sol.hpp	/^		upvalue_index(int idx) : index(lua_upvalueindex(idx)) {}$/;"	f	struct:sol::sol::upvalue_index
upvalue_index	.\include\sol\single\sol\sol.hpp	/^	struct upvalue_index {$/;"	s	namespace:sol::sol
upvalue_index	.\include\sol\sol\types.hpp	/^		upvalue_index(int idx) : index(lua_upvalueindex(idx)) {}$/;"	f	struct:sol::upvalue_index
upvalue_index	.\include\sol\sol\types.hpp	/^	struct upvalue_index {$/;"	s	namespace:sol
upvalue_member_function	.\include\sol\single\sol\sol.hpp	/^		struct upvalue_member_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
upvalue_member_function	.\include\sol\sol\function_types_stateless.hpp	/^		struct upvalue_member_function {$/;"	s	namespace:sol::function_detail
upvalue_member_variable	.\include\sol\single\sol\sol.hpp	/^		struct upvalue_member_variable {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
upvalue_member_variable	.\include\sol\sol\function_types_stateless.hpp	/^		struct upvalue_member_variable {$/;"	s	namespace:sol::function_detail
upvalue_this_member_function	.\include\sol\single\sol\sol.hpp	/^		struct upvalue_this_member_function {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
upvalue_this_member_function	.\include\sol\sol\function_types_stateless.hpp	/^		struct upvalue_this_member_function {$/;"	s	namespace:sol::function_detail
upvalue_this_member_variable	.\include\sol\single\sol\sol.hpp	/^		struct upvalue_this_member_variable {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail
upvalue_this_member_variable	.\include\sol\sol\function_types_stateless.hpp	/^		struct upvalue_this_member_variable {$/;"	s	namespace:sol::function_detail
upvalues	.\dep\Lua\src\lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto
upvalues	.\include\lua\lobject.h	/^  Upvaldesc *upvalues;  \/* upvalue information *\/$/;"	m	struct:Proto
upvalues	.\include\sol\single\sol\sol.hpp	/^		int upvalues;$/;"	m	struct:sol::sol::closure
upvalues	.\include\sol\single\sol\sol.hpp	/^		std::tuple<Upvalues...> upvalues;$/;"	m	struct:sol::sol::closure
upvalues	.\include\sol\sol\types.hpp	/^		int upvalues;$/;"	m	struct:sol::closure
upvalues	.\include\sol\sol\types.hpp	/^		std::tuple<Upvalues...> upvalues;$/;"	m	struct:sol::closure
urllib2	.\include\sol\Catch\scripts\releaseNotes.py	/^import urllib2$/;"	i
usBreakChar	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usBreakChar;$/;"	m	struct:TT_OS2_
usDefaultChar	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usDefaultChar;$/;"	m	struct:TT_OS2_
usFirstCharIndex	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usFirstCharIndex;$/;"	m	struct:TT_OS2_
usLastCharIndex	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usLastCharIndex;$/;"	m	struct:TT_OS2_
usLowerOpticalPointSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usLowerOpticalPointSize;       \/* in twips (1\/20th points) *\/$/;"	m	struct:TT_OS2_
usMaxContext	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usMaxContext;$/;"	m	struct:TT_OS2_
usUpperOpticalPointSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usUpperOpticalPointSize;       \/* in twips (1\/20th points) *\/$/;"	m	struct:TT_OS2_
usWeightClass	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usWeightClass;$/;"	m	struct:TT_OS2_
usWidthClass	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usWidthClass;$/;"	m	struct:TT_OS2_
usWinAscent	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usWinAscent;$/;"	m	struct:TT_OS2_
usWinDescent	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  usWinDescent;$/;"	m	struct:TT_OS2_
usage	.\dep\Lua\src\luac.c	/^static void usage(const char* message)$/;"	f	file:
usage	.\include\sol\Catch\include\external\clara.h	/^        std::string usage( std::string const& procName ) const {$/;"	f	class:Clara::CommandLine
usage	.\include\sol\Catch\include\external\clara.h	/^        void usage( std::ostream& os, std::string const& procName ) const {$/;"	f	class:Clara::CommandLine
usageToAxis	.\dep\SFML\src\SFML\Window\FreeBSD\JoystickImpl.cpp	/^    int usageToAxis(int usage)$/;"	f	namespace:__anon139
use	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^            void use( Colour::Code ) {}$/;"	f	struct:Catch::__anon177::NoColourImpl
use	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^        virtual void use( Colour::Code _colourCode ) {$/;"	f	class:Catch::__anon178::Win32ColourImpl
use	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    void Colour::use( Code _colourCode ) {$/;"	f	class:Catch::Colour
use	.\include\sol\single\sol\sol.hpp	/^			void use(int count) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::record
use	.\include\sol\sol\stack_core.hpp	/^			void use(int count) {$/;"	f	struct:sol::stack::record
useActiveException	.\include\sol\Catch\include\internal\catch_result_builder.hpp	/^    void ResultBuilder::useActiveException( ResultDisposition::Flags resultDisposition ) {$/;"	f	class:Catch::ResultBuilder
useConfigData	.\include\sol\Catch\include\catch_session.hpp	/^        void useConfigData( ConfigData const& _configData ) {$/;"	f	class:Catch::Session
useVertexCache	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache
useVertexCache	.\include\SFML\Graphics\RenderTarget.hpp	/^        bool      useVertexCache; \/\/\/< Did we previously use the vertex cache?$/;"	m	struct:sf::RenderTarget::StatesCache
used	.\include\sol\Catch\include\internal\catch_interfaces_reporter.h	/^        bool used;$/;"	m	struct:Catch::LazyStat
used	.\include\sol\single\sol\sol.hpp	/^			int used;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::stack::record
used	.\include\sol\sol\stack_core.hpp	/^			int used;$/;"	m	struct:sol::stack::record
user	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    void*                   user;$/;"	m	struct:FT_Raster_Params_
user	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    void*            user;$/;"	m	struct:FT_MemoryRec_
user	.\include\sol\single\sol\sol.hpp	/^		user(U x) : value(std::move(x)) {}$/;"	f	struct:sol::sol::user
user	.\include\sol\single\sol\sol.hpp	/^	struct user {$/;"	s	namespace:sol::sol
user	.\include\sol\sol\types.hpp	/^		user(U x) : value(std::move(x)) {}$/;"	f	struct:sol::user
user	.\include\sol\sol\types.hpp	/^	struct user {$/;"	s	namespace:sol
user_	.\dep\Lua\src\lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Udata::Value
user_	.\include\lua\lobject.h	/^  union Value user_;  \/* user value *\/$/;"	m	struct:Udata	typeref:union:Udata::Value
user_comments	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  char **user_comments;$/;"	m	struct:vorbis_comment
user_gc_metatable	.\include\sol\single\sol\sol.hpp	/^		static const std::string user_gc_metatable;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::usertype_traits
user_gc_metatable	.\include\sol\single\sol\sol.hpp	/^	const std::string usertype_traits<T>::user_gc_metatable = std::string("sol.").append(detail::demangle<T>()).append(".user\\xE2\\x99\\xBB");$/;"	m	class:sol::sol::call_syntax::call_status::sol::usertype_traits
user_gc_metatable	.\include\sol\sol\usertype_traits.hpp	/^		static const std::string user_gc_metatable;$/;"	m	struct:sol::usertype_traits
user_gc_metatable	.\include\sol\sol\usertype_traits.hpp	/^	const std::string usertype_traits<T>::user_gc_metatable = std::string("sol.").append(detail::demangle<T>()).append(".user\\xE2\\x99\\xBB");$/;"	m	class:sol::usertype_traits
userdata	.\include\sol\single\sol\sol.hpp	/^		userdata = LUA_TUSERDATA,$/;"	m	class:sol::sol::call_syntax::call_status::type
userdata	.\include\sol\sol\types.hpp	/^		userdata = LUA_TUSERDATA,$/;"	m	class:sol::call_syntax::call_status::type
userdata_value	.\include\sol\single\sol\sol.hpp	/^		userdata_value(void* data) : value(data) {}$/;"	f	struct:sol::sol::userdata_value
userdata_value	.\include\sol\single\sol\sol.hpp	/^	struct userdata_value {$/;"	s	namespace:sol::sol
userdata_value	.\include\sol\sol\types.hpp	/^		userdata_value(void* data) : value(data) {}$/;"	f	struct:sol::userdata_value
userdata_value	.\include\sol\sol\types.hpp	/^	struct userdata_value {$/;"	s	namespace:sol
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(Args&&... args) : usertype(meta::condition<meta::all<std::is_default_constructible<T>, meta::neg<usertype_detail::has_constructor<Args...>>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), std::forward<Args>(args)...) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(constructor_wrapper<Fxs...> constructorlist, Args&&... args) : usertype(usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(constructors<CArgs...> constructorlist, Args&&... args) : usertype(usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(simple_tag, lua_State* L, Args&&... args) : metatableregister(detail::make_unique_deleter<simple_usertype_metatable<T>, detail::deleter>(L, std::forward<Args>(args)...)) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(usertype_detail::add_destructor_tag, Args&&... args) : usertype(usertype_detail::verified, std::forward<Args>(args)..., "__gc", default_destructor) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(usertype_detail::check_destructor_tag, Args&&... args) : usertype(meta::condition<meta::all<std::is_destructible<T>, meta::neg<usertype_detail::has_destructor<Args...>>>, usertype_detail::add_destructor_tag, usertype_detail::verified_tag>(), std::forward<Args>(args)...) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^		usertype(usertype_detail::verified_tag, Args&&... args) : metatableregister(detail::make_unique_deleter<usertype_metatable<T, std::make_index_sequence<sizeof...(Args) \/ 2>, Args...>, detail::deleter>(std::forward<Args>(args)...)) {}$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype
usertype	.\include\sol\single\sol\sol.hpp	/^	class usertype {$/;"	c	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(Args&&... args) : usertype(meta::condition<meta::all<std::is_default_constructible<T>, meta::neg<usertype_detail::has_constructor<Args...>>>, decltype(default_constructor), usertype_detail::check_destructor_tag>(), std::forward<Args>(args)...) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(constructor_wrapper<Fxs...> constructorlist, Args&&... args) : usertype(usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(constructors<CArgs...> constructorlist, Args&&... args) : usertype(usertype_detail::check_destructor_tag(), std::forward<Args>(args)..., "new", constructorlist) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(simple_tag, lua_State* L, Args&&... args) : metatableregister(detail::make_unique_deleter<simple_usertype_metatable<T>, detail::deleter>(L, std::forward<Args>(args)...)) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(usertype_detail::add_destructor_tag, Args&&... args) : usertype(usertype_detail::verified, std::forward<Args>(args)..., "__gc", default_destructor) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(usertype_detail::check_destructor_tag, Args&&... args) : usertype(meta::condition<meta::all<std::is_destructible<T>, meta::neg<usertype_detail::has_destructor<Args...>>>, usertype_detail::add_destructor_tag, usertype_detail::verified_tag>(), std::forward<Args>(args)...) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^		usertype(usertype_detail::verified_tag, Args&&... args) : metatableregister(detail::make_unique_deleter<usertype_metatable<T, std::make_index_sequence<sizeof...(Args) \/ 2>, Args...>, detail::deleter>(std::forward<Args>(args)...)) {}$/;"	f	class:sol::usertype
usertype	.\include\sol\sol\usertype.hpp	/^	class usertype {$/;"	c	namespace:sol
usertype_detail	.\include\sol\single\sol\sol.hpp	/^	namespace usertype_detail {$/;"	n	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
usertype_detail	.\include\sol\sol\usertype_metatable.hpp	/^	namespace usertype_detail {$/;"	n	namespace:sol
usertype_metatable	.\include\sol\single\sol\sol.hpp	/^		usertype_metatable(Args&&... args) : functions(std::forward<Args>(args)...),$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_metatable
usertype_metatable	.\include\sol\single\sol\sol.hpp	/^	struct usertype_metatable : usertype_detail::registrar {};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
usertype_metatable	.\include\sol\single\sol\sol.hpp	/^	struct usertype_metatable<T, std::index_sequence<I...>, Tn...> : usertype_detail::registrar {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
usertype_metatable	.\include\sol\sol\usertype_metatable.hpp	/^		usertype_metatable(Args&&... args) : functions(std::forward<Args>(args)...),$/;"	f	struct:sol::usertype_metatable
usertype_metatable	.\include\sol\sol\usertype_metatable.hpp	/^	struct usertype_metatable : usertype_detail::registrar {};$/;"	s	namespace:sol
usertype_metatable	.\include\sol\sol\usertype_metatable.hpp	/^	struct usertype_metatable<T, std::index_sequence<I...>, Tn...> : usertype_detail::registrar {$/;"	s	namespace:sol
usertype_traits	.\include\sol\single\sol\sol.hpp	/^	struct usertype_traits {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
usertype_traits	.\include\sol\sol\usertype_traits.hpp	/^	struct usertype_traits {$/;"	s	namespace:sol
utf8_decode	.\dep\Lua\src\lutf8lib.c	/^static const char *utf8_decode (const char *o, int *val) {$/;"	f	file:
utf8esc	.\dep\Lua\src\llex.c	/^static void utf8esc (LexState *ls) {$/;"	f	file:
utfchar	.\dep\Lua\src\lutf8lib.c	/^static int utfchar (lua_State *L) {$/;"	f	file:
utflen	.\dep\Lua\src\lutf8lib.c	/^static int utflen (lua_State *L) {$/;"	f	file:
uv	.\dep\Lua\src\lobject.h	/^  Udata uv;$/;"	m	union:UUdata
uv	.\include\lua\lobject.h	/^  Udata uv;$/;"	m	union:UUdata
uvalue	.\dep\Lua\src\lobject.h	170;"	d
uvalue	.\include\lua\lobject.h	170;"	d
v	.\dep\Lua\src\lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	.\dep\Lua\src\lparser.c	/^  expdesc v;  \/* last list item read *\/$/;"	m	struct:ConsControl	file:
v	.\dep\Lua\src\lparser.c	/^  expdesc v;  \/* variable (global, local, upvalue, or indexed) *\/$/;"	m	struct:LHS_assign	file:
v	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int h,v;$/;"	m	struct:__anon98::__anon99
v	.\include\lua\lfunc.h	/^  TValue *v;  \/* points to stack or to its own value *\/$/;"	m	struct:UpVal
v	.\include\sol\Catch\scripts\developBuild.py	/^v = Version()$/;"	v
v	.\include\sol\Catch\scripts\generateSingleHeader.py	/^v = Version()$/;"	v
v	.\include\sol\Catch\scripts\majorRelease.py	/^v = Version()$/;"	v
v	.\include\sol\Catch\scripts\minorRelease.py	/^v = Version()$/;"	v
v	.\include\sol\Catch\scripts\patchRelease.py	/^v = Version()$/;"	v
v	.\include\sol\test_usertypes.cpp	/^	int v = 100;$/;"	m	struct:thing	file:
v_samp_factor	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  int v_samp_factor;		\/* vertical sampling factor (1..4) *\/$/;"	m	struct:__anon81
va_iterator	.\include\sol\single\sol\sol.hpp	/^		va_iterator() : L(nullptr), index((std::numeric_limits<int>::max)()), stacktop((std::numeric_limits<int>::max)()) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
va_iterator	.\include\sol\single\sol\sol.hpp	/^		va_iterator(lua_State* L, int index, int stacktop) : L(L), index(index), stacktop(stacktop), sp(L, index) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
va_iterator	.\include\sol\single\sol\sol.hpp	/^	struct va_iterator : std::iterator<std::random_access_iterator_tag, std::conditional_t<is_const, const stack_proxy, stack_proxy>, std::ptrdiff_t, std::conditional_t<is_const, const stack_proxy*, stack_proxy*>, std::conditional_t<is_const, const stack_proxy, stack_proxy>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
va_iterator	.\include\sol\sol\variadic_args.hpp	/^		va_iterator() : L(nullptr), index((std::numeric_limits<int>::max)()), stacktop((std::numeric_limits<int>::max)()) {}$/;"	f	struct:sol::va_iterator
va_iterator	.\include\sol\sol\variadic_args.hpp	/^		va_iterator(lua_State* L, int index, int stacktop) : L(L), index(index), stacktop(stacktop), sp(L, index) {}$/;"	f	struct:sol::va_iterator
va_iterator	.\include\sol\sol\variadic_args.hpp	/^	struct va_iterator : std::iterator<std::random_access_iterator_tag, std::conditional_t<is_const, const stack_proxy, stack_proxy>, std::ptrdiff_t, std::conditional_t<is_const, const stack_proxy*, stack_proxy*>, std::conditional_t<is_const, const stack_proxy, stack_proxy>> {$/;"	s	namespace:sol
val	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    int val;$/;"	m	struct:Opaque	file:
val	.\include\sol\Optional\test_optional.cpp	/^    OracleVal val;$/;"	m	struct:Oracle	file:
val	.\include\sol\Optional\test_optional.cpp	/^    std::string val;$/;"	m	struct:Guard	file:
val	.\include\sol\Optional\test_optional.cpp	/^  T val;$/;"	m	struct:MoveAware	file:
val_	.\dep\Lua\src\lobject.h	123;"	d
val_	.\include\lua\lobject.h	123;"	d
valid	.\include\sol\single\sol\sol.hpp	/^			bool valid() const { return stackindex > 0; }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::handler
valid	.\include\sol\single\sol\sol.hpp	/^		bool valid() const {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::proxy
valid	.\include\sol\sol\protected_function.hpp	/^			bool valid() const { return stackindex > 0; }$/;"	f	struct:sol::basic_protected_function::handler
valid	.\include\sol\sol\proxy.hpp	/^		bool valid() const {$/;"	f	struct:sol::proxy
validate	.\include\sol\Catch\include\external\clara.h	/^        void validate() const {$/;"	f	struct:Clara::CommonArgProperties
validate	.\include\sol\Catch\include\external\clara.h	/^        void validate() const$/;"	f	class:Clara::CommandLine
validate_uint32	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^typedef unsigned char validate_uint32[sizeof(stbi__uint32)==4 ? 1 : -1];$/;"	t
validop	.\dep\Lua\src\lcode.c	/^static int validop (int op, TValue *v1, TValue *v2) {$/;"	f	file:
valiswhite	.\dep\Lua\src\lgc.c	74;"	d	file:
value	.\dep\Lua\src\lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon2
value	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__int32 value; \/**< The constant signal value. *\/$/;"	m	struct:__anon31
value	.\dep\SFML\extlibs\headers\freetype2\ftsystem.h	/^    long   value;$/;"	m	union:FT_StreamDesc_
value	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__uint16 value[288];$/;"	m	struct:__anon101
value	.\dep\SFML\src\SFML\Window\SensorManager.hpp	/^        Vector3f value;    \/\/\/< The current sensor value$/;"	m	struct:sf::priv::SensorManager::Item
value	.\include\lua\lfunc.h	/^    TValue value;  \/* the value (when closed) *\/$/;"	m	union:UpVal::__anon155
value	.\include\sol\Catch\include\external\clara.h	/^        template<>              struct IsBool<bool> { static const bool value = true; };$/;"	m	struct:Clara::Detail::IsBool
value	.\include\sol\Catch\include\external\clara.h	/^        template<typename T>    struct IsBool       { static const bool value = false; };$/;"	m	struct:Clara::Detail::IsBool
value	.\include\sol\Catch\include\internal\catch_tostring.h	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon182
value	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            T value;$/;"	m	struct:Catch::CumulativeReporterBase::Node
value	.\include\sol\Catch\projects\SelfTest\TrickyTests.cpp	/^    static const bool value = B;$/;"	m	struct:is_true	file:
value	.\include\sol\Catch\single_include\catch.hpp	/^        enum { value = sizeof( testStreamable(s << t) ) == sizeof( TrueType ) };$/;"	e	enum:Catch::Detail::IsStreamInsertable::__anon188
value	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T& value() & {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T&& value() && {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  T& value() {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  constexpr T const& value() const {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  constexpr T const& value() const& {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  constexpr T& value() const {$/;"	f	class:sol::optional
value	.\include\sol\Optional\optional.hpp	/^  constexpr static bool value = has_overload<T>(true);$/;"	m	struct:sol::detail_::has_overloaded_addressof
value	.\include\sol\single\sol\sol.hpp	/^			static bool value;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::detail::has_derived
value	.\include\sol\single\sol\sol.hpp	/^			static const std::size_t value;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::detail::id_for
value	.\include\sol\single\sol\sol.hpp	/^		L* value;$/;"	m	struct:sol::sol::light
value	.\include\sol\single\sol\sol.hpp	/^		T value;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::protect_t
value	.\include\sol\single\sol\sol.hpp	/^		U value;$/;"	m	struct:sol::sol::user
value	.\include\sol\single\sol\sol.hpp	/^		bool has_derived<T>::value = false;$/;"	m	class:sol::sol::call_syntax::call_status::sol::detail::has_derived
value	.\include\sol\single\sol\sol.hpp	/^		const std::size_t id_for<T>::value = unique_id();$/;"	m	class:sol::sol::call_syntax::call_status::sol::detail::id_for
value	.\include\sol\single\sol\sol.hpp	/^		static const bool value = false;$/;"	m	struct:sol::sol::unique_usertype_traits
value	.\include\sol\single\sol\sol.hpp	/^		static const bool value = true;$/;"	m	struct:sol::sol::unique_usertype_traits
value	.\include\sol\single\sol\sol.hpp	/^		void* value;$/;"	m	struct:sol::sol::lightuserdata_value
value	.\include\sol\single\sol\sol.hpp	/^		void* value;$/;"	m	struct:sol::sol::userdata_value
value	.\include\sol\sol\inheritance.hpp	/^			static bool value;$/;"	m	struct:sol::detail::has_derived
value	.\include\sol\sol\inheritance.hpp	/^			static const std::size_t value;$/;"	m	struct:sol::detail::id_for
value	.\include\sol\sol\inheritance.hpp	/^		bool has_derived<T>::value = false;$/;"	m	class:sol::detail::has_derived
value	.\include\sol\sol\inheritance.hpp	/^		const std::size_t id_for<T>::value = unique_id();$/;"	m	class:sol::detail::id_for
value	.\include\sol\sol\protect.hpp	/^		T value;$/;"	m	struct:sol::protect_t
value	.\include\sol\sol\types.hpp	/^		L* value;$/;"	m	struct:sol::light
value	.\include\sol\sol\types.hpp	/^		U value;$/;"	m	struct:sol::user
value	.\include\sol\sol\types.hpp	/^		static const bool value = false;$/;"	m	struct:sol::unique_usertype_traits
value	.\include\sol\sol\types.hpp	/^		static const bool value = true;$/;"	m	struct:sol::unique_usertype_traits
value	.\include\sol\sol\types.hpp	/^		void* value;$/;"	m	struct:sol::lightuserdata_value
value	.\include\sol\sol\types.hpp	/^		void* value;$/;"	m	struct:sol::userdata_value
valueOr	.\include\sol\Catch\include\internal\catch_option.hpp	/^        T valueOr( T const& defaultValue ) const {$/;"	f	class:Catch::Option
value_	.\include\sol\Optional\optional.hpp	/^    T value_;$/;"	m	union:sol::constexpr_storage_t
value_	.\include\sol\Optional\optional.hpp	/^  T value_;$/;"	m	union:sol::storage_t
value_or	.\include\sol\Optional\optional.hpp	/^  OPTIONAL_MUTABLE_CONSTEXPR T value_or(V&& v) &&$/;"	f	class:sol::optional
value_or	.\include\sol\Optional\optional.hpp	/^  T value_or(V&& v) &&$/;"	f	class:sol::optional
value_or	.\include\sol\Optional\optional.hpp	/^  constexpr T value_or(V&& v) const$/;"	f	class:sol::optional
value_or	.\include\sol\Optional\optional.hpp	/^  constexpr T value_or(V&& v) const&$/;"	f	class:sol::optional
value_or	.\include\sol\Optional\optional.hpp	/^  constexpr typename ::std::decay<T>::type value_or(V&& v) const$/;"	f	class:sol::optional
value_type	.\include\sol\Catch\projects\SelfTest\ToStringVector.cpp	/^        typedef T value_type;$/;"	t	struct:__anon187::minimal_allocator	file:
value_type	.\include\sol\Optional\optional.hpp	/^  typedef T value_type;$/;"	t	class:sol::optional
value_type	.\include\sol\single\sol\sol.hpp	/^		typedef base_t::value_type value_type;$/;"	t	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
value_type	.\include\sol\single\sol\sol.hpp	/^		typedef stack_proxy value_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
value_type	.\include\sol\single\sol\sol.hpp	/^		typedef typename base_t::value_type value_type;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::va_iterator
value_type	.\include\sol\sol\table_iterator.hpp	/^		typedef base_t::value_type value_type;$/;"	t	class:sol::basic_table_iterator
value_type	.\include\sol\sol\variadic_args.hpp	/^		typedef stack_proxy value_type;$/;"	t	struct:sol::variadic_args
value_type	.\include\sol\sol\variadic_args.hpp	/^		typedef typename base_t::value_type value_type;$/;"	t	struct:sol::va_iterator
values	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc  values[256];$/;"	m	struct:__anon97
values	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator<T> values( T val1, T val2 ) {$/;"	f	namespace:Catch::Generators
values	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator<T> values( T val1, T val2, T val3 ){$/;"	f	namespace:Catch::Generators
values	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    CompositeGenerator<T> values( T val1, T val2, T val3, T val4 ) {$/;"	f	namespace:Catch::Generators
var	.\include\sol\single\sol\sol.hpp	/^			function_type var;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::function_detail::member_variable
var	.\include\sol\sol\function_types_stateful.hpp	/^			function_type var;$/;"	m	struct:sol::function_detail::member_variable
var_call	.\include\sol\single\sol\sol.hpp	/^			static int var_call(std::false_type, lua_State* L, Fx&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
var_call	.\include\sol\single\sol\sol.hpp	/^			static int var_call(std::true_type, lua_State* L, Fx&& f) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::agnostic_lua_call_wrapper
var_call	.\include\sol\sol\call.hpp	/^			static int var_call(std::false_type, lua_State* L, Fx&& f) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
var_call	.\include\sol\sol\call.hpp	/^			static int var_call(std::true_type, lua_State* L, Fx&& f) {$/;"	f	struct:sol::call_detail::agnostic_lua_call_wrapper
variable	.\include\sol\ninja_syntax.py	/^    def variable(self, key, value, indent=0):$/;"	m	class:Writer
variables	.\include\sol\examples\usertype.cpp	/^struct variables {$/;"	s	file:
variadic_args	.\include\sol\single\sol\sol.hpp	/^		variadic_args(lua_State* L, int index = -1) : L(L), index(lua_absindex(L, index)), stacktop(lua_gettop(L)) {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
variadic_args	.\include\sol\single\sol\sol.hpp	/^		variadic_args(variadic_args&& o) : L(o.L), index(o.index), stacktop(o.stacktop) {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::variadic_args
variadic_args	.\include\sol\single\sol\sol.hpp	/^	struct variadic_args {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol
variadic_args	.\include\sol\sol\variadic_args.hpp	/^		variadic_args(lua_State* L, int index = -1) : L(L), index(lua_absindex(L, index)), stacktop(lua_gettop(L)) {}$/;"	f	struct:sol::variadic_args
variadic_args	.\include\sol\sol\variadic_args.hpp	/^		variadic_args(variadic_args&& o) : L(o.L), index(o.index), stacktop(o.stacktop) {$/;"	f	struct:sol::variadic_args
variadic_args	.\include\sol\sol\variadic_args.hpp	/^	struct variadic_args {$/;"	s	namespace:sol
varinfo	.\dep\Lua\src\ldebug.c	/^static const char *varinfo (lua_State *L, const TValue *o) {$/;"	f	file:
varname	.\dep\Lua\src\lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
varname	.\include\lua\lobject.h	/^  TString *varname;$/;"	m	struct:LocVar
vars	.\include\sol\test_usertypes.cpp	/^	vars() {$/;"	f	struct:vars
vars	.\include\sol\test_usertypes.cpp	/^struct vars {$/;"	s	file:
vb	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  vorbis_block     vb; \/* local working space for packet->PCM decode *\/$/;"	m	struct:OggVorbis_File
vc	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  vorbis_comment  *vc;$/;"	m	struct:OggVorbis_File
vd	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  vorbis_dsp_state *vd; \/* For read-only access of configuration *\/$/;"	m	struct:vorbis_block
vd	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  vorbis_dsp_state vd; \/* central working state for the packet->PCM decoder *\/$/;"	m	struct:OggVorbis_File
vec	.\dep\SFML\extlibs\headers\freetype2\fttrigon.h	/^  FT_Vector_Length( FT_Vector*  vec );$/;"	v
vector	.\include\sol\examples\usertype.cpp	/^    vector(float x): x(x) {}$/;"	f	struct:vector
vector	.\include\sol\examples\usertype.cpp	/^    vector(float x, float y): x(x), y(y) {}$/;"	f	struct:vector
vector	.\include\sol\examples\usertype.cpp	/^struct vector {$/;"	s	file:
velocity	.\src\include\Particle.h	/^		sf::Vector2f velocity;$/;"	m	struct:ParticleEmitter::Particle
vendor	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  char  *vendor;$/;"	m	struct:vorbis_comment
vendorId	.\dep\SFML\include\SFML\Window\Joystick.hpp	/^        unsigned int vendorId;  \/\/\/< Manufacturer identifier$/;"	m	struct:sf::Joystick::Identification
vendorId	.\include\SFML\Window\Joystick.hpp	/^        unsigned int vendorId;  \/\/\/< Manufacturer identifier$/;"	m	struct:sf::Joystick::Identification
vendor_string	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__StreamMetadata_VorbisComment_Entry vendor_string;$/;"	m	struct:__anon50
verbatim	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__Subframe_Verbatim verbatim;$/;"	m	union:__anon35::__anon36
verbosity	.\include\sol\Catch\include\internal\catch_config.hpp	/^        Verbosity::Level verbosity;$/;"	m	struct:Catch::ConfigData
verified_tag	.\include\sol\single\sol\sol.hpp	/^		struct verified_tag {} const verified{};$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail
verified_tag	.\include\sol\sol\usertype_metatable.hpp	/^		struct verified_tag {} const verified{};$/;"	s	namespace:sol::usertype_detail
version	.\dep\Lua\src\lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
version	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  version;$/;"	m	struct:FT_WinFNT_HeaderRec_
version	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*  version;$/;"	m	struct:PS_FontInfoRec_
version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Fixed   version;$/;"	m	struct:TT_MaxProfile_
version	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  version;                \/* 0x0001 - more or 0xFFFF *\/$/;"	m	struct:TT_OS2_
version	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  int version;$/;"	m	struct:vorbis_info
version	.\include\lua\lstate.h	/^  const lua_Number *version;  \/* pointer to version number *\/$/;"	m	struct:global_State
version	.\include\sol\docs\source\conf.py	/^version = '2.10'$/;"	v
version	.\include\sol\single.py	/^version = get_version()$/;"	v
versionParser	.\include\sol\Catch\scripts\approvalTests.py	/^versionParser = re.compile( r'(.*?)Catch v[0-9]*\\.[0-9]*\\.[0-9]*(.*)' )$/;"	v
versionParser	.\include\sol\Catch\scripts\releaseCommon.py	/^versionParser = re.compile( r'(\\s*Version\\slibraryVersion)\\s*\\(\\s*(.*)\\s*,\\s*(.*)\\s*,\\s*(.*)\\s*,\\s*\\"(.*)\\"\\s*,\\s*(.*)\\s*\\).*' )$/;"	v
versionPath	.\include\sol\Catch\scripts\releaseCommon.py	/^versionPath = os.path.join( rootPath, "internal\/catch_version.hpp" )$/;"	v
versionPath	.\include\sol\Catch\scripts\releaseNotes.py	/^versionPath = os.path.join( rootPath, "internal\/catch_version.hpp" )$/;"	v
vertAdvance	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  vertAdvance;$/;"	m	struct:FT_Glyph_Metrics_
vertBearingX	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  vertBearingX;$/;"	m	struct:FT_Glyph_Metrics_
vertBearingY	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  vertBearingY;$/;"	m	struct:FT_Glyph_Metrics_
vertResolution	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UInt               vertResolution;$/;"	m	struct:FT_Size_RequestRec_
vertexCache	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache
vertexCache	.\include\SFML\Graphics\RenderTarget.hpp	/^        Vertex    vertexCache[VertexCacheSize]; \/\/\/< Pre-transformed vertices cache$/;"	m	struct:sf::RenderTarget::StatesCache
vertical_resolution	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  vertical_resolution;$/;"	m	struct:FT_WinFNT_HeaderRec_
vertices	.\src\include\sfLine.h	/^    sf::Vertex vertices[4];$/;"	m	class:sfLine
vi	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^  vorbis_info *vi;$/;"	m	struct:vorbis_dsp_state
vi	.\dep\SFML\extlibs\headers\vorbis\vorbisfile.h	/^  vorbis_info     *vi;$/;"	m	struct:OggVorbis_File
viewChanged	.\dep\SFML\include\SFML\Graphics\RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache
viewChanged	.\include\SFML\Graphics\RenderTarget.hpp	/^        bool      viewChanged;    \/\/\/< Has the current view changed since last draw?$/;"	m	struct:sf::RenderTarget::StatesCache
virtualKeyCodeToSF	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^Keyboard::Key WindowImplWin32::virtualKeyCodeToSF(WPARAM key, LPARAM flags)$/;"	f	class:sf::priv::WindowImplWin32
visitChar	.\include\sol\Catch\include\internal\catch_test_spec_parser.hpp	/^        void visitChar( char c ) {$/;"	f	class:Catch::TestSpecParser
vkisinreg	.\dep\Lua\src\lparser.h	52;"	d
vkisinreg	.\include\lua\lparser.h	52;"	d
vkisvar	.\dep\Lua\src\lparser.h	51;"	d
vkisvar	.\include\lua\lparser.h	51;"	d
vmbreak	.\dep\Lua\src\lvm.c	767;"	d	file:
vmcase	.\dep\Lua\src\lvm.c	766;"	d	file:
vmdispatch	.\dep\Lua\src\lvm.c	765;"	d	file:
vmfetch	.\dep\Lua\src\lvm.c	756;"	d	file:
void_call	.\include\sol\single\sol\sol.hpp	/^		struct void_call<T, types<Args...>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail
void_call	.\include\sol\sol\call.hpp	/^		struct void_call<T, types<Args...>> {$/;"	s	namespace:sol::call_detail
void_tuple_element	.\include\sol\single\sol\sol.hpp	/^			struct void_tuple_element : meta::tuple_element<I, T> {};$/;"	s	namespace:sol::meta::meta_detail
void_tuple_element	.\include\sol\single\sol\sol.hpp	/^			struct void_tuple_element<I, std::tuple<>> { typedef void type; };$/;"	s	namespace:sol::meta::meta_detail
void_tuple_element	.\include\sol\sol\bind_traits.hpp	/^			struct void_tuple_element : meta::tuple_element<I, T> {};$/;"	s	namespace:sol::meta::meta_detail
void_tuple_element	.\include\sol\sol\bind_traits.hpp	/^			struct void_tuple_element<I, std::tuple<>> { typedef void type; };$/;"	s	namespace:sol::meta::meta_detail
vorbis_block	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^typedef struct vorbis_block{$/;"	s
vorbis_block	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^} vorbis_block;$/;"	t	typeref:struct:vorbis_block
vorbis_comment	.\dep\SFML\extlibs\headers\FLAC\format.h	/^		FLAC__StreamMetadata_VorbisComment vorbis_comment;$/;"	m	union:__anon57::__anon58
vorbis_comment	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^typedef struct vorbis_comment{$/;"	s
vorbis_comment	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^} vorbis_comment;$/;"	t	typeref:struct:vorbis_comment
vorbis_dsp_state	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^typedef struct vorbis_dsp_state{$/;"	s
vorbis_dsp_state	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^} vorbis_dsp_state;$/;"	t	typeref:struct:vorbis_dsp_state
vorbis_info	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^typedef struct vorbis_info{$/;"	s
vorbis_info	.\dep\SFML\extlibs\headers\vorbis\codec.h	/^} vorbis_info;$/;"	t	typeref:struct:vorbis_info
vs	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int hs,vs;   \/\/ expansion factor in each axis$/;"	m	struct:__anon100
vslen	.\dep\Lua\src\lobject.h	339;"	d
vslen	.\include\lua\lobject.h	339;"	d
vt	.\dep\Lua\src\lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon12::__anon13
vt	.\include\lua\lparser.h	/^      lu_byte vt;  \/* whether 't' is register (VLOCAL) or upvalue (VUPVAL) *\/$/;"	m	struct:expdesc::__anon163::__anon164
w	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int w,h;$/;"	m	struct:__anon108
w	.\include\sol\single\sol\sol.hpp	/^		std::string w;$/;"	m	class:sol::error
w	.\include\sol\sol\error.hpp	/^		std::string w;$/;"	m	class:sol::error
w2	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon98::__anon99
w_lores	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int w_lores; \/\/ horizontal pixels pre-expansion$/;"	m	struct:__anon100
wait	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^bool SocketSelector::wait(Time timeout)$/;"	f	class:sf::SocketSelector
wait	.\dep\SFML\src\SFML\System\Thread.cpp	/^void Thread::wait()$/;"	f	class:sf::Thread
wait	.\dep\SFML\src\SFML\System\Unix\ThreadImpl.cpp	/^void ThreadImpl::wait()$/;"	f	class:sf::priv::ThreadImpl
wait	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^void ThreadImpl::wait()$/;"	f	class:sf::priv::ThreadImpl
waitEvent	.\dep\SFML\src\SFML\Window\Window.cpp	/^bool Window::waitEvent(Event& event)$/;"	f	class:sf::Window
warmup	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__int32 warmup[FLAC__MAX_FIXED_ORDER];$/;"	m	struct:__anon33
warmup	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__int32 warmup[FLAC__MAX_LPC_ORDER];$/;"	m	struct:__anon34
warnAboutMissingAssertions	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual bool warnAboutMissingAssertions() const { return m_data.warnings & WarnAbout::NoAssertions; }$/;"	f	class:Catch::Config
warnings	.\include\sol\Catch\include\internal\catch_config.hpp	/^        WarnAbout::What warnings;$/;"	m	struct:Catch::ConfigData
wasted_bits	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	unsigned wasted_bits;$/;"	m	struct:__anon35
weak	.\dep\Lua\src\lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
weak	.\include\lua\lstate.h	/^  GCObject *weak;  \/* list of tables with weak values *\/$/;"	m	struct:global_State
weight	.\dep\SFML\extlibs\headers\freetype2\ftwinfnt.h	/^    FT_UShort  weight;$/;"	m	struct:FT_WinFNT_HeaderRec_
weight	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_String*  weight;$/;"	m	struct:PS_FontInfoRec_
weight_vector	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_Fixed*        weight_vector;$/;"	m	struct:PS_BlendRec_
wgkey	.\dep\Lua\src\ltable.h	25;"	d
wgkey	.\include\lua\ltable.h	25;"	d
wglChoosePixelFormatARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	179;"	d
wglCreateContextAttribsARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	189;"	d
wglGetPixelFormatAttribfvARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	181;"	d
wglGetPixelFormatAttribivARB	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	183;"	d
wglGetSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	170;"	d
wglSwapIntervalEXT	.\dep\SFML\src\SFML\Window\Win32\WglExtensions.hpp	172;"	d
what	.\dep\Lua\src\lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
what	.\include\lua\lua.h	/^  const char *what;	\/* (S) 'Lua', 'C', 'main', 'tail' *\/$/;"	m	struct:lua_Debug
wheel	.\dep\SFML\include\SFML\Window\Event.hpp	/^        Mouse::Wheel wheel; \/\/\/< Which wheel (for mice with multiple ones)$/;"	m	struct:sf::Event::MouseWheelScrollEvent
wheel	.\include\SFML\Window\Event.hpp	/^        Mouse::Wheel wheel; \/\/\/< Which wheel (for mice with multiple ones)$/;"	m	struct:sf::Event::MouseWheelScrollEvent
which	.\include\sol\Catch\include\internal\catch_tostring.hpp	/^            static Arch which() {$/;"	f	struct:Catch::Detail::__anon183::Endianness
whilestat	.\dep\Lua\src\lparser.c	/^static void whilestat (LexState *ls, int line) {$/;"	f	file:
white	.\src\src\Colors.cpp	/^	const char white[] =   { 0x1b, '[', '0', '3', '7', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
white2gray	.\dep\Lua\src\lgc.c	70;"	d	file:
width	.\dep\SFML\extlibs\headers\FLAC\format.h	/^	FLAC__uint32 width;$/;"	m	struct:__anon55
width	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Long               width;$/;"	m	struct:FT_Size_RequestRec_
width	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos  width;$/;"	m	struct:FT_Glyph_Metrics_
width	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Short  width;$/;"	m	struct:FT_Bitmap_Size_
width	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Byte   width;$/;"	m	struct:FTC_SBitRec_
width	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Int      width;$/;"	m	struct:FTC_ImageTypeRec_
width	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_UInt     width;$/;"	m	struct:FTC_ScalerRec_
width	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    unsigned int    width;$/;"	m	struct:FT_Bitmap_
width	.\dep\SFML\include\SFML\Graphics\Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row
width	.\dep\SFML\include\SFML\Graphics\Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect
width	.\dep\SFML\include\SFML\Window\Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent
width	.\dep\SFML\include\SFML\Window\VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode
width	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  width, height;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
width	.\include\SFML\Graphics\Font.hpp	/^        unsigned int width;  \/\/\/< Current width of the row$/;"	m	struct:sf::Font::Row
width	.\include\SFML\Graphics\Rect.hpp	/^    T width;  \/\/\/< Width of the rectangle$/;"	m	class:sf::Rect
width	.\include\SFML\Window\Event.hpp	/^        unsigned int width;  \/\/\/< New width, in pixels$/;"	m	struct:sf::Event::SizeEvent
width	.\include\SFML\Window\VideoMode.hpp	/^    unsigned int width;        \/\/\/< Video mode width, in pixels$/;"	m	class:sf::VideoMode
width	.\include\sol\Catch\include\external\clara.h	/^        std::size_t width;          \/\/ maximum width of text, including indent. Longer text will wrap$/;"	m	struct:STITCH_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
width	.\include\sol\Catch\include\external\tbc_text_format.h	/^        std::size_t width;          \/\/ maximum width of text, including indent. Longer text will wrap$/;"	m	struct:CLICHE_TBC_TEXT_FORMAT_OUTER_NAMESPACE::Tbc::TextAttributes
width	.\include\sol\examples\config.cpp	/^    int width;$/;"	m	struct:config	file:
width_in_blocks	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  JDIMENSION width_in_blocks;$/;"	m	struct:__anon81
width_inc	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  width_inc, height_inc;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
win_gravity	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        uint32_t win_gravity;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
window	.\dep\SFML\src\SFML\System\Android\Activity.hpp	/^    ANativeWindow* window;$/;"	m	struct:sf::priv::ActivityStates
window	.\src\src\ParticleEmitter.cpp	/^GameWindow* ParticleEmit::window; \/\/ Create a reference to the window$/;"	m	class:ParticleEmit	file:
windowCount	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^    unsigned int               windowCount      = 0;$/;"	m	namespace:__anon153	file:
windowManagerName	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^    sf::String                            windowManagerName;$/;"	m	namespace:__anon151	file:
window_group	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        xcb_window_t window_group;$/;"	m	struct:sf::priv::WindowImplX11::WMHints
withName	.\include\sol\Catch\include\internal\catch_test_case_info.hpp	/^    TestCase TestCase::withName( std::string const& _newName ) const {$/;"	f	class:Catch::TestCase
working_dir	.\include\sol\single.py	/^working_dir = os.getcwd()$/;"	v
wrap	.\include\sol\single\sol\sol.hpp	/^			typedef wrapper<meta::unqualified_t<F>> wrap;$/;"	t	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper
wrap	.\include\sol\single\sol\sol.hpp	/^	struct wrap {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol
wrap	.\include\sol\sol\call.hpp	/^			typedef wrapper<meta::unqualified_t<F>> wrap;$/;"	t	struct:sol::call_detail::lua_call_wrapper
wrap	.\include\sol\sol\function_types_templated.hpp	/^	struct wrap {$/;"	s	namespace:sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<F, std::enable_if_t<std::is_function<meta::unqualified_t<std::remove_pointer_t<F>>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<F, std::enable_if_t<std::is_member_object_pointer<meta::unqualified_t<F>>::value>> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) && > : public member_function_wrapper<R(O:: *)(Args...) &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) &> : public member_function_wrapper<R(O:: *)(Args...) &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const &&> : public member_function_wrapper<R(O:: *)(Args...) const &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const &> : public member_function_wrapper<R(O:: *)(Args...) const &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile &&> : public member_function_wrapper<R(O:: *)(Args...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile &> : public member_function_wrapper<R(O:: *)(Args...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile> : public member_function_wrapper<R(O:: *)(Args...) const volatile, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...) const> : public member_function_wrapper<R(O:: *)(Args...) const, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args...)> : public member_function_wrapper<R(O:: *)(Args...), R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) && > : public member_function_wrapper<R(O:: *)(Args..., ...) &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) &> : public member_function_wrapper<R(O:: *)(Args..., ...) &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const &&> : public member_function_wrapper<R(O:: *)(Args..., ...) const &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const &> : public member_function_wrapper<R(O:: *)(Args..., ...) const &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const volatile &&> : public member_function_wrapper<R(O:: *)(Args..., ...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\single\sol\sol.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const volatile &> : public member_function_wrapper<R(O:: *)(Args..., ...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol::sol::call_syntax::call_status::sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<F, std::enable_if_t<std::is_function<meta::unqualified_t<std::remove_pointer_t<F>>>::value>> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<F, std::enable_if_t<std::is_member_object_pointer<meta::unqualified_t<F>>::value>> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) && > : public member_function_wrapper<R(O:: *)(Args...) &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) &> : public member_function_wrapper<R(O:: *)(Args...) &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const &&> : public member_function_wrapper<R(O:: *)(Args...) const &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const &> : public member_function_wrapper<R(O:: *)(Args...) const &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile &&> : public member_function_wrapper<R(O:: *)(Args...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile &> : public member_function_wrapper<R(O:: *)(Args...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const volatile> : public member_function_wrapper<R(O:: *)(Args...) const volatile, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...) const> : public member_function_wrapper<R(O:: *)(Args...) const, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args...)> : public member_function_wrapper<R(O:: *)(Args...), R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) && > : public member_function_wrapper<R(O:: *)(Args..., ...) &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) &> : public member_function_wrapper<R(O:: *)(Args..., ...) &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const &&> : public member_function_wrapper<R(O:: *)(Args..., ...) const &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const &> : public member_function_wrapper<R(O:: *)(Args..., ...) const &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const volatile &&> : public member_function_wrapper<R(O:: *)(Args..., ...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol
wrapper	.\include\sol\sol\wrapper.hpp	/^	struct wrapper<R(O:: *)(Args..., ...) const volatile &> : public member_function_wrapper<R(O:: *)(Args..., ...) const volatile &, R, O, Args...> {$/;"	s	namespace:sol
write	.\dep\SFML\extlibs\headers\FLAC\callback.h	/^	FLAC__IOCallback_Write write;$/;"	m	struct:__anon24
write	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^void OutputSoundFile::write(const Int16* samples, Uint64 count)$/;"	f	class:sf::OutputSoundFile
write	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^void SoundFileWriterFlac::write(const Int16* samples, Uint64 count)$/;"	f	class:sf::priv::SoundFileWriterFlac
write	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^void SoundFileWriterOgg::write(const Int16* samples, Uint64 count)$/;"	f	class:sf::priv::SoundFileWriterOgg
write	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^void SoundFileWriterWav::write(const Int16* samples, Uint64 count)$/;"	f	class:sf::priv::SoundFileWriterWav
write	.\include\sol\Catch\scripts\generateSingleHeader.py	/^def write( line ):$/;"	f
write	.\include\sol\single\sol\sol.hpp	/^		Write write;$/;"	m	struct:sol::sol::call_syntax::call_status::sol::property_wrapper
write	.\include\sol\sol\property.hpp	/^		Write write;$/;"	m	struct:sol::property_wrapper
write3	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static void write3(FILE *f, unsigned char a, unsigned char b, unsigned char c)$/;"	f
writeAssertion	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        void writeAssertion( AssertionStats const& stats ) {$/;"	f	class:Catch::JunitReporter
writeAssertions	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        void writeAssertions( SectionNode const& sectionNode ) {$/;"	f	class:Catch::JunitReporter
writeAttribute	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            ScopedElement& writeAttribute( std::string const& name, T const& attribute ) {$/;"	f	class:Catch::XmlWriter::ScopedElement
writeAttribute	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeAttribute( std::string const& name, T const& attribute ) {$/;"	f	class:Catch::XmlWriter
writeAttribute	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeAttribute( std::string const& name, bool attribute ) {$/;"	f	class:Catch::XmlWriter
writeAttribute	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeAttribute( std::string const& name, std::string const& attribute ) {$/;"	f	class:Catch::XmlWriter
writeBlankLine	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeBlankLine() {$/;"	f	class:Catch::XmlWriter
writeComment	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeComment( std::string const& text ) {$/;"	f	class:Catch::XmlWriter
writeGroup	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        void writeGroup( TestGroupNode const& groupNode, double suiteTime ) {$/;"	f	class:Catch::JunitReporter
writeHeader	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^bool SoundFileWriterWav::writeHeader(unsigned int sampleRate, unsigned int channelCount)$/;"	f	class:sf::priv::SoundFileWriterWav
writeJpg	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^bool ImageLoader::writeJpg(const std::string& filename, const std::vector<Uint8>& pixels, unsigned int width, unsigned int height)$/;"	f	class:sf::priv::ImageLoader
writeSection	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        void writeSection(  std::string const& className,$/;"	f	class:Catch::JunitReporter
writeTestCase	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        void writeTestCase( TestCaseNode const& testCaseNode ) {$/;"	f	class:Catch::JunitReporter
writeText	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            ScopedElement& writeText( std::string const& text, bool indent = true ) {$/;"	f	class:Catch::XmlWriter::ScopedElement
writeText	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        XmlWriter& writeText( std::string const& text, bool indent = true ) {$/;"	f	class:Catch::XmlWriter
writeToDebugConsole	.\include\sol\Catch\include\internal\catch_debugger.hpp	/^        void writeToDebugConsole( std::string const& text ) {$/;"	f	namespace:Catch
writeToStream	.\include\sol\Catch\projects\SelfTest\TestMain.cpp	/^    void writeToStream( std::ostream& _stream ) const {$/;"	f	class:ColourString
write_Adobe_marker	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean write_Adobe_marker;	\/* should an Adobe marker be written? *\/$/;"	m	struct:jpeg_compress_struct
write_JFIF_header	.\dep\SFML\extlibs\headers\jpeg\jpeglib.h	/^  boolean write_JFIF_header;	\/* should a JFIF marker be written? *\/$/;"	m	struct:jpeg_compress_struct
write_pixels	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static void write_pixels(FILE *f, int rgb_dir, int vdir, int x, int y, int comp, void *data, int write_alpha, int scanline_pad, int expand_mono)$/;"	f
writefv	.\dep\SFML\extlibs\headers\stb_image\stb_image_write.h	/^static void writefv(FILE *f, const char *fmt, va_list v)$/;"	f
writer	.\dep\Lua\src\ldump.c	/^  lua_Writer writer;$/;"	m	struct:__anon1	file:
writer	.\dep\Lua\src\lstrlib.c	/^static int writer (lua_State *L, const void *b, size_t size, void *B) {$/;"	f	file:
writer	.\dep\Lua\src\luac.c	/^static int writer(lua_State* L, const void* p, size_t size, void* u)$/;"	f	file:
x	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  x;$/;"	m	struct:FT_Vector_
x	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    short           x;$/;"	m	struct:FT_Span_
x	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_F2Dot14  x;$/;"	m	struct:FT_UnitVector_
x	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon98::__anon99
x	.\dep\SFML\include\SFML\System\Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2
x	.\dep\SFML\include\SFML\System\Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        float x;           \/\/\/< Current value of the sensor on X axis$/;"	m	struct:sf::Event::SensorEvent
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int          x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelScrollEvent
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int x;               \/\/\/< X position of the touch, relative to the left of the owner window$/;"	m	struct:sf::Event::TouchEvent
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
x	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
x	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  x, y;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
x	.\include\SFML\System\Vector2.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector2
x	.\include\SFML\System\Vector3.hpp	/^    T x; \/\/\/< X coordinate of the vector$/;"	m	class:sf::Vector3
x	.\include\SFML\Window\Event.hpp	/^        float x;           \/\/\/< Current value of the sensor on X axis$/;"	m	struct:sf::Event::SensorEvent
x	.\include\SFML\Window\Event.hpp	/^        int           x;      \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
x	.\include\SFML\Window\Event.hpp	/^        int          x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelScrollEvent
x	.\include\SFML\Window\Event.hpp	/^        int x;               \/\/\/< X position of the touch, relative to the left of the owner window$/;"	m	struct:sf::Event::TouchEvent
x	.\include\SFML\Window\Event.hpp	/^        int x;     \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
x	.\include\SFML\Window\Event.hpp	/^        int x; \/\/\/< X position of the mouse pointer, relative to the left of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
x	.\include\sol\examples\usertype.cpp	/^    float x = 0;$/;"	m	struct:vector	file:
x	.\include\sol\test_usertypes.cpp	/^		int x;$/;"	m	struct:crapola::fuser	file:
x	.\include\sol\test_usertypes.cpp	/^	float x, y, z;$/;"	m	struct:Vec	file:
x	.\include\sol\test_usertypes.cpp	/^	int x;$/;"	m	struct:fuser	file:
x	.\include\sol\test_usertypes.cpp	/^	std::string x() {$/;"	f	struct:ext_getset
x	.\src\include\Target.h	/^	float x;$/;"	m	class:Target
x2	.\include\sol\test_usertypes.cpp	/^	int x2(std::string x) {$/;"	f	struct:ext_getset
xAvgCharWidth	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   xAvgCharWidth;$/;"	m	struct:TT_OS2_
xHeight	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_UShort  xHeight;$/;"	m	struct:TT_PCLT_
xMax	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  xMax, yMax;$/;"	m	struct:FT_BBox_
xMax	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   xMax;$/;"	m	struct:TT_Header_
xMax_Extent	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   xMax_Extent;            \/* xmax extents          *\/$/;"	m	struct:TT_HoriHeader_
xMin	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  xMin, yMin;$/;"	m	struct:FT_BBox_
xMin	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   xMin;$/;"	m	struct:TT_Header_
x_ppem	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos    x_ppem;$/;"	m	struct:FT_Bitmap_Size_
x_ppem	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UShort  x_ppem;      \/* horizontal pixels per EM               *\/$/;"	m	struct:FT_Size_Metrics_
x_res	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_UInt     x_res;$/;"	m	struct:FTC_ScalerRec_
x_scale	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Fixed   x_scale;     \/* scaling values used to convert font    *\/$/;"	m	struct:FT_Size_Metrics_
xadvance	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Char   xadvance;$/;"	m	struct:FTC_SBitRec_
xml	.\include\sol\Catch\include\reporters\catch_reporter_junit.hpp	/^        XmlWriter xml;$/;"	m	class:Catch::JunitReporter
xuid	.\dep\SFML\extlibs\headers\freetype2\t1tables.h	/^    FT_ULong        xuid[16];$/;"	m	struct:CID_FaceInfoRec_
xx	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Fixed  xx, xy;$/;"	m	struct:FT_Matrix_
xy	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Fixed  xx, xy;$/;"	m	struct:FT_Matrix_
y	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  y;$/;"	m	struct:FT_Vector_
y	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_F2Dot14  y;$/;"	m	struct:FT_UnitVector_
y	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^      int x,y,w2,h2;$/;"	m	struct:__anon98::__anon99
y	.\dep\SFML\include\SFML\System\Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2
y	.\dep\SFML\include\SFML\System\Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        float y;           \/\/\/< Current value of the sensor on Y axis$/;"	m	struct:sf::Event::SensorEvent
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int          y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelScrollEvent
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int y;               \/\/\/< Y position of the touch, relative to the top of the owner window$/;"	m	struct:sf::Event::TouchEvent
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
y	.\dep\SFML\include\SFML\Window\Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
y	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.hpp	/^        int32_t  x, y;$/;"	m	struct:sf::priv::WindowImplX11::WMSizeHints
y	.\include\SFML\System\Vector2.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector2
y	.\include\SFML\System\Vector3.hpp	/^    T y; \/\/\/< Y coordinate of the vector$/;"	m	class:sf::Vector3
y	.\include\SFML\Window\Event.hpp	/^        float y;           \/\/\/< Current value of the sensor on Y axis$/;"	m	struct:sf::Event::SensorEvent
y	.\include\SFML\Window\Event.hpp	/^        int           y;      \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseButtonEvent
y	.\include\SFML\Window\Event.hpp	/^        int          y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelScrollEvent
y	.\include\SFML\Window\Event.hpp	/^        int y;               \/\/\/< Y position of the touch, relative to the top of the owner window$/;"	m	struct:sf::Event::TouchEvent
y	.\include\SFML\Window\Event.hpp	/^        int y;     \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseWheelEvent
y	.\include\SFML\Window\Event.hpp	/^        int y; \/\/\/< Y position of the mouse pointer, relative to the top of the owner window$/;"	m	struct:sf::Event::MouseMoveEvent
y	.\include\sol\examples\usertype.cpp	/^    float y = 0;$/;"	m	struct:vector	file:
y	.\include\sol\test_usertypes.cpp	/^	float x, y, z;$/;"	m	struct:Vec	file:
y	.\src\include\Target.h	/^	float y;$/;"	m	class:Target
yMax	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  xMax, yMax;$/;"	m	struct:FT_BBox_
yMax	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   yMax;$/;"	m	struct:TT_Header_
yMax_Extent	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   yMax_Extent;             \/* xmax or ymax extents            *\/$/;"	m	struct:TT_VertHeader_
yMin	.\dep\SFML\extlibs\headers\freetype2\ftimage.h	/^    FT_Pos  xMin, yMin;$/;"	m	struct:FT_BBox_
yMin	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   yMin;$/;"	m	struct:TT_Header_
yStrikeoutPosition	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   yStrikeoutPosition;$/;"	m	struct:TT_OS2_
yStrikeoutSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   yStrikeoutSize;$/;"	m	struct:TT_OS2_
ySubscriptXOffset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySubscriptXOffset;$/;"	m	struct:TT_OS2_
ySubscriptXSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySubscriptXSize;$/;"	m	struct:TT_OS2_
ySubscriptYOffset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySubscriptYOffset;$/;"	m	struct:TT_OS2_
ySubscriptYSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySubscriptYSize;$/;"	m	struct:TT_OS2_
ySuperscriptXOffset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySuperscriptXOffset;$/;"	m	struct:TT_OS2_
ySuperscriptXSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySuperscriptXSize;$/;"	m	struct:TT_OS2_
ySuperscriptYOffset	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySuperscriptYOffset;$/;"	m	struct:TT_OS2_
ySuperscriptYSize	.\dep\SFML\extlibs\headers\freetype2\tttables.h	/^    FT_Short   ySuperscriptYSize;$/;"	m	struct:TT_OS2_
y_ppem	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Pos    y_ppem;$/;"	m	struct:FT_Bitmap_Size_
y_ppem	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_UShort  y_ppem;      \/* vertical pixels per EM                 *\/$/;"	m	struct:FT_Size_Metrics_
y_res	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_UInt     y_res;$/;"	m	struct:FTC_ScalerRec_
y_scale	.\dep\SFML\extlibs\headers\freetype2\freetype.h	/^    FT_Fixed   y_scale;     \/* units to 26.6 fractional pixels        *\/$/;"	m	struct:FT_Size_Metrics_
yadvance	.\dep\SFML\extlibs\headers\freetype2\ftcache.h	/^    FT_Char   yadvance;$/;"	m	struct:FTC_SBitRec_
ycm_core	.\.ycm_extra_conf.py	/^import ycm_core$/;"	i
yellow	.\src\src\Colors.cpp	/^	const char yellow[] =  { 0x1b, '[', '0', '3', '3', 'm', 0};$/;"	m	namespace:ConsoleColors	file:
yielded	.\include\sol\single\sol\sol.hpp	/^		yielded = LUA_YIELD,$/;"	m	class:sol::sol::call_syntax::call_status
yielded	.\include\sol\single\sol\sol.hpp	/^		yielded = LUA_YIELD,$/;"	m	class:sol::sol::call_syntax::call_status::thread_status
yielded	.\include\sol\sol\types.hpp	/^		yielded = LUA_YIELD,$/;"	m	class:sol::call_syntax::call_status
yielded	.\include\sol\sol\types.hpp	/^		yielded = LUA_YIELD,$/;"	m	class:sol::call_syntax::call_status::thread_status
yindex	.\dep\Lua\src\lparser.c	/^static void yindex (LexState *ls, expdesc *v) {$/;"	f	file:
ypos	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int ypos;    \/\/ which pre-expansion row we're on$/;"	m	struct:__anon100
ystep	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int ystep;   \/\/ how far through vertical expansion we are$/;"	m	struct:__anon100
yx	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Fixed  yx, yy;$/;"	m	struct:FT_Matrix_
yy	.\dep\SFML\extlibs\headers\freetype2\fttypes.h	/^    FT_Fixed  yx, yy;$/;"	m	struct:FT_Matrix_
z	.\dep\Lua\src\ldo.c	/^  ZIO *z;$/;"	m	struct:SParser	file:
z	.\dep\Lua\src\llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
z	.\dep\SFML\include\SFML\System\Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3
z	.\dep\SFML\include\SFML\Window\Event.hpp	/^        float z;           \/\/\/< Current value of the sensor on Z axis$/;"	m	struct:sf::Event::SensorEvent
z	.\include\SFML\System\Vector3.hpp	/^    T z; \/\/\/< Z coordinate of the vector$/;"	m	class:sf::Vector3
z	.\include\SFML\Window\Event.hpp	/^        float z;           \/\/\/< Current value of the sensor on Z axis$/;"	m	struct:sf::Event::SensorEvent
z	.\include\lua\llex.h	/^  ZIO *z;  \/* input stream *\/$/;"	m	struct:LexState
z	.\include\sol\test_usertypes.cpp	/^	float x, y, z;$/;"	m	struct:Vec	file:
z_distance	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon102
z_expandable	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   int   z_expandable;$/;"	m	struct:__anon102
z_length	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi__zhuffman z_length, z_distance;$/;"	m	struct:__anon102
zbuffer	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon102
zbuffer_end	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   stbi_uc *zbuffer, *zbuffer_end;$/;"	m	struct:__anon102
zgetc	.\dep\Lua\src\lzio.h	20;"	d
zgetc	.\include\lua\lzio.h	20;"	d
zoom	.\dep\SFML\src\SFML\Graphics\View.cpp	/^void View::zoom(float factor)$/;"	f	class:sf::View
zout	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   char *zout;$/;"	m	struct:__anon102
zout_end	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   char *zout_end;$/;"	m	struct:__anon102
zout_start	.\dep\SFML\extlibs\headers\stb_image\stb_image.h	/^   char *zout_start;$/;"	m	struct:__anon102
~AlResource	.\dep\SFML\src\SFML\Audio\AlResource.cpp	/^AlResource::~AlResource()$/;"	f	class:sf::AlResource
~AssertionResult	.\include\sol\Catch\include\internal\catch_assertionresult.hpp	/^    AssertionResult::~AssertionResult() {}$/;"	f	class:Catch::AssertionResult
~AssertionStats	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    AssertionStats::~AssertionStats() {}$/;"	f	class:Catch::AssertionStats
~AudioDevice	.\dep\SFML\src\SFML\Audio\AudioDevice.cpp	/^AudioDevice::~AudioDevice()$/;"	f	class:sf::priv::AudioDevice
~AutoReg	.\include\sol\Catch\include\internal\catch_test_case_registry_impl.hpp	/^    AutoReg::~AutoReg() {}$/;"	f	class:Catch::AutoReg
~BoundArgFunction	.\include\sol\Catch\include\external\clara.h	/^            ~BoundArgFunction() { delete functionObj; }$/;"	f	class:Clara::Detail::BoundArgFunction
~Colour	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^    Colour::~Colour(){ if( !m_moved ) use( None ); }$/;"	f	class:Catch::Colour
~CompactReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    CompactReporter::~CompactReporter() {}$/;"	f	class:Catch::CompactReporter
~CompositeGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    ~CompositeGenerator() {$/;"	f	class:Catch::CompositeGenerator
~Config	.\include\sol\Catch\include\internal\catch_config.hpp	/^        virtual ~Config() {$/;"	f	class:Catch::Config
~ConsoleReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    ConsoleReporter::~ConsoleReporter() {}$/;"	f	class:Catch::ConsoleReporter
~Contains	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    Matchers::Impl::StdString::Contains::~Contains() {}$/;"	f	class:Catch::Matchers::Impl::StdString::Contains
~Context	.\dep\SFML\src\SFML\Window\Context.cpp	/^Context::~Context()$/;"	f	class:sf::Context
~CountedObject	.\include\sol\Optional\test_optional.cpp	/^  ~CountedObject() { --_counter; }$/;"	f	struct:CountedObject
~CumulativeReporterBase	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    CumulativeReporterBase::~CumulativeReporterBase() {}$/;"	f	class:Catch::CumulativeReporterBase
~DefaultErrStreamBuf	.\dep\SFML\src\SFML\System\Err.cpp	/^    ~DefaultErrStreamBuf()$/;"	f	class:__anon135::DefaultErrStreamBuf
~Drawable	.\dep\SFML\include\SFML\Graphics\Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~Drawable	.\include\SFML\Graphics\Drawable.hpp	/^    virtual ~Drawable() {}$/;"	f	class:sf::Drawable
~EglContext	.\dep\SFML\src\SFML\Window\EglContext.cpp	/^EglContext::~EglContext()$/;"	f	class:sf::priv::EglContext
~EndsWith	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    Matchers::Impl::StdString::EndsWith::~EndsWith() {}$/;"	f	class:Catch::Matchers::Impl::StdString::EndsWith
~Enemy	.\src\src\Enemy.cpp	/^Enemy::~Enemy() {$/;"	f	class:Enemy
~Equals	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    Matchers::Impl::StdString::Equals::~Equals() {}$/;"	f	class:Catch::Matchers::Impl::StdString::Equals
~ExceptionTranslatorRegistry	.\include\sol\Catch\include\internal\catch_exception_translator_registry.hpp	/^        ~ExceptionTranslatorRegistry() {$/;"	f	class:Catch::ExceptionTranslatorRegistry
~ExcludedPattern	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestSpec::ExcludedPattern::~ExcludedPattern() {}$/;"	f	class:Catch::TestSpec::ExcludedPattern
~FileInputStream	.\dep\SFML\src\SFML\System\FileInputStream.cpp	/^FileInputStream::~FileInputStream()$/;"	f	class:sf::FileInputStream
~Font	.\dep\SFML\src\SFML\Graphics\Font.cpp	/^Font::~Font()$/;"	f	class:sf::Font
~FreeFunctionTestCase	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    FreeFunctionTestCase::~FreeFunctionTestCase() {}$/;"	f	class:Catch::FreeFunctionTestCase
~Ftp	.\dep\SFML\src\SFML\Network\Ftp.cpp	/^Ftp::~Ftp()$/;"	f	class:sf::Ftp
~GameWindow	.\src\src\GameWindow.cpp	/^GameWindow::~GameWindow() {$/;"	f	class:GameWindow
~GeneratorsForTest	.\include\sol\Catch\include\internal\catch_generators_impl.hpp	/^        ~GeneratorsForTest() {$/;"	f	class:Catch::GeneratorsForTest
~GlContext	.\dep\SFML\src\SFML\Window\GlContext.cpp	/^GlContext::~GlContext()$/;"	f	class:sf::priv::GlContext
~GlResource	.\dep\SFML\src\SFML\Window\GlResource.cpp	/^GlResource::~GlResource()$/;"	f	class:sf::GlResource
~GlxContext	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^GlxContext::~GlxContext()$/;"	f	class:sf::priv::GlxContext
~GlxErrorHandler	.\dep\SFML\src\SFML\Window\Unix\GlxContext.cpp	/^        ~GlxErrorHandler()$/;"	f	class:__anon145::GlxErrorHandler
~GuiComponent	.\src\src\GuiComponent.cpp	/^GuiComponent::~GuiComponent() {$/;"	f	class:GuiComponent
~HIDJoystickManager	.\dep\SFML\src\SFML\Window\OSX\HIDJoystickManager.cpp	/^HIDJoystickManager::~HIDJoystickManager()$/;"	f	class:sf::priv::HIDJoystickManager
~IArgFunction	.\include\sol\Catch\include\external\clara.h	/^            virtual ~IArgFunction() {}$/;"	f	struct:Clara::Detail::IArgFunction
~IColourImpl	.\include\sol\Catch\include\internal\catch_console_colour_impl.hpp	/^            virtual ~IColourImpl() {}$/;"	f	struct:Catch::__anon177::IColourImpl
~IConfig	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IConfig::~IConfig() {}$/;"	f	class:Catch::IConfig
~IContext	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IContext::~IContext() {}$/;"	f	class:Catch::IContext
~IExceptionTranslator	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IExceptionTranslator::~IExceptionTranslator() {}$/;"	f	class:Catch::IExceptionTranslator
~IExceptionTranslatorRegistry	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IExceptionTranslatorRegistry::~IExceptionTranslatorRegistry() {}$/;"	f	class:Catch::IExceptionTranslatorRegistry
~IGenerator	.\include\sol\Catch\include\internal\catch_generators.hpp	/^    virtual ~IGenerator() {}$/;"	f	struct:Catch::IGenerator
~IGeneratorInfo	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IGeneratorInfo::~IGeneratorInfo() {}$/;"	f	class:Catch::IGeneratorInfo
~IGeneratorsForTest	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IGeneratorsForTest::~IGeneratorsForTest() {}$/;"	f	class:Catch::IGeneratorsForTest
~IMutableContext	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IMutableContext::~IMutableContext() {}$/;"	f	class:Catch::IMutableContext
~IMutableRegistryHub	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IMutableRegistryHub::~IMutableRegistryHub() {}$/;"	f	class:Catch::IMutableRegistryHub
~IRegistryHub	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IRegistryHub::~IRegistryHub() {}$/;"	f	class:Catch::IRegistryHub
~IReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IReporter::~IReporter() {}$/;"	f	class:Catch::IReporter
~IReporterFactory	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IReporterFactory::~IReporterFactory() {}$/;"	f	class:Catch::IReporterFactory
~IReporterRegistry	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IReporterRegistry::~IReporterRegistry() {}$/;"	f	class:Catch::IReporterRegistry
~IResultCapture	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IResultCapture::~IResultCapture() {}$/;"	f	class:Catch::IResultCapture
~IRunner	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IRunner::~IRunner() {}$/;"	f	class:Catch::IRunner
~IShared	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IShared::~IShared() {}$/;"	f	class:Catch::IShared
~IStreamingReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    IStreamingReporter::~IStreamingReporter() {}$/;"	f	class:Catch::IStreamingReporter
~ITagAliasRegistry	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    ITagAliasRegistry::~ITagAliasRegistry() {}$/;"	f	class:Catch::ITagAliasRegistry
~ITestCase	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    ITestCase::~ITestCase() {}$/;"	f	class:Catch::ITestCase
~ITestCaseRegistry	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    ITestCaseRegistry::~ITestCaseRegistry() {}$/;"	f	class:Catch::ITestCaseRegistry
~ITracker	.\include\sol\Catch\include\internal\catch_impl.hpp	/^        ITracker::~ITracker() {}$/;"	f	class:Catch::TestCaseTracking::ITracker
~Image	.\dep\SFML\src\SFML\Graphics\Image.cpp	/^Image::~Image()$/;"	f	class:sf::Image
~ImageLoader	.\dep\SFML\src\SFML\Graphics\ImageLoader.cpp	/^ImageLoader::~ImageLoader()$/;"	f	class:sf::priv::ImageLoader
~IndexTracker	.\include\sol\Catch\include\internal\catch_impl.hpp	/^        IndexTracker::~IndexTracker() {}$/;"	f	class:Catch::TestCaseTracking::IndexTracker
~InputSoundFile	.\dep\SFML\src\SFML\Audio\InputSoundFile.cpp	/^InputSoundFile::~InputSoundFile()$/;"	f	class:sf::InputSoundFile
~InputStream	.\dep\SFML\include\SFML\System\InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~InputStream	.\include\SFML\System\InputStream.hpp	/^    virtual ~InputStream() {}$/;"	f	class:sf::InputStream
~JoystickManager	.\dep\SFML\src\SFML\Window\JoystickManager.cpp	/^JoystickManager::~JoystickManager()$/;"	f	class:sf::priv::JoystickManager
~JunitReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    JunitReporter::~JunitReporter() {}$/;"	f	class:Catch::JunitReporter
~LegacyReporterAdapter	.\include\sol\Catch\include\internal\catch_legacy_reporter_adapter.hpp	/^    LegacyReporterAdapter::~LegacyReporterAdapter() {}$/;"	f	class:Catch::LegacyReporterAdapter
~Lock	.\dep\SFML\src\SFML\System\Lock.cpp	/^Lock::~Lock()$/;"	f	class:sf::Lock
~Logger	.\src\src\Logger.cpp	/^Logger::~Logger() {$/;"	f	class:Logger
~Map	.\src\src\Map.cpp	/^Map::~Map() {$/;"	f	class:Map
~Matcher	.\include\sol\Catch\include\internal\catch_matchers.hpp	/^        virtual ~Matcher() {}$/;"	f	struct:Catch::Matchers::Impl::Matcher
~Matcher	.\include\sol\Catch\single_include\catch.hpp	/^        virtual ~Matcher() {}$/;"	f	struct:Catch::Matchers::Impl::Matcher
~MethodTestCase	.\include\sol\Catch\include\internal\catch_test_registry.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~MethodTestCase	.\include\sol\Catch\single_include\catch.hpp	/^    virtual ~MethodTestCase() {}$/;"	f	class:Catch::MethodTestCase
~Music	.\dep\SFML\src\SFML\Audio\Music.cpp	/^Music::~Music()$/;"	f	class:sf::Music
~Mutex	.\dep\SFML\src\SFML\System\Mutex.cpp	/^Mutex::~Mutex()$/;"	f	class:sf::Mutex
~MutexImpl	.\dep\SFML\src\SFML\System\Unix\MutexImpl.cpp	/^MutexImpl::~MutexImpl()$/;"	f	class:sf::priv::MutexImpl
~MutexImpl	.\dep\SFML\src\SFML\System\Win32\MutexImpl.cpp	/^MutexImpl::~MutexImpl()$/;"	f	class:sf::priv::MutexImpl
~NamePattern	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestSpec::NamePattern::~NamePattern() {}$/;"	f	class:Catch::TestSpec::NamePattern
~Node	.\include\sol\Catch\include\reporters\catch_reporter_bases.hpp	/^            virtual ~Node() {}$/;"	f	struct:Catch::CumulativeReporterBase::Node
~NonCopyable	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    NonCopyable::~NonCopyable() {}$/;"	f	class:Catch::NonCopyable
~Object	.\src\src\Object.cpp	/^Object::~Object() {}$/;"	f	class:Object
~OcMethod	.\include\sol\Catch\include\internal\catch_objc.hpp	/^        virtual ~OcMethod() {}$/;"	f	class:Catch::OcMethod
~Option	.\include\sol\Catch\include\internal\catch_option.hpp	/^        ~Option() {$/;"	f	class:Catch::Option
~OutputSoundFile	.\dep\SFML\src\SFML\Audio\OutputSoundFile.cpp	/^OutputSoundFile::~OutputSoundFile()$/;"	f	class:sf::OutputSoundFile
~Packet	.\dep\SFML\src\SFML\Network\Packet.cpp	/^Packet::~Packet()$/;"	f	class:sf::Packet
~ParticleEmitter	.\src\src\Particle.cpp	/^ParticleEmitter::~ParticleEmitter() {$/;"	f	class:ParticleEmitter
~Path	.\src\src\Path.cpp	/^Path::~Path() {}$/;"	f	class:Path
~Pattern	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestSpec::Pattern::~Pattern() {}$/;"	f	class:Catch::TestSpec::Pattern
~PauseWindow	.\src\src\PauseWindow.cpp	/^PauseWindow::~PauseWindow() {$/;"	f	class:PauseWindow
~Perk	.\src\src\Perk.cpp	/^Perk::~Perk() {$/;"	f	class:Perk
~Projectile	.\src\src\Projectile.cpp	/^Projectile::~Projectile() {}$/;"	f	class:Projectile
~Ptr	.\include\sol\Catch\include\internal\catch_ptr.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~Ptr	.\include\sol\Catch\single_include\catch.hpp	/^        ~Ptr(){$/;"	f	class:Catch::Ptr
~RenderTarget	.\dep\SFML\src\SFML\Graphics\RenderTarget.cpp	/^RenderTarget::~RenderTarget()$/;"	f	class:sf::RenderTarget
~RenderTexture	.\dep\SFML\src\SFML\Graphics\RenderTexture.cpp	/^RenderTexture::~RenderTexture()$/;"	f	class:sf::RenderTexture
~RenderTextureImpl	.\dep\SFML\src\SFML\Graphics\RenderTextureImpl.cpp	/^RenderTextureImpl::~RenderTextureImpl()$/;"	f	class:sf::priv::RenderTextureImpl
~RenderTextureImplDefault	.\dep\SFML\src\SFML\Graphics\RenderTextureImplDefault.cpp	/^RenderTextureImplDefault::~RenderTextureImplDefault()$/;"	f	class:sf::priv::RenderTextureImplDefault
~RenderTextureImplFBO	.\dep\SFML\src\SFML\Graphics\RenderTextureImplFBO.cpp	/^RenderTextureImplFBO::~RenderTextureImplFBO()$/;"	f	class:sf::priv::RenderTextureImplFBO
~RenderWindow	.\dep\SFML\src\SFML\Graphics\RenderWindow.cpp	/^RenderWindow::~RenderWindow()$/;"	f	class:sf::RenderWindow
~ResourceStream	.\dep\SFML\src\SFML\System\Android\ResourceStream.cpp	/^ResourceStream::~ResourceStream()$/;"	f	class:sf::priv::ResourceStream
~RunContext	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        virtual ~RunContext() {$/;"	f	class:Catch::RunContext
~RunningSection	.\include\sol\Catch\include\internal\catch_section_info.hpp	/^        ~RunningSection() {$/;"	f	class:Catch::RunningSection
~ScopedElement	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^            ~ScopedElement() {$/;"	f	class:Catch::XmlWriter::ScopedElement
~ScopedMessage	.\include\sol\Catch\include\internal\catch_message.hpp	/^    ScopedMessage::~ScopedMessage() {$/;"	f	class:Catch::ScopedMessage
~Section	.\include\sol\Catch\include\internal\catch_section.hpp	/^    Section::~Section() {$/;"	f	class:Catch::Section
~SectionNode	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    CumulativeReporterBase::SectionNode::~SectionNode() {}$/;"	f	class:Catch::CumulativeReporterBase::SectionNode
~SectionStats	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    SectionStats::~SectionStats() {}$/;"	f	class:Catch::SectionStats
~SectionTracker	.\include\sol\Catch\include\internal\catch_impl.hpp	/^        SectionTracker::~SectionTracker() {}$/;"	f	class:Catch::TestCaseTracking::SectionTracker
~SensorManager	.\dep\SFML\src\SFML\Window\SensorManager.cpp	/^SensorManager::~SensorManager()$/;"	f	class:sf::priv::SensorManager
~Session	.\include\sol\Catch\include\catch_session.hpp	/^        ~Session() {$/;"	f	class:Catch::Session
~Shader	.\dep\SFML\src\SFML\Graphics\Shader.cpp	/^Shader::~Shader()$/;"	f	class:sf::Shader
~Shape	.\dep\SFML\src\SFML\Graphics\Shape.cpp	/^Shape::~Shape()$/;"	f	class:sf::Shape
~Ship	.\src\src\Ship.cpp	/^Ship::~Ship() {$/;"	f	class:Ship
~SkillNode	.\src\src\SkillTree.cpp	/^SkillNode::~SkillNode() {$/;"	f	class:SkillNode
~SkillTree	.\src\src\SkillTree.cpp	/^SkillTree::~SkillTree() {$/;"	f	class:SkillTree
~SkillTreeWindow	.\src\src\SkillTreeWindow.cpp	/^SkillTreeWindow::~SkillTreeWindow() {$/;"	f	class:SkillTreeWindow
~Socket	.\dep\SFML\src\SFML\Network\Socket.cpp	/^Socket::~Socket()$/;"	f	class:sf::Socket
~SocketInitializer	.\dep\SFML\src\SFML\Network\Win32\SocketImpl.cpp	/^    ~SocketInitializer()$/;"	f	struct:sf::priv::SocketInitializer
~SocketSelector	.\dep\SFML\src\SFML\Network\SocketSelector.cpp	/^SocketSelector::~SocketSelector()$/;"	f	class:sf::SocketSelector
~Sound	.\dep\SFML\src\SFML\Audio\Sound.cpp	/^Sound::~Sound()$/;"	f	class:sf::Sound
~SoundBuffer	.\dep\SFML\src\SFML\Audio\SoundBuffer.cpp	/^SoundBuffer::~SoundBuffer()$/;"	f	class:sf::SoundBuffer
~SoundFileReader	.\dep\SFML\include\SFML\Audio\SoundFileReader.hpp	/^    virtual ~SoundFileReader() {}$/;"	f	class:sf::SoundFileReader
~SoundFileReader	.\include\SFML\Audio\SoundFileReader.hpp	/^    virtual ~SoundFileReader() {}$/;"	f	class:sf::SoundFileReader
~SoundFileReaderFlac	.\dep\SFML\src\SFML\Audio\SoundFileReaderFlac.cpp	/^SoundFileReaderFlac::~SoundFileReaderFlac()$/;"	f	class:sf::priv::SoundFileReaderFlac
~SoundFileReaderOgg	.\dep\SFML\src\SFML\Audio\SoundFileReaderOgg.cpp	/^SoundFileReaderOgg::~SoundFileReaderOgg()$/;"	f	class:sf::priv::SoundFileReaderOgg
~SoundFileWriter	.\dep\SFML\include\SFML\Audio\SoundFileWriter.hpp	/^    virtual ~SoundFileWriter() {}$/;"	f	class:sf::SoundFileWriter
~SoundFileWriter	.\include\SFML\Audio\SoundFileWriter.hpp	/^    virtual ~SoundFileWriter() {}$/;"	f	class:sf::SoundFileWriter
~SoundFileWriterFlac	.\dep\SFML\src\SFML\Audio\SoundFileWriterFlac.cpp	/^SoundFileWriterFlac::~SoundFileWriterFlac()$/;"	f	class:sf::priv::SoundFileWriterFlac
~SoundFileWriterOgg	.\dep\SFML\src\SFML\Audio\SoundFileWriterOgg.cpp	/^SoundFileWriterOgg::~SoundFileWriterOgg()$/;"	f	class:sf::priv::SoundFileWriterOgg
~SoundFileWriterWav	.\dep\SFML\src\SFML\Audio\SoundFileWriterWav.cpp	/^SoundFileWriterWav::~SoundFileWriterWav()$/;"	f	class:sf::priv::SoundFileWriterWav
~SoundRecorder	.\dep\SFML\src\SFML\Audio\SoundRecorder.cpp	/^SoundRecorder::~SoundRecorder()$/;"	f	class:sf::SoundRecorder
~SoundSource	.\dep\SFML\src\SFML\Audio\SoundSource.cpp	/^SoundSource::~SoundSource()$/;"	f	class:sf::SoundSource
~SoundStream	.\dep\SFML\src\SFML\Audio\SoundStream.cpp	/^SoundStream::~SoundStream()$/;"	f	class:sf::SoundStream
~StartsWith	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    Matchers::Impl::StdString::StartsWith::~StartsWith() {}$/;"	f	class:Catch::Matchers::Impl::StdString::StartsWith
~StateManager	.\src\src\StateManager.cpp	/^StateManager::~StateManager() {$/;"	f	class:StateManager
~StreamRedirect	.\include\sol\Catch\include\internal\catch_run_context.hpp	/^        ~StreamRedirect() {$/;"	f	class:Catch::StreamRedirect
~StreamingReporterBase	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    StreamingReporterBase::~StreamingReporterBase() {}$/;"	f	class:Catch::StreamingReporterBase
~TagAliasRegistry	.\include\sol\Catch\include\internal\catch_tag_alias_registry.hpp	/^    TagAliasRegistry::~TagAliasRegistry() {}$/;"	f	class:Catch::TagAliasRegistry
~TagPattern	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestSpec::TagPattern::~TagPattern() {}$/;"	f	class:Catch::TestSpec::TagPattern
~Target	.\src\include\Target.h	/^	virtual ~Target(){}$/;"	f	class:Target
~TeamCityReporter	.\include\sol\Catch\include\reporters\catch_reporter_teamcity.hpp	/^    TeamCityReporter::~TeamCityReporter() {}$/;"	f	class:Catch::TeamCityReporter
~TestCaseStats	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestCaseStats::~TestCaseStats() {}$/;"	f	class:Catch::TestCaseStats
~TestGroupStats	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestGroupStats::~TestGroupStats() {}$/;"	f	class:Catch::TestGroupStats
~TestRegistry	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestRegistry::~TestRegistry() {}$/;"	f	class:Catch::TestRegistry
~TestRunStats	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    TestRunStats::~TestRunStats() {}$/;"	f	class:Catch::TestRunStats
~Texture	.\dep\SFML\src\SFML\Graphics\Texture.cpp	/^Texture::~Texture()$/;"	f	class:sf::Texture
~TextureSaver	.\dep\SFML\src\SFML\Graphics\TextureSaver.cpp	/^TextureSaver::~TextureSaver()$/;"	f	class:sf::priv::TextureSaver
~Thread	.\dep\SFML\src\SFML\System\Thread.cpp	/^Thread::~Thread()$/;"	f	class:sf::Thread
~ThreadImpl	.\dep\SFML\src\SFML\System\Win32\ThreadImpl.cpp	/^ThreadImpl::~ThreadImpl()$/;"	f	class:sf::priv::ThreadImpl
~ThreadLocal	.\dep\SFML\src\SFML\System\ThreadLocal.cpp	/^ThreadLocal::~ThreadLocal()$/;"	f	class:sf::ThreadLocal
~ThreadLocalImpl	.\dep\SFML\src\SFML\System\Unix\ThreadLocalImpl.cpp	/^ThreadLocalImpl::~ThreadLocalImpl()$/;"	f	class:sf::priv::ThreadLocalImpl
~ThreadLocalImpl	.\dep\SFML\src\SFML\System\Win32\ThreadLocalImpl.cpp	/^ThreadLocalImpl::~ThreadLocalImpl()$/;"	f	class:sf::priv::ThreadLocalImpl
~Tower	.\src\src\Tower.cpp	/^Tower::~Tower() {$/;"	f	class:Tower
~TrackerBase	.\include\sol\Catch\include\internal\catch_impl.hpp	/^        TrackerBase::~TrackerBase() {}$/;"	f	class:Catch::TestCaseTracking::TrackerBase
~Transformable	.\dep\SFML\src\SFML\Graphics\Transformable.cpp	/^Transformable::~Transformable()$/;"	f	class:sf::Transformable
~Unit	.\src\src\Unit.cpp	/^Unit::~Unit() {$/;"	f	class:Unit
~Vector2	.\src\include\Vector2.h	/^	~Vector2() {};$/;"	f	class:Vector2
~WglContext	.\dep\SFML\src\SFML\Window\Win32\WglContext.cpp	/^WglContext::~WglContext()$/;"	f	class:sf::priv::WglContext
~WildcardPattern	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    WildcardPattern::~WildcardPattern() {}$/;"	f	class:Catch::WildcardPattern
~Window	.\dep\SFML\src\SFML\Window\Window.cpp	/^Window::~Window()$/;"	f	class:sf::Window
~Window	.\src\src\Window.cpp	/^Window::~Window() {$/;"	f	class:Window
~WindowImpl	.\dep\SFML\src\SFML\Window\WindowImpl.cpp	/^WindowImpl::~WindowImpl()$/;"	f	class:sf::priv::WindowImpl
~WindowImplAndroid	.\dep\SFML\src\SFML\Window\Android\WindowImplAndroid.cpp	/^WindowImplAndroid::~WindowImplAndroid()$/;"	f	class:sf::priv::WindowImplAndroid
~WindowImplWin32	.\dep\SFML\src\SFML\Window\Win32\WindowImplWin32.cpp	/^WindowImplWin32::~WindowImplWin32()$/;"	f	class:sf::priv::WindowImplWin32
~WindowImplX11	.\dep\SFML\src\SFML\Window\Unix\WindowImplX11.cpp	/^WindowImplX11::~WindowImplX11()$/;"	f	class:sf::priv::WindowImplX11
~XmlReporter	.\include\sol\Catch\include\internal\catch_impl.hpp	/^    XmlReporter::~XmlReporter() {}$/;"	f	class:Catch::XmlReporter
~XmlWriter	.\include\sol\Catch\include\internal\catch_xmlwriter.hpp	/^        ~XmlWriter() {$/;"	f	class:Catch::XmlWriter
~basic_table_iterator	.\include\sol\single\sol\sol.hpp	/^		~basic_table_iterator() {$/;"	f	class:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::basic_table_iterator
~basic_table_iterator	.\include\sol\sol\table_iterator.hpp	/^		~basic_table_iterator() {$/;"	f	class:sol::basic_table_iterator
~clean	.\include\sol\single\sol\sol.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::clean
~clean	.\include\sol\sol\table_core.hpp	/^		struct clean { lua_State* L; clean(lua_State* L) : L(L) {} ~clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::detail::clean
~ext_getset	.\include\sol\test_usertypes.cpp	/^	~ext_getset() {$/;"	f	struct:ext_getset
~factory_test	.\include\sol\test_usertypes.cpp	/^	~factory_test() { a = 0; }$/;"	f	struct:factory_test	file:
~function_result	.\include\sol\single\sol\sol.hpp	/^		~function_result() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::function_result
~function_result	.\include\sol\sol\function_result.hpp	/^		~function_result() {$/;"	f	struct:sol::function_result
~giver	.\include\sol\test_usertypes.cpp	/^	~giver() {$/;"	f	struct:giver
~handler	.\include\sol\single\sol\sol.hpp	/^			~handler() {$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::handler
~handler	.\include\sol\sol\protected_function.hpp	/^			~handler() {$/;"	f	struct:sol::basic_protected_function::handler
~load_result	.\include\sol\sol\load_result.hpp	/^		~load_result() {$/;"	f	struct:sol::load_result
~optional_base	.\include\sol\Optional\optional.hpp	/^    ~optional_base() { if (init_) storage_.value_.T::~T(); }$/;"	f	struct:sol::optional_base
~protected_function_result	.\include\sol\sol\protected_function_result.hpp	/^		~protected_function_result() {$/;"	f	struct:sol::protected_function_result
~push_popper	.\include\sol\single\sol\sol.hpp	/^			~push_popper() { t.pop(); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper
~push_popper	.\include\sol\single\sol\sol.hpp	/^			~push_popper() {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper
~push_popper	.\include\sol\sol\reference.hpp	/^			~push_popper() { t.pop(); }$/;"	f	struct:sol::stack::push_popper
~push_popper	.\include\sol\sol\reference.hpp	/^			~push_popper() {}$/;"	f	struct:sol::stack::push_popper
~push_popper_n	.\include\sol\single\sol\sol.hpp	/^			~push_popper_n() { lua_pop(L, t); }$/;"	f	struct:sol::sol::call_syntax::call_status::sol::stack::push_popper_n
~push_popper_n	.\include\sol\sol\reference.hpp	/^			~push_popper_n() { lua_pop(L, t); }$/;"	f	struct:sol::stack::push_popper_n
~ref_clean	.\include\sol\single\sol\sol.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::detail::ref_clean
~ref_clean	.\include\sol\sol\table_core.hpp	/^		struct ref_clean { lua_State* L; int& n; ref_clean(lua_State* L, int& n) : L(L), n(n) {} ~ref_clean() { lua_pop(L, static_cast<int>(n)); } };$/;"	f	struct:sol::detail::ref_clean
~registrar	.\include\sol\single\sol\sol.hpp	/^			virtual ~registrar() {}$/;"	f	struct:sol::sol::call_syntax::call_status::sol::call_detail::lua_call_wrapper::sol::protected_function_result::sol::basic_protected_function::sol::sol::usertype_detail::registrar
~registrar	.\include\sol\sol\usertype_metatable.hpp	/^			virtual ~registrar() {}$/;"	f	struct:sol::usertype_detail::registrar
~stack_guard	.\include\sol\sol\stack_guard.hpp	/^		~stack_guard() {$/;"	f	struct:sol::stack_guard
~storage_t	.\include\sol\Optional\optional.hpp	/^  ~storage_t(){}$/;"	f	union:sol::storage_t
~test_stack_guard	.\include\sol\test_stack_guard.hpp	/^	~test_stack_guard() { endtop = lua_gettop(L); }$/;"	f	struct:test_stack_guard
~vars	.\include\sol\test_usertypes.cpp	/^	~vars() {$/;"	f	struct:vars
